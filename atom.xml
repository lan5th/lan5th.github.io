<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lzone</title>
  
  <subtitle>always be doing</subtitle>
  <link href="http://lan5th.github.io/atom.xml" rel="self"/>
  
  <link href="http://lan5th.github.io/"/>
  <updated>2022-07-22T13:55:29.115Z</updated>
  <id>http://lan5th.github.io/</id>
  
  <author>
    <name>lan5th</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloudAlibaba</title>
    <link href="http://lan5th.github.io/2022/07/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/SpringCloudAlibaba/"/>
    <id>http://lan5th.github.io/2022/07/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/SpringCloudAlibaba/</id>
    <published>2022-07-22T13:30:59.109Z</published>
    <updated>2022-07-22T13:55:29.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><h2 id="Nacos-作为服务注册中心"><a href="#Nacos-作为服务注册中心" class="headerlink" title="Nacos 作为服务注册中心"></a>Nacos 作为服务注册中心</h2><ul><li><p>github下载Nacos并运行，Nacos默认以集群模式启动，需要手动指定单机版</p><p><code>./startup.cmd -m standalone</code></p></li><li><p>访问<code>localhost:8848/nacos</code>访问控制台页面，默认的用户名和密码都是<code>nacos</code></p></li><li><p>需要注册的服务引入依赖（服务提供者和服务消费者）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure></li><li><p>Nacos集成了Ribben，直接使用RestTemplate进行访问url即可具有负载均衡功能</p><p>nacos控制台展示所有注册的服务即表示成功</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220721162536.png" alt="61H_X2`1OJHNPN`M_LTVNHY.png"></p></li></ul><p>Nacos作为服务注册的中心可以满足AP和CP模型，可以进行切换，只需要发送特定的post请求进行修改</p><p><code>ip:port/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP</code></p><h2 id="Nacos-作为服务配置中心"><a href="#Nacos-作为服务配置中心" class="headerlink" title="Nacos 作为服务配置中心"></a>Nacos 作为服务配置中心</h2><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><ul><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span> <span class="comment">#指定yaml格式的配置</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEV_GROUP</span> <span class="comment">#组名称，默认为DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">7a901d46-e75e-4e6a-b186-5980cca4249b</span> <span class="comment">#命名空间namespace，默认会走public组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置中心对应配置文件的dataId格式：</span></span><br><span class="line"><span class="comment"># $&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line"><span class="comment"># 这里对应的dataId为：nacos-config-client-dev.yml</span></span><br></pre></td></tr></table></figure></li><li><p>在Nacos配置中心添加配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220721171806.png" alt="J~%5S3AH)$A}W6Z0L$YF0JB.png"></p></li><li><p>点击发布后，nacos会自动通知每个注册配置中心的微服务更新配置，不需要再手动发送请求更新</p><p>需要更新代码中的属性则需要标注<code>@RefreshScope</code>在对应类上</p></li></ul><h3 id="分类配置"><a href="#分类配置" class="headerlink" title="分类配置"></a>分类配置</h3><p>情景：分布式系统的多环境、多项目配置管理</p><p>Nacos使用的是三层定位配置文件的规则，以便更方便的管理不同环境和不同项目</p><p><strong>Nacos配置文件的定位顺序</strong></p><ol><li><p>NameSpace：新建namespace如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220721175345.png" alt="N@MBJ9B{G9E$%LXN~~D7UPB.png"></p><p>如果不指定id的话会自动生成id，如<code>acdd62bc-3159-452e-aab1-24c4657e8fde</code></p></li><li><p>GroupId</p></li><li><p>DataId</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEV_GROUP</span> <span class="comment">#组名称，默认为DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">7a901d46-e75e-4e6a-b186-5980cca4249b</span> <span class="comment">#命名空间namespace的id，默认会走public组</span></span><br></pre></td></tr></table></figure><h1 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h1><h2 id="Sentinel流量控制"><a href="#Sentinel流量控制" class="headerlink" title="Sentinel流量控制"></a>Sentinel流量控制</h2><p>github下载sentinel的jar包，直接以springboot方式运行即可，默认的前端监控页面端口为8080</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220722140056.png"></p><ul><li><p>阈值类型：</p><ul><li><p>按QPS：限制每秒请求数</p></li><li><p>按线程数：限制正在执行的线程数</p></li></ul></li><li><p>流控模式：</p><ul><li><p>直接：API达到限流条件时，直接限流</p></li><li><p>关联：当关联的资源达到阈值时，就限流自己</p></li><li><p>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）(API级别的针对来源)</p></li></ul></li><li><p>流控效果：</p><ul><li><p>快速失败：直接失败，抛异常</p></li><li><p>warmUp：根据coldFactor（冷加载因子，默认3）的值，从阈值/codeFacotor，经过预热时长，才达到设置的QPS阈值</p></li><li><p>排队等待：匀速排队，让请求以匀速的速度通过，阈值类型必须设置为QPS，否则无效</p></li></ul></li></ul><p>Sentinel默认的拦截消息都是<code>Blocked by Sentinel (flow limiting)</code></p><h2 id="Sentinel熔断降级"><a href="#Sentinel熔断降级" class="headerlink" title="Sentinel熔断降级"></a>Sentinel熔断降级</h2><ul><li><p>降级策略：</p><ul><li><p>RT：平均响应时间，以ms为单位，当单位统计时长内请求书目大于设置的最小请求数(默认5个/s)并且RT大于所设阈值就会熔断</p></li><li><p>RT在高版本为慢调用比例，在RT的基础上根据设置的慢调用阈值计算出慢调用的比例，根据比例设置的阈值计算熔断</p></li><li><p>异常比例：异常的比例大于阈值会自动进行熔断，同时应该满足最小请求数的限制</p></li><li><p>异常数：当单位统计时长(默认1min)内的异常数目超过阈值之后</p></li></ul></li><li><p>热点key</p><p>仅支持QPS模式，根据指定的参数索引（对应的是参数在方法名上指定的位置）来进行拦截</p><ul><li>参数例外项：可以对这个参数的某一个参数值单独进行限流配置，比如一些热点话题已经预热完毕时可以将限流阈值设置高一些</li></ul></li><li><p>系统规则</p><p>系统规则相当于整个系统外部的把关门禁，当拦截生效时整个服务都将不能正确响应</p></li></ul><p><strong><code>@SentinelResource</code>注解的使用</strong></p><p>@SentinelResource不支持private方法</p><p>这里类似于Hystrix中的<code>HystrixCommand</code>注解，可以指定对应的限流处理方法注意与FallBack区分，指定的对应方法只能处理限流的响应，业务代码抛出的RuntimeException则不能处理</p><ul><li><p>blockHandler参数指定处理对应的限流、熔断等配置的响应的方法（只处理BlockException）</p></li><li><p>FallBack参数指定处理业务类异常的方法（RuntimeException）</p></li></ul><blockquote><p>注意：要使@SentinelResource注解生效，在Sentinel控制台指定限流策略时资源名必须设置成@SentinelResource设定的value值，设置资源名为url路径则只会响应默认的<code>Blocked by Sentinel (flow limiting)</code></p></blockquote><ul><li><p>单独业务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testHotKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;testHotKey&quot;, blockHandler = &quot;deal_testHotKet&quot;)</span> <span class="comment">//指定对应的限流处理方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(<span class="meta">@RequestParam(value = &quot;p1&quot;,required = false)</span> String p1,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestParam(value = &quot;p2&quot;,required = false)</span> String p2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testHotKey-------&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里处理限流方法的参数必须在原方法的基础上添加一个BlockException参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deal_testHotKet</span><span class="params">(String p1, String p2, BlockException e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;----限流响应----&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分离业务类处理</p><p>限流处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不需要注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customerhandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//限流处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handlerException</span><span class="params">(BlockException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;处理限流策略，global handlerException&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial003&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//业务类异常处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handleFallback</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;处理业务异常，global handleFallback&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial003&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testA&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;testA&quot;,</span></span><br><span class="line"><span class="meta">        blockHandlerClass = Customerhandler.class, //指定限流处理类</span></span><br><span class="line"><span class="meta">        blockHandler = &quot;handlerException&quot;， //指定限流处理方法名</span></span><br><span class="line"><span class="meta">        fallback = &quot;handleFallback&quot;)</span> <span class="comment">//指定业务异常处理方法名</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;testA-------&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Sentinel持久化</strong></p><ul><li><p>默认情况下，当注册到Sentinel的服务关闭/重启后sentinel的持久化规则会自动清除</p></li><li><p>可以使用Nacos等配置中心方式来持久化配置，但是笔者感觉这种方式还是不太合理，需要自己手动编写json来保存到nacos，通过sentinel的控制页面设定的配置还是不能保存，等待后续版本优化吧。。。</p></li></ul><h1 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h1><p><img src="https://cdn.nlark.com/lark/0/2018/png/18862/1545296917881-26fabeb9-71fa-4f3e-8a7a-fc317d3389f4.png"></p><ul><li><p>TC (Transaction Coordinator) - 事务协调者，一般是seata服务器</p><p>维护全局和分支事务的状态，驱动全局事务提交或回滚。</p></li><li><p>TM (Transaction Manager) - 事务管理器，一般是上游标注<code>@GlobalTransactional</code>的服务</p><p>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p></li><li><p>RM (Resource Manager) - 资源管理器，所有管理具体sql的事务机制</p><p>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p></li></ul><h2 id="Seata安装部署"><a href="#Seata安装部署" class="headerlink" title="Seata安装部署"></a>Seata安装部署</h2><h3 id="SeataServer"><a href="#SeataServer" class="headerlink" title="SeataServer"></a>SeataServer</h3><ul><li><p>修改配置文件file.conf，将存储方式改为db</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220722193103.png"></p></li><li><p>建库建表，建表sql在对应的readme文件里面有提示，执行即可</p></li><li><p>修改registry.conf，配置nacos为注册中心</p><p>![VJLU0<code>A</code>4SJA5VT2O3XC<a href="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220722193241.png">$N.png</a></p></li><li><p>每一个需要用到分布式事务的客户端数据库都需要单独建表（尽量从官网上取最新的sql）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`undo_log`</span></span><br><span class="line">(</span><br><span class="line">    <span class="string">`branch_id`</span>     <span class="built_in">BIGINT</span>       <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;branch transaction id&#x27;</span>,</span><br><span class="line">    <span class="string">`xid`</span>           <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;global transaction id&#x27;</span>,</span><br><span class="line">    <span class="string">`context`</span>       <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;undo_log context,such as serialization&#x27;</span>,</span><br><span class="line">    <span class="string">`rollback_info`</span> LONGBLOB     <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;rollback info&#x27;</span>,</span><br><span class="line">    <span class="string">`log_status`</span>    <span class="built_in">INT</span>(<span class="number">11</span>)      <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;0:normal status,1:defense status&#x27;</span>,</span><br><span class="line">    <span class="string">`log_created`</span>   DATETIME(<span class="number">6</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;create datetime&#x27;</span>,</span><br><span class="line">    <span class="string">`log_modified`</span>  DATETIME(<span class="number">6</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;modify datetime&#x27;</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`ux_undo_log`</span> (<span class="string">`xid`</span>, <span class="string">`branch_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></span><br><span class="line">  AUTO_INCREMENT = <span class="number">1</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8 <span class="keyword">COMMENT</span> =<span class="string">&#x27;AT transaction mode undo table&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="SeataClient"><a href="#SeataClient" class="headerlink" title="SeataClient"></a>SeataClient</h3><ul><li><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;io.seata&lt;/groupId&gt;    &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;1.4.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;&lt;/dependency&gt;endency&gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 推荐使用Nacos配置SeataClient，具体配置方式请依照官方文档[Seata 快速开始](https:&#x2F;&#x2F;seata.io&#x2F;zh-cn&#x2F;docs&#x2F;user&#x2F;quickstart.html)</span><br><span class="line"></span><br><span class="line">+ 需要开启分布式事务的方法（一般是上游调用下游服务的业务方法）添加注解即可生效</span><br><span class="line">  </span><br><span class="line">  &#96;&#96;&#96;java</span><br><span class="line">  @GlobalTransactional(name &#x3D; &quot;transactionNameA&quot;, rollbackFor &#x3D; Exception.class)</span><br></pre></td></tr></table></figure></code></pre></li></ul><h2 id="回滚原理"><a href="#回滚原理" class="headerlink" title="回滚原理"></a>回滚原理</h2><p><strong>一二阶段提交事务</strong></p><ol><li><p>一阶段：TM标志<code>@GlobalTransactional</code>开启分布式事务，各个RM执行sql逻辑，并向TC提交执行结果</p><p>![9`8%F0C{XWQ(<del>9(O</del>CPLG6.png](<a href="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220722212759.png">https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220722212759.png</a>)</p><p><strong>RM事务执行逻辑</strong></p><ul><li><p>执行之前，生成beforeImage，作为修改前数据的快照</p></li><li><p>执行sql逻辑</p></li><li><p>执行之后，生成afterImage，作为修改后数据的快照</p></li><li><p>生成行锁</p></li></ul></li><li><p>二阶段：TC根据汇总到的RM执行结果执行提交逻辑</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220722212456.png" alt="7}OJ}S~$ADXE~AF4@E{)3V.png"></p><ul><li><p>全部执行成功：通知所有RM删除beforeImage和afterImage，提交事务</p></li><li><p>有事务执行失败：通知所有RM执行补偿还原机制，根据beforeImage和AfterImage来还原数据</p><ul><li><p>如果afterImage和当前数据没有差异，则直接还原</p></li><li><p>如果修改和还原之间数据已经由其他sql进行了改变，则无法正常还原，等待运维人员操作。</p></li></ul></li><li><p>不论是否执行成功，最终都会删除afterImage、beforeImage和行锁</p></li></ul></li></ol>]]></content>
    
    
    <summary type="html">分布式-SpringCloudAlibaba</summary>
    
    
    
    <category term="微服务" scheme="http://lan5th.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud</title>
    <link href="http://lan5th.github.io/2022/07/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1/SpringCloud/"/>
    <id>http://lan5th.github.io/2022/07/11/%E5%BE%AE%E6%9C%8D%E5%8A%A1/SpringCloud/</id>
    <published>2022-07-11T07:24:02.807Z</published>
    <updated>2022-07-22T13:51:35.444Z</updated>
    
    <content type="html"><![CDATA[<p>分布式微服务架构——一整套微服务组件架构的解决方案</p><p>SpringCloud——一系列微服务技术的组合和解决方案</p><h1 id="SpringCloud升级后主要的组件选择方案"><a href="#SpringCloud升级后主要的组件选择方案" class="headerlink" title="SpringCloud升级后主要的组件选择方案"></a>SpringCloud升级后主要的组件选择方案</h1><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220713141921.png" alt="image-20220713141921246"></p><h1 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h1><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><p>服务注册中心，应用架构图</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220714155550.png" alt="image-20220714155543557"></p><h3 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h3><p>即注册中心</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//表明是eureka server</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-eureka-server7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>  <span class="comment">#不注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不检索自己</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># defaultZone: http://eureka7002.com:7002/eureka/ 集群模式，这里注册其他eureka-server</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span> <span class="comment"># 单机模式，这里注册自己</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment">#关闭自我保护机制，保证不可用服务立即被踢出</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><p>多台eureka server之间需要相互注册，启动之后可以用ip+端口来访问对应注册中心结点的控制中心</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220714233953.png" alt="image-20220714233953583"></p><h3 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//表明是EurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//不只是Eureka，其他的注册中心服务发现也能使用@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/payment&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//业务层逻辑</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务注册发现的封装对象</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过主键查询单条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 单条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">selectOne</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">this</span>.paymentService.queryById(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;Payment&gt;(<span class="number">200</span>,<span class="string">&quot;select success,port:&quot;</span> + serverPort,payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span> </span>&#123;</span><br><span class="line">        Payment insert = <span class="keyword">this</span>.paymentService.insert(payment);</span><br><span class="line">        log.info(<span class="string">&quot;插入数据:&quot;</span> + payment);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;insert success&quot;</span> ,insert);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务注册发现，</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/discovery&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取注册中心注册的所有服务列表</span></span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        services.forEach(service-&gt;&#123;</span><br><span class="line">            log.info(<span class="string">&quot;----service&quot;</span>+service);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//获取某一个服务名所对应的实例结点信息</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">            log.info(instance.getServiceId()+<span class="string">&quot;\t&quot;</span> + instance.getHost()+<span class="string">&quot;\t&quot;</span>+ instance.getPort()+<span class="string">&quot;\t&quot;</span>+instance.getUri());;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="comment"># 添加自己需要的业务配置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/ eureka-server集群模式，需要配置每一个注册中心</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span> <span class="comment"># 单机模式</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span> <span class="comment">#展示的业务id</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#在管理页面展示ip</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="调用方"><a href="#调用方" class="headerlink" title="调用方"></a>调用方</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--调用方仍然属于eureka-server的客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//@LoadBalanced表示开启轮询方式的负载均衡</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里允许使用 http://服务名的方式指定url，之后会由注册中心解析指定具体的服务实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br><span class="line">    <span class="comment">//RestTemplate实例允许以http请求的方式调用其他服务</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">create</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL+<span class="string">&quot;/payment/create&quot;</span>,payment,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-comsumer-order</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line"><span class="comment">#      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">order80</span> <span class="comment">#展示的业务id</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#在管理页面展示ip</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="Eureka自我保护机制"><a href="#Eureka自我保护机制" class="headerlink" title="Eureka自我保护机制"></a>Eureka自我保护机制</h3><p>Eureka服务端会检查最近15分钟内所有Eureka 实例正常心跳占比，如果低于85%就会触发自我保护机制。触发了保护机制，Eureka将暂时把这些失效的服务保护起来，不让其过期，但这些服务也并不是永远不会过期。Eureka在启动完成后，每隔60秒会检查一次服务健康状态，如果这些被保护起来失效的服务过一段时间后（默认90秒）还是没有恢复，就会把这些服务剔除。如果在此期间服务恢复了并且实例心跳占比高于85%时，就会自动关闭自我保护机制。</p><p><strong>配置调整</strong></p><ul><li><p>eureka server</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment">#关闭自我保护机制，保证不可用服务立即被踢出</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#自我保护机制下的检查时间间隔,2000表示2秒,默认90s</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure></li><li><p>eureka client</p><p>这里的两项配置需要和eureka server的配置相对应，否则可能会自动失效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">      <span class="comment">#服务续约时间，单位s，默认30s</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment">#服务失效时间，单位s,默认90s</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h2><h3 id="安装Zookeeper"><a href="#安装Zookeeper" class="headerlink" title="安装Zookeeper"></a>安装Zookeeper</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dlcdn.apache.org/zookeeper/zookeeper-3.7.1/apache-zookeeper-3.7.1-bin.tar.gz</span><br><span class="line">tar -zxvf apache-zookeeper-3.7.1-bin.tar.gz</span><br></pre></td></tr></table></figure><p>到解压后目录下的bin目录中复制配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg <span class="comment">#复制之后zookeeper默认会以zoo.cfg为配置文件进行启动</span></span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start <span class="comment">#启动zookeeper</span></span><br><span class="line">zkServer.sh status <span class="comment">#查看zookeeper状态</span></span><br><span class="line">zkCli.sh -server localhost:2181 <span class="comment">#启动zookeeper控制台</span></span><br><span class="line">zkServer.sh stop <span class="comment">#关闭zookeeper</span></span><br></pre></td></tr></table></figure><h3 id="Zookeeper使用者"><a href="#Zookeeper使用者" class="headerlink" title="Zookeeper使用者"></a>Zookeeper使用者</h3><p>调用者和服务提供者都需要引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意maven版本和zookeeper服务器版本对应问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-comsumer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">XX.XX.XX.XX:2181</span> <span class="comment">#这里配置zookeeper的注册中心</span></span><br></pre></td></tr></table></figure><p>使用方法与Eureka类似，使用RestTemplate进行Http请求调用</p><h2 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h2><p>默认使用端口8500</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">consul --version <span class="comment">#检查consul版本</span></span><br><span class="line">consul agent -dev <span class="comment">#启动consul服务注册中心</span></span><br></pre></td></tr></table></figure><p>启动consul之后可以打开对应的<code>http://ip:8500/</code>访问网页控制面板</p><h3 id="Consul使用者"><a href="#Consul使用者" class="headerlink" title="Consul使用者"></a>Consul使用者</h3><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220715221328.png" alt="image-20220715221321344"></p><h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220715221550.png" alt="image-20220715221550847"></p><ul><li>Consistency：强一致性</li><li>Availability：可用性</li><li>Partition Tolerance：分区容错性</li></ul><p><strong>由于分布式架构都要保证分区容错性，因次只能再CA之中二选一</strong></p><p>Eureka AP的体现：Eureka自我保护机制，当服务结点发送心跳请求中断时暂时不删除结点，宁可容忍节点状态的错误可能也要保证可用性</p><p>Zookeeper和Consul：结点掉线立刻删除，不保证可用性，而保证节点状态的正确性</p><h2 id="小坑"><a href="#小坑" class="headerlink" title="小坑"></a>小坑</h2><p>使用Zookeeper和Consul时，如果使用RestTemplate作为调用方式，在注入RestTemplate时必须添加<code>@LoadBalanced</code>注解，否则URL无法被正确解析</p><h1 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h1><h2 id="Ribben-RestTemplate"><a href="#Ribben-RestTemplate" class="headerlink" title="Ribben + RestTemplate"></a>Ribben + RestTemplate</h2><p>Ribben作为本地的负载均衡组件工作方式：</p><p>消费者端向注册中心获取到所有可用的服务端，根据本地自身设定的负载均衡策略选择某一个服务端进行调用</p><blockquote><p> <strong>与Nginx的区别</strong></p><p>nginx是服务端的负载均衡，而ribben是客户端的负载均衡；nginx获取到请求自行选择服务端进行处理(反向代理)，ribben则是客户端自行进行选择</p></blockquote><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然而使用eureka时，eureka的依赖已经自动帮我们引入了ribbon依赖，不需要再次手动去引入</p><h3 id="Ribben负载均衡策略"><a href="#Ribben负载均衡策略" class="headerlink" title="Ribben负载均衡策略"></a>Ribben负载均衡策略</h3><ul><li><p>RoundRobinRule轮询（默认）</p></li><li><p>RandomRule随机</p></li><li><p>RetryRule轮询重试（轮询获取服务失败则重试）</p></li><li><p>WeightedResponseTimeRule响应速度决定权重</p></li><li><p>BestAvailableRule最优可用（并发数最小）</p></li><li><p>AvailabilityFilteringRule可用性过滤规则（先过滤不可用的server实例，再选择并发数最小的实例）</p></li><li><p>ZoneAvoidanceRule区域内可用性能最优（基于AvailabilityFilteringRule，过滤server实例的同时需要判断server所在区域的性能）</p></li></ul><h3 id="更改负载均衡配置"><a href="#更改负载均衡配置" class="headerlink" title="更改负载均衡配置"></a>更改负载均衡配置</h3><p>自定义配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意，如果只想让某一个springboot应用使用该规则，不能放在主启动类的目录和子目录下(@ComponentScan注解所扫描的范围)</span></span><br><span class="line"><span class="comment">//而需要在主启动类手动指定规则</span></span><br><span class="line"><span class="keyword">package</span> com.lan5th.myRule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.RandomRule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyselfRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主启动类上添加注解，指定自定义规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;,configuration = MyselfRule.class)</span></span><br></pre></td></tr></table></figure><p>使用依旧是Ribben配置 + RestTemplate发送Http请求</p><h2 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h2><p>不同于之前的RestTemplate调用接口，Feign使用方式有点类似于Dubbo，通过接口调用来实现微服务之间的交互（服务接口绑定器）</p><p>OpenFeign的依赖中也包含了Ribben，因此也自然具备负载均衡功能，同样是客户端进行使用</p><ul><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类添加注解<code>@EnableFeignClients</code></p></li><li><p>服务调用这编写Service调用接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span> <span class="comment">//指定对应的服务名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">CommonResult&lt;Payment&gt; <span class="title">selectOne</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;payment/feign/timeout&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">getFeignTimeOut</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Feign会通过<code>@FeignClient</code>和<code>@Requestmapping</code>注解去注册中心获取到具体的服务提供者并进行调用</p></li><li><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://www.eureka7002.com:7002/eureka/,http://www.eureka7001.com:7001/eureka/</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="comment"># 超时等待时间</span></span><br><span class="line">        <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="comment"># 连接等待时间</span></span><br><span class="line">        <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="comment"># 启用日志</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="服务降级熔断"><a href="#服务降级熔断" class="headerlink" title="服务降级熔断"></a>服务降级熔断</h1><h2 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h2><p>Hystrix是一个用于处理分布式系统延迟和容错的开源库，在分布式系统的调用依赖中，Hystrix保证在一个依赖出现问题的情况下不会导致整体服务的失败，避免<strong>级联故障</strong>，提高分布式系统的弹性</p><p>当某个服务单元发生故障后，通过断路器的故障监控，向调用方返回符合预期的、可处理的<strong>备选响应</strong>(FallBack)，而不是长时间的等待或抛出调用方无法处理的异常，保证服务调用方的线程不被长时间不必要的占用，避免故障在分布式系统中的蔓延乃至雪崩</p><p><strong>主要功能</strong></p><ul><li><p>服务降级：保证重要或整体服务的正常运行，将非重要服务延迟或暂停使用(FallBack)</p></li><li><p>服务熔断：通过断路器做代理进行访问，断路器会持续观察服务返回的成功、失败的状态，当失败超过设置的阈值时断路器打开，请求就不能真正地访问到服务了</p></li><li><p>服务限流</p></li><li><p>接近实时的监控</p></li></ul><p><strong>启用Hystrix</strong></p><ul><li><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;&lt;/dependency&gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ 客户端和服务端都可以启用Hystrix，主启动类添加注解@EnableHystrix</span><br><span class="line"></span><br><span class="line">+ 如果使用的是Feign + Hystrix的组合，需要添加配置</span><br><span class="line">  </span><br><span class="line">  &#96;&#96;&#96;yaml</span><br><span class="line">  feign:</span><br><span class="line">    hystrix:</span><br><span class="line">      enabled: true  #在feign中开启hystrix</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>使用方法:</p><ul><li><p>单方法指定降级@HystrixCommand</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_ERROR_Handler&quot;, //指定fallBack方法名</span></span><br><span class="line"><span class="meta">        commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;1500&quot;) //超时配置</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_ERROR</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    <span class="comment">//业务逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fallBack方法，注意入参出参必须与上面调用的原方法完全一致</span></span><br><span class="line"><span class="comment">//这里运行时会使用Hystrix专用的线程，而不是原方法的Tomcat线程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_ERROR_Handler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;80____paymentInfo_ERROR_Handler___异常返回&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类方法统一指定@DefaultProperties</p><p>需要使用服务降级的方法添加@HystrixCommand，否则对应方法不会启用降级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="comment">//在类名上使用注解统一指定</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;paymentInfo_ERROR_Handler&quot; ,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;1500&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用OpenFeign实现的接口</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;info/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        String res = paymentHystrixService.paymentInfo_OK(id);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;info/error/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_ERROR</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentHystrixService.paymentInfo_ERROR(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/wait&quot;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">waitForBack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentHystrixService.justWait();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里是因为方法入参不同写了两个fallBack方法，入参相同则可以共用fallBack</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_ERROR_Handler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;80____paymentInfo_ERROR_Handler___异常返回&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_ERROR_Handler</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;80____paymentInfo_ERROR_Handler___异常返回&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>面向接口方法的降级措施</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//指定对应的fallBack实现类</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PROVIDER-PAYMENT&quot;,fallback = PaymentFallbackHystrixService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;payment/info/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;payment/info/error/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">paymentInfo_ERROR</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;payment/wait&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">justWait</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//实现对应的接口，根据方法名对应处理fallBack</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackHystrixService</span> <span class="keyword">implements</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-------PaymentFallbackService fall back-paymentInfo_OK,o(╥﹏╥)o&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_ERROR</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-------PaymentFallbackService fall back-paymentInfo_TimeOut,o(╥﹏╥)o&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">justWait</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><blockquote><p>请求降级 -&gt; 请求熔断 -&gt; 超时重试</p></blockquote><p>这里的closed和open类似于电路中的开关闭合，closed表示断路器闭合，正常使用；open表示断路器断开，不能正常响应请求</p><p>![TR$BO9@M$N`%D7O}8BI@J(K.png](<a href="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220719165938.png">https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220719165938.png</a>)</p><p>在<code>sleepWindowInMilliseconds</code>的时间之内，超过<code>requestVolumeThreshold</code>个请求进行了调用，失败率超过<code>errorThresholdPercentage</code>%，则断路器会从closed变成open，一段时间后（默认5s），断路器从open变为halfOpen状态，对于大部分新请求直接进行fallback响应，对于某个请求进行访问尝试，如果请求仍然响应失败，则继续变为open状态，并重试上一步</p><p><strong>断路器是在服务端进行配置的</strong></p><ul><li><p>单独方法上@HystrixCommand</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(</span></span><br><span class="line"><span class="meta">        fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;), //是否开启断路器</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;), //请求次数</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;), //时间窗口期</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;),//失败率达到多少后跳闸</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p>统一配置@DefaultProperties + @HystrixCommand</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;paymentCircuitBreaker_fallback&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;), //是否开启断路器</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;), //请求次数</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;), //时间窗口期</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;),//失败率达到多少后跳闸</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Hystrix仪表盘"><a href="#Hystrix仪表盘" class="headerlink" title="Hystrix仪表盘"></a>Hystrix仪表盘</h3><ul><li><p>新建模块，依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">proxy-stream-allow-list:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类添加注解<code>@EnableHystrixDashboard</code></p></li><li><p><strong>被监控的服务端需要注入ServletRegistrationBean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑</span></span><br><span class="line"><span class="comment"> * ServletRegistrationBean因为springboot的默认路径不是/hystrix.stream</span></span><br><span class="line"><span class="comment"> * 只要在自己的项目里配置下面的Servlet就可以了</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">    ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">    registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">    registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问监控url：<code>http://ip:port/hystrix</code></p><p>![$9GL)MSDVA)6TH`]_O6P4NA.png](<a href="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220719183348.png">https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220719183348.png</a>)</p><p>输入被监控的url：<code>http://localhost:8001/hystrix.stream</code></p></li><li><p>进入监控页面如果显示loading，需要客户端发送调用请求开始监控</p></li></ul><h1 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h1><h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><p>核心逻辑：路由转发+过滤处理</p><ul><li><p>Route（路由）</p></li><li><p>Predicate（断言）</p></li><li><p>Filter（过滤）</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#开启从注册中心动态生成路由的功能，用微服务名进行路由</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud_gateway_service</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="路由-断言"><a href="#路由-断言" class="headerlink" title="路由+断言"></a>路由+断言</h3><ul><li><p>配置文件方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span> <span class="comment">#lb:开头会使用负载均衡模式</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment">#断言，满足条件才会进入路由</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span> <span class="comment">#可以配置多个路由</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span></span><br></pre></td></tr></table></figure></li><li><p>配置类方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">        RouteLocatorBuilder.Builder routes = builder.routes();</span><br><span class="line">        routes.route(<span class="string">&quot;path_route&quot;</span>,</span><br><span class="line">                r-&gt;r.path(<span class="string">&quot;/guonei&quot;</span>) <span class="comment">//断言</span></span><br><span class="line">                .uri(<span class="string">&quot;https://www.baidu.com&quot;</span>)); <span class="comment">//路由</span></span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>一般用于添加全局日志等，权限鉴定等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGateWayFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;**************come in MylogGateWayGilter:  &quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (uname == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;********用户名为空，非法用户。&quot;</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="comment">//直接返回，不进行路由</span></span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//放行filterChain</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置在filterChain中的执行顺序，越小越先执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h1><h2 id="SpringCloud-Config"><a href="#SpringCloud-Config" class="headerlink" title="SpringCloud Config"></a>SpringCloud Config</h2><p>结构：github配置仓库 + 配置服务端 + 配置客户端</p><h3 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h3><ul><li><p>新建github仓库，添加配置文件</p></li><li><p>配置服务端</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-config-center</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="comment"># Jgit低版本读取rsa秘钥有bug，只能用http方式</span></span><br><span class="line">          <span class="comment"># uri: git@gitee.com:lan5th/springcloud-config.git</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/lan5th/springcloud-config.git</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">          <span class="attr">force-pull:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">XXX</span> <span class="comment">#认证信息</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">XXX</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>主启动类只需要添加@SpringBootApplication和@EnableConfigServer注解，作为springboot应用启动即可</p><p>启动完成后可以访问url访问获取到的各个配置文件内容<code>http://config-3344.com:3344/master/config-dev.yml</code></p><p>当github仓库中的配置文件被修改之后，配置服务端将自动拉取最新的配置文件，访问url得到的内容也随之更新</p></li><li><p>配置客户端</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>cy&gt;</span><br></pre></td></tr></table></figure><p>bootstrap.yml，springApplication优先加载bootstrap，然后加载application，并和从配置服务端获取到的配置信息合并称为最终的配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span>  <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span>  <span class="comment">#读取后缀名称   上述三个综合http://localhost:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://config-3344.com:3344</span>  <span class="comment">#配置中心的地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露actuator接口，用于刷新配置</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>需要用到的Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">//刷新作用域</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getConfigInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="半自动刷新"><a href="#半自动刷新" class="headerlink" title="半自动刷新"></a>半自动刷新</h3><p>配置服务客户端必须引入spring-boot-starter-actuator依赖，并在yaml中开启actuator接口</p><p>在更新github仓库中的配置文件后，配置服务端会自动拉取最新的配置文件，而<strong>配置客户端</strong>需要接收一个刷新的<strong>post</strong>请求才能刷新配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip:port/actuator/refresh</span><br></pre></td></tr></table></figure><h2 id="小坑-1"><a href="#小坑-1" class="headerlink" title="小坑"></a>小坑</h2><ul><li><p>git仓库必须是public，private仓库会无法访问</p></li><li><p>低版本Jgit有bug，不能正确读取到生成的rsa文件，导致ssh方式报错Auth fail，只能使用Http方式进行配置</p></li><li><p>先确认本地terminal能否正常clone远程仓库，正确无误之后再启动配置中心</p></li></ul><h1 id="消息总线"><a href="#消息总线" class="headerlink" title="消息总线"></a>消息总线</h1><h2 id="SpringCloud-Bus"><a href="#SpringCloud-Bus" class="headerlink" title="SpringCloud Bus"></a>SpringCloud Bus</h2><p>一般与SpringCloud Config共同使用，用于实现配置的自动更新</p><p>需要与MQ搭配使用，这里以RabbitMQ为例</p><p><strong>配置步骤</strong></p><ul><li><p>所有需要用到总线的微服务添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>cy&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置服务端</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-config-center</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/lan5th/springcloud-config.git</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">          <span class="attr">force-pull:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">lan5th</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">Zyh20010605</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">XX.XX.XX.XX</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rabbitmq相关配置，暴露bus刷新配置的端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span>  <span class="comment">#暴露bus刷新配置的端点</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;bus-refresh&#x27;</span></span><br></pre></td></tr></table></figure><p>配置客户端</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span>  <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span>  <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span>  <span class="comment">#读取后缀名称   上述三个综合http://localhost:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://config-3344.com:3344</span>  <span class="comment">#配置中心的地址</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">XX.XX.XX.XX</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>配置RabbitMQ，这里注册的user和password就是上面所需填写的user</p><p>启动配置服务端，在RabbitMQ的管理界面看到springCloudBus即表示配置服务端连接成功</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220720214145.png" alt="0V8JR5SJ6GQ{`H@Z7YLBV`1.png"></p></li></ul><blockquote><p>配置完成后，每当在gitee/github上更新配置文件后，配置服务端自动加载新配置文件，我们只需要手动向<strong>配置服务端</strong>发送<strong>POST</strong>请求，即可通过消息总线让所有的监听总线的微服务自动获取新的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:3344/actuator/bus-refresh <span class="comment">#高版本为busrefresh</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="SpringCloud-Stream"><a href="#SpringCloud-Stream" class="headerlink" title="SpringCloud Stream"></a>SpringCloud Stream</h2><p>为了适配底层不同MQ之间的差异，降低切换开发成本，统一的消息编程模型</p><p>暂时仅支持以下两种MQ：</p><ul><li><p>ActiveMQ</p></li><li><p>RabbitMQ</p></li></ul><p>通过Binder对象实现与底层消息中间件的交互，我们只需要操作Binder对象即可</p><p>这里不加以详细介绍</p><h1 id="链路监控"><a href="#链路监控" class="headerlink" title="链路监控"></a>链路监控</h1><h2 id="Sleuth-zipkin"><a href="#Sleuth-zipkin" class="headerlink" title="Sleuth + zipkin"></a>Sleuth + zipkin</h2><p><strong>原理</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220721150154.png" alt="L~Y`I)C05@Z[(Z{RS`AS3$7.png"></p><p>各个微服务span通过parentId在链路中依次关联</p><ul><li><p>TraceId：一次调用链路的唯一id</p></li><li><p>SpanId：各个微服务抽象成span，获得在链路中的微服务唯一id</p></li><li><p>ParentId：上一级调用的SpanId</p></li></ul><p><strong>使用</strong></p><ul><li><p>下载并启动zipkin<code>https://repo1.maven.org/maven2/io/zipkin/zipkin-server/</code></p><p>直接使用<code>java -jar</code>启动即可，之后可以在9411端口看到管理界面</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220721150709.png"></p></li><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--包含了sleuth + zipkin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><pre><code class="yaml">spring:  zipkin:    # 注册到的zipkin监控服务器    base-url: http://localhost:9411  sleuth:    sampler:      # 取样率在0~1之间，1表示全部取样      probability: 1</code></pre></li></ul><p>配置好之后全部启动即可在zipkin的监控页面根据不同条件查找到对应的请求记录</p>]]></content>
    
    
    <summary type="html">分布式-SpringCloud</summary>
    
    
    
    <category term="JavaEE" scheme="http://lan5th.github.io/categories/JavaEE/"/>
    
    
  </entry>
  
  <entry>
    <title>项目搭建相关问题</title>
    <link href="http://lan5th.github.io/2022/07/09/%E6%9D%82%E9%A1%B9/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>http://lan5th.github.io/2022/07/09/%E6%9D%82%E9%A1%B9/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</id>
    <published>2022-07-09T13:07:45.043Z</published>
    <updated>2022-07-22T13:43:19.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h1><ul><li><p>-需要直接的路径文件下载(静态资源访问等)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>   <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 首页设置</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;html/index&quot;</span>);</span><br><span class="line">                registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;html/index&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 静态资源虚拟地址映射</span></span><br><span class="line"><span class="comment">             * 文件上传读取相关</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//获取jar包物理路径</span></span><br><span class="line">                ApplicationHome ah = <span class="keyword">new</span> ApplicationHome(getClass());</span><br><span class="line">                File jarFile = ah.getSource();</span><br><span class="line">                String filePath = jarFile.getParentFile().getPath() + <span class="string">&quot;/upload&quot;</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;初始化文件上传路径:&quot;</span> + filePath);</span><br><span class="line">                <span class="comment">//添加静态文件资源与实际文件路径之间的映射(app_file换成自定义路径)</span></span><br><span class="line">                registry.addResourceHandler(<span class="string">&quot;/app_file/**&quot;</span>)</span><br><span class="line">                        .addResourceLocations(<span class="string">&quot;file:&quot;</span> + filePath + <span class="string">&quot;/&quot;</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后我们就可以通过<code>ip:端口/app_file/文件路径</code>来访问对应的文件资源了</p></li><li><p>服务器直接读取文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileService</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String FILE_PATH;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里不能直接在static代码中编写方法，因为getClass()方法会报空指针</span></span><br><span class="line">    <span class="comment">//实现InitializingBean的afterPropertiesSet方法，注入FILE_PATH</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取jar包物理路径</span></span><br><span class="line">        File jarFile = <span class="keyword">null</span>;</span><br><span class="line">        String filePath = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ApplicationHome ah = <span class="keyword">new</span> ApplicationHome(getClass());</span><br><span class="line">            jarFile = ah.getSource();</span><br><span class="line">            filePath = jarFile.getParentFile().getPath() + <span class="string">&quot;/upload/&quot;</span>;</span><br><span class="line">            FILE_PATH = filePath;</span><br><span class="line">            System.out.println(<span class="string">&quot;初始化文件上传路径:&quot;</span> + filePath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="comment">// 运行单元测试时ApplicationHome(getClass())会报空指针异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        location = FILE_PATH + location;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            contentFile = ResourceUtils.getFile(location);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件不存在，location：&quot;</span> + location);;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//流操作使用try-with-resource方式，更安全</span></span><br><span class="line">        <span class="keyword">try</span> (BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(contentFile))) &#123;</span><br><span class="line">            String tmpLine;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">while</span> ((tmpLine = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tmpLine.equals(<span class="string">&quot;---&quot;</span>))</span><br><span class="line">                        i--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!tmpLine.equals(<span class="string">&quot;&lt;!--more--&gt;&quot;</span>)) &#123;</span><br><span class="line">                    builder.append(tmpLine);</span><br><span class="line">                    builder.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        content = builder.toString();</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>服务器接收上传文件</p><p>直接使用<code>CommonsMultipartFile.transferTo()</code>会有打jar包保存文件不兼容问题，</p><p>这里通过<code>FileUtils.copyInputStreamToFile()</code>来进行实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FIleController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//最大限制1M</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long FILE_SIZE_LIMIT = <span class="number">1L</span> * <span class="number">1024L</span> * <span class="number">1024L</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FIleService fIleService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据和文件必须异步上传</span></span><br><span class="line"><span class="comment">     * 上传文件早于保存数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequireToken</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonObject <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, <span class="meta">@RequestParam</span> Map&lt;String, Object&gt; params)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        JsonObject res = <span class="keyword">new</span> JsonObject();</span><br><span class="line">        <span class="keyword">if</span> (!verifyFile(file, res)) &#123;</span><br><span class="line">            <span class="comment">//验证不通过</span></span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        String uploadPath = fIleService.upload(file, blogId);</span><br><span class="line">        res.put(<span class="string">&quot;uploadPath&quot;</span>, uploadPath);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证是否通过</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res 这里如果检验不通过会在res中设置status和message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 检验结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Boolean <span class="title">verifyFile</span><span class="params">(MultipartFile file, JsonObject res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file.getSize() &gt; FILE_SIZE_LIMIT) &#123;</span><br><span class="line">            res.setStatus(<span class="keyword">false</span>);</span><br><span class="line">            res.setMessage(<span class="string">&quot;文件不能超过最大值1M!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String originName = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">//这里需要注意转义问题</span></span><br><span class="line">        String[] names = originName.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        String lastName = names[names.length - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;md&quot;</span>.equals(lastName) &amp;&amp; !<span class="string">&quot;markdown&quot;</span>.equals(lastName)) &#123;</span><br><span class="line">            res.setStatus(<span class="keyword">false</span>);</span><br><span class="line">            res.setMessage(<span class="string">&quot;文件类型不正确！请上传markdown文件&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//FileService中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file, String blogId)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="keyword">int</span> year = date.getYear();</span><br><span class="line">    <span class="keyword">int</span> month = date.getMonth();</span><br><span class="line">    <span class="comment">//年月子文件夹路径前缀</span></span><br><span class="line">    String datePath = <span class="string">&quot;/&quot;</span> + (<span class="number">1900</span> + year) + <span class="string">&quot;-&quot;</span> + (<span class="number">1</span> + month);</span><br><span class="line">    File realPath = <span class="keyword">new</span> File(FILE_PATH + datePath);</span><br><span class="line">    <span class="keyword">if</span> (!realPath.exists()) &#123;</span><br><span class="line">        realPath.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    String blogPath = realPath + <span class="string">&quot;/&quot;</span> + blogId;</span><br><span class="line">    <span class="comment">//保存文件</span></span><br><span class="line">    FileUtils.copyInputStreamToFile(file.getInputStream(), <span class="keyword">new</span> File(blogPath));</span><br><span class="line">    System.out.println(<span class="string">&quot;上传文件路径：&quot;</span> + blogPath);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;public/posts&quot;</span> + datePath + <span class="string">&quot;/&quot;</span> + blogId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Jackson序列化相关"><a href="#Jackson序列化相关" class="headerlink" title="Jackson序列化相关"></a>Jackson序列化相关</h1><h2 id="时间转换"><a href="#时间转换" class="headerlink" title="时间转换"></a>时间转换</h2><p>虽然jdk8提供了新的日期api，但是一般使用基础的<code>java.util.Date</code>或者<code>java.util.TimeStamp</code>就足够了</p><blockquote><p>这里注意不要将java.util.Date和java.sql.Date搞混，后者是前者的子类，toString时只展示日期，同理还有java.util.Timestamp和java.sql.TimeStamp</p></blockquote><p>我在项目中所使用的是<code>java.util.Date</code>，在格式化日期显示方面，可以选择使用下面方式手动进行转换:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">String time = simpleDateFormat.format(date);</span><br></pre></td></tr></table></figure><p>但这种方式需要在每个调用的位置都手动赋值，并且需要构建新的传输对象VO</p><p>这里推荐使用Jackson包含的注解<code>@JsonFormat</code>来实现</p><p>jackson依赖已经由springboot自动引入</p><ul><li><p>在后端服务器响应日期数据时，只需要在实体类的属性上加上<code>@JsonFormat</code>，Jackson在序列化时就会自动帮我们完成日期格式转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entity</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在接收前端日期数据时使用<code>@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</code>来接收参数，可以自动转换成Date实体类</p><p>由于时间一般由服务器自行生成，我在项目中并没有实际用到这个注解</p></li></ul><h2 id="Long和String的转换"><a href="#Long和String的转换" class="headerlink" title="Long和String的转换"></a>Long和String的转换</h2><p>众所周知，服务器向前端直接传输Long类型数据时，如果Long数据的长度较长，可能会造成精度丢失</p><p>因此一般服务端需要将Long类型转换成String类型进行传输，以防止精度丢失</p><p>这里同样推荐使用Jackson的统一配置进行实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Jackson全局转化long类型为String，解决jackson序列化时long类型缺失精度问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Jackson2ObjectMapperBuilderCustomizer 注入的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jackson2ObjectMapperBuilderCustomizer <span class="title">jackson2ObjectMapperBuilderCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jackson2ObjectMapperBuilderCustomizer cunstomizer = <span class="keyword">new</span> Jackson2ObjectMapperBuilderCustomizer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Jackson2ObjectMapperBuilder jacksonObjectMapperBuilder)</span> </span>&#123;</span><br><span class="line">                jacksonObjectMapperBuilder.serializerByType(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line">                jacksonObjectMapperBuilder.serializerByType(Long.class, ToStringSerializer.instance);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> cunstomizer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Thymeleaf小坑"><a href="#Thymeleaf小坑" class="headerlink" title="Thymeleaf小坑"></a>Thymeleaf小坑</h1><p>在编写Html中的js代码时，如果需要通过<code>[[$value]]</code>来获取ModelAndView中的数据，需要在对应的script标签上添加th标签，如下所示:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:inline</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> detail = [[$&#123;detail&#125;]];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> articleContent = [[$&#123;articleContent&#125;]];</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>否则js会直接转义替换string造成页面代码错误</p><h1 id="统一Ajax返回对象"><a href="#统一Ajax返回对象" class="headerlink" title="统一Ajax返回对象"></a>统一Ajax返回对象</h1><p>这里自定义了用于返回服务器数据的对象传输类，方便统一进行管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lan5th.blog.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lan5th</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/6/23 21:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long serialVersionUID = <span class="number">7574078101944305355L</span>;</span><br><span class="line">    <span class="keyword">private</span> Boolean status;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data.put(key, data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(Boolean status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.status;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.message;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只留给jackson使用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Map&lt;String, Object&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">搭建博客的demo中遇到的一些常见问题和功能实现</summary>
    
    
    
    <category term="杂项" scheme="http://lan5th.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>Arthas常用命令</title>
    <link href="http://lan5th.github.io/2022/03/17/%E6%9D%82%E9%A1%B9/Arthas%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://lan5th.github.io/2022/03/17/%E6%9D%82%E9%A1%B9/Arthas%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-03-17T04:40:08.548Z</published>
    <updated>2022-05-11T08:34:01.811Z</updated>
    
    <content type="html"><![CDATA[<p>arthas只能用于监控本地java程序，因此远程服务需要在服务器上部署arthas</p><p>启动arthas：<code>java -jar arthas-boot.jar</code></p><p>选择进程：</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220317124320.png" alt="image-20220317124312878"></p><h1 id="最常用命令：watch"><a href="#最常用命令：watch" class="headerlink" title="最常用命令：watch"></a>最常用命令：watch</h1><p>一般实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">watch com.lan5th.WorkflowManageManagerImpl testPaging <span class="string">&quot;&#123;params,returnObj,throwExp&#125;&quot;</span> -x 5 -s</span><br><span class="line">表示监控WorkflowManageManagerImpl类的testPaging方法的出入参数，-x表示解析层级</span><br></pre></td></tr></table></figure><p>入参如果有多个会将其封装成一个Object数组，如果要查看内容至少需要指定<code>-x</code>为2</p><p>解析位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">“&#123;params,returnObj&#125;” 两个变量就是代表参数，返回值,可选的还有throwExp，表示抛出的异常</span><br><span class="line">-x 指定输出结果(默认为1)</span><br><span class="line">-b 表示在方法调用之前</span><br><span class="line">-e 表示在方法出异常时</span><br><span class="line">-s 表示在方法返回之后</span><br><span class="line">-f 表示在方法结束之后(正常返回和异常返回)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">优秀的java监控工具arthas常用命令</summary>
    
    
    
    <category term="杂项" scheme="http://lan5th.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>记录一次阿里云被入侵挖矿的经验</title>
    <link href="http://lan5th.github.io/2022/01/20/%E6%9D%82%E8%B0%88/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E9%98%BF%E9%87%8C%E4%BA%91%E8%A2%AB%E5%85%A5%E4%BE%B5%E6%8C%96%E7%9F%BF%E7%9A%84%E7%BB%8F%E9%AA%8C/"/>
    <id>http://lan5th.github.io/2022/01/20/%E6%9D%82%E8%B0%88/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E9%98%BF%E9%87%8C%E4%BA%91%E8%A2%AB%E5%85%A5%E4%BE%B5%E6%8C%96%E7%9F%BF%E7%9A%84%E7%BB%8F%E9%AA%8C/</id>
    <published>2022-01-20T05:15:50.438Z</published>
    <updated>2022-01-20T05:26:41.463Z</updated>
    
    <content type="html"><![CDATA[<p>这次阿里云被入侵的主要途径是通过redis漏洞对本机文件进行各种操作</p><p><strong>疏忽的地方主要有两点</strong></p><ul><li>redis未配置bind绑定客户端ip，事后已经暂时绑定127.0.0.1</li><li>redis密码过于简单，之间为了测试方便，密码仅设为123456，事后已修改为更复杂的密码</li></ul><h1 id="补救措施"><a href="#补救措施" class="headerlink" title="补救措施"></a>补救措施</h1><ol><li><p>补救上面两点，同时如果有需要请配置防火墙</p></li><li><p>根据阿里云的安全中心提示进行查找，杀死对应进程<code>kill -9 pid</code></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220120125737.png" alt="image-20220120125729918"></p></li><li><p>除了杀死进程之外，被入侵时还被插入了恶意脚本文件和自启动后门，跟上一条一样，按照提示找到对应路径，尝试删除源文件，如果是系统文件不能删除就把修改过的内容删掉</p></li><li><p>这时我们会发现自己明明使用的是root账号，仍然没有足够的权限去编辑或删除文件，这时尝试使用<code>chmod 666 filename</code>来修改对应权限（不过一般这样是不会成功的）</p></li><li><p>chmod的原理是与chattr一致的，在chmod失败后我们可以<code>lsattr filename</code>来查看文件属性，如果发现指定文件有<code>i</code>或<code>a</code>属性，可以尝试<code>chattr -ia filename</code>来修改对应属性</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220120130617.png" alt="image-20220120130617404"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">A　　：当设定了 A 这个属性时，这个档案(或目录)的存取时间</span><br><span class="line">　　atime (access) 将不可被修改， 可避免例如手提式计算机容易有磁盘 I/O 错误的情况发生！</span><br><span class="line">S　　：这个功能有点类似 sync 的功能！就是会将数据同步写入磁盘当中！可以有效的避免数据流失！</span><br><span class="line">a　　：当设定 a 之后，这个档案将只能增加数据，而不能删除，只有 root 才能设定这个属性。</span><br><span class="line">c　　：这个属性设定之后，将会自动的将此档案『压缩』，在读取的时候将会自动解压缩出来，但是在储存的时候，将会先进行压缩&gt;之后再储存（看来对于大档案似乎蛮有用的！）</span><br><span class="line">d　　：当 dump (备份)程序被执行的时候，设定 d 属性将可使该档案(或目录)具有 dump 功效！</span><br><span class="line">i　　：这个 i 可就很厉害了！他可以让一个档案『不能被删除、改名、设定连结也无法写入或新增数据！对于系统安全性有相当大的帮助！</span><br><span class="line">j　　：当使用 ext3 这个档案系统格式时，设定 j 属性将会使档案在写入时先记录在 journal 中！ 但是当 filesystem 设定参数为 &gt;data=journalled 时，由于已经设定了日志了，所以这个属性无效！</span><br><span class="line">s　　：当档案设定了 s 参数时，他将会被完全的移除出这个硬盘空间。</span><br><span class="line">u　　：与 s 相反的，当使用 u 来设定档案时，则数据内容其实还存在磁盘中，可以使用来 undeletion.</span><br><span class="line">R　　：递归处理，将指定目录下的所有文件及子目录一并处理。</span><br><span class="line">v　　：显示文件或目录版本。</span><br><span class="line">V　　：显示版本信息。</span><br></pre></td></tr></table></figure></li><li><p>这时候你使用chattr会报错<code>bash: chattr: command not found</code></p><p>黑客毕竟不是吃干饭的，他修改了你的文件属性不让你删除和编辑之后，删除了你的chattr指令来防止你移除他们植入的代码</p><p>不过不要慌张，这时输入下面几个指令，重新安装一下对应的指令包即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum remove e2fsprogs    //此步骤注意同时会删掉很多依赖的包</span><br><span class="line">yum -y install e2fsprogs</span><br></pre></td></tr></table></figure><p>安装完之后重新使用chattr指令，将被篡改的文件修复或删除</p></li><li><p>大部分篡改到了第6步就可以修复完成了，但笔者在修复/root/.ssh/authorized_keys文件时发现：在XShell客户端一旦使用chattr指令就会自动与阿里云服务器失去连接，但并不清楚到底是黑客植入的脚本作用还是修改authorized_keys之后会对本地连接造成影响，不过之后尝试了在阿里云工作台的远程连接进行操作，成功进行了修复，这次的事件就告一段落了。。。</p></li></ol><p>经验教训：</p><p>公网毕竟不像私网，一定要时时刻刻注意服务器安全，安全组、防火墙、绑定ip、复杂密码等需要处处考虑</p><p><strong>参考博客</strong></p><p><a href="https://www.freesion.com/article/49741083133/">【Linux 】Linux 文件(/etc/crontab和/var/spool/cron/root)不能被root权限修改与编辑 - 灰信网（软件开发博客聚合） (freesion.com)</a></p><p><a href="https://www.it300.com/article-15438.html">bash: chattr: command not found - Linux - 浩海代码网 - php代码_seo优化_网络推广 (it300.com)</a></p>]]></content>
    
    
    <summary type="html">2022.1.20解决问题</summary>
    
    
    
    <category term="杂谈" scheme="http://lan5th.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Hibernate入门</title>
    <link href="http://lan5th.github.io/2022/01/16/JavaEE/hibernate%E5%85%A5%E9%97%A8/"/>
    <id>http://lan5th.github.io/2022/01/16/JavaEE/hibernate%E5%85%A5%E9%97%A8/</id>
    <published>2022-01-16T13:11:46.825Z</published>
    <updated>2022-01-17T01:39:08.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hibernate配置文件"><a href="#hibernate配置文件" class="headerlink" title="hibernate配置文件"></a>hibernate配置文件</h1><h2 id="hibernate配置文件-1"><a href="#hibernate配置文件-1" class="headerlink" title="hibernate配置文件"></a>hibernate配置文件</h2><p><code>hibernate.cfg.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-configuration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据源配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.driver_class&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/database<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.username&quot;</span>&gt;</span>username<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.password&quot;</span>&gt;</span>password<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据库方言 MySQL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 连接池 C3P0 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;c3p0.min_size&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;c3p0.max_size&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;c3p0.timeout&quot;</span>&gt;</span>1800<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;c3p0.max_statements&quot;</span>&gt;</span>50<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 格式化输出生成的SQL语句 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.format_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- hibernate根据映射关系自动建表</span></span><br><span class="line"><span class="comment">            默认: 不会创建表</span></span><br><span class="line"><span class="comment">            create: 没有表就创建，有表就删除重建。</span></span><br><span class="line"><span class="comment">            create-drop: 没有表就创建，有表就删除重建，使用完自动删表。</span></span><br><span class="line"><span class="comment">            update: 没有表就创建表，否则使用现有的表。</span></span><br><span class="line"><span class="comment">            validate: 校验实体关系映射文件和数据表是否对应，不对应则报错</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 加载映射文件，这里写的时路径而不是包名，以&#x27;/&#x27;分隔 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">&quot;hbm/WFProcessProperty.hbm.xml&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="映射关系文件"><a href="#映射关系文件" class="headerlink" title="映射关系文件"></a>映射关系文件</h2><p>映射关系文件<code>.hbm.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这里写包名，下面就可以直接写类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">&quot;pojo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;Course&quot;</span> <span class="attr">table</span>=<span class="string">&quot;course&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 主键id需要单独配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;long&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;assigned&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">not-null</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 排序index --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list-index</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">list-index</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- list中的对象关系映射 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">&quot;Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hibernate-mapping标签的一些属性：</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220116213032.png" alt="image-20220116213025846"></p><p>class标签的一些属性：</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220116213629.png" alt="image-20220116213629173"></p><p>主键映射的方式：</p><ul><li>assigned：外部程序对id赋值</li><li>native：由数据库对id赋值</li><li>identity：采用<strong>数据库</strong>提供的主键生成机制</li><li>increment：采用<strong>hibernate</strong>提供的主键生成机制</li><li>sequence：采用数据库提供的sequence机制生成主键</li><li>foreign：使用外部表的字段作为主键</li></ul><p>property标签常用属性：</p><ul><li>update：字段是否可以修改，默认为true</li><li>insert：字段是否可以添加，默认为true</li><li>lazy：是否采用延迟加载策略，默认为true</li></ul><p>集合类的常用属性：</p><ul><li>inverse：本表是否参与维护关系，默认为true，为false时会将维护权转让给对方类</li><li>cascade：级联操作，当对本表操作时是否对集合中的类的对应表进行操作</li></ul><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SessionFactory sessionFactory;</span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    <span class="keyword">private</span> Transaction transaction;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//默认会自动去加载resourcs路径下hibernate.cfg.xml文件中的配置</span></span><br><span class="line">        <span class="comment">//可以在configure()方法中指明其他路径</span></span><br><span class="line">        Configuration configure = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        sessionFactory = configure.buildSessionFactory();</span><br><span class="line">        session = sessionFactory.openSession();</span><br><span class="line">        <span class="comment">//事务</span></span><br><span class="line">        transaction = session.beginTransaction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        transaction.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        sessionFactory.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hibernateTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Student student = session.get(Student.class, <span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改前：&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line"></span><br><span class="line">        student.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        session.update(student);</span><br><span class="line"></span><br><span class="line">        student = session.get(Student.class, <span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改后：&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HQL"><a href="#HQL" class="headerlink" title="HQL"></a>HQL</h1><p>HQL：Hibernate Query Language，是一种面向对象的查询语言，可以完成查询、修改、删除操作，<strong>但不能完成插入操作</strong></p><p>HQL是在Hibernate中作用的中间层语言，查询过程：java -&gt; HQL -&gt; SQL</p><ul><li><p>查询语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最简单的hql，默认select *</span></span><br><span class="line">String hql = <span class="string">&quot;from Student&quot;</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line"><span class="comment">//简单分页</span></span><br><span class="line">query.setFirstResult(<span class="number">0</span>);</span><br><span class="line">query.setMaxResults(<span class="number">1</span>);</span><br><span class="line">List&lt;Student&gt; list = query.list();</span><br><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>只需要选取单独字段可以完全拼写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String hql = <span class="string">&quot;select name from Student&quot;</span>;</span><br></pre></td></tr></table></figure><p>也可以直接追加where条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String hql = <span class="string">&quot;from Student where id = 2896391706445565017L&quot;</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">Student student = (Student) query.uniqueResult();</span><br></pre></td></tr></table></figure><p>像preparedStatement那样使用占位符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String hql = <span class="string">&quot;from WFProcessProperty where id = :id&quot;</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">query.setLong(<span class="string">&quot;id&quot;</span>,<span class="number">2896391706445565017L</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="hibernate使用小坑"><a href="#hibernate使用小坑" class="headerlink" title="hibernate使用小坑"></a>hibernate使用小坑</h1><h2 id="无法检测到-hbm-xml文件"><a href="#无法检测到-hbm-xml文件" class="headerlink" title="无法检测到.hbm.xml文件"></a>无法检测到.hbm.xml文件</h2><p>注意：这个文件和mybatis的mapper文件一样，如果需要放在java源码目录下，需要在<code>pom.xml</code>中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输出对象导致stackoverflow"><a href="#输出对象导致stackoverflow" class="headerlink" title="输出对象导致stackoverflow"></a>输出对象导致stackoverflow</h2><p>如果两个实体对象之间有循环依赖关系，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; courses;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在使用lombok时可能不太注意，@Data注解为我们自动生成了toString()方法，Course类的toString()方法示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Course&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, students=&quot;</span> + students +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的返回拼接的students中又会去调用Student类的toString()方法，而Student类的toString()方法又会去调用Course类的toString()。。。进而出现无限的循环</p><p><strong>解决办法：</strong></p><p>手动实现任意一方的toString方法，取消对另一方的调用</p>]]></content>
    
    
    <summary type="html">经典ORM框架hibernate入门</summary>
    
    
    
    <category term="JavaEE" scheme="http://lan5th.github.io/categories/JavaEE/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot中的Filter、Interceptor和AOP</title>
    <link href="http://lan5th.github.io/2021/12/22/%E6%9D%82%E8%B0%88/SpringBoot%E4%B8%AD%E7%9A%84Filter%E3%80%81Interceptor%E5%92%8CAOP/"/>
    <id>http://lan5th.github.io/2021/12/22/%E6%9D%82%E8%B0%88/SpringBoot%E4%B8%AD%E7%9A%84Filter%E3%80%81Interceptor%E5%92%8CAOP/</id>
    <published>2021-12-22T10:53:09.056Z</published>
    <updated>2022-06-28T05:38:26.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>谈到AOP，我们要清楚，AOP指的是面向切面的设计思想，而SpringAOP是AOP思想的一种具体实现，除此之外，常用到的还有AspectJAOP，两者的区别主要有：</p><ol><li><p>织入的时期不同</p><p>Spring Aop采用的动态织入，而Aspectj是静态织入。静态织入：指在编译时期就织入，即：编译出来的class文件，字节码就已经被织入了。动态织入又分静动两种，静则指织入过程只在第一次调用时执行；动则指根据代码动态运行的中间状态来决定如何操作</p></li><li><p>可以应用的对象不同</p><p> Spring AOP的通知是基于该对象是SpringBean对象才可以，而AspectJ可以在任何Java对象上应用通知。</p></li></ol><p>在初学AOP时，我曾将Filter、Interceptor和SpringAOP混淆不清，而这些其实都是AOP思想的一些具体的实现，根据具体情景选择不同的实现即可</p><ul><li><p>Filter类似于JavaWeb中我们手动配置的过滤器，在Spring中实现javax.servlet下的Filter接口将其作为一个Bean注入到IOC容器中使用，实现doFilter方法即可</p></li><li><p>Interceptor是Spring自带的拦截器，实现HandlerInterceptor并实现preHandle、postHandle、afterCompletion方法就可以使用</p></li><li><p>使用SpringAOP，需要标注<code>@Aspect</code>注解，指明切面类和方法，这里给出一个具体实例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义切面，其他方法直接引用这个方法作为切面</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * com.example.mybatisplus.web.controller.TestController.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">webLog</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过RequestContextHolder可以获取到请求上下文信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deBefore</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 接收到请求，记录请求内容</span></span><br><span class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = attributes.getRequest();</span><br><span class="line">        <span class="comment">// 记录下请求内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;URL : &quot;</span> + request.getRequestURL().toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;HTTP_METHOD : &quot;</span> + request.getMethod());</span><br><span class="line">        System.out.println(<span class="string">&quot;IP : &quot;</span> + request.getRemoteAddr());</span><br><span class="line">        System.out.println(<span class="string">&quot;CLASS_METHOD : &quot;</span> + joinPoint.getSignature().getDeclaringTypeName() + <span class="string">&quot;.&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;ARGS : &quot;</span> + Arrays.toString(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;webLog()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(Object ret)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理完请求，返回内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法的返回值 : &quot;</span> + ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">throwsE</span><span class="params">(JoinPoint jp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法异常时执行.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置最终通知,final增强，不管是抛出异常或者正常退出都会执行</span></span><br><span class="line">    <span class="meta">@After(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint jp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法最后执行.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知,环绕增强，相当于MethodInterceptor</span></span><br><span class="line">    <span class="meta">@Around(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">arround</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法环绕start.....&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object o =  pjp.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;方法环绕proceed，结果是 :&quot;</span> + o);</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img2018.cnblogs.com/blog/1312982/201904/1312982-20190412203837811-1949443053.png"></p><p>推荐一篇文章详细介绍了三者的用法：<a href="https://www.cnblogs.com/caozx/p/10698433.html">Filter，Interceptor和SpringAop - 爱跑步的星仔 - 博客园 (cnblogs.com)</a></p><h1 id="RequestContextHolder"><a href="#RequestContextHolder" class="headerlink" title="RequestContextHolder"></a>RequestContextHolder</h1><p>为了方便我们在任何方法中都能快速获取请求相关信息，SpringMVC封装了RequestContextHolder来帮助我们快速获取Request，在调用业务时就不需要将Request作为参数传入</p><p>基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在没有使用JSF的项目中这两个方法是等效的</span></span><br><span class="line"><span class="comment">//RequestAttributes attributes = RequestContextHolder.currentRequestAttributes();</span></span><br><span class="line">RequestAttributes attributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line"><span class="comment">//获取session中的参数</span></span><br><span class="line">String name = (String) attributes.getAttribute(<span class="string">&quot;name&quot;</span>, RequestAttributes.SCOPE_SESSION);</span><br><span class="line"><span class="comment">//获取request和response</span></span><br><span class="line">HttpServletRequest request = ((ServletRequestAttributes) attributes).getRequest();</span><br><span class="line">HttpServletResponse response = ((ServletRequestAttributes) attributes).getResponse();</span><br></pre></td></tr></table></figure><p>在使用时会想到几个问题：</p><ul><li>RequestContextHolder是如何与当前请求绑定的？</li><li>request和response何时被设置进去？</li><li>为什么RequestAttributes强转ServletRequestAttributes之后可以直接获取请求和响应？</li></ul><ol><li><p>RequestContextHolder中封装了两个ThreadLocal保存当前请求和请求参数，对当前请求进行绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;RequestAttributes&gt; requestAttributesHolder = <span class="keyword">new</span> NamedThreadLocal(<span class="string">&quot;Request attributes&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;RequestAttributes&gt; inheritableRequestAttributesHolder = <span class="keyword">new</span> NamedInheritableThreadLocal(<span class="string">&quot;Request context&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>在接收请求的过程中，会进行HttpServletBean的初始化，最终调用到FrameworkServlet实现的对应方法，FrameworkServlet的相关依赖如图</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220116232858.png" alt="image-20211223204121984"></p><p>这里我们来看processRequest方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    Throwable failureCause = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//获取上一个请求的LocaleContext</span></span><br><span class="line">    LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class="line">    <span class="comment">//建立新的LocaleContext</span></span><br><span class="line">    LocaleContext localeContext = buildLocaleContext(request);</span><br><span class="line"><span class="comment">//获取上一个请求的RequestAttributes</span></span><br><span class="line">    RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">    <span class="comment">//建立新的RequestAttributes</span></span><br><span class="line">    ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> RequestBindingInterceptor());</span><br><span class="line"><span class="comment">//初始化LocaleContextHolder和RequestContextHolder</span></span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用子类的doService方法</span></span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//恢复request</span></span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        <span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">        logResult(request, response, failureCause, asyncManager);</span><br><span class="line">        <span class="comment">//发布事件</span></span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此对每个请求的RequestContextHolder进行了封装</p></li><li><p>在buildRequestAttributes方法中返回了新的ServletRequestAttributes对象，这个类继承了RequestAttributes，拥有更多的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ServletRequestAttributes <span class="title">buildRequestAttributes</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="meta">@Nullable</span> HttpServletResponse response, <span class="meta">@Nullable</span> RequestAttributes previousAttributes)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (previousAttributes == <span class="keyword">null</span> || previousAttributes <span class="keyword">instanceof</span> ServletRequestAttributes) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ServletRequestAttributes(request, response);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;  <span class="comment">// preserve the pre-bound RequestAttributes instance</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">springboot中的拦截器问题</summary>
    
    
    
    <category term="JavaEE" scheme="http://lan5th.github.io/categories/JavaEE/"/>
    
    
  </entry>
  
  <entry>
    <title>用Java代码实现本地缓存</title>
    <link href="http://lan5th.github.io/2021/12/22/%E6%9D%82%E8%B0%88/%E7%94%A8Java%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/"/>
    <id>http://lan5th.github.io/2021/12/22/%E6%9D%82%E8%B0%88/%E7%94%A8Java%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/</id>
    <published>2021-12-21T16:26:48.083Z</published>
    <updated>2021-12-21T16:46:53.136Z</updated>
    
    <content type="html"><![CDATA[<p>要点：</p><ul><li>数据存储格式：String-Object</li><li>作为工具类所有方法需要static</li><li>key的删除策略：<ul><li>定时任务线程定期删除（ScheduledExecutorService）</li><li>get时手动检测是否过期（懒惰淘汰）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalCache</span> </span>&#123;</span><br><span class="line">    <span class="comment">//启动开始后延迟2秒执行时效策略</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_DELAY_TIME = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//执行时效策略间隔时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERIOD_TIME = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//缓存map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, Cache&gt; map;</span><br><span class="line">    <span class="comment">//执行过期清除的定时任务线程池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ScheduledExecutorService executorService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">        executorService = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">        executorService.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask(), INITIAL_DELAY_TIME, PERIOD_TIME, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在get时也需要进行判断</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Cache cache = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (cache == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (cache.getExpire() &gt; <span class="number">0</span> &amp;&amp; cache.getExpire() &lt; System.currentTimeMillis()) &#123;</span><br><span class="line">            remove(key);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(key).getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        put(key, value, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Object value, <span class="keyword">long</span> expire)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加缓存，key = &quot;</span> + key + <span class="string">&quot; value = &quot;</span> + value + <span class="string">&quot; ttl = &quot;</span> + expire);</span><br><span class="line">        <span class="keyword">if</span> (expire &gt; <span class="number">0</span>)</span><br><span class="line">            map.put(key, <span class="keyword">new</span> Cache(value, expire));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            map.put(key, <span class="keyword">new</span> Cache(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Cache remove = map.remove(key);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了key：&quot;</span> + key + <span class="string">&quot; value：&quot;</span> + remove.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定期删除所有过期key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------开始执行定期清除--------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">            Cache cache = map.get(key);</span><br><span class="line">            <span class="keyword">long</span> timeMillis = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">long</span> expire = cache.getExpire();</span><br><span class="line">            <span class="keyword">if</span> (expire &gt; <span class="number">0</span> &amp;&amp; expire &lt; timeMillis) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;timeMillis = &quot;</span> +  timeMillis);</span><br><span class="line">                System.out.println(<span class="string">&quot;expire = &quot;</span> + expire);</span><br><span class="line">                remove(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------定期清除结束--------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                removeAll();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;定期缓存清除异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Object value;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> expire = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Cache</span><span class="params">(Object value, <span class="keyword">long</span> expire)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.expire = System.currentTimeMillis() + expire * <span class="number">1000</span>;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Cache</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> expire;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">如果不使用Redis，如何实现一个简单的本地缓存？</summary>
    
    
    
    <category term="杂谈" scheme="http://lan5th.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>树相关</title>
    <link href="http://lan5th.github.io/2021/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/"/>
    <id>http://lan5th.github.io/2021/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</id>
    <published>2021-11-13T10:40:55.135Z</published>
    <updated>2021-12-24T08:04:00.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h1><p>二叉查找树又名二叉搜索树（BST），与一般的二叉树最大的区别是：任何节点的键值一定大于其左子树中的每一个节点的键值，并小于其右子树的每一个节点的键值。</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20211113184329.png" alt="image-20211113184322807"></p><p>这种树最大的缺点就是极端情况数据结构退化到与链表相似，查找效率低下</p><h1 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h1><p>二叉查找树最大的问题就是如果不手动进行平衡就有可能很快失衡，查找性能下降到与链表相近</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20211113184520.png" alt="image-20211113184520708"></p><p>AVL树也称平衡二叉查找树，在插入和删除时会自动根据每个节点的左右结点数进行适当的左旋或右旋</p><p>9结点不平衡，右旋：</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20211113184857.png" alt="image-20211113184857501"></p><p>优点：</p><p>平衡度很高，查找性能好</p><p>缺点：</p><p>插入和删除结点时操作繁琐，需要经常进行左旋或右旋操作</p><h1 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h1><p>B树(B-tree)即多路查找树上面的AVL树也是一种特殊的B树，查找效率为logn</p><p>设计成多路是为了降低树的高度，但如果不限制路数的话，结构就会退化成有序数组了。</p><p><strong>注意：B树没有要求一定是二叉树，B树的每一个结点都有可能有多于2个子结点</strong></p><p>一般会将B树与B+树放在一起比较</p><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><ul><li>有m个子树的中间节点包含有m个元素（B树中是k-1个元素），每个元素不保存数据，只用来索引；</li><li>所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大的顺序链接，所有叶子结点之间维护了一条链表。 (而B 树的叶子节点并没有包括全部需要查找的信息)；</li><li>所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键字，查找效率较为稳定，并且可以很大程度避免随机IO的问题。 (而B 树的非终节点也包含需要查找的有效信息)；</li></ul><h1 id="2-3-4树"><a href="#2-3-4树" class="headerlink" title="2-3-4树"></a>2-3-4树</h1><ul><li>2结点：包含1个元素的结点，有2个子结点</li><li>3结点：包含2个元素的结点，有3个子结点</li><li>4结点：包含3个元素的结点，有4个子结点</li></ul><p>同时满足二叉搜索树的相关特性</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20211113191531.png" alt="image-20211113191531109"></p><p>当进行插入时，会尝试合并当前结点，如果当前结点的元素个数等于3，不能继续合并，则中间结点上升，需要插入的结点再向下尝试合并插入</p><h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><p>也称RBT(Red Black Tree)，红黑树是为了简化AVL树的平衡操作而设计出来的，维护效率更高</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2b1ffbfa5872e18b501b9a58e6bf5137.png"></p><p>红黑树要求：</p><ul><li>每个节点要么是黑色要么是红色</li><li>根节点是黑色</li><li>每个叶子结点（NIL）是黑色</li><li>每个红色结点的子结点一定是黑色</li><li>任意一个结点到每个叶子结点(NIL)的路径都包括数量相同的黑结点</li></ul><p>根据上面这些定义，我们可以先一步假设：红黑树与平衡二叉树相比只注重黑结点的平衡，因而效率较高</p><p>由于定义5的存在，如果我们新插入结点时插入的是黑色结点，那么一定会打破之前已经平衡了的红黑树的平衡，因此推导出：<strong>新插入的结点必须以红结点进行尝试</strong></p><p><strong>旋转和变色的情况考虑</strong></p><p><a href="https://blog.csdn.net/zhaoyajie1011/article/details/107791743">深入理解红黑树的演变、变色、旋转！从此告别背诵面试题！</a></p><p><strong>一个红黑树结点模拟网站</strong></p><p><a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html">Red/Black Tree Visualization (usfca.edu)</a></p><p>需要变动的情况：</p><ul><li>父节点为红：如果父节点为黑，这时插入红色的子结点不会影响红黑树的平衡</li><li>叔叔结点不存在或叔叔结点为黑色，不论是哪一种情况，必然会使得定义5不平衡</li></ul><p>变动的四种具体情景：</p><ul><li>LL型：父节点变黑，祖父节点变红，祖父节点右旋</li><li>LR型：父节点左旋，变为LL型，然后执行LL型的操作</li><li>RR型：父节点变黑，祖父节点变红，祖父节点左旋</li><li>RL型：父节点右旋，变为RR型，然后执行RR型的操作</li></ul><p>红黑树与AVL树的比较：</p><ol><li>AVL更平衡，结构上更加直观，时间效能针对读取而言更高；维护稍慢，空间开销较大。</li><li>红黑树，读取略逊于AVL，维护强于AVL，空间开销与AVL类似，内容极多时略优于AVL，维护优于AVL。</li><li>基本上主要的几种平衡树看来，红黑树有着良好的稳定性和完整的功能，性能表现也很不错，综合实力强，在诸如STL的场景中需要稳定表现。</li><li>红黑树的查询性能略微逊色于AVL树，因为其比AVL树会稍微不平衡最多一层，也就是说红黑树的查询性能只比相同内容的AVL树最多多一次比较，但是，红黑树在插入和删除上优于AVL树，AVL树每次插入删除会进行大量的平衡度计算，而红黑树为了维持红黑性质所做的红黑变换和旋转的开销，相较于AVL树为了维持平衡的开销要小得多</li></ol><p>综上，如果是查找远多于插入和删除的情境下可以选择AVL树；如果查找、插入和删除的发生频率近似，处于一种综合场景，选择红黑树会是更优的答案</p>]]></content>
    
    
    <summary type="html">二叉查找树、AVL树、B树、2-3-4树、红黑树</summary>
    
    
    
    <category term="数据结构" scheme="http://lan5th.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Java命令行工具</title>
    <link href="http://lan5th.github.io/2021/10/15/JavaSE/Java%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/"/>
    <id>http://lan5th.github.io/2021/10/15/JavaSE/Java%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</id>
    <published>2021-10-15T08:22:09.514Z</published>
    <updated>2021-12-27T14:32:28.599Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>本文将带大家了解一下经典的java命令行工具</p><h1 id="javac-amp-javap"><a href="#javac-amp-javap" class="headerlink" title="javac&amp;javap"></a>javac&amp;javap</h1><p>首先是最基础的javac和javap，javac</p><ul><li><p><strong>Javac</strong>：编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">用法: javac &lt;options&gt; &lt;<span class="built_in">source</span> files&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">      -g                         生成所有调试信息</span><br><span class="line">      -g:none                    不生成任何调试信息</span><br><span class="line">      -g:&#123;lines,vars,<span class="built_in">source</span>&#125;     只生成某些调试信息</span><br><span class="line">      -nowarn                    不生成任何警告</span><br><span class="line">      -verbose                   输出有关编译器正在执行的操作的消息</span><br><span class="line">      -deprecation               输出使用已过时的 API 的源位置</span><br><span class="line">      -classpath &lt;路径&gt;            指定查找用户类文件和注释处理程序的位置</span><br><span class="line">      -cp &lt;路径&gt;                   指定查找用户类文件和注释处理程序的位置</span><br><span class="line">      -sourcepath &lt;路径&gt;           指定查找输入源文件的位置</span><br><span class="line">      -bootclasspath &lt;路径&gt;        覆盖引导类文件的位置</span><br><span class="line">      -extdirs &lt;目录&gt;              覆盖所安装扩展的位置</span><br><span class="line">      -endorseddirs &lt;目录&gt;         覆盖签名的标准路径的位置</span><br><span class="line">      -proc:&#123;none,only&#125;          控制是否执行注释处理和/或编译。</span><br><span class="line">      -processor &lt;class1&gt;[,&lt;class2&gt;,&lt;class3&gt;...] 要运行的注释处理程序的名称; 绕过默认的搜索进程</span><br><span class="line">      -processorpath &lt;路径&gt;        指定查找注释处理程序的位置</span><br><span class="line">      -d &lt;目录&gt;                    指定放置生成的类文件的位置</span><br><span class="line">      -s &lt;目录&gt;                    指定放置生成的源文件的位置</span><br><span class="line">      -implicit:&#123;none,class&#125;     指定是否为隐式引用文件生成类文件</span><br><span class="line">      -encoding &lt;编码&gt;             指定源文件使用的字符编码</span><br><span class="line">      -<span class="built_in">source</span> &lt;发行版&gt;              提供与指定发行版的源兼容性</span><br><span class="line">      -target &lt;发行版&gt;              生成特定 VM 版本的类文件</span><br><span class="line">      -version                   版本信息</span><br><span class="line">      -<span class="built_in">help</span>                      输出标准选项的提要</span><br><span class="line">      -A关键字[=值]                  传递给注释处理程序的选项</span><br><span class="line">      -X                         输出非标准选项的提要</span><br><span class="line">      -J&lt;标记&gt;                     直接将 &lt;标记&gt; 传递给运行时系统</span><br><span class="line">      -Werror                    出现警告时终止编译</span><br><span class="line">      @&lt;文件名&gt;                     从文件读取选项和文件名</span><br></pre></td></tr></table></figure><p>如果需要编译多个类，可以将他们的类名写在一个txt文件中：<code>class_info.txt</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test01.java Test02.java Test03.java -verbose</span><br></pre></td></tr></table></figure><p>使用时指定文件<code>javac @class_info.txt</code></p></li><li><p><strong>javap</strong>：反编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">javap &lt;options&gt; &lt;classes&gt;</span><br><span class="line">    -<span class="built_in">help</span>  --<span class="built_in">help</span>  -?        输出此用法消息</span><br><span class="line">    -version                 版本信息，其实是当前javap所在jdk的版本信息，不是class在哪个jdk下生成的。</span><br><span class="line">    -v  -verbose             输出附加信息（包括行号、本地变量表，反汇编等详细信息）</span><br><span class="line">    -l                         输出行号和本地变量表</span><br><span class="line">    -public                    仅显示公共类和成员</span><br><span class="line">    -protected               显示受保护的/公共类和成员</span><br><span class="line">    -package                 显示程序包/受保护的/公共类 和成员 (默认)</span><br><span class="line">    -p  -private             显示所有类和成员</span><br><span class="line">    -c                       对代码进行反汇编</span><br><span class="line">    -s                       输出内部类型签名</span><br><span class="line">    -sysinfo                 显示正在处理的类的系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class="line">    -constants               显示静态最终常量</span><br><span class="line">    -classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class="line">    -bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure><p>一般常用-v -l -c三个选项</p><p>输出结果到文件中<code>javap -c 类名.class &gt; 文件名.txt</code></p></li></ul><h1 id="jps-amp-jstat-amp-jinfo"><a href="#jps-amp-jstat-amp-jinfo" class="headerlink" title="jps&amp;jstat&amp;jinfo"></a>jps&amp;jstat&amp;jinfo</h1><ul><li><p>jps：与linux中ps功能类似，查看java虚拟机进程信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式：jps [ options ] [ hostid ]</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">-q 不输出类名、Jar名和传入main方法的参数</span><br><span class="line">-m 输出传入main方法的参数</span><br><span class="line">-l 输出main类或Jar的全限名</span><br><span class="line">-v 输出传入JVM的参数</span><br></pre></td></tr></table></figure><p>不指定hostId默认为本机</p></li><li><p>jstat：虚拟机统计信息监控工具</p><p><code>jstat [ option vmid [ interval [ s | ms ] [ count ] ] ]</code>、</p><p>option：</p><p><img src="https://img2018.cnblogs.com/blog/1351999/201905/1351999-20190514102358898-281086829.png"></p><p>vmid：虚拟机id（使用jps查到的id），linux上是进程id</p><p>interval和count：查询间隔和查询次数</p></li><li><p>jinfo：java配置信息工具，可以实时查看和修改虚拟机参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式：jinfo [option] pid</span><br><span class="line">参数：</span><br><span class="line">-v 查看虚拟机启动时显式指定的参数列表</span><br><span class="line">-flag name=value 修改一部分运行期可修改的虚拟机参数值</span><br></pre></td></tr></table></figure></li></ul><h1 id="jmap-amp-jhat-amp-jstack"><a href="#jmap-amp-jhat-amp-jstack" class="headerlink" title="jmap&amp;jhat&amp;jstack"></a>jmap&amp;jhat&amp;jstack</h1><ul><li><p>jmap：java内存映像工具，生成堆转储快照(heapdump或dump文件)</p><p><code>jmap [option] vmid</code></p><p><img src="https://img2018.cnblogs.com/blog/1351999/201905/1351999-20190514105400993-831304301.png"></p></li><li><p>jhat：虚拟机堆转储快照分析工具，和jmap联合使用，不过较为简陋，后来的Eclipse Memory Analyzer和IBM HeapAnalyzer可以替代它的功能</p><p>格式：<code>jhat [-port 端口号] 文件路径</code></p><p>-port指定端口号，默认为7000</p></li><li><p>jstack：堆栈跟踪工具，生成虚拟机当前时刻的线程快照(threaddump或javacore文件)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">命令格式：jstack  [option] vmid</span><br><span class="line">参数：</span><br><span class="line">-F 当正常输出的请求不被响应时，强制输出线程堆栈</span><br><span class="line">-l 除了堆栈外，显示关于锁的附加信息</span><br><span class="line">-m 显示本地方法的堆栈（C/C++）</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">常用的java命令行工具简介</summary>
    
    
    
    <category term="JavaSE" scheme="http://lan5th.github.io/categories/JavaSE/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring源码分析</title>
    <link href="http://lan5th.github.io/2021/10/07/JavaEE/Spring%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://lan5th.github.io/2021/10/07/JavaEE/Spring%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2021-10-07T08:44:46.272Z</published>
    <updated>2021-12-06T08:00:06.708Z</updated>
    
    <content type="html"><![CDATA[<p>思路参考：<a href="https://segmentfault.com/a/1190000022694615">spring源码导读 SegmentFault 思否</a></p><p>核心上下文依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring内容的实现依赖于底层大量的PostProcess来对Bean的实例进行一定的修饰</p><h1 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h1><h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><p>创建–&gt;初始化–&gt;销毁</p><p><strong>创建</strong></p><ol><li><p>Bean 容器找到配置文件中 Spring Bean 的定义。</p></li><li><p>Bean 容器利用 Java Reflection API 创建一个 Bean 的实例。</p></li><li><p>如果涉及到一些属性值 利用 <code>set()</code>方法设置一些属性值。</p></li><li><p>如果 Bean 实现了 <code>BeanNameAware</code> 接口，调用 <code>setBeanName()</code>方法，传入 Bean 的名字。</p><p>如果 Bean 实现了 <code>BeanClassLoaderAware</code> 接口，调用 <code>setBeanClassLoader()</code>方法，传入 <code>ClassLoader</code>对象的实例。</p><p>如果 Bean 实现了 <code>BeanFactoryAware</code> 接口，调用 <code>setBeanFactory()</code>方法，传入 <code>BeanFactory</code>对象的实例。</p><p>与上面的类似，如果实现了其他 <code>*.Aware</code>接口，就调用相应的方法。</p></li><li><p>如果有和加载这个 Bean 的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象，执行<code>postProcessBeforeInitialization()</code> 方法</p></li><li><p>如果 Bean 实现了<code>InitializingBean</code>接口，执行<code>afterPropertiesSet()</code>方法。</p></li><li><p>如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。</p></li><li><p>如果有和加载这个 Bean 的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象，执行<code>postProcessAfterInitialization()</code> 方法</p></li></ol><p><strong>销毁</strong></p><ol><li>当要销毁 Bean 的时候，如果 Bean 实现了 <code>DisposableBean</code> 接口，执行 <code>destroy()</code> 方法。</li><li>当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。</li></ol><h2 id="获取IOC容器底层组件"><a href="#获取IOC容器底层组件" class="headerlink" title="获取IOC容器底层组件"></a>获取IOC容器底层组件</h2><p>比如说容器本身</p><p>实现XXXAware接口和对应方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">        System.out.println(applicationContext);</span><br><span class="line">        System.out.println(applicationContext.getEnvironment().getProperty(<span class="string">&quot;os.name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XXXAware接口会由XXXAwareProcessor进行处理，这些Processor都是实现了BeanPostProcessor的后置处理器</p><p>如ApplicationContextAwareProcessor通过调用invokeAwareInterfaces方法来匹配Aware的对应类型并传入上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeAwareInterfaces</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EnvironmentAware) &#123;</span><br><span class="line">        ((EnvironmentAware)bean).setEnvironment(<span class="keyword">this</span>.applicationContext.getEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware) &#123;</span><br><span class="line">        ((EmbeddedValueResolverAware)bean).setEmbeddedValueResolver(<span class="keyword">this</span>.embeddedValueResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ResourceLoaderAware) &#123;</span><br><span class="line">        ((ResourceLoaderAware)bean).setResourceLoader(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware) &#123;</span><br><span class="line">        ((ApplicationEventPublisherAware)bean).setApplicationEventPublisher(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> MessageSourceAware) &#123;</span><br><span class="line">        ((MessageSourceAware)bean).setMessageSource(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationContextAware) &#123;</span><br><span class="line">        ((ApplicationContextAware)bean).setApplicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IOC容器创建过程"><a href="#IOC容器创建过程" class="headerlink" title="IOC容器创建过程"></a>IOC容器创建过程</h2><p>进入<code>refresh()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.prepareRefresh();<span class="comment">// 1</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = <span class="keyword">this</span>.obtainFreshBeanFactory();<span class="comment">// 2</span></span><br><span class="line">        <span class="keyword">this</span>.prepareBeanFactory(beanFactory);<span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.postProcessBeanFactory(beanFactory);<span class="comment">// 4</span></span><br><span class="line">            <span class="keyword">this</span>.invokeBeanFactoryPostProcessors(beanFactory);<span class="comment">// 5</span></span><br><span class="line">            <span class="keyword">this</span>.registerBeanPostProcessors(beanFactory);<span class="comment">// 6</span></span><br><span class="line">            <span class="keyword">this</span>.initMessageSource();<span class="comment">// 7</span></span><br><span class="line">            <span class="keyword">this</span>.initApplicationEventMulticaster();<span class="comment">// 8</span></span><br><span class="line">            <span class="keyword">this</span>.onRefresh();<span class="comment">// 9</span></span><br><span class="line">            <span class="keyword">this</span>.registerListeners();<span class="comment">// 10</span></span><br><span class="line">            <span class="keyword">this</span>.finishBeanFactoryInitialization(beanFactory);<span class="comment">// 11</span></span><br><span class="line">            <span class="keyword">this</span>.finishRefresh();<span class="comment">// 12</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeansException var9) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.logger.warn(<span class="string">&quot;Exception encountered during context initialization - cancelling refresh attempt: &quot;</span> + var9);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.destroyBeans();</span><br><span class="line">            <span class="keyword">this</span>.cancelRefresh(var9);</span><br><span class="line">            <span class="keyword">throw</span> var9;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>prepareRefresh()</p><ol><li>记录启动时间，设置容器的active和close状态。 </li><li>initPropertySources():提供给子容器类，子容器类可覆盖该方法进行一些自定义的属性设置。</li><li>getEnvironment().validateRequiredProperties()：检验属性的合法性</li><li>this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>() ：保存容器中的一些早期的事件，待事件多播器创建后执行。</li></ol></li><li><p>obtainFreshBeanFactory()</p><p>将Bean的配置信息添加到注册中心</p><ol><li>refreshBeanFactory：如果当前容器已经有了BeanFactory就销毁原来的BeanFactory。然后创建一个DefaultListableBeanFactory();<ul><li>对BeanFactory并进行配置，主要配置是否允许BeanDefinition覆盖，是否允许Bean间的循环引用。</li><li>加载BeanDefinition，解析XML文件和配置文件，将其转换为BeanDefinition，然后保存到DefaultListableBeanFactory的beanDefinitionMap字段中。</li></ul></li><li>getBeanFactory() 简单的返回beanFactory，即DefaultListableBeanFactory。</li></ol></li><li><p>prepareBeanFactory()</p><ol><li>设置BeanFactory的类加载器、设置支持SPEL表达式的解析器。</li><li>添加ApplicationContextAwareProcessor用于处理XXXAware接口的回调。 </li><li>设置忽略一些接口。并注册一些类，这些类可以在bean里直接进行自动装配。</li><li>添加ApplicationListenerDetector用于识别并保存ApplicationListener的子类。</li></ol></li><li><p>postProcessBeanFactory()</p><p>提供给子容器类，子容器类可以覆盖该方法在BeanFactory准备工作完成后处理一些工作。</p></li><li><p>invokeBeanFactoryPostProcessors()</p><p>执行BeanFactoryPostProcessors类型的后置处理器的监听方法</p><ul><li>BeanFactoryPostProcessor是beanFactory后置处理器，在整个BeanFactory标准初始化完成后进行拦截调用， </li><li>BeanDefinitionRegistryPostProcessor继承了BeanFactoryPostProcessor，在beanFactory解析完所有的BeanDefinition后拦截调用。</li><li>BeanFactoryPostProcessor来源<ul><li>通过ApplicationContent的addBeanFactoryPostProcessor()方法手动添加自己的拦截器</li><li>系统默认了一些BeanFactoryPostProcessor。例如：ConfigurationClassPostProcessor用来处理@Configuration标注的Spring配置类。</li></ul></li><li>调用顺序 <ol><li>先调用BeanDefinitionRegistryPostProcessor类型的拦截器，</li><li>然后再依次调用实现了PriorityOrdered,Ordered接口的BeanFactoryPostProcessor</li><li>最后调用普通的BeanFactoryPostProcessor</li></ol></li></ul></li><li><p>registerBeanPostProcessors()</p><p>注册Bean的后置处理器</p><ol><li>从beanFactory里获取所有BeanPostProcessor类型的Bean的名称。</li><li>调用beanFactory的getBean方法并传入每一个BeanPostProcesso类型的Bean名称，从容器中获取该Bean的实例。</li><li><ol><li>第一步向beanFactory注册实现了PriorityOrdered的BeanPostProcessor类型的Bean实例。</li><li>第二步向beanFactory注册实现了Ordered的BeanPostProcessor类型的Bean实例。</li><li>第三步向beanFactory注册普通的BeanPostProcessor类型的Bean实例。</li><li>最后一步向beanFactory重新注册实现了MergedBeanDefinitionPostProcessor的BeanPostProcessor类型的Bean实例</li></ol></li><li>向beanFactory注册BeanPostProcessor的过程就是简单的将实例保存到beanFactory的beanPostProcessors属性中。</li></ol></li><li><p>initMessageSource()</p><p>初始化国际化相关功能</p><ol><li>看容器中是否有id为messageSource的，类型是MessageSource的Bean实例。如果有赋值给messageSource，如果没有自己创建一个DelegatingMessageSource。</li><li>把创建好的MessageSource注册在容器中，以后获取国际化配置文件的值的时候，可以自动注入MessageSource。</li></ol></li><li><p>initApplicationEventMulticaster()</p><p>初始化事件派发器，用于给监听器传递消息</p><ol><li>看容中是否有名称为applicationEventMulticaster的，类型是ApplicationEventMulticaster的Bean实例。如果没有就创建一个SimpleApplicationEventMulticaster。</li><li>把创建好的ApplicationEventMulticaster添加到BeanFactory中。</li></ol></li><li><p>onRefresh()</p><p>提供给子容器类，供子容器去实例化其他的特殊的Bean</p></li><li><p>registerListeners()</p><p>处理容器中已有的ApplicationListener</p><ol><li>从容器中获得所有的ApplicationListener</li><li>将每个监听器添加到事件派发器（ApplicationEventMulticaster）中；</li><li>处理之前步骤产生的事件；</li></ol></li><li><p>finishBeanFactoryInitialization()</p><p>初始化容器中剩余的单实例bean：拿到剩余的所有的BeanDefinition，依次调用getBean方法</p></li><li><p>finishRefresh()</p><ol><li>初始化和生命周期有关的后置处理器；LifecycleProcessor，如果容器中没有指定处理就创建一个DefaultLifecycleProcessor加入到容器。</li><li>获取容器中所有的LifecycleProcessor回调onRefresh()方法。</li><li>发布容器刷新完成事件ContextRefreshedEvent。</li></ol></li></ol><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在程序运行期间，动态的将某段代码切入到指定位置的编程方式</p><p>底层：动态代理</p><h2 id="EnableAspectJAutoProxy的作用"><a href="#EnableAspectJAutoProxy的作用" class="headerlink" title="@EnableAspectJAutoProxy的作用"></a>@EnableAspectJAutoProxy的作用</h2><p>@EnableAspectJAutoProxy</p><ul><li>@EnableAspectJAutoProxy 通过@Import(AspectJAutoProxyRegistrar.class)给spring容器中导入了一个AnnotationAwareAspectJAutoProxyCreator。</li><li>AnnotationAwareAspectJAutoProxyCreator实现了InstantiationAwareBeanPostProcessor,InstantiationAwareBeanPostProcessor是一个BeanPostProcessor。它可以拦截spring的Bean初始化(Initialization)前后和实例化(Initialization)前后。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>@EnableAspectJAutoProxy</p><p>向容器中注册组件AnnotationAwareAspectJAutoProxyCreator后置处理器</p></li><li><p>容器创建流程：</p><ol><li><p>registerBeanPostProcessors()注册后置处理器，创建AnnotationAwareAspectJAutoProxyCreator对象</p></li><li><p>finishBeanFactoryInitialization()初始化剩下的单实例Bean</p><ol><li><p>创建业务逻辑组件和切面组件</p></li><li><p>AnnotationAwareAspectJAutoProxyCreator会拦截组建的创建过程</p></li><li><p>组件创建完后，判断组件是否需要增强</p><p>如果是，将切面的通知方法包装秤增强器，给业务逻辑组件创建一个代理对象</p></li></ol></li></ol></li><li><p>执行目标方法：</p><ol><li><p>代理对象执行目标方法</p></li><li><p>CglibAopProxy.intercept()</p><ol><li><p>得到目标方法的拦截器链(将增强器包装成MethodInterceptor)</p></li><li><p>利用拦截器的链式机制，依次进入每个拦截器进行执行</p><p>由于每个拦截器会先放行执行它的下一个拦截器，因此排在最后的前置通知拦截器会最先执行</p></li><li><p>执行顺序：</p><ul><li>正常执行：前置通知-目标方法-&gt;后置通知-&gt;返回通知</li><li>出现异常：前置通知-目标方法-&gt;后置通知-&gt;异常通知</li></ul></li></ol></li></ol></li></ol><h1 id="声明式事务原理"><a href="#声明式事务原理" class="headerlink" title="声明式事务原理"></a>声明式事务原理</h1><p>注解使用方式</p><ul><li><p>配置数据源DataSource</p></li><li><p>主类上添加<code>@EnableTransactionManagement</code></p></li><li><p>需要转为事务操作的方法上添加<code>@Transactional</code></p></li><li><p>配置事务管理器来管理事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//这里传入配置好的数据源</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(datasource());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>运行过程：</p><ol><li>@EnableTransactionManagement利用TransactionManagementConfigurationSelector给spring容器中导入两个组件：AutoProxyRegistrar和ProxyTransactionManagementConfiguration</li><li>AutoProxyRegistrar给spring容器中注册一个InfrastructureAdvisorAutoProxyCreator，InfrastructureAdvisorAutoProxyCreator实现了InstantiationAwareBeanPostProcessor,InstantiationAwareBeanPostProcessor是一个BeanPostProcessor。它可以拦截spring的Bean初始化(Initialization)前后和实例化(Initialization)前后。利用后置处理器机制在被拦截的bean创建以后包装该bean并返回一个代理对象代理对象执行方法利用拦截器链进行调用（同<strong>springAop</strong>的原理）</li><li>ProxyTransactionManagementConfiguration：是一个spring的配置类,它为spring容器注册了一个BeanFactoryTransactionAttributeSourceAdvisor,是一个事务事务增强器。它有两个重要的字段：AnnotationTransactionAttributeSource和TransactionInterceptor。<ol><li>AnnotationTransactionAttributeSource：用于解析事务注解的相关信息</li><li>TransactionInterceptor：事务拦截器，在事务方法执行时，都会调用TransactionInterceptor的invoke-&gt;invokeWithinTransaction方法，这里面通过配置的PlatformTransactionManager控制着事务的提交和回滚。</li></ol></li></ol><h1 id="扩展原理"><a href="#扩展原理" class="headerlink" title="扩展原理"></a>扩展原理</h1><ol><li>BeanFactoryPostProcessor：beanFactory后置处理器，的拦截时机：所有Bean的定义信息已经加载到容器，但还没有被实例化。可以对beanFactory进行一些操作。</li><li>BeanPostProcessor：bean后置处理器，拦截时机：bean创建对象初始化前后进行拦截工作。可以对每一个Bean进行一些操作。</li><li>BeanDefinitionRegistryPostProcessor：是BeanFactoryPostProcessor的子接口，拦截时机：所有Bean的定义信息已经加载到容器，但还没有被实例化，可以对每一个Bean的BeanDefinition进行一些操作。</li><li>监听器原理：EventListenerMethodProcessor是一个SmartInitializingSingleton，当所有的单例bean都初始化完以后， 容器会回调该接口的方法afterSingletonsInstantiated(),该方法里会遍历容器中所有的bean，并判断每一个bean里是否带有@EventListener注解的Method，然后创建ApplicationListenerMethodAdapter存储并包装该Method，最后将ApplicationListenerMethodAdapter添加到spring容器中。</li><li>事件派发器ApplicationEventMulticaster给EventListener传递消息</li></ol><h2 id="使用监听器"><a href="#使用监听器" class="headerlink" title="使用监听器"></a>使用监听器</h2><ol><li><p>监听对象</p><ul><li><p>实现并注册ApplicationListener接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent applicationEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;监听到了事件：&quot;</span> + applicationEvent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>或者直接使用<code>@EventListener()</code>接口来为普通的方法指定监听对象</p></li></ul></li><li><p>可以自己发布事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">applicationContext.publishEvent(<span class="keyword">new</span> ApplicationEvent(<span class="keyword">new</span> String(<span class="string">&quot;我发布的事件&quot;</span>))&#123;&#125;);</span><br></pre></td></tr></table></figure></li></ol><h1 id="bean的循环依赖问题"><a href="#bean的循环依赖问题" class="headerlink" title="bean的循环依赖问题"></a>bean的循环依赖问题</h1><p>A 依赖 B B 依赖 A 产生闭环，称为循环依赖</p><p>·Spring 默认允许单例对象的属性注入 所产生的循环依赖</p><p>单例对象的循环依赖 Spring通过3级缓存来解决</p><p>比如一个类A中有一个属性是B类，B类中有一个属性是A类，这时看Spring是怎么解决他们的相互依赖的。Spring注入一个类的大体步骤分为两部分，一是先完成对类的构造工作，二是会对类的属性进行设置和填充。首先Spring构造A类，通过AbstractAutowireCapableBeanFactory的doCreateBean方法中调用addSingletonFactory方法将A类曝光到singletonFactories中。这时完成A的构造后，需要填充B属性，继续第二步，发现B还没有构造，于是开始B流程的构造过程，构造的时候发现需要填充A，从第三层缓存singletonFactories中找到A(此时的A还没有完全构造完成，但是可以拿到A的一个引用)，B拿到A的引用后，完成B自己的填充属性工作，完成初始化工作，把自己放到第一层缓存singletonObjects中。这时回到A的这边，在拿到B对象后，完成自己的填充属性工作。</p><table><thead><tr><th>源码</th><th>级别</th><th>描述</th></tr></thead><tbody><tr><td>singletonObjects</td><td>一级缓存</td><td>用于存放完全初始化好的 bean，从该缓存中取出的 bean 可以直接使用</td></tr><tr><td>earlySingletonObjects</td><td>二级缓存</td><td>存放原始的 bean 对象（尚未填充属性），用于解决循环依赖</td></tr><tr><td>singletonFactories</td><td>三级缓存</td><td>存放 bean 工厂对象，用于解决循环依赖</td></tr></tbody></table><p>二级缓存就能解决缓存依赖，三级缓存解决的是AOP代理问题</p>]]></content>
    
    
    <summary type="html">深入理解Spring底层原理</summary>
    
    
    
    <category term="JavaEE" scheme="http://lan5th.github.io/categories/JavaEE/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://lan5th.github.io/2021/10/06/%E6%9D%82%E9%A1%B9/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://lan5th.github.io/2021/10/06/%E6%9D%82%E9%A1%B9/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-10-06T02:07:13.432Z</published>
    <updated>2021-12-15T08:09:18.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式概述"><a href="#设计模式概述" class="headerlink" title="设计模式概述"></a>设计模式概述</h1><h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h2><ul><li>创建型模式，共五种<ul><li><a href="#FactoryMethod">工厂方法模式</a></li><li><a href="#AbstractFactory">抽象工厂模式</a></li><li><a href="#Singleton">单例模式</a></li><li><a href="#Builder">建造者模式</a></li><li><a href="#Prototype">原型模式</a></li></ul></li><li>结构型模式，共七种<ul><li><a href="#Adapter">适配器模式</a></li><li><a href="#Decorator">装饰器模式</a></li><li><a href="#Proxy">代理模式</a></li><li><a href="#Facade">外观模式</a></li><li><a href="#Bridge">桥接模式</a></li><li><a href="#Composite">组合模式</a></li><li><a href="#Flyweight">享元模式</a></li></ul></li><li>行为型模式，共十一种<ul><li><a href="#Strategy">策略模式</a></li><li><a href="#TemplateMethod">模板方法模式</a></li><li><a href="#Observer">观察者模式</a></li><li><a href="#Iterator">迭代子模式</a></li><li><a href="#ChainOfResponsibility">责任链模式</a></li><li><a href="#Command">命令模式</a></li><li><a href="#Memento">备忘录模式</a></li><li><a href="#State">状态模式</a></li><li><a href="#Visitor">访问者模式</a></li><li><a href="#Mediator">中介者模式</a></li><li><a href="#Interpreter">解释器模式</a></li></ul></li></ul><p><img src="https://img-blog.csdn.net/20180820002505651?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3R0eHM5OTk4OQ" alt="20180820002505651 (761×914) (csdn.net)"></p><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><ol><li><p><strong>开闭原则</strong>（Open Close Principle）</p><p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。</p><p>详细介绍：<a href="https://blog.csdn.net/lovelion/article/details/7537584">https://blog.csdn.net/lovelion/article/details/7537584</a></p></li><li><p><strong>里氏代换原则</strong>（Liskov Substitution Principle）</p><p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</p><p>详细介绍：<a href="https://blog.csdn.net/lovelion/article/details/7540445">https://blog.csdn.net/lovelion/article/details/7540445</a></p></li><li><p><strong>依赖倒置原则</strong>（Dependence Inversion Principle）</p><p>这个是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p><p>详解介绍：<a href="https://blog.csdn.net/lovelion/article/details/7562783">https://blog.csdn.net/lovelion/article/details/7562783</a></p></li><li><p><strong>接口隔离原则</strong>（Interface Segregation Principle）</p><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p><p>详细介绍：<a href="https://blog.csdn.net/lovelion/article/details/7562842">https://blog.csdn.net/lovelion/article/details/7562842</a></p></li><li><p><strong>迪米特法则</strong>（最少知道原则）（Demeter Principle）</p><p>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><p>详细介绍：<a href="https://blog.csdn.net/lovelion/article/details/7563445">https://blog.csdn.net/lovelion/article/details/7563445</a></p></li><li><p><strong>单一职责原则</strong>（Single-Responsibility-Principle）</p><p>核心：一个类只负责一个功能领域中相应的职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。 </p><p>思想：如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏。</p><p>详细介绍：<a href="https://blog.csdn.net/lovelion/article/details/7536542">https://blog.csdn.net/lovelion/article/details/7536542</a></p></li></ol><p>原文连接：<a href="https://blog.csdn.net/ttxs99989/article/details/81844135">设计模式的三大分类及六大原则</a></p><h1 id="适应设计模式"><a href="#适应设计模式" class="headerlink" title="适应设计模式"></a>适应设计模式</h1><h2 id="Iterator模式"><a href="#Iterator模式" class="headerlink" title="Iterator模式"></a><span id="Iterator">Iterator模式</span></h2><p>迭代器模式–一个一个遍历</p><h3 id="Iterator模式中的角色"><a href="#Iterator模式中的角色" class="headerlink" title="Iterator模式中的角色"></a>Iterator模式中的角色</h3><ul><li>迭代器接口Iterator：定义hasNext和next方法</li><li>迭代器的实现类BookShelf</li><li>集合接口Aggregate：定义迭代器</li><li>集合的实现类BookShelfIterator</li></ul><p><code>Iterator.java</code>迭代器接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Aggregate.java</code>集合接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Iterator <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看实现类</p><p><code>Book.java</code>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BookShelf.java</code>实现集合接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelf</span> <span class="keyword">implements</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Book books[];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookShelf</span><span class="params">(<span class="keyword">int</span> maxsize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books = <span class="keyword">new</span> Book[maxsize];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBookAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> books[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendBook</span><span class="params">(Book book)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books[last] = book;</span><br><span class="line">        last++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//定义迭代器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BookShelfIterator(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BookShelfIterator.java</code>实现迭代器接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelfIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookShelf bookShelf;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookShelfIterator</span><span class="params">(BookShelf bookShelf)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookShelf = bookShelf;</span><br><span class="line">        <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; bookShelf.getLength())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book book = bookShelf.getBookAt(index);</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：使用迭代器进行遍历输出，而不涉及集合类本身的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BookShelf bookShelf = <span class="keyword">new</span> BookShelf(<span class="number">4</span>);</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;倚天屠龙记&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;葵花宝典&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;九阳真经&quot;</span>));</span><br><span class="line">        bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;神雕侠侣&quot;</span>));</span><br><span class="line">        Iterator it = bookShelf.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            Book book = (Book) it.next();</span><br><span class="line">            System.out.println(book.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Iterator模式的特点"><a href="#Iterator模式的特点" class="headerlink" title="Iterator模式的特点"></a>Iterator模式的特点</h3><ul><li>在我们使用while循环来进行遍历时，整个操作不依赖于集合类的具体实现，就算集合类不再使用数组而选择Vector取而代之，只要集合类中的Iterator方法能正确的返回Iterator实例，即使不对迭代器的使用者进行修改，遍历代码都能正常工作</li><li>由于上一条的特点：“将遍历功能置于Aggregate角色之外是Iterator的一个特征”，因此可以针对同一个集合角色编写多个Iterator角色</li><li>对Java集合中的元素进行清除只能使用迭代器</li></ul><h2 id="Adapter模式"><a href="#Adapter模式" class="headerlink" title="Adapter模式"></a><span id="Adapter">Adapter模式</span></h2><p>适配器模式–添加适配器以便复用</p><p>Adaper模式有以下两种模式：</p><ul><li>类适配器模式（使用继承）</li><li>对象适配器模式（使用委托）</li></ul><h3 id="类适配模式"><a href="#类适配模式" class="headerlink" title="类适配模式"></a>类适配模式</h3><p><code>OriginBanner.java</code>被适配类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OriginBanner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String string;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OriginBanner</span><span class="params">(String string)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.string = string;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showWithParen</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(&quot;</span>+string+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showWithAster</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;*&quot;</span>+string+<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PrintInterface</code>业务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PrintInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printWeak</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printStrong</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PrintBannerAdapter</code>适配器类继承被适配类并调用被适配类的方法来实现业务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintBannerAdapter</span> <span class="keyword">extends</span> <span class="title">OriginBanner</span> <span class="keyword">implements</span> <span class="title">PrintInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrintBannerAdapter</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printWeak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.showWithParen();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStrong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.showWithAster();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：调用业务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PrintBannerAdapter adapter = <span class="keyword">new</span> PrintBannerAdapter(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        adapter.printWeak();</span><br><span class="line">        adapter.printStrong();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象适配模式"><a href="#对象适配模式" class="headerlink" title="对象适配模式"></a>对象适配模式</h3><p>将业务接口改为抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintAbstract</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printWeak</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printStrong</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器继承抽象类而在内部实例化被适配类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里继承的是PrintAbstract抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintBannerAdapter</span> <span class="keyword">extends</span> <span class="title">PrintAbstract</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实例化原实现类</span></span><br><span class="line">    <span class="keyword">private</span> OriginBanner banner;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrintBannerAdapter</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.banner = <span class="keyword">new</span> OriginBanner(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printWeak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        banner.showWithParen();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStrong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        banner.showWithAster();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Adapter模式中的角色"><a href="#Adapter模式中的角色" class="headerlink" title="Adapter模式中的角色"></a>Adapter模式中的角色</h3><ul><li>需求接口/抽象类PrintInterface、PrintAbstract：定义请求者调用的方法</li><li>请求者Main</li><li>被适配类OriginBanner</li><li>适配器类PrintBannerAdapter：</li></ul><h3 id="Adapter模式的特点"><a href="#Adapter模式的特点" class="headerlink" title="Adapter模式的特点"></a>Adapter模式的特点</h3><p>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><p>例如：在解决版本升级和兼容性问题时，可以使用Adapter模式来使新版本的接口兼容老版本的实现类</p><h1 id="交给子类"><a href="#交给子类" class="headerlink" title="交给子类"></a>交给子类</h1><h2 id="Template-Method模式"><a href="#Template-Method模式" class="headerlink" title="Template Method模式"></a><span id="TemplateMethod">Template Method模式</span></h2><p>模板模式–将具体处理交给子类</p><h3 id="Template-Method模式中的角色"><a href="#Template-Method模式中的角色" class="headerlink" title="Template Method模式中的角色"></a>Template Method模式中的角色</h3><ul><li>模板：抽象类AbstractDisplay</li><li>具体类：抽象类的子类DisplayA和DisplayB</li></ul><p>模板：抽象类<code>AbstractDisplay.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDisplay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//调用print方法，并且不能被子类所重写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">formalPrint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类1：<code>DisplayA.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayA</span> <span class="keyword">extends</span> <span class="title">AbstractDisplay</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String string;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DisplayA</span><span class="params">(String string)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.string = string;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> + string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类2：<code>DisplayB.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayB</span> <span class="keyword">extends</span> <span class="title">AbstractDisplay</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String string;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DisplayB</span><span class="params">(String string)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.string = string;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(string + <span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractDisplay displayA = <span class="keyword">new</span> DisplayA(<span class="string">&quot;testA&quot;</span>);</span><br><span class="line">        AbstractDisplay displayB = <span class="keyword">new</span> DisplayB(<span class="string">&quot;testB&quot;</span>);</span><br><span class="line">        displayA.formalPrint();</span><br><span class="line">        displayB.formalPrint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Template-Method模式的特点"><a href="#Template-Method模式的特点" class="headerlink" title="Template Method模式的特点"></a>Template Method模式的特点</h3><ul><li>父类的模板方法中已经定义了调用方法的逻辑关系（这里表现为formalPrint调用了5次print），无需在每个子类中再实现算法</li><li>在上面的示例中不论是DisplayA还是DisplayB的实例都是保存在AbstractDisplay类型的变量中的，这样编写的优点是，即使没有指定子类的具体种类，程序也能正常工作</li></ul><p><strong>父类与子类之间协作的必要性</strong></p><p>如果将更多的方法放在父类中会导致子类更轻松，但也降低了子类的灵活性；反之，父类实现方法过少，子类会变得臃肿不堪，还可能会导致大量的代码重复</p><h2 id="Factory-Method模式"><a href="#Factory-Method模式" class="headerlink" title="Factory Method模式"></a><span id="FactoryMethod">Factory Method模式</span></h2><p>工厂模式–将实例的生成交给子类</p><h3 id="Factory-Method模式中的角色"><a href="#Factory-Method模式中的角色" class="headerlink" title="Factory Method模式中的角色"></a>Factory Method模式中的角色</h3><ul><li>产品的抽象类Product：定义了实例所持有的接口</li><li>工厂的抽象类Factory：不使用new创建实例，而是使用抽象方法createProduct来防止耦合</li><li>产品实现类Product</li><li>工厂实现类Factory</li></ul><p>下面的示例结合了模板模式来实现</p><p>抽象类<code>Product.java</code>代表产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类<code>Factory.java</code>代表工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Product <span class="title">create</span><span class="params">(String owner)</span></span>&#123;</span><br><span class="line">        Product product = createProduct(owner);</span><br><span class="line">        registerProduct(product);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用实例化的方法而不是直接new对象来减轻耦合性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">createProduct</span><span class="params">(String owner)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">registerProduct</span><span class="params">(Product product)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>IDCard.java</code>实现产品类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDCard</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String owner;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IDCard</span><span class="params">(String owner)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在制作&quot;</span> + owner + <span class="string">&quot;的ID卡&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.owner = owner;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在使用&quot;</span> + owner + <span class="string">&quot;的ID卡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOwner</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>IdCardFactory.java</code>实现工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdCardFactory</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; owners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> <span class="comment">//实现实例化对象的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">(String owner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IDCard(owner);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerProduct</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        owners.add(((IDCard)product).getOwner());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getOwners</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> owners;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Factory factory = <span class="keyword">new</span> IdCardFactory();</span><br><span class="line">        Product card1 = factory.create(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">        Product card2 = factory.create(<span class="string">&quot;user2&quot;</span>);</span><br><span class="line">        Product card3 = factory.create(<span class="string">&quot;user3&quot;</span>);</span><br><span class="line">        card1.use();</span><br><span class="line">        card2.use();</span><br><span class="line">        card3.use();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂模式的作用"><a href="#工厂模式的作用" class="headerlink" title="工厂模式的作用"></a>工厂模式的作用</h3><p>父类决定实例的生成方式，但不决定需要生成的具体的类，这样可以将生成实例的框架与实际负责生成实例的类进行解耦</p><h1 id="生成实例"><a href="#生成实例" class="headerlink" title="生成实例"></a>生成实例</h1><h2 id="Singleton模式"><a href="#Singleton模式" class="headerlink" title="Singleton模式"></a><span id="Singleton">Singleton模式</span></h2><p>单例模式–只有一个实例</p><p>目的：确保任何情况下只生成一个实例</p><p>最大的特点：构造器私有</p><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p>提前实例化对象，可能会浪费空间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hungry</span> </span>&#123;</span><br><span class="line">    <span class="comment">//加载类的时候就进行实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Hungry HUNGRY = <span class="keyword">new</span> Hungry();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Hungry</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HUNGRY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><p>在获取实例时，对象不存在再实例化对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lazy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lazy lazy;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Lazy</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Lazy <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//实例不存在则实例化</span></span><br><span class="line">        <span class="keyword">if</span> (lazy == <span class="keyword">null</span>)&#123;</span><br><span class="line">            lazy = <span class="keyword">new</span> Lazy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内部类模式"><a href="#内部类模式" class="headerlink" title="内部类模式"></a>内部类模式</h3><p>能达到双检锁方式一样的功效，但实现更简单</p><p>这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Holder</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Holder <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.HOLDER;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//内部类内实例化对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Holder HOLDER = <span class="keyword">new</span> Holder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DCL懒汉式"><a href="#DCL懒汉式" class="headerlink" title="DCL懒汉式"></a>DCL懒汉式</h3><p>采用双锁机制，安全且在多线程情况下能保持高性能，但还是不能防止反射机制获取构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyDCL</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyDCL lazyDCL;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyDCL</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyDCL <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//实例不存在则实例化</span></span><br><span class="line">        <span class="keyword">if</span> (lazyDCL == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//对类加锁，使其获得原子性</span></span><br><span class="line">            <span class="keyword">synchronized</span> (LazyDCL.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (lazyDCL == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    lazyDCL = <span class="keyword">new</span> LazyDCL();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyDCL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>简洁，自动支持序列化机制，绝对防止多次实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  EnumSingle &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="comment">//这里使用构造方法测试初始化次数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EnumSingle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//这里是单例对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际使用方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EnumSingle instance = EnumSingle.INSTANCE;</span><br><span class="line">instance.sayHello();</span><br></pre></td></tr></table></figure><p>测试获取多实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">    Constructor&lt;EnumSingle&gt; constructor = EnumSingle.class.getDeclaredConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">    constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    EnumSingle instance = constructor.newInstance();</span><br><span class="line">    System.out.println(instance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：不允许利用反射获取实例：<code>java.lang.IllegalArgumentException: Cannot reflectively create enum objects</code></p><h2 id="Prototype模式"><a href="#Prototype模式" class="headerlink" title="Prototype模式"></a><span id="Prototype">Prototype模式</span></h2><p>原型模式–通过复制生成实例</p><p>可以通过clone方法来实现实例克隆</p><h3 id="Prototype模式中的角色"><a href="#Prototype模式中的角色" class="headerlink" title="Prototype模式中的角色"></a>Prototype模式中的角色</h3><ul><li>产品接口Product继承了Cloneable标记型接口</li><li>实现类UnderlinePen调用<code>clone()</code>方法实现实例克隆</li></ul><p>产品接口<code>Product.java</code>，<code>clone()</code>是Object类的方法，这里Product继承了Cloneable这个标记型接口，Product的实现类都可以调用clone方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> <span class="keyword">extends</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(String s)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">createClone</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类<code>UnderlinePen.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnderlinePen</span> <span class="keyword">implements</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String decoChar;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnderlinePen</span><span class="params">(String decoChar)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.decoChar = decoChar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">createClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Product p = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            p = (Product) clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Product pen = <span class="keyword">new</span> UnderlinePen(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        pen.use(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        Product penClone = pen.createClone();</span><br><span class="line">        penClone.use(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Prototype模式使用情景"><a href="#Prototype模式使用情景" class="headerlink" title="Prototype模式使用情景"></a>Prototype模式使用情景</h3><ul><li>对象种类繁多，无法合并到同一个类中时</li><li>难以根据类生成实例时</li><li>想要解耦框架与生成的实例时</li></ul><h2 id="Builder模式"><a href="#Builder模式" class="headerlink" title="Builder模式"></a><span id="Builder">Builder模式</span></h2><p>建造者模式–组装复杂的实例</p><h3 id="Builder模式中的角色"><a href="#Builder模式中的角色" class="headerlink" title="Builder模式中的角色"></a>Builder模式中的角色</h3><ul><li>监工Director：负责与Builder沟通，但不关心具体是哪一个Builder工作</li><li>建造者抽象类Builder：类似于包工头，定义和协调需要完成的工作，具体工作由子类来完成</li><li>建造者实现类TextBuilder和HtmlBuilder：完成每一项单个工作</li><li>使用者：类似于业主，只与Director进行沟通，不关心底层的实现逻辑</li></ul><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/IMG_20211006_165124.jpg" style="zoom: 200%;" /><p>监工类<code>Director.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder=builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String [] items1=<span class="keyword">new</span> String[]&#123;<span class="string">&quot;奏国歌&quot;</span>,<span class="string">&quot;升国旗&quot;</span>&#125;;</span><br><span class="line">        String [] items2=<span class="keyword">new</span> String[]&#123;<span class="string">&quot;观众鼓掌&quot;</span>,<span class="string">&quot;有序撤离&quot;</span>&#125;;</span><br><span class="line">        builder.makeTitle(<span class="string">&quot;学生日记&quot;</span>);</span><br><span class="line">        builder.makeString(<span class="string">&quot;毕业典礼&quot;</span>);</span><br><span class="line">        builder.makeItems(items1);</span><br><span class="line">        builder.makeString(<span class="string">&quot;典礼结束&quot;</span>);</span><br><span class="line">        builder.makeItems(items2);</span><br><span class="line">        builder.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建造者抽象类<code>Builder.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeString</span><span class="params">(String str)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeTitle</span><span class="params">(String title)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeItems</span><span class="params">(String[] items)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建造者实现类1<code>TextBuilder.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        buffer.append(<span class="string">&quot;=====================&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        buffer.append(<span class="string">&quot;[&quot;</span> + title + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeString</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        buffer.append(<span class="string">&quot;@&quot;</span> + str + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeItems</span><span class="params">(String[] items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">            buffer.append(<span class="string">&quot;   .&quot;</span> + items[i] + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        buffer.append(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建造者实现类2<code>HtmlBuilder.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String filename;</span><br><span class="line">    <span class="keyword">private</span> PrintWriter writer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        filename = <span class="string">&quot;D:\\&quot;</span> + title + <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(filename));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class="string">&quot;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;h1&gt;&quot;</span> + title + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeString</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;p&gt;&quot;</span> + str + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeItems</span><span class="params">(String[] items)</span> </span>&#123;</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;ul&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">            writer.println(<span class="string">&quot;&lt;li&gt;&quot;</span> + items[i] + <span class="string">&quot;&lt;/li&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;/ul&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        writer.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String choice = <span class="string">&quot;text&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (choice.equals(<span class="string">&quot;text&quot;</span>)) &#123;</span><br><span class="line">            TextBuilder t = <span class="keyword">new</span> TextBuilder();</span><br><span class="line">            Director d = <span class="keyword">new</span> Director(t);</span><br><span class="line">            d.construct();</span><br><span class="line">            System.out.println(t.getResult());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (choice.equals(<span class="string">&quot;html&quot;</span>)) &#123;</span><br><span class="line">            HtmlBuilder html = <span class="keyword">new</span> HtmlBuilder();</span><br><span class="line">            Director d = <span class="keyword">new</span> Director(html);</span><br><span class="line">            d.construct();</span><br><span class="line">            System.out.println(html.getResult());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            usage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用 plain，编辑文本文件&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用 html，编辑HTML文件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Builder模式的特点"><a href="#Builder模式的特点" class="headerlink" title="Builder模式的特点"></a>Builder模式的特点</h3><p>每个角色只与其相邻的角色有所沟通，使用者只知道Director，Director只知道Builder，Builder负责沟通协调各个具体的Builder，正是因为这种“不知道”的特点，才能够较为容易的替换组件，组件才具有高价值，我们需要时刻关注这种可替换性</p><h2 id="AbstractFactory模式"><a href="#AbstractFactory模式" class="headerlink" title="AbstractFactory模式"></a><span id="AbstractFactory">AbstractFactory模式</span></h2><p>抽象工厂模式–将关联零件组装成产品</p><p>抽象类与工厂模式的结合</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg"></p><p>AbstractFactory模式的特点：</p><ul><li>易于增加具体的工厂</li><li>难以增加新的零件，因为每增加一个抽象的零件，都需要在每一个具体的工厂中都添加对应具体的零件，已经编写完成的具体工厂越多，修改的工作量就会越大</li></ul><h1 id="分开考虑"><a href="#分开考虑" class="headerlink" title="分开考虑"></a>分开考虑</h1><h2 id="Bridge模式"><a href="#Bridge模式" class="headerlink" title="Bridge模式"></a><span id="Bridge">Bridge模式</span></h2><p>桥接模式–将类的功能层次结构与实现层次结构分离</p><p>这里有一篇详细介绍桥接模式的文章<a href="https://www.runoob.com/w3cnote/bridge-pattern2.html">桥接模式 | 菜鸟教程 (runoob.com)</a></p><h3 id="Bridge模式中的角色"><a href="#Bridge模式中的角色" class="headerlink" title="Bridge模式中的角色"></a>Bridge模式中的角色</h3><ul><li>一个业务类Display：私有并调用接口类DisplayImpl的具体业务</li><li>一个扩展抽象类CountDisplay：继承业务类Display，实现更加复杂的功能</li><li>一个业务接口/抽象类DisplayImpl：来定义具体业务</li><li>一个业务具体实现类StringDisplayImpl：继承或实现DisplayImpl，完成具体功能的实现</li></ul><h3 id="Bridge模式的特点"><a href="#Bridge模式的特点" class="headerlink" title="Bridge模式的特点"></a>Bridge模式的特点</h3><ul><li>桥接模式即将抽象部分与它的实现部分分离开来，使他们都可以独立变化</li><li>桥接模式将继承关系转化成关联关系（委托关系），它降低了类与类之间的耦合度，减少了系统中类的数量，也减少了代码量</li></ul><p>优点：</p><ul><li>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统，即分开后更容易扩展</li><li>实现细节对客户不可见，可以对用户隐藏实现细节</li></ul><h2 id="Strategy模式"><a href="#Strategy模式" class="headerlink" title="Strategy模式"></a><span id="Strategy">Strategy模式</span></h2><p>策略模式–整体的替换算法</p><p>定义一个策略接口，然后创建不同的策略接口实现类来实现不同的策略</p><h3 id="Strategy模式的角色"><a href="#Strategy模式的角色" class="headerlink" title="Strategy模式的角色"></a>Strategy模式的角色</h3><ul><li>策略接口Strategy</li><li>不同的策略实现类OperationAdd, OperationSubtract, OperationMultiply</li><li>策略封装类Context</li></ul><p><code>Strategy.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num1 + num2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationSubtract</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num1 - num2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationMultiply</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num1 * num2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Context.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeStrategy</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> strategy.doOperation(num1, num2);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperationAdd());    </span><br><span class="line">      System.out.println(<span class="string">&quot;10 + 5 = &quot;</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line"> </span><br><span class="line">      context = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperationSubtract());      </span><br><span class="line">      System.out.println(<span class="string">&quot;10 - 5 = &quot;</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line"> </span><br><span class="line">      context = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperationMultiply());    </span><br><span class="line">      System.out.println(<span class="string">&quot;10 * 5 = &quot;</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><p>使用委托这种弱关联关系可以方便的整体替换算法</p><h1 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h1><h2 id="Composite模式"><a href="#Composite模式" class="headerlink" title="Composite模式"></a><span id="Composite">Composite模式</span></h2><p>组合模式–容器与内容的一致性</p><p>将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/20210817-composite-composite.svg"></p><h3 id="Composite模式的特点"><a href="#Composite模式的特点" class="headerlink" title="Composite模式的特点"></a>Composite模式的特点</h3><ul><li>以递归的形式使得同一类或相近的类(如File和Directory都是文件系统中的子项)结合成树状结构</li></ul><p>优点：</p><ul><li>高层模块调用简单</li><li>节点增加自由</li></ul><p>缺点：</p><ul><li>违背了依赖倒置原则</li></ul><h2 id="Decorator模式"><a href="#Decorator模式" class="headerlink" title="Decorator模式"></a><span id="Decorator">Decorator模式</span></h2><p>装饰器模式–装饰边框与装饰物的一致性</p><h3 id="Decorator模式中的角色"><a href="#Decorator模式中的角色" class="headerlink" title="Decorator模式中的角色"></a>Decorator模式中的角色</h3><ul><li>被装饰类的总接口/抽象类Shape</li><li>装饰器的抽象类ShapeDecorator</li><li>装饰器的实现类RedShapeDecorator</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/20210420-decorator-1-decorator-decorator.svg"></p><p>==这里需要注意：装饰器的抽象类是实现并私有Shape类接口的，而装饰器的实现类继承抽象类，因此被装饰类和装饰器类的所有组件都具有一致性==</p><h3 id="Decorator模式的特点"><a href="#Decorator模式的特点" class="headerlink" title="Decorator模式的特点"></a>Decorator模式的特点</h3><ul><li>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能</li><li>可以在不想增加很多子类的情况下扩展类时使用装饰器模式，动态的增加功能</li></ul><h1 id="访问数据结构"><a href="#访问数据结构" class="headerlink" title="访问数据结构"></a>访问数据结构</h1><h2 id="Visitor模式"><a href="#Visitor模式" class="headerlink" title="Visitor模式"></a><span id="Visitor">Visitor模式</span></h2><p>以往如果我们要对一些数据进行处理，会在这些数据结构的类中编写处理方法，如果我们需要新增处理方法，就需要修改原来的数据结构类</p><p>visitor模式旨在将数据结构与对他们的处理从一个类中分离出来</p><h3 id="Visitor模式中的角色"><a href="#Visitor模式中的角色" class="headerlink" title="Visitor模式中的角色"></a>Visitor模式中的角色</h3><ul><li>数据结构总接口ComputerPart：定义accept方法</li><li>数据结构的具体实现类Computer、KeyBoard、Mouse、Monitor：实现accept方法–根据不同的业务逻辑调用visitor的visit()方法</li><li>访问者接口或抽象类ComputerPartDisplayVisitor：定义数据处理方法</li><li>访问者实现类ComputerPartVisitor：编写具体的数据处理方法</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/visitor_pattern_uml_diagram.jpg"></p><p>数据结构接口<code>ComputerPart.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComputerPart</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(ComputerPartVisitor computerPartVisitor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各个数据结构实现类：调用不同visitor的visit()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Keyboard</span>  <span class="keyword">implements</span> <span class="title">ComputerPart</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(ComputerPartVisitor computerPartVisitor)</span> </span>&#123;</span><br><span class="line">      computerPartVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Monitor</span>  <span class="keyword">implements</span> <span class="title">ComputerPart</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(ComputerPartVisitor computerPartVisitor)</span> </span>&#123;</span><br><span class="line">      computerPartVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mouse</span>  <span class="keyword">implements</span> <span class="title">ComputerPart</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(ComputerPartVisitor computerPartVisitor)</span> </span>&#123;</span><br><span class="line">      computerPartVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> <span class="keyword">implements</span> <span class="title">ComputerPart</span> </span>&#123;</span><br><span class="line">   ComputerPart[] parts;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">()</span></span>&#123;</span><br><span class="line">      parts = <span class="keyword">new</span> ComputerPart[] &#123;<span class="keyword">new</span> Mouse(), <span class="keyword">new</span> Keyboard(), <span class="keyword">new</span> Monitor()&#125;;      </span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(ComputerPartVisitor computerPartVisitor)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parts.length; i++) &#123;</span><br><span class="line">         parts[i].accept(computerPartVisitor);</span><br><span class="line">      &#125;</span><br><span class="line">      computerPartVisitor.visit(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问者接口<code>ComputerPartVisitor.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComputerPartVisitor</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Computer computer)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Mouse mouse)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Keyboard keyboard)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Monitor monitor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问者实现类<code>ComputerPartDisplayVisitor.java</code>：在这里实际操作数据类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerPartDisplayVisitor</span> <span class="keyword">implements</span> <span class="title">ComputerPartVisitor</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Computer computer)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Displaying Computer.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Mouse mouse)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Displaying Mouse.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Keyboard keyboard)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Displaying Keyboard.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Monitor monitor)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Displaying Monitor.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VisitorPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">      ComputerPart computer = <span class="keyword">new</span> Computer();</span><br><span class="line">      computer.accept(<span class="keyword">new</span> ComputerPartDisplayVisitor());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Visitor模式的特点"><a href="#Visitor模式的特点" class="headerlink" title="Visitor模式的特点"></a>Visitor模式的特点</h3><ul><li>具体数据元素的实现类调用accept()方法，而后又visitor的visit()方法：element接受visitor，而visitor又访问数据元素，这种消息分发的方式称为双重分发</li><li>解决了数据结构和易变的操作耦合问题</li></ul><p>优点：</p><ul><li>符合单一职责原则</li><li>易于添加visitor，优秀的扩展性和灵活性</li></ul><p>缺点：</p><ul><li>具体元素对访问者公布细节，违反了迪米特原则</li><li>违反了依赖倒置原则，依赖于具体类，而不是抽象类</li><li>难以扩展数据元素：需要对所有visitor加以修改</li></ul><h2 id="Chain-of-Responsibility"><a href="#Chain-of-Responsibility" class="headerlink" title="Chain of Responsibility"></a><span id="ChainOfResponsibility">Chain of Responsibility</span></h2><p>责任链模式–推卸责任</p><p>就像我们有时去办理业务，各个部门之间的会互相推卸责任，各自只处理自身所负责的一部分业务</p><h3 id="Chain-of-Responsibility中的角色"><a href="#Chain-of-Responsibility中的角色" class="headerlink" title="Chain of Responsibility中的角色"></a>Chain of Responsibility中的角色</h3><ul><li>抽象类业务类AbstractLogger</li><li>业务类实现类ConsoleLogger、ErrorLogger、FileLogger</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/2021-chain-of-responsibility.svg"></p><p>抽象类业务类<code>AbstractLogger.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> INFO = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> DEBUG = <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> ERROR = <span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">int</span> level;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//责任链中的下一个元素</span></span><br><span class="line">   <span class="keyword">protected</span> AbstractLogger nextLogger;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLogger</span><span class="params">(AbstractLogger nextLogger)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.nextLogger = nextLogger;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logMessage</span><span class="params">(<span class="keyword">int</span> level, String message)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.level &lt;= level)&#123;</span><br><span class="line">         write(message);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(nextLogger !=<span class="keyword">null</span>)&#123;</span><br><span class="line">         nextLogger.logMessage(level, message);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同级别的Logger实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsoleLogger</span> <span class="keyword">extends</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ConsoleLogger</span><span class="params">(<span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.level = level;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>&#123;    </span><br><span class="line">      System.out.println(<span class="string">&quot;Standard Console::Logger: &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorLogger</span> <span class="keyword">extends</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ErrorLogger</span><span class="params">(<span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.level = level;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>&#123;    </span><br><span class="line">      System.out.println(<span class="string">&quot;Error Console::Logger: &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileLogger</span> <span class="keyword">extends</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FileLogger</span><span class="params">(<span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.level = level;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>&#123;    </span><br><span class="line">      System.out.println(<span class="string">&quot;File::Logger: &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="comment">//创建责任链</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AbstractLogger <span class="title">getChainOfLoggers</span><span class="params">()</span></span>&#123;</span><br><span class="line">      AbstractLogger errorLogger = <span class="keyword">new</span> ErrorLogger(AbstractLogger.ERROR);</span><br><span class="line">      AbstractLogger fileLogger = <span class="keyword">new</span> FileLogger(AbstractLogger.DEBUG);</span><br><span class="line">      AbstractLogger consoleLogger = <span class="keyword">new</span> ConsoleLogger(AbstractLogger.INFO);</span><br><span class="line"> </span><br><span class="line">      errorLogger.setNextLogger(fileLogger);</span><br><span class="line">      fileLogger.setNextLogger(consoleLogger);</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">return</span> errorLogger;  </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      AbstractLogger loggerChain = getChainOfLoggers();</span><br><span class="line"> </span><br><span class="line">      loggerChain.logMessage(AbstractLogger.INFO, <span class="string">&quot;This is an information.&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      loggerChain.logMessage(AbstractLogger.DEBUG, </span><br><span class="line">         <span class="string">&quot;This is a debug level information.&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      loggerChain.logMessage(AbstractLogger.ERROR, </span><br><span class="line">         <span class="string">&quot;This is an error information.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Chain-of-Responsibility的特点"><a href="#Chain-of-Responsibility的特点" class="headerlink" title="Chain of Responsibility的特点"></a>Chain of Responsibility的特点</h3><ul><li>弱化了发送请求的类和处理业务的类之间的关系</li><li>可以动态地改变责任链</li><li>每个业务类都专注于自己的工作</li></ul><p>优点：</p><ul><li>降低耦合度</li><li>简化了对象</li><li>增强给对象指派职责的灵活性</li><li>便于增添新的业务类</li></ul><p>缺点：</p><ul><li>不能保证请求一定会被接收</li><li>系统性能稍微降低</li><li>运行过程复杂，不容易排错</li></ul><h1 id="简单化"><a href="#简单化" class="headerlink" title="简单化"></a>简单化</h1><h2 id="Facade模式"><a href="#Facade模式" class="headerlink" title="Facade模式"></a><span id="Facade">Facade模式</span></h2><p>外观模式–简单窗口</p><h3 id="Facade模式的角色"><a href="#Facade模式的角色" class="headerlink" title="Facade模式的角色"></a>Facade模式的角色</h3><ul><li>外部调用的窗口类：ShapeMaker</li><li>业务接口类：Shape</li><li>业务实现类：Circle、Rectangel、Square</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/20201015-facade.svg"></p><h3 id="Facade模式的特点"><a href="#Facade模式的特点" class="headerlink" title="Facade模式的特点"></a>Facade模式的特点</h3><p>外观模式隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。</p><p>优点：</p><ul><li>减少系统的相互依赖，接口变少，调用方便</li><li>提高灵活性</li><li>提高安全性</li></ul><p>缺点：</p><ul><li>不符合开闭原则，修改组件麻烦</li></ul><h2 id="Mediator模式"><a href="#Mediator模式" class="headerlink" title="Mediator模式"></a><span id="Mediator">Mediator模式</span></h2><p>中介者模式–只有一个仲裁者</p><h3 id="Mediator模式中的角色"><a href="#Mediator模式中的角色" class="headerlink" title="Mediator模式中的角色"></a>Mediator模式中的角色</h3><ul><li>中介者抽象类Mediator</li><li>中介者实现类ConcretMediator</li><li>同事类接口Colleague</li><li>同事类实现类ConcreteColleage</li></ul><p><img src="https://img2018.cnblogs.com/blog/1018770/201906/1018770-20190601152147644-1307912298.png"></p><h3 id="Mediator模式的特点"><a href="#Mediator模式的特点" class="headerlink" title="Mediator模式的特点"></a>Mediator模式的特点</h3><ul><li>集中业务逻辑与中介者类中，各个同事类之间的交互集中于调用Mediator类中的实现方法</li><li>各对象不需要显式地相互引用，从而使其耦合松散</li></ul><p>优点：</p><ul><li>降低了类的复杂度，将一对多转化为了一对一</li><li>各个类之间解耦</li><li>符合迪米特原则</li></ul><p>缺点：</p><ul><li>中介者类代码庞大且不易于维护</li></ul><h1 id="管理状态"><a href="#管理状态" class="headerlink" title="管理状态"></a>管理状态</h1><h2 id="Observer模式"><a href="#Observer模式" class="headerlink" title="Observer模式"></a><span id="Observer">Observer模式</span></h2><p>观察者模式–发送状态变化通知</p><p>另一个称呼为Publish-Subscribe模式，即发布订阅</p><h3 id="Observer模式中的对象"><a href="#Observer模式中的对象" class="headerlink" title="Observer模式中的对象"></a>Observer模式中的对象</h3><ul><li>主题类Subject</li><li>观察者抽象类Observer</li><li>观察者实现类BinaryObserver、OctalObserver、HexaObserver</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg"></p><p>主题类<code>Subject.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> List&lt;Observer&gt; observers </span><br><span class="line">      = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//更改状态后调用通知所有的观察者方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.state = state;</span><br><span class="line">      notifyAllObservers();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//添加观察者</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">      observers.add(observer);      </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//遍历通知所有观察者</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObservers</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">         observer.update();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察者抽象类<code>Observer.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> Subject subject;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的观察者实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">BinaryObserver</span><span class="params">(Subject subject)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.subject = subject;</span><br><span class="line">      <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println( <span class="string">&quot;Binary String: &quot;</span> </span><br><span class="line">      + Integer.toBinaryString( subject.getState() ) ); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OctalObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">OctalObserver</span><span class="params">(Subject subject)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.subject = subject;</span><br><span class="line">      <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println( <span class="string">&quot;Octal String: &quot;</span> </span><br><span class="line">     + Integer.toOctalString( subject.getState() ) ); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HexaObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HexaObserver</span><span class="params">(Subject subject)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.subject = subject;</span><br><span class="line">      <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println( <span class="string">&quot;Hex String: &quot;</span> </span><br><span class="line">      + Integer.toHexString( subject.getState() ).toUpperCase() ); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">new</span> HexaObserver(subject);</span><br><span class="line">      <span class="keyword">new</span> OctalObserver(subject);</span><br><span class="line">      <span class="keyword">new</span> BinaryObserver(subject);</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">&quot;First state change: 15&quot;</span>);   </span><br><span class="line">      subject.setState(<span class="number">15</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Second state change: 10&quot;</span>);  </span><br><span class="line">      subject.setState(<span class="number">10</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Observer模式的特点"><a href="#Observer模式的特点" class="headerlink" title="Observer模式的特点"></a>Observer模式的特点</h3><p>当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式</p><p>优点：</p><ul><li>观察者和被观察者通过抽象类耦合</li><li>建立了一套触发机制</li></ul><p>缺点：</p><ul><li>如果一个被观察者有太多直接和简洁的观察者，通知所有的观察者会花费很多时间</li><li>只能通知被观察者发生了变化，而不能通知其发生了怎样的变化</li></ul><h2 id="Memento模式"><a href="#Memento模式" class="headerlink" title="Memento模式"></a><span id = "Memento">Memento模式</span></h2><p>备忘录模式–保存对象状态</p><p>使用Memento模式可以实现应用程序的以下功能：</p><ul><li>撤销</li><li>重做</li><li>历史记录</li><li>快照</li></ul><h3 id="Memento模式中的角色"><a href="#Memento模式中的角色" class="headerlink" title="Memento模式中的角色"></a>Memento模式中的角色</h3><ul><li>状态类Memento</li><li>业务类Originator</li><li>状态列表类CareTaker</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/memento_pattern_uml_diagram.jpg"></p><p>状态类<code>Memento.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String state;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.state = state;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务类<code>Originator.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String state;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.state = state;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Memento <span class="title">saveStateToMemento</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStateFromMemento</span><span class="params">(Memento Memento)</span></span>&#123;</span><br><span class="line">      state = Memento.getState();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态列表类<code>CareTaker.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CareTaker</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Memento&gt; mementoList = <span class="keyword">new</span> ArrayList&lt;Memento&gt;();</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Memento state)</span></span>&#123;</span><br><span class="line">      mementoList.add(state);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Memento <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> mementoList.get(index);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MementoPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Originator originator = <span class="keyword">new</span> Originator();</span><br><span class="line">      CareTaker careTaker = <span class="keyword">new</span> CareTaker();</span><br><span class="line">      originator.setState(<span class="string">&quot;State #1&quot;</span>);</span><br><span class="line">      originator.setState(<span class="string">&quot;State #2&quot;</span>);</span><br><span class="line">      careTaker.add(originator.saveStateToMemento());</span><br><span class="line">      originator.setState(<span class="string">&quot;State #3&quot;</span>);</span><br><span class="line">      careTaker.add(originator.saveStateToMemento());</span><br><span class="line">      originator.setState(<span class="string">&quot;State #4&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">&quot;Current State: &quot;</span> + originator.getState());    </span><br><span class="line">      originator.getStateFromMemento(careTaker.get(<span class="number">0</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;First saved State: &quot;</span> + originator.getState());</span><br><span class="line">      originator.getStateFromMemento(careTaker.get(<span class="number">1</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;Second saved State: &quot;</span> + originator.getState());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Memento模式的特点"><a href="#Memento模式的特点" class="headerlink" title="Memento模式的特点"></a>Memento模式的特点</h3><ul><li>在不破坏封装的情况下捕获一个对象的内部状态，并在这个对象之外保存状态，以便恢复</li><li>通过一个专门的备忘录类来专门存储对象状态</li></ul><p>优点：</p><ul><li>提供了可以恢复状态的机制，可以方便的回退到某个历史状态</li><li>实现信息的封装，用户不需要关心保存细节</li></ul><p>缺点：</p><ul><li>消耗内存</li><li>如果需要持久化，还需要考虑有效期和对应应用程序版本的问题</li></ul><h2 id="State模式"><a href="#State模式" class="headerlink" title="State模式"></a><span id="State">State模式</span></h2><p>状态模式–用类表示状态</p><p>不使用State模式的情况下，如果我们要判断对象处于哪一个状态，往往需要编写许多if_else语句来进行判断，而使用类来表示状态可以解决这一问题</p><h3 id="State模式中的角色"><a href="#State模式中的角色" class="headerlink" title="State模式中的角色"></a>State模式中的角色</h3><ul><li>状态类接口State</li><li>状态实现类StartState、StopState</li><li>状态管理类Context</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/state_pattern_uml_diagram.png"></p><p>状态类接口<code>State.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAction</span><span class="params">(Context context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的状态类实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAction</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Player is in start state&quot;</span>);</span><br><span class="line">      context.setState(<span class="keyword">this</span>); </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Start State&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAction</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Player is in stop state&quot;</span>);</span><br><span class="line">      context.setState(<span class="keyword">this</span>); </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Stop State&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态管理类<code>Context.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> State state;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">()</span></span>&#123;</span><br><span class="line">      state = <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.state = state;     </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Context context = <span class="keyword">new</span> Context();</span><br><span class="line"> </span><br><span class="line">      StartState startState = <span class="keyword">new</span> StartState();</span><br><span class="line">      startState.doAction(context);</span><br><span class="line"> </span><br><span class="line">      System.out.println(context.getState().toString());</span><br><span class="line"> </span><br><span class="line">      StopState stopState = <span class="keyword">new</span> StopState();</span><br><span class="line">      stopState.doAction(context);</span><br><span class="line"> </span><br><span class="line">      System.out.println(context.getState().toString());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="State模式的特点"><a href="#State模式的特点" class="headerlink" title="State模式的特点"></a>State模式的特点</h3><p>优点：</p><ul><li>封装了转换规则，易于增加新的状态</li><li>枚举所有可能的状态</li><li>将所有与某个状态有关的操作全部放到某个类中，只需要改变状态的类型就能改变状态的行为</li><li>可以让多个环境对象共享一个状态对象</li></ul><p>缺点：</p><ul><li>增加了系统类和对象的个数</li><li>不易添加新的状态方法</li><li>对开闭原则的支持性不好</li></ul><h1 id="避免浪费"><a href="#避免浪费" class="headerlink" title="避免浪费"></a>避免浪费</h1><h2 id="Flyweight模式"><a href="#Flyweight模式" class="headerlink" title="Flyweight模式"></a><span id="Flyweight">Flyweight模式</span></h2><p>享元模式–共享对象，避免浪费</p><p>通过尽量共享实例来避免new新的实例</p><h3 id="Flyweight模式中的角色"><a href="#Flyweight模式中的角色" class="headerlink" title="Flyweight模式中的角色"></a>Flyweight模式中的角色</h3><ul><li>工厂类ShapeFactory</li><li>业务类接口Shape</li><li>业务实现类Circle</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/20201015-fiyweight.svg"></p><p>工厂类<code>ShapeFactory.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用HashMap保存已经实例化的对象列表</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String, Shape&gt; circleMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getCircle</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//尝试从列表中获取已经实例化的对象</span></span><br><span class="line">      Circle circle = (Circle)circleMap.get(color);</span><br><span class="line">   <span class="comment">//如果无法获取对象再进行实例化</span></span><br><span class="line">      <span class="keyword">if</span>(circle == <span class="keyword">null</span>) &#123;</span><br><span class="line">         circle = <span class="keyword">new</span> Circle(color);</span><br><span class="line">         circleMap.put(color, circle);</span><br><span class="line">         System.out.println(<span class="string">&quot;Creating circle of color : &quot;</span> + color);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> circle;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务类接口<code>Shape.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务实现类<code>Circle.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String color;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> radius;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(String color)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.color = color;     </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.x = x;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.y = y;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">int</span> radius)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.radius = radius;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Circle: Draw() [Color : &quot;</span> + color </span><br><span class="line">         +<span class="string">&quot;, x : &quot;</span> + x +<span class="string">&quot;, y :&quot;</span> + y +<span class="string">&quot;, radius :&quot;</span> + radius);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String colors[] = </span><br><span class="line">      &#123; <span class="string">&quot;Red&quot;</span>, <span class="string">&quot;Green&quot;</span>, <span class="string">&quot;Blue&quot;</span>, <span class="string">&quot;White&quot;</span>, <span class="string">&quot;Black&quot;</span> &#125;;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; <span class="number">20</span>; ++i) &#123;</span><br><span class="line">         Circle circle = </span><br><span class="line">            (Circle)ShapeFactory.getCircle(getRandomColor());</span><br><span class="line">         circle.setX(getRandomX());</span><br><span class="line">         circle.setY(getRandomY());</span><br><span class="line">         circle.setRadius(<span class="number">100</span>);</span><br><span class="line">         circle.draw();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getRandomColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> colors[(<span class="keyword">int</span>)(Math.random()*colors.length)];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRandomX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">int</span>)(Math.random()*<span class="number">100</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRandomY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flyweight模式的特点"><a href="#Flyweight模式的特点" class="headerlink" title="Flyweight模式的特点"></a>Flyweight模式的特点</h3><ul><li>如果要更改被共享的对象，就会对多个引用处造成影响</li><li>应该被共享的信息称为固有信息(Intrinsic信息)，不应当被共享的信息被称为外部信息(Extrinsic信息)</li></ul><p>优点：</p><ul><li>减少了对象的创建，降低系统内存消耗，提高效率</li></ul><p>缺点：</p><ul><li>提高了系统的复杂度，需要分理出外部状态和固有状态，否则会造成系统混乱</li></ul><h2 id="Proxy模式"><a href="#Proxy模式" class="headerlink" title="Proxy模式"></a><span id="Proxy">Proxy模式</span></h2><p>代理模式–只在必要时生成实例</p><h3 id="Proxy模式中的对象"><a href="#Proxy模式中的对象" class="headerlink" title="Proxy模式中的对象"></a>Proxy模式中的对象</h3><ul><li>对象接口Image</li><li>真实的对象RealImage</li><li>代理人ProxyImage</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/20201015-proxy.svg"></p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>对象接口<code>Image.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实对象<code>RealImage.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RealImage</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">      loadFromDisk(fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Displaying &quot;</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFromDisk</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Loading &quot;</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理对象<code>ProxyImage.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyImage</span> <span class="keyword">implements</span> <span class="title">Image</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ProxyImage</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//只在实际执行realImage方法时才会实例化RealImage对象</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(realImage == <span class="keyword">null</span>)&#123;</span><br><span class="line">         realImage = <span class="keyword">new</span> RealImage(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">      realImage.display();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyPatternDemo</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Image image = <span class="keyword">new</span> ProxyImage(<span class="string">&quot;test_10mb.jpg&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 图像将从磁盘加载</span></span><br><span class="line">      image.display(); </span><br><span class="line">      System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="comment">// 图像不需要从磁盘加载</span></span><br><span class="line">      image.display();  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>使用静态代理时，每个代理类只能为一个接口服务，这样在开发中必然会出现许多的代理类</p><p>动态代理就能够实现通过一个代理类完成全部的代理功能</p><p>这里使用Jdk代理实现</p><p>仅修改代理类，实现InvocationHandler接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newProxyInstance</span><span class="params">(Object targetObject)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target=targetObject;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(targetObject.getClass().getClassLoader(),</span><br><span class="line">                targetObject.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Proxying：&quot;</span> + proxy.getClass().getName());</span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了：&quot;</span> + method.getName() + <span class="string">&quot; 返回：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        ImageHandler imageHandler = <span class="keyword">new</span> ImageHandler();</span><br><span class="line">        <span class="comment">//传入需要被代理的实例</span></span><br><span class="line">        Image instance = (Image) imageHandler.newProxyInstance(<span class="keyword">new</span> RealImage(<span class="string">&quot;1.jpg&quot;</span>));</span><br><span class="line">        instance.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Proxy模式的特点"><a href="#Proxy模式的特点" class="headerlink" title="Proxy模式的特点"></a>Proxy模式的特点</h3><p>在我们想要访问一个类时添加一些控制，增加中间层</p><p>优点：</p><ul><li>职责清晰</li><li>高扩展性</li></ul><p>缺点：</p><ul><li>代理对象的存在导致请求处理速度变慢</li></ul><h1 id="用类来表现"><a href="#用类来表现" class="headerlink" title="用类来表现"></a>用类来表现</h1><h2 id="Command模式"><a href="#Command模式" class="headerlink" title="Command模式"></a><span id="Command">Command模式</span></h2><p>命令模式–命令也是类</p><p>将一个请求封装成一个对象，可以记录用户的请求来恢复或重做请求等</p><h3 id="Command模式中的对象"><a href="#Command模式中的对象" class="headerlink" title="Command模式中的对象"></a>Command模式中的对象</h3><ul><li>真实的请求类Stock</li><li>请求接口Order</li><li>请求实现类BuyStock、SellStock：调用Stock的方法</li><li>请求管理类Broker</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/20210830-command-1-command-1.svg"></p><p>请求接口<code>Order.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实请求类<code>Stock.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stock</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> quantity = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Stock [ Name: &quot;</span>+name+<span class="string">&quot;, </span></span><br><span class="line"><span class="string">         Quantity: &quot;</span> + quantity +<span class="string">&quot; ] bought&quot;</span>);</span><br><span class="line">      quantity++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Stock [ Name: &quot;</span>+name+<span class="string">&quot;, </span></span><br><span class="line"><span class="string">         Quantity: &quot;</span> + quantity +<span class="string">&quot; ] sold&quot;</span>);</span><br><span class="line">      quantity--;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的请求实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyStock</span> <span class="keyword">implements</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Stock abcStock;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">BuyStock</span><span class="params">(Stock abcStock)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.abcStock = abcStock;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      abcStock.buy();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellStock</span> <span class="keyword">implements</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Stock abcStock;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SellStock</span><span class="params">(Stock abcStock)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.abcStock = abcStock;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      abcStock.sell();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令调用类<code>Broker.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Broker</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Order&gt; orderList = <span class="keyword">new</span> ArrayList&lt;Order&gt;(); </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeOrder</span><span class="params">(Order order)</span></span>&#123;</span><br><span class="line">      orderList.add(order);      </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">placeOrders</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Order order : orderList) &#123;</span><br><span class="line">         order.execute();</span><br><span class="line">      &#125;</span><br><span class="line">      orderList.clear();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Stock abcStock = <span class="keyword">new</span> Stock();</span><br><span class="line"> </span><br><span class="line">      BuyStock buyStockOrder = <span class="keyword">new</span> BuyStock(abcStock);</span><br><span class="line">      SellStock sellStockOrder = <span class="keyword">new</span> SellStock(abcStock);</span><br><span class="line"> </span><br><span class="line">      Broker broker = <span class="keyword">new</span> Broker();</span><br><span class="line">      broker.takeOrder(buyStockOrder);</span><br><span class="line">      broker.takeOrder(sellStockOrder);</span><br><span class="line"> </span><br><span class="line">      broker.placeOrders();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Command模式的特点"><a href="#Command模式的特点" class="headerlink" title="Command模式的特点"></a>Command模式的特点</h3><ul><li>请求执行顺序：调用者-&gt;命令-&gt;接受者，实际完成具体功能的是接收者</li></ul><p>优点：</p><ul><li>降低系统耦合度</li><li>易于添加新的命令</li></ul><p>缺点：</p><ul><li>可能会导致系统中命令类过多</li></ul><h2 id="Interpreter模式"><a href="#Interpreter模式" class="headerlink" title="Interpreter模式"></a><span id="Interpreter">Interpreter模式</span></h2><p>解释器模式–语法规则也是类</p><p>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子</p><h3 id="Interpreter模式中的对象"><a href="#Interpreter模式中的对象" class="headerlink" title="Interpreter模式中的对象"></a>Interpreter模式中的对象</h3><ul><li>表达式接口</li><li>根据具体需求实现的不同表达式</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2014/08/interpreter_pattern_uml_diagram.jpg"></p><p>==这里仅给出一个示例，具体的应用结构不一定需要与示例保证完全一致==</p><p>表达式接口<code>Expression.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同类型的表达式：其中TerminalExpression用来存储单个的词语，OrExpression和AndExpression用来记录词语之间的并交关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminalExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> String data;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">TerminalExpression</span><span class="params">(String data)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.data = data; </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String context)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(context.contains(data))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> Expression expr1 = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">private</span> Expression expr2 = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">OrExpression</span><span class="params">(Expression expr1, Expression expr2)</span> </span>&#123; </span><br><span class="line">      <span class="keyword">this</span>.expr1 = expr1;</span><br><span class="line">      <span class="keyword">this</span>.expr2 = expr2;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String context)</span> </span>&#123;      </span><br><span class="line">      <span class="keyword">return</span> expr1.interpret(context) || expr2.interpret(context);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> Expression expr1 = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">private</span> Expression expr2 = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">AndExpression</span><span class="params">(Expression expr1, Expression expr2)</span> </span>&#123; </span><br><span class="line">      <span class="keyword">this</span>.expr1 = expr1;</span><br><span class="line">      <span class="keyword">this</span>.expr2 = expr2;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String context)</span> </span>&#123;      </span><br><span class="line">      <span class="keyword">return</span> expr1.interpret(context) &amp;&amp; expr2.interpret(context);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterpreterPatternDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//规则：Robert 和 John 是男性</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Expression <span class="title">getMaleExpression</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Expression robert = <span class="keyword">new</span> TerminalExpression(<span class="string">&quot;Robert&quot;</span>);</span><br><span class="line">      Expression john = <span class="keyword">new</span> TerminalExpression(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> OrExpression(robert, john);    </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//规则：Julie 是一个已婚的女性</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Expression <span class="title">getMarriedWomanExpression</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Expression julie = <span class="keyword">new</span> TerminalExpression(<span class="string">&quot;Julie&quot;</span>);</span><br><span class="line">      Expression married = <span class="keyword">new</span> TerminalExpression(<span class="string">&quot;Married&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> AndExpression(julie, married);    </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Expression isMale = getMaleExpression();</span><br><span class="line">      Expression isMarriedWoman = getMarriedWomanExpression();</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">&quot;John is male? &quot;</span> + isMale.interpret(<span class="string">&quot;John&quot;</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;Julie is a married women? &quot;</span> </span><br><span class="line">      + isMarriedWoman.interpret(<span class="string">&quot;Married Julie&quot;</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Interpreter模式的特点"><a href="#Interpreter模式的特点" class="headerlink" title="Interpreter模式的特点"></a>Interpreter模式的特点</h3><ul><li>可以将一个需要解释执行的语言中的句子表示为一个抽象语法树</li><li>一些重复出现的问题可以用一种简单的语言来进行表达</li></ul><p>优点：</p><ul><li>可扩展性好，灵活</li><li>易于实现简单逻辑表达</li></ul><p>缺点：</p><ul><li>可用场景少，Java中可用expression4替代</li><li>难以进行语法维护</li><li>引发类膨胀</li></ul>]]></content>
    
    
    <summary type="html">《图解设计模式》图书总结</summary>
    
    
    
    <category term="杂项" scheme="http://lan5th.github.io/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch</title>
    <link href="http://lan5th.github.io/2021/09/28/%E5%B7%A5%E5%85%B7%E7%BB%84%E4%BB%B6/ElasticSearch/"/>
    <id>http://lan5th.github.io/2021/09/28/%E5%B7%A5%E5%85%B7%E7%BB%84%E4%BB%B6/ElasticSearch/</id>
    <published>2021-09-28T10:25:09.707Z</published>
    <updated>2022-06-20T02:26:02.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="基本概述"><a href="#基本概述" class="headerlink" title="基本概述"></a>基本概述</h2><p>ELK：Elasticsearch+Logstash+Kibana</p><p>基本特征</p><ul><li>Elasticsearch基于Lucene，java开发的，而Lucene是一套信息检索工具包(jar)，不包含搜索引擎</li><li>开源高扩展的分布式搜索引擎，近乎实时的存储和检索数据，可以处理PB级别的数据</li><li>主要功能：全文搜索、结构化搜索、分析</li></ul><p>最低要求jdk1.8</p><p>默认端口9200，集群通信端口9300</p><h2 id="ES数据结构"><a href="#ES数据结构" class="headerlink" title="ES数据结构"></a>ES数据结构</h2><ul><li>索引indices</li><li>types(逐渐弃用)</li><li>documents</li><li>fields</li></ul><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><ul><li><p>正排索引</p><p>以文档ID为key建立索引表，用户搜索时查询所有索引的content(包括大部分与输入的关键词无关的word)，速度很慢</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210928233250409.png" alt="image-20210928233250409"></p></li><li><p>倒排索引</p><p>预先以word为key建立索引表，只有出现过某个词语的文档才会添加到索引队列，用户搜索时只需要遍历所有索引(这些索引的表项都是与输入的关键词直接相关的)，只需要对比各个文档中关键词出现的次数就可以很快查出并排序</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210928233316851.png" alt="image-20210928233316851"></p></li></ul><h1 id="开始ES"><a href="#开始ES" class="headerlink" title="开始ES"></a>开始ES</h1><h2 id="安装ES"><a href="#安装ES" class="headerlink" title="安装ES"></a>安装ES</h2><p>这里使用docker安装</p><p>限制系统进程的虚拟内存区域大小，否则可能无法运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w vm.max_map_count=262144</span><br><span class="line">cat /proc/sys/vm/max_map_count</span><br></pre></td></tr></table></figure><p>服务器运存小，因此设置虚拟机最大内存Xms为256m</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拉取镜像</span></span><br><span class="line">docker pull elasticsearch:7.14.1</span><br><span class="line"><span class="comment">#运行镜像</span></span><br><span class="line">docker run --name elasticsearch -d -e ES_JAVA_OPTS=<span class="string">&quot;-Xms256m -Xmx256m&quot;</span> -e <span class="string">&quot;discovery.type=single-node&quot;</span> -p 9200:9200 -p 9300:9300 elasticsearch:7.14.1</span><br></pre></td></tr></table></figure><p>访问9200端口，能够返回提示信息json即运行成功</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210928203305132.png" alt="image-20210928203305132"></p><h2 id="安装ES-header"><a href="#安装ES-header" class="headerlink" title="安装ES-header"></a>安装ES-header</h2><p>elasticsearch-head是一个简单的的es可视化界面，可以用来查看数据，默认端口9100</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拉取镜像</span></span><br><span class="line">docker pull mobz/elasticsearch-head:5</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动镜像</span></span><br><span class="line">docker run --name elasticsearch-head -p 9100:9100 -d mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure><p>这时访问9100端口就可以看到可视化界面了</p><p>这时9100端口的ES-header是无法访问到9200端口的ES，存在跨域问题</p><p>需要修改ES的配置文件，默认在<code>/config</code>下的elasticsearch.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi config/elasticsearch.yml</span><br></pre></td></tr></table></figure><p>如果不能用vi，就在外部编写配置文件然后cp进容器</p><p>在末尾添加配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: <span class="literal">true</span> </span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>因为docker容器的ip是内部ip，因此我们需要手动连接，将上方连接栏的<code>http://localhost:9200/</code>改为我们自己的ip</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210928211015608.png" alt="image-20210928211015608"></p><blockquote><p> ES-header无法查询数据问题</p></blockquote><p>修改/usr/src/app/_site下的vendor.js文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp elasticsearch-head:/usr/src/app/_site/vendor.js vendor.js</span><br><span class="line">vim vendor.js</span><br></pre></td></tr></table></figure><p>vim快捷键<code>:行号</code>跳到指定行</p><p>修改</p><p>1、6886行<br><code>contentType: &quot;application/x-www-form-urlencoded&quot;</code><br>改成<br><code>contentType: “application/json;charset=UTF-8”</code></p><p>2、7573行<br><code>var inspectData = s.contentType === “application/x-www-form-urlencoded” &amp;&amp;</code><br>改成<br><code>var inspectData = s.contentType === “application/json;charset=UTF-8” &amp;&amp;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp vendor.js elasticsearch-head:/usr/src/app/_site/vendor.js</span><br></pre></td></tr></table></figure><p>无需重启，刷新页面就可以显示索引数据了</p><h2 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h2><p>kibana是一个好用的es可视化界面，可以用来发送请求，默认端口5601</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意kibana版本需要与ES版本相对应</span></span><br><span class="line">docker pull kibana:7.14.1</span><br><span class="line"><span class="comment"># 需要绑定ES的ip</span></span><br><span class="line">docker run --name kibana -e ELASTICSEARCH_URL=http://47.113.225.244:9200 -p 5601:5601 -d kibana:7.14.1</span><br></pre></td></tr></table></figure><p>这时访问5601端口，显示Kibana server is not ready yet，我们需要进一步的配置</p><p>进入kibana容器修改文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it kibana bash</span><br><span class="line">vi /opt/kibana/config/kibana.yml</span><br></pre></td></tr></table></figure><p>将<code>elasticsearch.hosts</code>修改为自己ES的IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.hosts: [ <span class="string">&quot;http://47.113.225.244:9200&quot;</span> ]</span><br></pre></td></tr></table></figure><p>再次访问，发现可以正常访问了</p><p><strong>启用汉化</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it kibana bash</span><br><span class="line">vi /usr/share/kibana/config/kibana.yml</span><br></pre></td></tr></table></figure><p>在文件末尾追加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i18n.locale: <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure><p>这时我们重启kibana就能看到中文界面了</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210928221955266.png" alt="image-20210928221955266"></p><h2 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h2><p>IK分词器可以帮助我们分解中文词句</p><p>因为是需要在ES内部安装的插件，因此需要我们手动下载，github地址：</p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">Releases · medcl/elasticsearch-analysis-ik (github.com)</a>，下载完成后传输到服务器</p><p>==这里也需要注意版本对应，否则会报错==</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cp文件到ES容器内部</span></span><br><span class="line">docker cp elasticsearch-analysis-ik-7.14.1.zip elasticsearch:/usr/share/elasticsearch/plugins</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it elasticsearch bash</span><br><span class="line"></span><br><span class="line">mkdir /usr/share/elasticsearch/plugins/ik</span><br><span class="line"></span><br><span class="line">mv /usr/share/elasticsearch/plugins/elasticsearch-analysis-ik-7.14.1.zip /usr/share/elasticsearch/plugins/ik</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/share/elasticsearch/plugins/ik/</span><br><span class="line"></span><br><span class="line">unzip elasticsearch-analysis-ik-7.14.1.zip</span><br><span class="line"></span><br><span class="line">rm -rf elasticsearch-analysis-ik-7.14.1.zip</span><br></pre></td></tr></table></figure><p>然后重启ES容器</p><p>可以在容器中使用命令来查看是否启用成功，路径<code>/usr/share/elasticsearch/bin</code></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210929134825982.png" alt="image-20210929134825982"></p><p><strong>简单使用</strong></p><ul><li><p><code>ik_smart</code>：最粗粒度划分</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;中国共产党&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果只有<code>中国共产党</code></p></li><li><p><code>ik_max_word</code>：最细粒度划分</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;中国共产党&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果有<code>中国共产党、中国、国共、共产党、共产、党</code></p></li></ul><p>ik分词器是从它的字典中进行词句匹配的，如果想让分词结果中能够包含我们自己的词语就需要向字典中添加</p><p>在容器内<code>/usr/share/elasticsearch/plugins/ik/config</code>路径下先编写自己的.dic文件，然后将其添加到配置文件IKAnalyzer.cfg.xml中</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210929140317605.png" alt="image-20210929140317605"></p><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h2><p>基本方法表</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210929152227468.png" alt="image-20210929152227468"></p><ul><li><p>PUT创建索引</p><p>注意以后类型名type会逐渐弃用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /索引名/类型名/文档id</span><br></pre></td></tr></table></figure><p>存入或覆盖数据(如果没有索引则会自动创建，并自动指定字段类型)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /test_index/test_id</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;lan5th&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建索引并定义规则</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT /test01</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;birthday&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;date&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>GET获取信息(索引、type或文档id)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test01</span><br></pre></td></tr></table></figure><p>查看所有索引</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/indices?v</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210929150503941.png" alt="image-20210929150503941"></p></li><li><p>修改信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UPDATE /test01/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">&quot;birthday&quot;</span>: <span class="string">&quot;2021-9-29&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用UPDATE或PUT方式实际上是覆盖原有数据，如果有字段漏填会造成数据丢失</p><p>可以使用POST指定方法的方式进行更新，仅修改指定了的字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /test01/1/_update</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论使用怎样的方式，修改信息后默认version字段都会自增</p></li><li><p>DELETE删除信息(索引、type或文档id)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE test01</span><br></pre></td></tr></table></figure></li></ul><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /test01/_search?q=name:lan5th</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210929193234642.png" alt="image-20210929193234642"></p><p>查询结果中的score代表匹配度</p><p>标准的查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET /test01/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;lan5th&quot;</span> <span class="comment">//匹配方式</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: [ <span class="comment">//指定获取的结果字段</span></span><br><span class="line">    <span class="string">&quot;name&quot;</span>,</span><br><span class="line">    <span class="string">&quot;birthday&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span> <span class="comment">//按age降序排序，升序为asc</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;from&quot;</span>: <span class="number">0</span>, <span class="comment">//分页：从第几条开始</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">1</span> <span class="comment">//分页：返回几条数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bool查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /test01/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123; <span class="comment">//精确多条件查找</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [ <span class="comment">//相当于交集集，并集为should，非为must_not</span></span><br><span class="line">        &#123; </span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;lan5th&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>: <span class="number">3</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET /test01/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123; </span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123; </span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;lan5th&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: &#123; <span class="comment">//使用filter进行过滤</span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;gt&quot;</span>: <span class="number">13</span>, <span class="comment">//这里过滤出age大于13，小于等于33的文档</span></span><br><span class="line">            ”lte“: 33 //可以使用多个条件进行过滤</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多标签匹配</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test01/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;tags&quot;</span>: <span class="string">&quot;测试 吃瓜&quot;</span> <span class="comment">//多关键词通过空格分隔</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高亮查询：将查询结果高亮</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /test01/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;lan5th&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span>: &#123; <span class="comment">//如果未配置自定义高亮，查询结果自动添加&lt;em&gt;标签，显示高亮</span></span><br><span class="line">    <span class="attr">&quot;pre_tags&quot;</span>: <span class="string">&quot;&lt;p class=&#x27;key&#x27; style=&#x27;color:red&#x27;&gt;&quot;</span>, <span class="comment">//添加前缀</span></span><br><span class="line">    <span class="attr">&quot;post_tags&quot;</span>: <span class="string">&quot;&lt;/p&gt;&quot;</span>, <span class="comment">//添加后缀，通过添加前后缀来自定义高亮</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询方法：</p><ul><li>match：查询条件通过分词器解析</li><li>term：通过倒排索引查询，查询条件不被分词</li></ul><p>数据类型：</p><ul><li>text：查询结果可以被分词解析</li><li>key-word：查询结果不能被分词解析</li></ul><h1 id="ES集成SpringBoot"><a href="#ES集成SpringBoot" class="headerlink" title="ES集成SpringBoot"></a>ES集成SpringBoot</h1><p>SpringBoot支持两种交互技术：</p><ul><li>Jest(默认不生效，需要导入工具包)</li><li>SpringData Elasticsearch</li></ul><h2 id="依赖与配置"><a href="#依赖与配置" class="headerlink" title="依赖与配置"></a>依赖与配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ES相关启动器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--转换json字符串依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一定要保证导入的依赖与ES版本一致，如果不一致需要自定义ES依赖版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.14.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">&quot;47.113.225.244&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="索引api"><a href="#索引api" class="headerlink" title="索引api"></a>索引api</h2><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建索引</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建请求</span></span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;index01&quot;</span>);</span><br><span class="line">        <span class="comment">//客户端发起索引请求</span></span><br><span class="line">        CreateIndexResponse response = restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看索引是否存在</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testExistIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;index01&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> exists = restHighLevelClient.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除索引</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDeleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;index01&quot;</span>);</span><br><span class="line">        AcknowledgedResponse response = restHighLevelClient.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文档api"><a href="#文档api" class="headerlink" title="文档api"></a>文档api</h2><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加文档</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testAddDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;index01&quot;</span>);</span><br><span class="line">        <span class="comment">//链式编程，设置过期时间，向请求中添加对象并转为json格式</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;lan5th&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">//也可以不设置id，这样ES服务器会为我们生成一个随机的ID，一般在大数据量时我们会选择自动生成</span></span><br><span class="line">        request.id(<span class="string">&quot;1&quot;</span>).timeout(TimeValue.timeValueSeconds(<span class="number">1</span>)).timeout(<span class="string">&quot;1s&quot;</span>)</span><br><span class="line">                .source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line">        IndexResponse response = restHighLevelClient.index(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response.toString());</span><br><span class="line">        System.out.println(response.status());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文档是否存在</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testExistsDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">&quot;index01&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        request.fetchSourceContext(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>))</span><br><span class="line">                .storedFields(<span class="string">&quot;_none_&quot;</span>); <span class="comment">//不获取_source的上下文，加快解析速度</span></span><br><span class="line">        <span class="keyword">boolean</span> exists = restHighLevelClient.exists(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文档信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testGetDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">&quot;index01&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        GetResponse response = restHighLevelClient.get(request, RequestOptions.DEFAULT);</span><br><span class="line">        String source = response.getSourceAsString();</span><br><span class="line">        System.out.println(response);<span class="comment">//输出详细信息</span></span><br><span class="line">        System.out.println(source);<span class="comment">//只输出文档内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新文档信息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testUpdateDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        UpdateRequest request = <span class="keyword">new</span> UpdateRequest(<span class="string">&quot;index01&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;lanstanger&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        request.doc(JSON.toJSONString(user),XContentType.JSON);</span><br><span class="line">        UpdateResponse response = restHighLevelClient.update(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response.status());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除文档</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDeleteDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">&quot;index01&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">        request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">        DeleteResponse response = restHighLevelClient.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response.status());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量操作，不仅仅是插入</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testBulkDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BulkRequest request = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">&quot;user2&quot;</span>, <span class="number">2</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">&quot;user3&quot;</span>, <span class="number">3</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">&quot;user4&quot;</span>, <span class="number">4</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">&quot;user5&quot;</span>, <span class="number">5</span>));</span><br><span class="line">        userList.add(<span class="keyword">new</span> User(<span class="string">&quot;user6&quot;</span>, <span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在for循环中我们可以发送任何想要的请求</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//这里为插入请求</span></span><br><span class="line">            request.add(<span class="keyword">new</span> IndexRequest(<span class="string">&quot;index01&quot;</span>).id(<span class="string">&quot;&quot;</span>+(i+<span class="number">2</span>))</span><br><span class="line">                    .source(JSON.toJSONString(userList.get(i)),XContentType.JSON));</span><br><span class="line">        &#125;</span><br><span class="line">        BulkResponse response = restHighLevelClient.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response.hasFailures());<span class="comment">//是否失败</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//搜索</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;index01&quot;</span>);</span><br><span class="line">        SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lan5th&quot;</span>);</span><br><span class="line">        sourceBuilder.query(termQueryBuilder);</span><br><span class="line">        sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        SearchResponse response = restHighLevelClient.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(JSON.toJSONString(response.getHits()));</span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit documentFields : response.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(documentFields.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">大数据量的分布式搜索引擎</summary>
    
    
    
    <category term="工具组件" scheme="http://lan5th.github.io/categories/%E5%B7%A5%E5%85%B7%E7%BB%84%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Nginx基础</title>
    <link href="http://lan5th.github.io/2021/09/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Nginx/"/>
    <id>http://lan5th.github.io/2021/09/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Nginx/</id>
    <published>2021-09-27T02:11:17.883Z</published>
    <updated>2022-07-21T12:15:29.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Nginx(engine x)是一个高性能的HTTP和反向代理Web服务器，占有内存少，并发处理能力强</p><p>Nginx默认端口号80，即Http协议默认的端口号，因此在访问nginx服务器时不需要再手动指定端口号</p><h2 id="Nginx的用途"><a href="#Nginx的用途" class="headerlink" title="Nginx的用途"></a>Nginx的用途</h2><ul><li><p><strong>反向代理</strong></p><ul><li>正向代理：代理服务器为客户端提供服务，代替客户端访问服务器，返回数据给客户端</li><li>反向代理：代理服务器为服务器提供服务，客户端发送数据后由代理服务器选择目标服务器进行数据传输，暴露代理服务器地址，隐藏了真实的服务器地址</li></ul></li><li><p><strong>负载均衡</strong></p><p>在高并发的情景中，单个服务器可能不能满足处理业务的需要，这时通过增加服务器数量和配置反向代理服务器，用户直接访问反向代理服务器，由反向代理服务器根据实际情况将请求分发到多个服务器上，以减小服务器压力</p></li><li><p><strong>动静分离</strong></p><p>为了加快网站的解析速度，将静态页面和动态页面分别由不同的服务器进行解析，降低单个服务器的压力</p></li></ul><h2 id="负载均衡的策略"><a href="#负载均衡的策略" class="headerlink" title="负载均衡的策略"></a>负载均衡的策略</h2><ol><li>轮询：每个请求按照时间顺序分配到不同的服务器</li><li>权重：权重weight默认为1，根据权重产生不同比例的请求分配给各服务器</li><li>ip_hash：用户之间采用分配模式，单用户一旦访问服务器成功之后就只能访问这一台确定的服务器。可以解决Session问题</li><li>fair：根据后端服务器的响应时间来分配请求，响应时间短的优先分配</li></ol><h2 id="Nginx工作方式"><a href="#Nginx工作方式" class="headerlink" title="Nginx工作方式"></a>Nginx工作方式</h2><p>通过查看进程可以看到，除了第三个ps进程，nginx进程分为master和worker两类进程</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927172115657.png" alt="image-20210927172115657"></p><p>工作结构：</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927172231739.png" alt="image-20210927172231739"></p><ul><li>master负责管理和监控worker</li><li>当新的请求来到，所有worker会争抢去处理请求</li></ul><p>一个master和多个worker的优点：</p><ul><li><p>可以使用<code>nginx -s reload</code>热部署</p><p>热部署时正在处理请求的worker继续工作，空闲的worker开始适配新规则，当worker处理完请求后再适配新规则</p></li><li><p>每个worker是独立的进程，当某一worker出现问题，其他worker仍然可以继续工作</p></li></ul><p>设置worker数量：一般worker数目和服务器的cpu核数相当最佳</p><p><strong>worker工作占用的连接数</strong></p><ul><li><p>如果访问本地的静态资源</p><p>接收用户请求和返回数据共2个连接</p></li><li><p>如果请求远程服务器</p><p>接受用户请求和返回数据，给服务器发送请求和获取数据，共4个连接</p></li></ul><p><strong>如果共有4个worker，每个worker最大连接数为1024，支持的最大/最小并发数为？</strong></p><p>根据上面的结论，最大并发数为所有用户都访问静态资源，即1024*4/2=2048</p><p>最小连接数为所有用户都访问远程服务器，nginx服务器作为反向代理，即1024*4/4=1024</p><h1 id="开始Nginx"><a href="#开始Nginx" class="headerlink" title="开始Nginx"></a>开始Nginx</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要的依赖：</p><ul><li>pcre</li><li>openssl</li><li>zlib</li></ul><p>为了方便安装，这里使用docker进行示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 80:80 -v /root/conf/nginxconf:/etc/nginx/outside-conf -d nginx:1.20.1</span><br></pre></td></tr></table></figure><p><strong>这里我们在容器内部的配置文件同级目录下创建了一个挂载的目录，如果我们需要修改内部文件，就在这个挂载的目录中修改</strong></p><p>这时访问服务器的80端口就能够看到nginx的欢迎页了</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>不适用docker使用命令之前需要先进入<code>/usr/local/nginx/sbin</code>路径使用<code>./nginx</code>执行命令</p><p>如果使用docker环境变量已经自动配好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nginx -v <span class="comment">#查看版本</span></span><br><span class="line">nginx -s stop <span class="comment">#快速停止nginx</span></span><br><span class="line">nginx -s quit <span class="comment">#正常停止</span></span><br><span class="line">./nginx <span class="comment">#启动nginx，因为关闭nginx之后指令就不能使用了，因此还是需要进入目录执行命令</span></span><br><span class="line">nginx -s reload <span class="comment">#重新加载</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>docker中的路径为<code>/etc/nginx</code></p><p>这里的配置文件分为三部分</p><ul><li>全局块：配置整体运行的指令</li><li>event块：配置nginx服务器与用户的访问配置</li><li>http块</li></ul><p>新版server块已经被划分到<code>/etc/nginx/conf.d</code>路径下，可以在这里进行配置</p><h1 id="配置实例"><a href="#配置实例" class="headerlink" title="配置实例"></a>配置实例</h1><h2 id="最简单的代理"><a href="#最简单的代理" class="headerlink" title="最简单的代理"></a>最简单的代理</h2><p><strong>安装Tomcat</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name tomcat -p 8080:8080 -v /root/<span class="built_in">test</span>:/usr/<span class="built_in">local</span>/tomcat/webapps/<span class="built_in">test</span> -d tomcat</span><br></pre></td></tr></table></figure><p>我们直接运行的Tomcat容器的webapps目录下是没有内容的，为方便测试，可以将webapps.dist目录下的默认欢迎页复制到webapps目录</p><p><strong>配置nginx</strong></p><p>由于之前我们配置了挂载目录，因此可以在挂载目录中编辑容器内部的配置文件，在<code>/etc/nginx</code>将两个配置文件进行拷贝：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp nginx.conf outside-conf/</span><br><span class="line">cp conf.d/default.conf outside-conf/</span><br></pre></td></tr></table></figure><p>在外部使用vim就可以进行编辑了</p><p>这里在default.conf修改两处</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927145310743.png" alt="image-20210927145310743"></p><p>这里不使用127.0.0.1，因为在容器里面配置环回IP相当于容器自己的IP，当然不会与另一个容器的IP相连通</p><p>配置完毕后，可以尝试访问服务器的80端口，看nginx服务器能不能给我们传回8080端口的tomcat默认页内容</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>新建一个tomcat容器配置端口<code>8081:8080</code></p><p>在default.conf文件末尾追加一个新的虚拟服务器（需要更改默认服务器的监听端口，不然会冲突）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  reverse.proxy;</span><br><span class="line"></span><br><span class="line">    location ~ /edu/ &#123;</span><br><span class="line">        proxy_pass  http://47.113.225.244:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /bus/ &#123;</span><br><span class="line">        proxy_pass  http://47.113.225.244:8081;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个tomcat服务器分别放入对应端口号的html文件，实验结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927154055278.png" alt="image-20210927154055278"></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927154110328.png" alt="image-20210927154110328"></p><p><strong>location匹配url指令说明</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927154340177.png" alt="image-20210927154340177"></p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>实现效果：输入一个url后代理服务器根据负载情况分发请求到8080或者8081端口</p><p>在nginx.conf文件的http块中添加负载均衡服务器配置，名为myserver</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">    <span class="comment">#ip_hash; 可以开启ip_hash模式</span></span><br><span class="line">    server  47.113.225.244:8080 weight=1;</span><br><span class="line">    server  47.113.225.244:8081 weight=1;</span><br><span class="line">    <span class="comment">#fair; 可以开启fair模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在default.conf文件，将我们的myserver服务器添加到代理配置中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  47.113.225.244;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://myserver; <span class="comment">#这里的myserver是之前配置过的自定义服务器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时访问一个页面不断刷新浏览器就可以发现端口号在8080和8081之间不断变动，说明配置成功</p><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927161844122.png" alt="image-20210927161844122"></p><p><strong>配置静态资源</strong></p><p>配置default.conf</p><p>这里的/data/是在容器内部单独创建的静态资源目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  47.113.225.244;</span><br><span class="line"></span><br><span class="line">    location /www/ &#123;</span><br><span class="line">        root   /data/; <span class="comment">#root表示本地资源路径目录</span></span><br><span class="line">        index  index.html index.htm; <span class="comment">#index配置了访问目录路径时默认的页面名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /image/ &#123;</span><br><span class="line">        root   /data/;</span><br><span class="line">        autoindex  on; <span class="comment">#这个配置开启能够让浏览器取得资源路径的目录结构，</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Nginx集群"><a href="#Nginx集群" class="headerlink" title="Nginx集群"></a>Nginx集群</h1><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927170203166.png" alt="image-20210927170203166"></p><p>要点：</p><ul><li>需要多台nginx</li><li>需要keepalived</li><li>需要虚拟ip</li></ul><hr><p>待补充</p>]]></content>
    
    
    <summary type="html">Nginx入门</summary>
    
    
    
    <category term="微服务" scheme="http://lan5th.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="http://lan5th.github.io/2021/09/25/%E5%B7%A5%E5%85%B7%E7%BB%84%E4%BB%B6/RabbitMQ/"/>
    <id>http://lan5th.github.io/2021/09/25/%E5%B7%A5%E5%85%B7%E7%BB%84%E4%BB%B6/RabbitMQ/</id>
    <published>2021-09-25T03:19:15.815Z</published>
    <updated>2022-07-20T11:31:05.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="中间件技术"><a href="#中间件技术" class="headerlink" title="中间件技术"></a>中间件技术</h2><p><strong>一些常用的中间件技术</strong></p><ul><li>分布式消息中间件<ul><li>ActiveMQ</li><li>RabbitMQ</li><li>Kafka</li><li>RocketMQ</li></ul></li><li>负载均衡中间件<ul><li>Nginx</li><li>LVS负载均衡</li><li>KeepAlive</li><li>CDN</li></ul></li><li>缓存中间件<ul><li>MemCache</li><li>Redis</li></ul></li><li>数据库中间件<ul><li>Mycat</li><li>ShardingJdbc</li></ul></li></ul><p><strong>MQ解决的问题</strong></p><ul><li>流量消峰</li><li>应用解耦</li><li>异步处理</li></ul><h2 id="MQ协议"><a href="#MQ协议" class="headerlink" title="MQ协议"></a>MQ协议</h2><ul><li><p>AMQP协议</p><p>特性：</p><ul><li>分布式事务</li><li>消息持久化</li><li>高性能和高可靠的消息处理</li></ul><p>支持RabbitMQ,ActiveMQ</p></li><li><p>MQTT协议</p><p>特性：</p><ul><li><p>轻量级</p></li><li><p>结构简单</p></li><li><p>传输快</p></li><li><p>不支持持久化</p></li></ul><p>支持RabbitMQ,ActiveMQ</p></li><li><p>OpenMessage协议</p><p>特性： </p><ul><li>结构简单</li><li>解析速度快</li><li>支持事务和持久化</li></ul><p>支持RocketMQ</p></li><li><p>Kafka协议</p><p>特性：</p><ul><li>结构简单</li><li>解析速度快</li><li>不支持事务</li><li>可以持久化</li></ul><p>支持Kafka</p></li></ul><h2 id="MQ相关概念"><a href="#MQ相关概念" class="headerlink" title="MQ相关概念"></a>MQ相关概念</h2><p><strong>MQ中的角色</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925131710544.png" alt="image-20210925131710544"></p><p>生产者、交换机、队列、消费者</p><p><strong>RabbitMQ工作原理</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925132032224.png" alt="image-20210925132032224"></p><h1 id="开始RabbitMQ"><a href="#开始RabbitMQ" class="headerlink" title="开始RabbitMQ"></a>开始RabbitMQ</h1><h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官方下载文档<a href="https://www.rabbitmq.com/download.html">Downloading and Installing RabbitMQ — RabbitMQ</a></p><p>手动安装还需要Erlang语言环境的支持，安装较为繁琐，因此这里使用docker安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for RabbitMQ 3.8,</span></span><br><span class="line"><span class="comment"># 3.8.x support timeline: https://www.rabbitmq.com/versions.html</span></span><br><span class="line">docker run -it --name rabbitmq --restart=always -p 5672:5672 -p 15672:15672 rabbitmq:3.8-management</span><br></pre></td></tr></table></figure><p>我们安装的RabbitMQ是带有RabbitManagement的，不需要额外开启功能，如果是手动安装的RabbitMQ需要先停止server再开启服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><p>进入15672端口，如果没有配置过，则默认用户名和密码都是<code>guest</code></p><h3 id="RabbitMQ用户管理"><a href="#RabbitMQ用户管理" class="headerlink" title="RabbitMQ用户管理"></a>RabbitMQ用户管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_users <span class="comment">#查看所有用户</span></span><br><span class="line">rabbitmqctl add_user 用户名 密码 <span class="comment">#添加新用户</span></span><br><span class="line"><span class="comment">#授权格式：</span></span><br><span class="line"><span class="comment">#rabbitmqctl set_permissions [-p &lt;vhostpath&gt;] &lt;user&gt; &lt;conf&gt; &lt;write&gt; &lt;read&gt;</span></span><br><span class="line">rabbitmqctl set_permisssions -p <span class="string">&quot;/&quot;</span> 用户名 <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="comment">#给这个用户这个virtualhost中所有资源的配置和读写权限</span></span><br></pre></td></tr></table></figure><h3 id="一些常用命令"><a href="#一些常用命令" class="headerlink" title="一些常用命令"></a>一些常用命令</h3><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926181830650.png" alt="image-20210926181830650"></p><h2 id="HelloRabbitMQ"><a href="#HelloRabbitMQ" class="headerlink" title="HelloRabbitMQ"></a>HelloRabbitMQ</h2><p>注意提前开放5672端口</p><p>配置依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--RabbitMQ客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--操作文件流--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--添加插件指定SDK版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//配置连接工厂</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;x.x.x.x&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成队列</span></span><br><span class="line"><span class="comment">         * 1.队列名</span></span><br><span class="line"><span class="comment">         * 2.消息是否持久化，默认保存在内存</span></span><br><span class="line"><span class="comment">         * 3.是否允许多个消费者消费</span></span><br><span class="line"><span class="comment">         * 4.最后一个消费者断开连接后是否自动删除</span></span><br><span class="line"><span class="comment">         * 5.其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//发消息</span></span><br><span class="line">        String message = <span class="string">&quot;Hello,RabbitMQ!&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 发送消息</span></span><br><span class="line"><span class="comment">         * 1.发送到哪个交换机</span></span><br><span class="line"><span class="comment">         * 2.路由的key是什么(这里使用队列名)</span></span><br><span class="line"><span class="comment">         * 3.其他参数信息</span></span><br><span class="line"><span class="comment">         * 4.发送消息我的消息体</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="keyword">null</span>,message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;==============&gt;发送完成&quot;</span>);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//配置连接工厂</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;x.x.x.x&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消费信息</span></span><br><span class="line"><span class="comment">         * 1.消费哪个队列</span></span><br><span class="line"><span class="comment">         * 2.消费成功后是否自动应答</span></span><br><span class="line"><span class="comment">         * 3.消费成功消费的回调</span></span><br><span class="line"><span class="comment">         * 4.消费者取消消费的回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        DeliverCallback deliverCallback = (consumeTag, message) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">        &#125;;</span><br><span class="line">        CancelCallback cancelCallback = consumeTag -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费被中断&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,deliverCallback,cancelCallback);</span><br><span class="line">        <span class="comment">//消费者不要释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上消费者的两个失败的回调函数在正常执行过程中并不会触发，而是在不断监听，一旦有新的消息来到就会立即接收</p><h1 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h1><h2 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h2><p>我们上面做的例子就是简单模式的一个实现，并且是RabbitMQ的默认工作模式</p><p>提取工具类<code>RabbitMqUtil.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Channel channel =<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Channel <span class="title">getChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;47.113.225.244&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;Zyh20010605&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = factory.newConnection();</span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            channel.close();</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>交换机的类型</strong></p><ul><li>Fanout：广播</li><li>Direct：定向</li><li>Topics：通配符</li></ul><h2 id="WokerQueues"><a href="#WokerQueues" class="headerlink" title="WokerQueues"></a>WokerQueues</h2><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925155336736.png" alt="image-20210925155336736"></p><p>工作队列模式：采用轮训的方式，只有一个消费者能够取得队列中的消息，消费者轮流取得消息信道中的信息</p><h2 id="Pub-Sub"><a href="#Pub-Sub" class="headerlink" title="Pub/Sub"></a>Pub/Sub</h2><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925155400376.png" alt="image-20210925155400376"></p><p>订阅模式：</p><p>X：交换机</p><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exchange</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Channel channel = RabbitMqUtil.getChannel();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建交换机</span></span><br><span class="line"><span class="comment">     * 1.交换机名称</span></span><br><span class="line"><span class="comment">     * 2.交换机类型，通过BuiltinExchangeType对象枚举</span></span><br><span class="line"><span class="comment">     *      DIRECT：定向</span></span><br><span class="line"><span class="comment">     *      FANOUT：扇形（广播）</span></span><br><span class="line"><span class="comment">     *      TOPIC：通配符</span></span><br><span class="line"><span class="comment">     *      HEADERS：参数匹配</span></span><br><span class="line"><span class="comment">     * 3.是否持久化</span></span><br><span class="line"><span class="comment">     * 4.是否自动删除</span></span><br><span class="line"><span class="comment">     * 5.仅内部使用</span></span><br><span class="line"><span class="comment">     * 6.其他参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String exchangeName = <span class="string">&quot;test_fanout&quot;</span>;</span><br><span class="line">    channel.exchangeDeclare(exchangeName, BuiltinExchangeType.FANOUT,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//创建队列</span></span><br><span class="line">    String queue1Name = <span class="string">&quot;que1&quot;</span>;</span><br><span class="line">    String queue2Name = <span class="string">&quot;que2&quot;</span>;</span><br><span class="line">    channel.queueDeclare(<span class="string">&quot;que1&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">    channel.queueDeclare(<span class="string">&quot;que2&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     * 1.队列名称</span></span><br><span class="line"><span class="comment">     * 2.交换机名称</span></span><br><span class="line"><span class="comment">     * 3.路由key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">//发布消息</span></span><br><span class="line">    String message = <span class="string">&quot;exchange方法发布的消息&quot;</span>;</span><br><span class="line">    channel.basicPublish(exchangeName,<span class="string">&quot;&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">    System.out.println(<span class="string">&quot;============&gt;发送完成&quot;</span>);</span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">    RabbitMqUtil.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码与之前类似</p><h2 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h2><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925161959160.png" alt="image-20210925161959160"></p><p>路由模式：生产者携带的RountingKey与指定类型匹配时才会发送到相应信道</p><p>这里仅给出特有的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建交换机更改枚举类型</span></span><br><span class="line">channel.exchangeDeclare(exchangeName, BuiltinExchangeType.DIRECT,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定队列1与key：error</span></span><br><span class="line">channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="comment">//绑定队列2与key：info、error、warning</span></span><br><span class="line">channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;info&quot;</span>);</span><br><span class="line">channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;warning&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发布消息指定routingKey，这里是error，两个信道都能收到消息</span></span><br><span class="line">channel.basicPublish(exchangeName,<span class="string">&quot;error&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br></pre></td></tr></table></figure><h2 id="Topics"><a href="#Topics" class="headerlink" title="Topics"></a>Topics</h2><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925163321559.png" alt="image-20210925163321559"></p><p>通配符模式：将routingkey指定为通配符，不需要完全匹配</p><p>这里仅给出特有的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建交换机更改枚举类型</span></span><br><span class="line">channel.exchangeDeclare(exchangeName, BuiltinExchangeType.TOPIC,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><ul><li>路由键和绑定键的字符串会切分成单侧，单词之间用<code>.</code>分开</li><li><code>#</code>表示匹配0个或多个单词</li><li><code>*</code>表示匹配一个单词</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绑定队列1与key：&#x27;*.error&#x27;</span></span><br><span class="line">channel.queueBind(queue1Name,exchangeName,<span class="string">&quot;#.error&quot;</span>);</span><br><span class="line"><span class="comment">//绑定队列2与key：&#x27;user.*&#x27;、&#x27;*.*&#x27;</span></span><br><span class="line">channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;user.*&quot;</span>);</span><br><span class="line">channel.queueBind(queue2Name,exchangeName,<span class="string">&quot;*.*&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发布消息指定routingKey，这里是&#x27;user.error&#x27;，两个信道都能收到消息</span></span><br><span class="line">channel.basicPublish(exchangeName,<span class="string">&quot;user.error&quot;</span>, <span class="keyword">null</span>, message.getBytes());</span><br></pre></td></tr></table></figure><h1 id="整合SpringBoot"><a href="#整合SpringBoot" class="headerlink" title="整合SpringBoot"></a>整合SpringBoot</h1><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>包依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入amqp协议，即RabbitMQ的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">x.x.x.x</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure><h2 id="RabbitTemplate"><a href="#RabbitTemplate" class="headerlink" title="RabbitTemplate"></a>RabbitTemplate</h2><p>使用RabbitTemplate发送和接收消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot02ApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//方式一：rabbitTemplate.send(交换机,key,message)</span></span><br><span class="line">        <span class="comment">//这种方式需要我们自定义消息体内容和消息头</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：rabbitTemplate.convertAndSend(交换机,key,object)</span></span><br><span class="line">        <span class="comment">//只要传入需要发送的对象，就会被自动序列化并发送给RabbitMQ服务器</span></span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;this is a msg from client&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;list&quot;</span>, Arrays.asList(<span class="keyword">true</span>, <span class="number">2</span>, <span class="string">&quot;object3&quot;</span>));</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;springboot.mq&quot;</span>,<span class="string">&quot;user.warning&quot;</span>,map);</span><br><span class="line">        System.out.println(<span class="string">&quot;=========&gt;消息发送完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从que1接收消息，对应key：user.*</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getTest1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//接收消息并自动反序列化</span></span><br><span class="line">        Object que1 = rabbitTemplate.receiveAndConvert(<span class="string">&quot;que1&quot;</span>);</span><br><span class="line">        System.out.println(que1.getClass());</span><br><span class="line">        System.out.println(que1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从que2接收消息，对应key：*.info</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getTest2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object que2 = rabbitTemplate.receiveAndConvert(<span class="string">&quot;que2&quot;</span>);</span><br><span class="line">        System.out.println(que2.getClass());</span><br><span class="line">        System.out.println(que2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于默认使用的是jdk序列化，如果我们需要可以注入我们自己的MessageConverter，使其转换为json序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jackson2JsonMessageConverter <span class="title">messageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：在使用Json序列化之后我们如果需要手动在网页端发送消息也需要使用Json的序列化格式发送</strong></p><h2 id="注解开发RabbitMQ"><a href="#注解开发RabbitMQ" class="headerlink" title="注解开发RabbitMQ"></a>注解开发RabbitMQ</h2><p>主类上添加<code>@EnableRabbit</code>以开启注解功能</p><p>使用注解监听队列</p><p><code>RabbitListener</code></p><ul><li><p>方法上使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//转换器会将消息内容自动转换为实体类</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;que1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenQue1</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user.getClass());</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Message接收消息能够拿到消息的完整信息</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;que2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenQue2</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        System.out.println(message.getClass());</span><br><span class="line">        System.out.println(message.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925195337485.png" alt="image-20210925195337485"></p></li><li><p>类上使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过queuesToDeclare来声明队列</span></span><br><span class="line"><span class="comment"> * ,<span class="doctag">@Queue</span>注解创建临时队列</span></span><br><span class="line"><span class="comment"> * 还可以进行一些que的详细配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;hello&quot;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">customer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//标注这个方法是收到消息后的回调方法</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="AmqpAdmin"><a href="#AmqpAdmin" class="headerlink" title="AmqpAdmin"></a>AmqpAdmin</h2><p>通过AmqpAdmin就可以进行消息队列的一系列操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot02ApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AmqpAdmin amqpAdmin;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建交换器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        amqpAdmin.declareExchange(<span class="keyword">new</span> DirectExchange(<span class="string">&quot;amqpadmin.exchange&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createQue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        amqpAdmin.declareQueue(<span class="keyword">new</span> Queue(<span class="string">&quot;amqpadmin.que&quot;</span>,<span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        amqpAdmin.declareBinding(<span class="keyword">new</span> Binding(<span class="string">&quot;amqpadmin.que&quot;</span>, Binding.DestinationType.QUEUE, <span class="string">&quot;amqpadmin.exchange&quot;</span>,<span class="string">&quot;amqp.info&quot;</span>,<span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用临时队列"><a href="#使用临时队列" class="headerlink" title="使用临时队列"></a>使用临时队列</h2><p><strong>下面两段代码并没有直接关联，只是展示了生产者和消费者不同的实现方式</strong></p><ul><li><p>生产者实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向容器中注入交换机、队列、Binding组件就会自动临时创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">priQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE = <span class="string">&quot;springboot.mq&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE = <span class="string">&quot;que1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ROUTING_KEY = <span class="string">&quot;user.info&quot;</span>;</span><br><span class="line">    <span class="comment">//注入交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DirectExchange <span class="title">exchange1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注入队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">queue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt;map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;x-max-priority&quot;</span>,<span class="number">10</span>);<span class="comment">//设置最大的优先级数量</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(QUEUE,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注入Binding</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue1()).to(exchange1()).with(ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过queuesToDeclare来声明队列</span></span><br><span class="line"><span class="comment"> * ,<span class="doctag">@Queue</span>注解中还可以进行一些详细配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">customer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//标注这个方法是收到消息后的回调方法</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue, //创建临时队列</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;springboot.mq&quot;, type = &quot;direct&quot;),</span></span><br><span class="line"><span class="meta">                    key = &quot;user.info&quot;</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h1><p>以下的代码都基于SpringBoot实现</p><h2 id="消息可靠投递"><a href="#消息可靠投递" class="headerlink" title="消息可靠投递"></a>消息可靠投递</h2><ul><li>confirm确认模式</li><li>return退回模式</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925202405082.png" alt="image-20210925202405082"></p><h3 id="confirm模式"><a href="#confirm模式" class="headerlink" title="confirm模式"></a>confirm模式</h3><p>修改配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.rabbitmq.publisher-confirm-type</span>: <span class="string">correlated</span></span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testConfirm</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置ConfirmCallBack</span></span><br><span class="line">    rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> RabbitTemplate.ConfirmCallback()&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * confirm回调函数</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> correlationData 相关配置信息</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> ack exchange交换机是否成功接收到了消息</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> cause 失败原因</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;confirm方法被执行了&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (ack)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;发送成功！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;发送失败，失败原因：&quot;</span> + cause);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//发送到不存在的交换机</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;inexist.exchange&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;test information&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="return模式"><a href="#return模式" class="headerlink" title="return模式"></a>return模式</h3><p>如果消息没有路由到Queue的处理方式：</p><ul><li>丢弃消息（默认）</li><li>返回给发送方ReturnCallBack</li></ul><p>修改配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.rabbitmq.publisher-returns</span>: <span class="string">true</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testReturn</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置交换机处理失败消息的模式</span></span><br><span class="line">    rabbitTemplate.setMandatory(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//设置ReturnCallBack</span></span><br><span class="line">    rabbitTemplate.setReturnsCallback(<span class="keyword">new</span> RabbitTemplate.ReturnsCallback() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * return回调函数</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> returned 这个参数已经封装了返回消息的所有信息，通过get方法获取</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(ReturnedMessage returned)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行了return方法&quot;</span>);</span><br><span class="line">            System.out.println(returned.getMessage());</span><br><span class="line">            System.out.println(returned.getReplyCode());</span><br><span class="line">            System.out.println(returned.getReplyText());</span><br><span class="line">            System.out.println(returned.getExchange());</span><br><span class="line">            System.out.println(returned.getRoutingKey());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//发送key不匹配任何队列</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;springboot.mq&quot;</span>,<span class="string">&quot;null.null&quot;</span>,<span class="string">&quot;test information&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Consumer-Ack"><a href="#Consumer-Ack" class="headerlink" title="Consumer Ack"></a>Consumer Ack</h2><p>消费端收到消息之后的确认方式</p><p>三种确认方式：</p><ul><li>自动确认：acknowledge=”none”</li><li>手动确认：acknowledge=”manual”</li><li>根据异常类型确认：acknowledge=”auto”</li></ul><p><strong>注意只有simple和direct模式可以设置手动确认，需要指定相应的交换器为simple或direct类型</strong></p><p>修改配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span> <span class="comment">#这里实际起作用的是simple的配置</span></span><br><span class="line">      <span class="attr">direct:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure><p>向容器中注入ChannelAwareMessageListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageListener <span class="title">ackListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ChannelAwareMessageListener() &#123;</span><br><span class="line">        <span class="comment">//指定监听队列</span></span><br><span class="line">        <span class="meta">@RabbitListener(queues = &quot;que1&quot;)</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> tag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;que1==========&gt;处理业务逻辑&quot;</span>);</span><br><span class="line">                <span class="comment">//第二个参数为是否支持多消息同时接收</span></span><br><span class="line">                channel.basicAck(tag, <span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;发生异常，拒绝接收&quot;</span>);</span><br><span class="line">                <span class="comment">//第二个参数同上，第三个参数为是否返回Queue重新发送</span></span><br><span class="line">                channel.basicNack(tag,<span class="keyword">true</span>,<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消费端限流"><a href="#消费端限流" class="headerlink" title="消费端限流"></a>消费端限流</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment">#设置同时接收的最大消息条数</span></span><br></pre></td></tr></table></figure><h2 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h2><p>存活时间：指定时间后未被消费的消息会被自动清除</p><p>可以对单个消息进行设置，也可以对整个队列进行设置</p><ul><li><p>队列设置</p><p>创建队列时添加参数，时间单位为毫秒</p><ul><li><p>网页实现</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926144508826.png" alt="image-20210926144508826"></p></li><li><p>代码实现</p><ul><li><p>自定义Que</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//通过map设置参数，参数名必须为指定的参数名，可以在网页端查看</span></span><br><span class="line">map.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">10000</span>);</span><br><span class="line">amqpAdmin.declareQueue(<span class="keyword">new</span> Queue(<span class="string">&quot;custom.que&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>, <span class="keyword">false</span>, map));</span><br></pre></td></tr></table></figure></li><li><p>使用QueBuilder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Queue queue = QueueBuilder.nonDurable(<span class="string">&quot;my.que&quot;</span>).ttl(<span class="number">10000</span>).build();</span><br><span class="line">amqpAdmin.declareQueue(queue);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>单消息设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rabbitTemplate.convertAndSend(<span class="string">&quot;springboot.mq&quot;</span>, <span class="string">&quot;user.info&quot;</span>, <span class="string">&quot;test message&quot;</span>, message -&gt; &#123;</span><br><span class="line">    <span class="comment">//设置TTL</span></span><br><span class="line">    message.getMessageProperties().setExpiration(<span class="string">&quot;10000&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><strong>如果设置了队列过期时间的同时设置了单个消息的过期时间</strong></p><ul><li>队列过期时，会将队列所有消息全部移除</li><li>消息一入队列就会判断这个消息的过期条件，但只有当这个消息在消息队列的顶部时才会决定是否移除</li></ul><h2 id="死信队列DLX"><a href="#死信队列DLX" class="headerlink" title="死信队列DLX"></a>死信队列DLX</h2><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926153958945.png" alt="image-20210926153958945"></p><p>Dead Letter Exchange：当消息成为Dead message之后，可以被重新发送到另一个交换机，这个交换机就是DLX</p><p>DLX实际上与一般的交换机没有什么区别，只是因为我们使用的功能不同，将其划分为DLX</p><p>消息成为死信的三种情况：</p><ul><li>队列消息长度达到上限</li><li>消费者拒接消费消息：basicNack/basicReject，并且不把消息重新放回原消息队列：requeue=false</li><li>原消息队列存在消过期设置，消息超时未被消费</li></ul><p><strong>具体实现</strong></p><ul><li><p>normal.exchange绑定normal.que</p></li><li><p>normal.que需要配置四个参数：<code>x-message-ttl, x-max-length, x-dead-letter-exchange, x-dead-letter-routing-key</code></p><p>对应最大ttl，队列最大长度，DLX交换机，DLX交换key</p></li><li><p>dead.exchange绑定dead.que</p></li></ul><p><strong>备份交换机</strong></p><p>原理与死信队列类似，目的是防止主交换机在使用过程中宕机</p><p>使用方法，创建交换机时添加参数<code>alternate-exchange</code></p><h2 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h2><p>消息进入队列后不会立即被消费，而是到达指定时间后才会被消费</p><p>RabbitMQ并没有提供延迟队列的功能，不过我们可以使用TTL+DLX的组合实现延迟队列我的效果，如下图为检查用户是否支付的流程图</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926164313081.png" alt="image-20210926164313081"></p><p>这里就因为与上面死信队列的例子类似，具体实现省略</p><h2 id="幂等性问题"><a href="#幂等性问题" class="headerlink" title="幂等性问题"></a>幂等性问题</h2><p>如果用户在支付业务中由于网络延迟在同一业务中发送了多条支付信息，如何保证最终仅执行一次业务？</p><p>一般使用全局ID，每次消费消息时判断是否已经消费过</p><ul><li><p>唯一ID+指纹码</p><p>利用一些手段生成唯一信息码，判断id是否存在数据库中，但在高并发场景可能会有性能问题</p></li><li><p>Redis原子性（推荐）</p><p>利用Redis执行setnx操作，天然具有幂等性，实现不重复消费</p></li></ul><h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><p>优先级队列0~255，优先级越大越优先执行</p><ul><li><p>添加/声明队列时添加参数<code>x-max-priority</code>：表示允许设置的最大优先级</p></li><li><p>发送方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rabbitTemplate.convertAndSend(<span class="string">&quot;springboot.mq&quot;</span>, <span class="string">&quot;user.info&quot;</span>, <span class="string">&quot;test message&quot;</span>, message -&gt; &#123;</span><br><span class="line">    <span class="comment">//设置优先级</span></span><br><span class="line">    message.getMessageProperties().setPriority(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="惰性队列"><a href="#惰性队列" class="headerlink" title="惰性队列"></a>惰性队列</h2><p>消息保存在内存中还是磁盘中？</p><p>惰性队列的消息是保存在磁盘中的</p><p>使用场景：消费者下线，宕机等原因长时间不能消费造成堆积时</p><p>在发送100W消息，每条消息大概占1KB时，不同队列占用内存1.2GB，惰性队列仅占用内存够1.5MB，性能提升很高</p><ul><li>正常情况：消息保存在内存中</li><li>惰性队列：消息保存在外存中</li></ul><p>创建队列时携带参数<code>x-queue-mode = lazy</code>即可开启</p><h1 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h1><h2 id="日志与监控"><a href="#日志与监控" class="headerlink" title="日志与监控"></a>日志与监控</h2><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>默认存放位置<code>/var/log/rabbitmq/rabbit@主机名.log</code></p><p>使用docker在容器内路径<code>/var/log/rabbitmq/log</code></p><h3 id="消息追踪"><a href="#消息追踪" class="headerlink" title="消息追踪"></a>消息追踪</h3><p>消息追踪会降低性能，一般只在生产和测试环境开启</p><p>打开trace相关配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl trace_on</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_tracing</span><br></pre></td></tr></table></figure><p>这时在网页控制台的Admin界面的右侧出现新的选项：Tracing</p><p>在这里我们可以添加自己的消息追踪文件</p><p><strong>需要注意的是，只有用户名和密码都为guest用户才能添加trace，否则会报错，具体原因未知</strong></p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>rabbitmq默认内存为总内存的40%</p><p><strong>修改可用内存大小</strong></p><p>当发现内存爆满，连接全部挂起的情景时，选择其中一种方式即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_vm_memory_high_watermark 百分比 <span class="comment">#设置百分比，一般取值为0.4~0.7</span></span><br><span class="line">rabbitmqctl set_vm_memory_high_watermark absolute 100MB <span class="comment">#设置绝对大小</span></span><br></pre></td></tr></table></figure><p><strong>修改预警外存大小</strong></p><p>当可用的外存大小小于指定值时开始预警</p><h1 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h1><h2 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h2><ul><li><p><strong>主备模式</strong></p><p>正常情况下备用节点不提供服务</p><p>也就是一个主/备方案，主节点提供读写，备用节点不提供读写。如果主节点挂了，就切换到备用节点，原来的备用节点升级为主节点提供读写服务，当原来的主节点恢复运行后，原来的主节点就变成备用节点，和 activeMQ 利用 zookeeper 做主/备一样，也可以一主多备。</p></li><li><p><strong>远程模式</strong></p><p>早期模式，目前使用较少</p><p>主机作负载均衡，超过阈值的数据交由副机处理</p></li><li><p><strong>镜像模式</strong></p><p>节点之间的数据可以进行同步</p></li><li><p><strong>多活模式</strong></p><p>多个负载均衡的数据节点集群</p><p><img src="https://upload-images.jianshu.io/upload_images/9167995-4e9be592613ebdbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/838/format/webp"></p></li></ul><h2 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h2><p>注意点（无论是不是使用docker）：</p><ul><li>主机名的设置</li><li>使用相同的Cookie文件</li></ul><p>创建三个RabbitMq容器</p><p>官方推荐使用<code>--erlang-cookie</code>来代替<code>RABBITMQ_ERLANG_COOKIE</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --hostname rabbitmq --name rabbitmq -p 15672:15672 -p 5672:5672 -e RABBITMQ_ERLANG_COOKIE=<span class="string">&#x27;rabbitcookie&#x27;</span> rabbitmq:3.8-management</span><br><span class="line">docker run -d --hostname rabbitmq-s1 --name rabbitmq-s1 -p 5673:5673 --link rabbitmq:rabbitmq -e RABBITMQ_ERLANG_COOKIE=<span class="string">&#x27;rabbitcookie&#x27;</span> rabbitmq:3.8-management</span><br><span class="line">docker run -d --hostname rabbitmq-s2 --name rabbitmq-s2 -p 5674:5674 --link rabbitmq:rabbitmq --link rabbitmq-s1:rabbitmq-s1 -e RABBITMQ_ERLANG_COOKIE=<span class="string">&#x27;rabbitcookie&#x27;</span> rabbitmq:3.8-management</span><br></pre></td></tr></table></figure><p>配置三个容器</p><ul><li><p>rabbitmq</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it rabbitmq bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li><li><p>rabbitmq-s1</p><p>–ram表示设置为内存节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it rabbitmq-s1 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@rabbitmq</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li><li><p>rabbitmq-s2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it rabbitmq-s2 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@rabbitmq</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li></ul><p>如果内存不足可以使用命令来设置最大内存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_vm_memory_high_watermark absolute 400MB</span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926223249017.png" alt="image-20210926223249017"></p><p>解除集群的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it rabbitmq-s1 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line">rabbitmqctl cluster_status</span><br><span class="line">rabbitmqctl forget_cluster_node rabbit@rabbitmq</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="配置镜像集群"><a href="#配置镜像集群" class="headerlink" title="配置镜像集群"></a>配置镜像集群</h2><p>现在我们搭建的集群是主备模式，不具备同步队列的功能的，如果主节点宕机，其中的消息会全部丢失</p><p>开启方法：</p><p>在网页管理面板点击上方Admin，再选择右边Polices，添加策略，这里给出一个示例</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926225341867.png" alt="image-20210926225341867"></p><p>这些配置表示：匹配前缀为mirror的所有交换机和队列，将他们备份2份(主机+从机一共2份)，使用自动选择模式，即系统为我们选择在哪一台从机上备份</p><p>查看效果：</p><p>手动创建一个新的队列，已经备份成功的队列会有显示</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926225600267.png" alt="image-20210926225600267"></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926225655853.png" alt="image-20210926225655853"></p><h2 id="联邦模式"><a href="#联邦模式" class="headerlink" title="联邦模式"></a>联邦模式</h2><h3 id="联邦交换机"><a href="#联邦交换机" class="headerlink" title="联邦交换机"></a>联邦交换机</h3><p>两个不同地区的服务器A，B：A地的用户想要查看B服务器中的数据，B地的用户想要查看A服务器中的数据</p><p>开启方式：在每台机器上进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_federation</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_federation_management</span><br></pre></td></tr></table></figure><p>数据由上游同步给下游，联邦交换机时交换机之间的通讯</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926230927648.png" alt="image-20210926230927648"></p><ol><li><p>先创建上游交换机：上游<code>up.exchange</code></p></li><li><p>打开右侧的Federation Upstreams，配置上游的节点信息</p><p>url格式：<code>amqp://用户名:密码@上游节点名</code></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926233401956.png" alt="image-20210926233401956"></p></li><li><p>打开右侧的Polices，为下游交换机配置上游节点</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926233544997.png" alt="image-20210926233544997"></p></li><li><p>配置成功之后可以在右侧Federation Status查看到联邦运行信息</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926233819454.png" alt="image-20210926233819454"></p></li></ol><h3 id="联邦队列"><a href="#联邦队列" class="headerlink" title="联邦队列"></a>联邦队列</h3><p>创建步骤与联邦交换机类似：</p><ol><li><p>创建上游队列<code>up.que</code></p></li><li><p>配置上游节点信息（如果已经配置则跳过）</p></li><li><p>添加Polices（把Apply to改为Queues）</p></li><li><p>查看节点信息</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926234530718.png" alt="image-20210926234530718"></p></li></ol><h2 id="Shovel"><a href="#Shovel" class="headerlink" title="Shovel"></a>Shovel</h2><p>也是一种同步数据的实现方式</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926234710535.png" alt="image-20210926234710535"></p><p>开启方式：在每台机器上进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_shovel</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_shovel_management</span><br></pre></td></tr></table></figure><p>Source端创建队列<code>Q1</code>，Destination端创建队列<code>Q2</code>，配置shovel：</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926235606901.png" alt="image-20210926235606901"></p><p>查看状态信息</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926235733416.png" alt="image-20210926235733416"></p>]]></content>
    
    
    <summary type="html">消息中间件中AMQP的实现之一RabbitMQ</summary>
    
    
    
    <category term="工具组件" scheme="http://lan5th.github.io/categories/%E5%B7%A5%E5%85%B7%E7%BB%84%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker基础</title>
    <link href="http://lan5th.github.io/2021/09/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Docker%E5%9F%BA%E7%A1%80/"/>
    <id>http://lan5th.github.io/2021/09/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Docker%E5%9F%BA%E7%A1%80/</id>
    <published>2021-09-22T12:20:33.447Z</published>
    <updated>2021-12-23T08:10:12.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker基础"><a href="#Docker基础" class="headerlink" title="Docker基础"></a>Docker基础</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>核心思想：打包装箱，每个箱子相互隔离</p><p>docker是基于Go语言开发的</p><p><strong>虚拟机和容器的区别</strong></p><ul><li><p>虚拟机的缺点</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210922213015004.png" alt="image-20210922213015004"></p><ul><li>资源占用多</li><li>冗余步骤多</li><li>启动很慢</li></ul></li><li><p>容器化技术</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210922212953106.png" alt="image-20210922212953106"></p><p>docker特点：</p><ul><li>容器内应用直接运行在宿主机的内核，容器没有自己的内核，也没有虚拟硬件，较为轻便</li><li>每个容器之间相互隔离，每个容器都有一个独立的文件系统，互不影响</li><li>更简单的运维：<ul><li>打包镜像发布测试，一键运行</li><li>更便捷的升级和扩容，测试环境高度一致</li><li>更高效的计算资源利用：内核级的虚拟化</li></ul></li></ul></li></ul><p>docker的组成</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210922214947781.png" alt="image-20210922214947781"></p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>环境是阿里云ESC的CentOS7，操作系统不同可能指令略有差别</p><p>检测系统版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/redhat-release <span class="comment">#检测CentOS系统版本</span></span><br></pre></td></tr></table></figure><p>安装准备环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -y表示所有的询问都默认选yes</span></span><br><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#卸载之前环境（如果存在）</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                docker-client \</span><br><span class="line">                docker-client-latest \</span><br><span class="line">                docker-common \</span><br><span class="line">                docker-latest \</span><br><span class="line">                docker-latest-logrotate \</span><br><span class="line">                docker-logrotate \</span><br><span class="line">                docker-engine</span><br><span class="line">  </span><br><span class="line"><span class="comment">#安装依赖包</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment">#配置阿里云镜像</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#更新软件包索引</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line"><span class="comment">#安装Docker CE(社区版)</span></span><br><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>启动docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">systemctl start  docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">docker version</span><br><span class="line">docker run hello-world</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment">#结束</span></span><br><span class="line">systemctl stop docker.service</span><br></pre></td></tr></table></figure><p>docker默认工作路径<code>/var/lib/docker</code></p><h2 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://lmdeal9c.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="Docker运行原理"><a href="#Docker运行原理" class="headerlink" title="Docker运行原理"></a>Docker运行原理</h2><p><strong>docker run的运行流程</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210922221803263.png" alt="image-20210922221803263"></p><p>Docker是一个CS结构的系统，docker的守护进程运行在主机上，通过socket从客户端访问</p><p>DockerServer接收Docker Client的命令并执行</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210922222202319.png" alt="image-20210922222202319"></p><p><strong>Docker为什么比虚拟机快？</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210922222402341.png" alt="image-20210922222402341"></p><ul><li>Docker比VM抽象层更少</li><li>新建容器时，docker不需要像VM那样重新加载一个操作系统，避免引导，而docker是基于宿主机，资源占用更少</li></ul><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h2><p>帮助文档地址<a href="https://docs.docker.com/reference/">Reference documentation | Docker Documentation</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version <span class="comment">#版本</span></span><br><span class="line">docker info <span class="comment">#系统信息，包括镜像和容器的数量</span></span><br><span class="line">docker 命令 --<span class="built_in">help</span> <span class="comment">#获取帮助</span></span><br></pre></td></tr></table></figure><ul><li><p>设置开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置docker开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="comment">#运行容器时设置开机自启</span></span><br><span class="line">docker run --restart=always 容器名称或容器ID</span><br><span class="line"><span class="comment">#未运行容器时设置开机自启</span></span><br><span class="line">docker update --restart=always 容器名称或容器ID</span><br></pre></td></tr></table></figure></li></ul><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><ul><li><p>查看镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images <span class="comment">#查看所有镜像</span></span><br><span class="line">-a <span class="comment">#显示所有镜像</span></span><br><span class="line">-q <span class="comment">#只显示镜像id</span></span><br></pre></td></tr></table></figure></li><li><p>搜索镜像（也可以手动在dockerhub上搜索）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名 <span class="comment">#在dockerhub上搜索镜像名</span></span><br><span class="line">--filter=STARS=3000 <span class="comment">#搜索stars大于3k的镜像</span></span><br></pre></td></tr></table></figure></li><li><p>下载镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名 <span class="comment">#下载镜像</span></span><br><span class="line"><span class="comment">#例</span></span><br><span class="line">docker pull mysql:latest <span class="comment">#可以通过[:tag]来指定版本</span></span><br></pre></td></tr></table></figure></li><li><p>删除镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像id <span class="comment">#删除指定id的镜像</span></span><br><span class="line">docker rmi -f <span class="variable">$&#123;docker images -aq&#125;</span> <span class="comment">#删除所有镜像</span></span><br></pre></td></tr></table></figure></li><li><p>自定义新建镜像</p><p>类似于VM的快照机制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#原理与Git类似，注意只能提交有运行记录的容器</span></span><br><span class="line">dockerc commit -m=<span class="string">&quot;描述信息&quot;</span> -a=<span class="string">&quot;作者&quot;</span> 容器id 目标镜像名 ：[TAG]</span><br></pre></td></tr></table></figure><p>我们commit过的容器将成为新的镜像保存在本地</p></li></ul><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><ul><li><p>运行容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run 镜像名或id <span class="comment">#启动指定镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一些常用参数</span></span><br><span class="line">--name=<span class="string">&quot;&quot;</span> <span class="comment">#指定容器名称，用于区分容器</span></span><br><span class="line">-d <span class="comment">#后台方式运行</span></span><br><span class="line">-it <span class="comment">#交互式运行，进入容器查看内容</span></span><br><span class="line">-p <span class="comment">#指定端口</span></span><br><span class="line">-p ip:主机端口:容器端口 <span class="comment">#绑定主机ip，端口与容器端口</span></span><br><span class="line">-p 主机端口:容器端口 <span class="comment">#绑定主机端口与容器端口，如8080:8080</span></span><br><span class="line">-p 容器端口 <span class="comment">#仅设定容器端口（外部无法连接）</span></span><br><span class="line">-P <span class="comment">#随机指定端口</span></span><br><span class="line">--rm <span class="comment">#测试运行，用完即删</span></span><br><span class="line">--net <span class="comment">#指定运行网路（一般用于自定义网络）</span></span><br><span class="line">--restart=always <span class="comment">#开机自启</span></span><br><span class="line">-e <span class="comment">#一些额外参数</span></span><br></pre></td></tr></table></figure></li><li><p>查看容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps <span class="comment">#查看正在运行的容器</span></span><br><span class="line">-a <span class="comment">#查看运行记录</span></span><br><span class="line">-n=num <span class="comment">#显示num个最近创建的容器</span></span><br><span class="line">-q <span class="comment">#仅显示容器编号</span></span><br></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#退出交互式容器</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment">#容器停止</span></span><br><span class="line">[ctrl] + [P] +[Q] <span class="comment">#退出交互式，但容器不停止</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进入交互式容器并开启新的终端</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器id /bin/bash</span><br><span class="line"><span class="comment">#进入容器正在执行的终端，不会启动新的进程</span></span><br><span class="line">docker attach 容器id </span><br></pre></td></tr></table></figure></li><li><p>删除容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm <span class="comment">#删除容器</span></span><br><span class="line">docker rm -f <span class="variable">$&#123;docker ps -aq&#125;</span> <span class="comment">#删除所有容器</span></span><br></pre></td></tr></table></figure></li><li><p>启动和重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id <span class="comment">#启动容器(需要能在运行记录中找到id)</span></span><br><span class="line">docker restart 容器id <span class="comment">#重启容器</span></span><br><span class="line">docker stop 容器id <span class="comment">#停止</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器id <span class="comment">#强制停止</span></span><br></pre></td></tr></table></figure></li><li><p>查看信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器id <span class="comment">#查看容器内部的进程信息</span></span><br><span class="line">docker inspect 容器id <span class="comment">#查看容器的详细信息</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210923134445856.png" alt="image-20210923134445856"></p><p>可以看到，docker容器id只是全部id前缀的部分截取</p></li><li><p>文件拷贝</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将容器内的文件拷贝到容器外</span></span><br><span class="line">docker cp 容器id:/home/Test.java /home</span><br><span class="line"><span class="comment">#将容器外的文件拷贝到容器内一般使用挂载盘符的方法实现</span></span><br><span class="line"><span class="comment">#只是简单修改的话还是可以直接拷贝，或者直接</span></span><br><span class="line">docker cp /home/Test.java 容器id:/home</span><br></pre></td></tr></table></figure></li></ul><p>常用命令图解：</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.mscto.com%2Fwp-content%2Fuploads%2F2020%2F02%2F20200216170310480.png&refer=http%3A%2F%2Fwww.mscto.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1634968755&t=fe923a747f73693437381a0db0ac9da3" alt="image"></p><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><ul><li><p>后台启动自动停止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d centOS</span><br><span class="line"><span class="comment">#后台运行后发现容器自动停止了</span></span><br></pre></td></tr></table></figure><p>原因：</p><p>后台运行docker容器必须指定前台进程，否则docker发现自己没有提供服务就会自动停止</p></li><li><p>查看日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 100 容器名或id</span><br></pre></td></tr></table></figure></li></ul><h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><h2 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock --restart=always --name portainer --privileged=<span class="literal">true</span> portainer/portainer</span><br></pre></td></tr></table></figure><p>在开放对应的端口号之后就可以通过外部访问</p><h1 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h1><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls <span class="comment">#查看本地所有卷</span></span><br></pre></td></tr></table></figure><p>如果数据保存在容器中，如果删除容器，数据也就会丢失，容器之间可以有一种数据共享的技术，Docker容器中产生的数据会同步到本地</p><p>卷技术：将容器内部的目录挂载到外部linux目录上，进行数据同步</p><p>目的：容器的持久化和同步操作，容器之间可以进行数据共享</p><h3 id="直接使用命令挂载"><a href="#直接使用命令挂载" class="headerlink" title="直接使用命令挂载"></a>直接使用命令挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录 镜像名</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v ~/<span class="built_in">test</span>:/home centos</span><br></pre></td></tr></table></figure><p>使用inspect命令查看详细信息</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210923212031628.png" alt="image-20210923212031628"></p><p>可以看到已经成功进行挂载，并且两边的文件夹已进行双向绑定，实际上是类似于硬链接的映射关系</p><p><strong>具名和匿名挂载</strong></p><p>其实就是挂载路径的体现方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-v 容器内路径 <span class="comment">#匿名挂载</span></span><br><span class="line">-v 卷名:容器内路径 <span class="comment">#具名挂载</span></span><br><span class="line">-v /主机目录:容器内部目录 <span class="comment">#指定路径挂载</span></span><br></pre></td></tr></table></figure><p>使用<code>docker volume ls</code>查看所有卷</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210923215551997.png" alt="image-20210923215551997"></p><ul><li>匿名挂载和指定路径挂在的卷名会自动生成</li><li>匿名挂载和具名挂载的默认主机挂载点为<code>/var/lib/docker/volumes/xxx/_data</code></li></ul><p><strong>读写权限</strong></p><p>通过给<code>-v</code>属性最后添加:ro或:rw来限制容器内部的读写权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录:ro 镜像名 <span class="comment">#容器内部目录只读权限</span></span><br><span class="line">docker run -it -v 主机目录:容器内目录:rw 镜像名 <span class="comment">#容器内部目录读写权限</span></span><br></pre></td></tr></table></figure><h3 id="通过DockerFile挂载"><a href="#通过DockerFile挂载" class="headerlink" title="通过DockerFile挂载"></a>通过DockerFile挂载</h3><p>编写用来构建docker镜像的脚本文件</p><p>注意左侧的命令大写，右侧的属性可以大小写</p><p><code>dockerfile01</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RROM centos</span><br><span class="line">VOLUME [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p>利用Dockerfile构建容器并挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f ~dockerFile01 -t newVolumeCentos:1.0 . <span class="comment">#注意最后有&#x27;.&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>多个容器同步数据</p><ul><li><p>先创建docker01容器，这里的<code>newVolumeCentos:1.0</code>是之前创建的自定义镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name docker02 newVolumeCentos:1.0</span><br></pre></td></tr></table></figure></li><li><p>使用<code>--volumes-from</code>属性指定挂载的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name docker02 --volume-from docker01 <span class="comment">#之后docker01与docker02两个容器中的指定文件夹就进行了绑定</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>构建自定义镜像的指令集合文件，默认名<code>Dockerfile</code>，如果在当前目录中编写了这个文件，构建镜像时就不需要<code>-f</code>指定Dockerfile文件</p><h3 id="Dockerfile指令功能"><a href="#Dockerfile指令功能" class="headerlink" title="Dockerfile指令功能"></a>Dockerfile指令功能</h3><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Ftva1.sinaimg.cn%2Flarge%2F00831rSTly1gdcgftwmk2j30xk0j0kbt.jpg&refer=http%3A%2F%2Ftva1.sinaimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1635042690&t=e12155fc4c207eb78705b86c247d80b3"></p><p>指令必须大写，参数可以大小写</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210924105115681.png" alt="image-20210924105115681"></p><p>我们还可以使用<code>docker history 镜像名</code>命令来查看镜像构建历史</p><p><strong>CMD和ENTRYPOINT的区别</strong></p><ul><li><p>CMD：不能追加命令，如：</p><p>DockFile中编写<code>CMD [&quot;ls&quot;,&quot;-a&quot;]</code></p><p>执行时<code>docker run mycentos -l</code>会报错</p></li><li><p>ENTRYPOINT：可以追加命令</p><p>与CMD不同，上面例子中的<code>docker run mycentos -l</code>可以正确执行</p></li></ul><h3 id="Dockerfile示例"><a href="#Dockerfile示例" class="headerlink" title="Dockerfile示例"></a>Dockerfile示例</h3><p>docker原生的centos镜像删减了许多功能，例如：</p><ul><li>没有设定工作目录，进入后默认在<code>\</code>路径</li><li>ifconfig不能使用</li><li>vim不能使用</li></ul><p>我们可以对原生的centos镜像进行增强，使得上面这些功能可以使用</p><ul><li><p>先编写自己的Dockerfile</p><p><code>myDockerfile</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER lan5th&lt;lan5th@foxmail.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/<span class="built_in">local</span></span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;---finish build---&quot;</span></span><br><span class="line">CMD <span class="string">&quot;/bin/bash&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f myDockerfile -t mycentos:0.1 .</span><br></pre></td></tr></table></figure></li><li><p>进入镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it mycentos:0.1</span><br></pre></td></tr></table></figure></li></ul><h2 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h2><h3 id="发布镜像到DockerHub"><a href="#发布镜像到DockerHub" class="headerlink" title="发布镜像到DockerHub"></a>发布镜像到DockerHub</h3><p>登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u 用户名 <span class="comment">#推荐执行之后再输入密码</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push lan5th/mycentos:0.1 <span class="comment">#发布镜像</span></span><br></pre></td></tr></table></figure><p><strong>注意：镜像名一般需要改为<code>用户名/镜像名</code>的格式</strong></p><p>更改镜像名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag mycentos:0.1 lan5th&#x2F;mycentos:0.1</span><br></pre></td></tr></table></figure><h3 id="发布镜像到阿里云镜像仓库"><a href="#发布镜像到阿里云镜像仓库" class="headerlink" title="发布镜像到阿里云镜像仓库"></a>发布镜像到阿里云镜像仓库</h3><ol><li>进入阿里云容器镜像产品</li><li>创建个人实例并进入</li><li>创建命名空间</li><li>创建容器镜像</li><li>根据官方文档的操作进行镜像操作</li></ol><p><img src="https://img2.baidu.com/it/u=2518245647,3522207224&fm=26&fmt=auto"></p><h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><h2 id="veth-pair"><a href="#veth-pair" class="headerlink" title="veth-pair"></a>veth-pair</h2><p>成对的虚拟设备接口，充当着桥梁的身份，连接各种虚拟网络设备</p><p>当我们启动docker容器时，docker会为容器自动分配ip地址，并且每次启动分配到的ip地址可能不同</p><p>当我们启动两个centos容器时(使用<code>ip addr</code>查看网卡)</p><ul><li><p>主机所有网卡</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210924143943084.png" alt="image-20210924143943084"></p><p>1：本机网卡</p><p>2：阿里云网卡</p><p>3：docker默认网卡</p><p>41：centos-01网卡的主机接口</p><p>43：centos-02网卡的主机接口</p></li><li><p>centos-01所有网卡</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210924144251480.png" alt="image-20210924144251480"></p><p>1：主机网卡</p><p>40：centos-01网卡的容器接口</p></li><li><p>centos-02所有网卡</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210924144500082.png" alt="image-20210924144500082"></p><p>1：主机网卡</p><p>42：centos-02网卡的容器接口</p></li></ul><p>veth-pair桥接网卡图解：</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210924142936692.png" alt="image-20210924142936692"></p><h2 id="无需配置ip地址的网络交互"><a href="#无需配置ip地址的网络交互" class="headerlink" title="无需配置ip地址的网络交互"></a>无需配置ip地址的网络交互</h2><p>由于ip地址是docker自动分配的，当我们操作具体业务时不可能每次部署都要手动配置ip地址</p><p>解决方法：</p><ul><li><p>方式一：运行镜像时添加<code>--link</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name centos-02 --link centos-01 centos</span><br></pre></td></tr></table></figure><p>这种方式只能从centos-02连通centos-01，反之则不行</p></li><li><p>方式二：自定义网络</p><p><strong>网络模式</strong></p><ul><li>bridge：桥接模式，一般自定义网络也使用桥接模式</li><li>none：不配置网络</li><li>host：和主机共享网络</li><li>container：容器网络连通（局限大，使用少）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br></pre></td></tr></table></figure><p>使用<code>docker network ls</code>查看，发现我们的自定义网络已经创建成功</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210924154021079.png" alt="image-20210924154021079"></p><p>以自定义网络创建新镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -P --name centos-01 --net mynet centos</span><br><span class="line">docker run -it -P --name centos-02 --net mynet centos</span><br></pre></td></tr></table></figure><p>从centos-01使用ping命令测试与centos-02的连接</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210924154846899.png" alt="image-20210924154846899"></p><p>说明我们的自定义网络已经能够实现我们的目标</p></li></ul><p>之前的配置能够实现同一网段中使用容器name互联，那么如何使网段之间也能实现相同的功能？</p><h2 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h2><p>网段之间直接连通是不现实的，但我们可以将容器与其他网段的网络进行连通</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect 网络名 容器名 <span class="comment">#连通指定网络和容器</span></span><br></pre></td></tr></table></figure><p>相当于在指定网络和容器之间有新添加了一个网卡，之后就可以跨网段使用容器name进行互联</p><h1 id="实战：部署SpringBoot项目"><a href="#实战：部署SpringBoot项目" class="headerlink" title="实战：部署SpringBoot项目"></a>实战：部署SpringBoot项目</h1><ol><li><p>maven package打包成jar包</p></li><li><p>编写Dockerfile文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line">COPY *.jar /app.jar</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;--server.port=8080&quot;</span>]</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p>把这两个文件发送到服务器上</p></li><li><p>构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myspringboot .</span><br></pre></td></tr></table></figure></li><li><p>运行镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name lan5th-springboot-web myspringboot</span><br></pre></td></tr></table></figure></li><li><p>查看容器运行端口<code>docker ps</code></p></li><li><p>进行测试<code>curl localhost:49155/hello</code></p></li></ol>]]></content>
    
    
    <summary type="html">docker基础入门</summary>
    
    
    
    <category term="微服务" scheme="http://lan5th.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot高级</title>
    <link href="http://lan5th.github.io/2021/09/22/JavaEE/SpringBoot%E9%AB%98%E7%BA%A7/"/>
    <id>http://lan5th.github.io/2021/09/22/JavaEE/SpringBoot%E9%AB%98%E7%BA%A7/</id>
    <published>2021-09-22T06:22:04.971Z</published>
    <updated>2022-07-22T05:01:15.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring缓存"><a href="#Spring缓存" class="headerlink" title="Spring缓存"></a>Spring缓存</h1><h2 id="缓存原理"><a href="#缓存原理" class="headerlink" title="缓存原理"></a>缓存原理</h2><ul><li><p>缓存自动配置类CacheAutoConfiguration，导入CacheConfigurationImportSelector</p></li><li><p>CacheConfigurationImportSelector，获取所有的CacheConfiguration</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210922151815235.png" alt="image-20210922151815235"></p></li><li><p>默认SimpleCacheConfiguration生效：给容器中注册了一个CacheManager：ConcurrentMapCacheManager</p></li><li><p>ConcurrentMapCacheManager可以获取和创建ConcurrentMapCache类型的缓存组件，将数据保存在ConCurrentMap中</p></li></ul><h2 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h2><ol><li><p>方法运行之前，先去查询缓存组件，按照cacheNames指定的名字获取相应的缓存（如果没有Cache组件则会自动创建）</p></li><li><p>去Cache中查找缓存内容，使用key（默认方法参数）默认使用simpleKeyGenerator生成key</p><p>simpleKeyGenerator策略：</p><ul><li>如果没有参数，key=new SimpleKey();</li><li>如果只有一个参数，key=参数值</li><li>如果有多个参数，key=new SimpleKey(params);</li></ul></li><li><p>没有查到缓存就会调用目标方法，如果缓存中存在key，则从缓存中获取值</p></li><li><p>将目标方法返回的结果放回缓存中</p></li></ol><h2 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h2><p>注解属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cacheNames/value <span class="comment">#指定缓存组件名字，可以以数组形式指定多个缓存组件</span></span><br><span class="line">key <span class="comment">#指定key，默认为方法参数的值，可以使用SpEL表达式</span></span><br><span class="line">keyGenerator <span class="comment">#指定key生成器，与key二选一使用</span></span><br><span class="line">cacheManager <span class="comment">#指定缓存管理器</span></span><br><span class="line">cacheResolver <span class="comment">#指定缓存解析器，与cacheManager二选一使用</span></span><br><span class="line">condition <span class="comment">#指定条件下再缓存</span></span><br><span class="line">unless <span class="comment">#否定缓存，与condition相反，指定条件下不缓存</span></span><br><span class="line">sync <span class="comment">#异步缓存模式</span></span><br></pre></td></tr></table></figure><ul><li><p>主类注解<code>@EnableCaching</code>开启缓存功能</p></li><li><p>方法注解<code>@Cacheable</code>缓存返回结果，如果有缓存直接查询缓存而不调用方法</p><ul><li><p>key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value = &quot;userInfo&quot;, key = &quot;#root.method.getName() + &#x27;[&#x27; + #id + &#x27;]&#x27;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getById</span><span class="params">(Serializable id)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义keyGenerator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;myKeyGenerator&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object o, Method method, Object... objects)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> method.getName()+ Arrays.asList(objects);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value = &quot;userInfo&quot;, keyGenerator = &quot;myKeyGenerator&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getById</span><span class="params">(Serializable id)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p>condition&amp;unless</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个参数大于1缓存，并且等于2时不缓存</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;userInfo&quot;, condition = &quot;#a0&gt;1&quot;, unless = &quot;#a0==2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getById</span><span class="params">(Serializable id)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法注解<code>@CachePut</code>调用方法之后保存或更新缓存结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut(value = &quot;userInfo&quot;, key = &quot;&#x27;userInfo&#x27; + &#x27;[&#x27; + #entity.id + &#x27;]&#x27;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateById</span><span class="params">(User entity)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法注解<code>@CacheEvict</code>缓存清除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(value = &quot;userInfo&quot;, key = &quot;&#x27;userInfo&#x27; + &#x27;[&#x27; + #id + &#x27;]&#x27;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeById</span><span class="params">(Serializable id)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><ul><li><code>AllEntries</code>属性：默认为false，为true时清空所有缓存</li><li><code>beforeInvocation</code>属性：默认为false，是否在方法之前执行</li></ul></li><li><p>方法注解<code>Caching</code>配置复杂的缓存情景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Caching(</span></span><br><span class="line"><span class="meta">    cacheable = &#123;</span></span><br><span class="line"><span class="meta">        @Cacheable(value = &quot;byName&quot;, key = &quot;name&quot;)</span></span><br><span class="line"><span class="meta">    &#125;,</span></span><br><span class="line"><span class="meta">    put = &#123;</span></span><br><span class="line"><span class="meta">        @CachePut(value = &quot;byId&quot;, key = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">        @CachePut(value = &quot;byAge&quot;, key = &quot;age&quot;),</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">save</span><span class="params">(User entity)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p>类注解<code>CacheConfig</code>，用来配置一整个类中的缓存配置，如下例类中所有的缓存注解都不需要再次配置cacheNames/value属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheConfig(cacheNames = &quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>如果要使用同一个缓存，需要注意这些注解的key是否含义相同（不是简单的代码相同！！）</strong></p><h2 id="切换缓存中间件"><a href="#切换缓存中间件" class="headerlink" title="切换缓存中间件"></a>切换缓存中间件</h2><p>一般来说，只要容器中注入了相应的Bean，SpringBoot就会自动切换CacheManager，如注入RedisTemplate组件之后RedisCacheManager会自动开启，并关闭默认的ConcurrentMapCacheManager</p><p>自定义RedisTemplate和RedisCacheManager，使用json序列化替代默认的jdk序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span></span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义Jackson序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        template.setDefaultSerializer(jsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">redisCacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class="line">        <span class="comment">//初始化一个RedisCacheWriter</span></span><br><span class="line">        RedisCacheWriter redisCacheWriter = RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//设置CacheManager的值序列化方式为json序列化</span></span><br><span class="line">        RedisSerializer&lt;Object&gt; jsonSerializer = <span class="keyword">new</span> GenericJackson2JsonRedisSerializer();</span><br><span class="line">        RedisSerializationContext.SerializationPair&lt;Object&gt; pair = RedisSerializationContext.SerializationPair.fromSerializer(jsonSerializer);</span><br><span class="line">        RedisCacheConfiguration defaultCacheConfig = RedisCacheConfiguration.defaultCacheConfig().serializeValuesWith(pair)</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">10</span>));<span class="comment">//设置过期时间</span></span><br><span class="line">        <span class="comment">//初始化RedisCacheManager</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisCacheManager(redisCacheWriter, defaultCacheConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><p>概念图解</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925104140962.png" alt="image-20210925104140962"></p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ul><li><p>消息服务的对象两个类型</p><ul><li>消息代理message broker</li><li>目的地destination</li></ul><p>消息发送这发送消息后由消息代理接管并传递到目的地</p></li><li><p>消息队列的目的地形式</p><ul><li><p>队列queue：点对点通信</p><p>如果有多个接收者，一旦有接收者最先拿到消息，这个消息就会被删除，其他接收者不会接收到消息</p></li><li><p>主题topic：发布和订阅消息通信</p><p>所有接收者都能接收到发布的主题消息</p></li></ul></li><li><p>消息代理规范</p><ul><li><p>JMS(Java Message Service)</p><p>基于JVM消息代理的规范，代表：ActiveMQ，HornetMQ</p></li><li><p>AMQP(Advanced Message Queing Protocol)</p><p>高级消息队列协议，兼容JMS，代表：RabbitMQ</p></li></ul></li></ul><h2 id="原理简析"><a href="#原理简析" class="headerlink" title="原理简析"></a>原理简析</h2><ul><li>RabbitAutoConfiguration配置了连接工厂ConnectionFactory</li><li>RabbitProperties封装了RabbitMQ的配置，对应前缀<code>spring.rabbitmq</code></li><li>注入了模板RabbitTemplate</li><li>注入了AmqpAdmin：RabbitMQ的系统管理组件</li></ul><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>包依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入amqp协议，即RabbitMQ的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">x.x.x.x</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure><h2 id="RabbitTemplate"><a href="#RabbitTemplate" class="headerlink" title="RabbitTemplate"></a>RabbitTemplate</h2><p>使用RabbitTemplate发送和接收消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot02ApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//方式一：rabbitTemplate.send(交换机,key,message)</span></span><br><span class="line">        <span class="comment">//这种方式需要我们自定义消息体内容和消息头</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：rabbitTemplate.convertAndSend(交换机,key,object)</span></span><br><span class="line">        <span class="comment">//只要传入需要发送的对象，就会被自动序列化并发送给RabbitMQ服务器</span></span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;this is a msg from client&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;list&quot;</span>, Arrays.asList(<span class="keyword">true</span>, <span class="number">2</span>, <span class="string">&quot;object3&quot;</span>));</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;springboot.mq&quot;</span>,<span class="string">&quot;user.warning&quot;</span>,map);</span><br><span class="line">        System.out.println(<span class="string">&quot;=========&gt;消息发送完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从que1接收消息，对应key：user.*</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getTest1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//接收消息并自动反序列化</span></span><br><span class="line">        Object que1 = rabbitTemplate.receiveAndConvert(<span class="string">&quot;que1&quot;</span>);</span><br><span class="line">        System.out.println(que1.getClass());</span><br><span class="line">        System.out.println(que1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从que2接收消息，对应key：*.info</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getTest2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object que2 = rabbitTemplate.receiveAndConvert(<span class="string">&quot;que2&quot;</span>);</span><br><span class="line">        System.out.println(que2.getClass());</span><br><span class="line">        System.out.println(que2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于默认使用的是jdk序列化，如果我们需要可以注入我们自己的MessageConverter，使其转换为json序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jackson2JsonMessageConverter <span class="title">messageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解开发RabbitMQ"><a href="#注解开发RabbitMQ" class="headerlink" title="注解开发RabbitMQ"></a>注解开发RabbitMQ</h2><p>主类上添加<code>@EnableRabbit</code>以开启注解功能</p><p>使用注解监听队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//转换器会将消息内容自动转换为实体类</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;que1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenQue1</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user.getClass());</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Message接收消息能够拿到消息的完整信息</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;que2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenQue2</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        System.out.println(message.getClass());</span><br><span class="line">        System.out.println(message.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925195337485.png" alt="image-20210925195337485"></p><h2 id="AmqpAdmin"><a href="#AmqpAdmin" class="headerlink" title="AmqpAdmin"></a>AmqpAdmin</h2><p>通过AmqpAdmin就可以进行消息队列的一系列操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot02ApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AmqpAdmin amqpAdmin;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建交换器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        amqpAdmin.declareExchange(<span class="keyword">new</span> DirectExchange(<span class="string">&quot;amqpadmin.exchange&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createQue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        amqpAdmin.declareQueue(<span class="keyword">new</span> Queue(<span class="string">&quot;amqpadmin.que&quot;</span>,<span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        amqpAdmin.declareBinding(<span class="keyword">new</span> Binding(<span class="string">&quot;amqpadmin.que&quot;</span>, Binding.DestinationType.QUEUE, <span class="string">&quot;amqpadmin.exchange&quot;</span>,<span class="string">&quot;amqp.info&quot;</span>,<span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ElasticSearch检索"><a href="#ElasticSearch检索" class="headerlink" title="ElasticSearch检索"></a>ElasticSearch检索</h1><p>SpringBoot支持两种交互技术：</p><ul><li><p>Jest(默认不生效)</p><p>需要导入工具包</p></li><li><p>SpringData Elasticsearch</p><ul><li>使用ElasticsearchTemplate来操作ES</li><li>编写ElasticsearchRepository子接口来操作ES</li></ul></li></ul><h2 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.searchbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注入JestClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JestConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JestClient <span class="title">jestCline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JestClientFactory factory = <span class="keyword">new</span> JestClientFactory();</span><br><span class="line">        <span class="comment">//配置服务端信息</span></span><br><span class="line">        factory.setHttpClientConfig(<span class="keyword">new</span> HttpClientConfig</span><br><span class="line">                .Builder(<span class="string">&quot;http://47.113.225.244:9200&quot;</span>)</span><br><span class="line">                .multiThreaded(<span class="keyword">true</span>)</span><br><span class="line">                .build());</span><br><span class="line">        <span class="keyword">return</span> factory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="comment">//指定文档id</span></span><br><span class="line">    <span class="meta">@JestId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JestApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JestClient jestClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加索引并添加数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testPut</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;hello,world!&quot;</span>);</span><br><span class="line">        Index index = <span class="keyword">new</span> Index.Builder(article).index(<span class="string">&quot;docs&quot;</span>).type(<span class="string">&quot;news&quot;</span>).build();</span><br><span class="line">        DocumentResult result = jestClient.execute(index);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String json = <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;query\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;match\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      \&quot;author\&quot;: \&quot;张三\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        Search search = <span class="keyword">new</span> Search.Builder(json).addIndex(<span class="string">&quot;docs&quot;</span>).addType(<span class="string">&quot;news&quot;</span>).build();</span><br><span class="line">        SearchResult result = jestClient.execute(search);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现Repository接口"><a href="#实现Repository接口" class="headerlink" title="实现Repository接口"></a>实现Repository接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这里指定索引名</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;docs2&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//指定文档id</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">3</span>);</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Iterable&lt;User&gt; users = userRepository.findAll();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Template"><a href="#使用Template" class="headerlink" title="使用Template"></a>使用Template</h2><p>这部分的使用，以及ElasticSearch的安装的其他事项在我的另一篇博客ElasticSearch中有详细介绍</p><h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>主运行类上添加注解开启异步功能<code>@EnableAsync</code></p><p>处理访问请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AsyncService asyncService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        asyncService.hello();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设AsyncService类处理后台业务需要三秒时间(这里使用线程睡眠表达含义)，访问/hello路径需要等待三秒才能访问页面内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//标识这是一个异步方法</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理数据中......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当标识异步方法之后，访问/hello路径不再需要等待三秒才能访问页面内容</p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>运行主类上添加注解开启定时功能<code>@EnableScheduling</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定时注解格式&#x27;* * * * * *&#x27;共六项</span></span><br><span class="line"><span class="comment">* 每项代表下面的一个时间节点，并用空格分隔</span></span><br><span class="line"><span class="comment">* ‘*’代表任意时刻，示例：</span></span><br><span class="line"><span class="comment">* `0 * * * * MON_FRI`代表周一到周五每分钟执行一次</span></span><br><span class="line"><span class="comment">* second</span></span><br><span class="line"><span class="comment">* minute</span></span><br><span class="line"><span class="comment">* hour</span></span><br><span class="line"><span class="comment">* day of month</span></span><br><span class="line"><span class="comment">* month</span></span><br><span class="line"><span class="comment">* day of week</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Scheduled(cron = &quot;0 * * * * MON-FRI&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduled</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Scheduled Hello......&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211001162806033.png" alt="image-20211001162806033"></p><p>一些常用参数举例</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211001163014197.png" alt="image-20211001163014197"></p><h2 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用发送邮箱的服务，需要自己在对应邮箱设置中开启smtp服务并获取授权码，这里的password不是登录邮箱用的密码，而是开启服务时获得的授权码</p><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">jteam6register@163.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxx</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span></span><br><span class="line">              <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><p>安全框架的主要作用：</p><ul><li>认证Authentication：建立用户</li><li>授权Authorization：给用户授予访问权限</li></ul><h2 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringSecurity启动器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--整合thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制授权规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">        <span class="comment">//开启登录功能</span></span><br><span class="line">        <span class="comment">//1.&#x27;/login&#x27;请求来到登录页(未授权自动重定向)</span></span><br><span class="line">        <span class="comment">//2.重定向到&#x27;login?error&#x27;表示登录失败</span></span><br><span class="line">        <span class="comment">//3.默认发送post方法的&#x27;/login&#x27;请求来进行登录认证</span></span><br><span class="line">        <span class="comment">//4.自定义登录页中发送post方法的loginPage(与页面url相同)请求来进行登录认证</span></span><br><span class="line">        http.formLogin().loginPage(<span class="string">&quot;/loginPage&quot;</span>).usernameParameter(<span class="string">&quot;user&quot;</span>).passwordParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        <span class="comment">//开启注销功能</span></span><br><span class="line">        <span class="comment">//1.&#x27;/logout&#x27;请求来到用户注销，清空session</span></span><br><span class="line">        <span class="comment">//2.默认注销成功重定向到到&#x27;/login?logout&#x27;页面</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">//开启记住功能</span></span><br><span class="line">        <span class="comment">//登录成功后会将cookie发给浏览器保存，之后访问页面只要带上cookie就会自动登录</span></span><br><span class="line">        <span class="comment">//注销会删除cookie</span></span><br><span class="line">        http.rememberMe();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制认证规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> auth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//需要选择密码的加密方式，否则会报错</span></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">                .withUser(<span class="string">&quot;lan5th&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>,<span class="string">&quot;vip2&quot;</span>,<span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;zhangsan&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视图解析类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;level1/vip1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;level2/vip2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">level3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;level3/vip3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/loginPage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loginPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>权限分流页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">    当前用户：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    当前角色：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.authorities&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1&#125;&quot;</span>&gt;</span>vip1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2&#125;&quot;</span>&gt;</span>vip2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3&#125;&quot;</span>&gt;</span>vip3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/upload&#125;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;headerImg&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photos&quot;</span> <span class="attr">multiple</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/loginPage&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>登录页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是登录页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/loginPage&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rememberme&quot;</span>&gt;</span>记住我<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用数据库中的数据来进行用户授权"><a href="#使用数据库中的数据来进行用户授权" class="headerlink" title="使用数据库中的数据来进行用户授权"></a>使用数据库中的数据来进行用户授权</h2><p>UserDetailsService实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里因为本项目中也使用了User类，只能使用全类名进行引用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UsernameNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String s)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//这里继承了MybatisPlus的实现，可以选择其他的实现方式来查询数据库</span></span><br><span class="line">        QueryWrapper&lt;com.example.mybatisplus.model.domain.User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;name&quot;</span>, s);</span><br><span class="line">        com.example.mybatisplus.model.domain.User userInfo = userService.getOne(wrapper);</span><br><span class="line">        <span class="keyword">if</span> (userInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里也必须指定密码的编码方式</span></span><br><span class="line">        BCryptPasswordEncoder encoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        <span class="comment">//设定用户名、加密密码 和 相应权限</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(userInfo.getName(), encoder.encode(userInfo.getPassword()), AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;ADMIN&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制授权规则，详细功能在上面已经给出，这里不再赘述</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/api/user/test&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>);</span><br><span class="line">        http.formLogin().usernameParameter(<span class="string">&quot;user&quot;</span>).passwordParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        http.rememberMe();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入UserDetailsService的实现类</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailImpl <span class="title">userDetails</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDetailImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定制认证规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> auth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//需要选择密码的加密方式，否则会报错</span></span><br><span class="line">        <span class="comment">//使用数据库用户验证</span></span><br><span class="line">        auth.userDetailsService(userDetails()).passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h1><h2 id="token简介"><a href="#token简介" class="headerlink" title="token简介"></a>token简介</h2><p>token一般包含三部分：</p><ul><li><p>header</p><p>一般包含typ（token类型）和alg（加密算法）</p></li><li><p>payload</p><p>保存用户信息（比如id）</p></li><li><p>signature</p><p>由header和payload联合加密形成的签名</p></li></ul><p>最后组合起来的token格式为：header.payload.signature</p><p>服务器进行token的有效验证时，先将收到的前两部分header和payload用相应算法形成结果签名，再将得到的签名与第三部分的signature进行对比，如果相同则验证通过</p><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.18.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义注解</p><p>@PassToken跳过token验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PassToken &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@UserLoginToken进行用户token验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UserLoginToken &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取JWT token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JWT.create().withAudience(String.valueOf(user.userId)).sign(Algorithm.HMAC256(user.getPassword()));</span><br></pre></td></tr></table></figure><p>自定义拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object object)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String token = httpServletRequest.getHeader(<span class="string">&quot;token&quot;</span>);<span class="comment">// 从 http 请求头中取出 token</span></span><br><span class="line">        <span class="comment">// 如果不是映射到方法直接通过</span></span><br><span class="line">        <span class="keyword">if</span> (!(object <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) object;</span><br><span class="line">        Method method = handlerMethod.getMethod();</span><br><span class="line">        <span class="comment">//检查是否有passtoken注释，有则跳过认证</span></span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(PassToken.class)) &#123;</span><br><span class="line">            PassToken passToken = method.getAnnotation(PassToken.class);</span><br><span class="line">            <span class="keyword">if</span> (passToken.required()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查有没有需要用户权限的注解</span></span><br><span class="line">        <span class="keyword">if</span> (method.isAnnotationPresent(UserLoginToken.class)) &#123;</span><br><span class="line">            UserLoginToken userLoginToken = method.getAnnotation(UserLoginToken.class);</span><br><span class="line">            <span class="keyword">if</span> (userLoginToken.required()) &#123;</span><br><span class="line">                <span class="comment">// 执行认证</span></span><br><span class="line">                <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;无token，请重新登录&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 获取 token 中的 user id</span></span><br><span class="line">                String userId;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//解码</span></span><br><span class="line">                    userId = JWT.decode(token).getAudience().get(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JWTDecodeException j) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;401&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                User user = userService.getById(userId);</span><br><span class="line">                <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;用户不存在，请重新登录&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 验证 token</span></span><br><span class="line">                JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(user.getPassword())).build();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jwtVerifier.verify(token);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;401&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest,</span></span></span><br><span class="line"><span class="function"><span class="params">                           HttpServletResponse httpServletResponse,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest,</span></span></span><br><span class="line"><span class="function"><span class="params">                                HttpServletResponse httpServletResponse,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationInterceptor <span class="title">authenticationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AuthenticationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(authenticationInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义注解</p><p>进行访问时带上之前服务器签名过的token就能进行用户信息的验证</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220630204802.png" alt="image-20211210192706212"></p><h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><p>分布式架构遇到的四个核心问题：</p><ol><li><p>这么多服务，客户端应该如何去访问</p><p>api网管，服务路由</p></li><li><p>这么多服务，服务之间应该如何通信</p><p>Http或RPC框架，异步调用</p></li><li><p>这么多服务，如何管理</p><p>服务注册与发现</p></li><li><p>服务宕机应该怎么做</p><p>熔断机制，服务降级</p></li></ol><p>注重原因：网络是不可靠的</p><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>Remote Procedure Call：远程过程调用</p><p>是一种进程间的通信方式，是一种技术思想，不是规范，突出程序调用另一个网络空间中的过程或函数</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211001224205471.png" alt="image-20211001224205471"></p><p>两个核心：</p><ul><li>通信</li><li>序列化</li></ul><h2 id="Dubbo-Zookeeper"><a href="#Dubbo-Zookeeper" class="headerlink" title="Dubbo+Zookeeper"></a>Dubbo+Zookeeper</h2><p><strong>Dubbo</strong></p><p>Dubbo是一个高性能、轻量级的RPC通信框架，提供了三大核心能力：</p><ul><li>面向接口的远程方法调用</li><li>智能容错和负载均衡</li><li>服务启动注册和发现</li></ul><p>现在已经被Apache基金会接管</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211001225230412.png" alt="image-20211001225230412"></p><p>Dubbo默认端口20880</p><p><strong>ZooKeeper</strong></p><p>zookeeper是一款Dubbo的注册中心服务器程序</p><p>docker安装zookeeper，默认端口2181</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull zookeeper:3.7.0</span><br><span class="line">docker run --name zookeeper -p 2181:2181 --restart always -d zookeeper:3.7.0</span><br></pre></td></tr></table></figure><p><strong>Dubbo-admin</strong></p><p>dubbo-admin是一个监控管理后台，可以查看我们注册和消费了的服务的具体信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker pull chenchuxin/dubbo-admin</span><br><span class="line"></span><br><span class="line">docker run -it -d --name dubbo-admin \</span><br><span class="line">-v /xxx/xxx/dubbo-admin:/data \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-e dubbo.registry.address=zookeeper://47.113.225.244:2181 \</span><br><span class="line">-e dubbo.admin.root.password=root \</span><br><span class="line">-e dubbo.admin.guest.password=root \</span><br><span class="line">chenchuxin/dubbo-admin</span><br></pre></td></tr></table></figure><p>这时访问8080端口并输入用户名和密码就能看到管理页面了</p><p><strong>依赖</strong></p><p>服务端和客户端都需要引入dubbo和zkclient的依赖</p><p>服务端和客户端都需要引入dubbo和zkclient的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--不要导成alibaba的依赖了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--不导入下面这些包会报一大堆的错--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排除这个slf4j-log4j12--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ol><li>引入依赖dubbo和zkclient的依赖</li><li>配置dubbo扫描包和注册中心地址</li><li>使用<code>@Service</code>发布服务</li><li>启动应用</li></ol><p>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">provider</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://47.113.225.244:2181</span></span><br><span class="line"><span class="meta">dubbo.scan.base-package</span>=<span class="string">com.example.provider.service</span></span><br></pre></td></tr></table></figure><p>服务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.provider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意这里的@Service是dubbo的Service，目的是注册服务</span></span><br><span class="line"><span class="comment">//@Service注解会向注册中心注册TicketService的全类名，包括完整路径</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;一张电影票&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">provider</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://47.113.225.244:2181</span></span><br></pre></td></tr></table></figure><p>服务接口</p><p>==警告：这里的全类名路径(包路径)必须与服务端完全相同，不然会报错==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.provider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户服务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里的@Service是Spring的注解</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Reference注解会将TicketService全类名去注册中心进行匹配，</span></span><br><span class="line">    <span class="comment">//将注册中心已经注册的相同全类名的实现类进行注入</span></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    TicketService ticketService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ticketService.getTicket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplicationTests</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   UserService userService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      String ticket = userService.getTicket();</span><br><span class="line">      System.out.println(<span class="string">&quot;买到票了：&quot;</span>+ticket);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211001222612665.png" alt="image-20211001222612665"></p><p>待补充</p><hr><h1 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h1><p>四种情况实现热部署</p><ul><li>禁用模板引擎的缓存，项目运行过程中build就可以重新编译页面并生效</li><li>SpringLoaded：Spring官方的热部署程序</li><li>JRebel：收费的热部署插件</li><li>SpringBoot Devtools</li></ul><p><strong>SpringBoot Devtools</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在运行项目时修改文件后只需要Build Project(快捷键ctrl+F9)就可以将改动部署到运行中的应用上，实时查看效果，不需要重启项目</p>]]></content>
    
    
    <summary type="html">redis数据库以及Jedis连接Java</summary>
    
    
    
    <category term="JavaEE" scheme="http://lan5th.github.io/categories/JavaEE/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux和服务器</title>
    <link href="http://lan5th.github.io/2021/09/19/Linux/Linux%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://lan5th.github.io/2021/09/19/Linux/Linux%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-09-19T05:53:52.222Z</published>
    <updated>2022-06-24T02:51:22.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux基本概念"><a href="#Linux基本概念" class="headerlink" title="Linux基本概念"></a>Linux基本概念</h1><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210919145531127.png" alt="image-20210919145531127"></p><p>常见的服务器搭配组合：</p><ul><li>LAMP: linux+apache+mysql+php</li><li>LNMP: linux+nginx+mysql+php</li></ul><p><strong>控制程序</strong></p><ul><li>终端命令：Xshell</li><li>文件传输：FileZilla</li></ul><h1 id="CentOS基础"><a href="#CentOS基础" class="headerlink" title="CentOS基础"></a>CentOS基础</h1><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sync <span class="comment">#将数据从内存存储到硬盘中，一般用于shutdown之前</span></span><br><span class="line">shutdown <span class="comment">#关机</span></span><br><span class="line">reboot <span class="comment">#重启</span></span><br><span class="line">halt <span class="comment">#关闭系统，相当于shutdown -h now和poweroff</span></span><br><span class="line">ifconfig <span class="comment">#对应windows下的ipconfig，查看ip地址</span></span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ul><li><p><code>find -name 文件名</code>查找文件位置</p></li><li><p><code>pwd</code>显示当前路径</p></li><li><p><code>ls</code>显示目录内容(类似dir)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-a显示所有内容(包括隐藏文件)</span><br><span class="line">-l列表显示</span><br><span class="line">-h配合-l人性化显示(显示单位？)</span><br></pre></td></tr></table></figure></li><li><p><code>touch</code>创建文件(更新修改日期)</p></li><li><p><code>mkdir</code>创建文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-p创建多级目录</span><br></pre></td></tr></table></figure></li><li><p><code>rm</code>删除文件/目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-f强制删除(忽略不存在的文件)</span><br><span class="line">-r多级删除内容(删除文件夹必需)</span><br></pre></td></tr></table></figure></li><li><p><code>tree</code>树状显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-d只显示目录</span><br></pre></td></tr></table></figure></li><li><p><code>cp 源文件 目标文件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f强制复制(直接覆盖)</span><br><span class="line">-i覆盖文件提示</span><br><span class="line">-r多级复制(复制文件夹必须)</span><br></pre></td></tr></table></figure></li><li><p><code>mv  源文件 目标文件</code><strong>可以用这个办法给文件重命名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-i覆盖文件提示</span><br><span class="line">-u只覆盖已经更新过的文件</span><br></pre></td></tr></table></figure></li><li><p><strong><code>cat</code>查看文件内容/创建文件/文件合并/追加文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-b非空行输出行号</span><br><span class="line">-n所有行输出行号</span><br></pre></td></tr></table></figure><p>同类型命令</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210919170049297.png" alt="image-20210919170049297"></p><ul><li><code>more</code>命令查看过程中，空格查看下一页，enter查看下一行，:f查看行号，<code>less</code>命令pageUp和pageDown键就可以翻页</li><li>这两个命令都使用<code>Q</code>退出，使用<code>/</code>向下查找字符串。使用<code>?</code>向上查找字符串，<code>n</code>下一个，<code>N</code>上一个</li></ul></li><li><p><code>grep</code>查找文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-n显示匹配及行号</span><br><span class="line">-v显示不包含匹配的所有行</span><br><span class="line">-i忽略大小写</span><br></pre></td></tr></table></figure></li><li><p><code>echo</code>重定向及管道<code>|</code></p><p><code>echo</code>能将导向的内容显示出来，管道<code>|</code>能将前一个指令的结果转为后一个指令的参数，可以递归使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 文本 &gt;&gt; 文件名将指定字符串输入到文件中</span><br></pre></td></tr></table></figure></li><li><p><code>ln 被链接的文件 新链接文件</code>创建链接，默认硬链接，可以通过创建硬链接的方式防止误删一些文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-s创建软连接（符号链接）</span><br></pre></td></tr></table></figure></li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><strong>根目录</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210919154205047.png" alt="image-20210919154205047"></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210919154220498.png" alt="image-20210919154220498"></p><p>服务器独有路径<code>/www</code>：存放服务器网站相关的资源环境以及网站的项目</p><p><strong>Linux文件中第一个字符代表这个文件是怎样的基础类型</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210919162113703.png" alt="image-20210919162113703"></p><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210919162250803.png" alt="image-20210919162250803"></p><p><strong>权限管理</strong></p><ul><li><pre><code class="bash">chgrp -R 组名 文件/目录名         修改文件/目录所属组chown -R 所属用户 文件名         修改所乎用户<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ **&#96;chmod 权限编号 文件名&#96;赋予权限**</span><br><span class="line"></span><br><span class="line">  chmod 777会给文件赋予最高权限，即所有用户可读可写可执行</span><br><span class="line"></span><br><span class="line">  权限编号的相关规则如下</span><br><span class="line"></span><br><span class="line">  ![image-20210919165924067](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;lan5th&#x2F;pics&#x2F;blog_images&#x2F;image-20210919165924067.png)</span><br><span class="line"></span><br><span class="line">## 文件编辑</span><br><span class="line"></span><br><span class="line">**Vim编辑器**</span><br><span class="line"></span><br><span class="line">![image-20210919200205886](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;lan5th&#x2F;pics&#x2F;blog_images&#x2F;image-20210919200205886.png)</span><br><span class="line"></span><br><span class="line">三种模式</span><br><span class="line"></span><br><span class="line">+ 命令模式：刚进入vim</span><br><span class="line">+ 输入模式：使用&#96;i&#96;命令进入输入模式，编辑模式按Esc进入命令模式</span><br><span class="line">+ 底线命令模式：命令前加&#96;:&#96;进入底线命令模式</span><br><span class="line"></span><br><span class="line">一些常用指令</span><br><span class="line"></span><br><span class="line">+ &#96;i&#96;进入编辑模式</span><br><span class="line">+ &#96;[Esc]&#96;进入命令模式</span><br><span class="line">+ &#96;u&#96; 重复前一个动作</span><br><span class="line">+ &#96;[Ctrl]+r&#96;重复上一个动作</span><br><span class="line">+ &#96;:wq&#96;保存退出</span><br><span class="line">+ &#96;:ZZ&#96;不保存直接退出</span><br><span class="line">+ &#96;:set nu&#96;显示行号</span><br><span class="line">+ &#96;:set nonu&#96;不显示行号</span><br><span class="line"></span><br><span class="line">## 用户管理</span><br><span class="line"></span><br><span class="line">用户相关信息在&#96;&#x2F;etc&#x2F;passwd&#96;文件中</span><br><span class="line"></span><br><span class="line">+ &#96;useradd -m 用户名&#96;一般新建用户&#96;-m&#96;选项来创建使用者目录</span><br><span class="line"></span><br><span class="line">  ![image-20210919202201446](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;lan5th&#x2F;pics&#x2F;blog_images&#x2F;image-20210919202201446.png)</span><br><span class="line"></span><br><span class="line">+ &#96;userdel -r 用户名&#96;一般删除用户&#96;-r&#96;选项来删除该用户的目录页</span><br><span class="line"></span><br><span class="line">+ &#96;usermod 修改内容 用户名&#96;修改的选项和&#96;useradd&#96;指令的选项相同</span><br><span class="line"></span><br><span class="line">  如&#96;usermod -d newdirectory user1&#96;修改用户主目录</span><br><span class="line"></span><br><span class="line">+ &#96;su 用户名&#96;切换用户，普通用户切换超级用户可以使用&#96;sudo su&#96;</span><br><span class="line"></span><br><span class="line">+ 超级用户专有权限：&#96;passwd 用户名&#96;，给用户设置密码</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;bash</span><br><span class="line">  -l #锁定用户</span><br><span class="line">  -u #启用已被停止的账户</span><br><span class="line">  -d #使目标用户删除密码</span><br></pre></td></tr></table></figure>普通用户：`passwd`修改自己的密码</code></pre></li></ul><p>超级用户root的命令行提示符为<code>#</code>，而普通用户的命令行提示符为<code>$</code></p><p><strong>passwd文件的查看</strong></p><p>信息顺序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:密码(不可见):用户id:用户组id:注释性描述:主目录:登录shell</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210919210055675.png" alt="image-20210919210055675"></p><p>不可见得密码一般用x或*替代</p><p>真正加密后的密码保存在<code>/etc/shadow</code>文件中，不过由于是安全加密过得，我们依然无法直接查看</p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p>用户组相关信息在<code>/etc/group</code>文件中</p><ul><li><p><code>groupadd 组名</code>新建用户组</p></li><li><p><code>groupdel 组名</code>删除用户组</p></li><li><p><code>groupmod 组名</code>修改用户组信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-g <span class="comment">#修改组id</span></span><br><span class="line">-n <span class="comment">#修改组名</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><ul><li><p><strong><code>df</code>列出文件系统整体磁盘使用量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h <span class="comment">#人性化显示</span></span><br></pre></td></tr></table></figure></li><li><p><code>du</code>显示目录或文件的大小</p></li></ul><p><strong>挂载设备</strong></p><p>如果一些设备不兼容，则使用挂载命令来实现访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/mydevice /mnt/newmount <span class="comment">#dev目录存放外部设备，mnt存放挂载点</span></span><br></pre></td></tr></table></figure><p>同理，<code>umount -f 挂载位置</code>取消挂载点</p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ul><li><p><code>ps</code>查看系统中正在执行各个进程的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认仅显示与当前用户相关的进程</span></span><br><span class="line">-a <span class="comment">#显示所有进程信息</span></span><br><span class="line">-u <span class="comment">#显示较为详细的信息</span></span><br><span class="line">-x <span class="comment">#显示所有用户的进程</span></span><br></pre></td></tr></table></figure></li><li><p><strong>常用命令<code>ps -aux|grep 关键词</code>查找与关键词相关的进程</strong></p><p>用管道和grep选择器进行过滤查询</p></li><li><p><code>ps -ef</code>功能与<code>ps -aux</code>相似，只是显示格式略有区别</p></li><li><p><code>pstree</code>以树状图来查看进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-p <span class="comment">#显示父进程id</span></span><br><span class="line">-u <span class="comment">#显示用户组id</span></span><br></pre></td></tr></table></figure></li><li><p><code>kill -9 进程id</code>杀死进程（服务器慎用）</p></li></ul><h2 id="防火墙和网络"><a href="#防火墙和网络" class="headerlink" title="防火墙和网络"></a>防火墙和网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开放防火墙对应端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看端口开放情况</span></span><br><span class="line">netstat -ntlp</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看ip配置</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="comment">#查看网卡</span></span><br><span class="line">ip addr</span><br></pre></td></tr></table></figure><h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p>linux系统的环境变量配置一直是一个很让人头疼的问题，这里简单介绍下不同位置环境变量之间的区别</p><h2 id="环境变量文件位置"><a href="#环境变量文件位置" class="headerlink" title="环境变量文件位置"></a>环境变量文件位置</h2><ul><li><p>系统级别</p><ul><li><p>系统环境级别：在加载环境时进行加载</p><p><code>/etc/environment</code></p></li><li><p>系统用户级别：在每个用户登录时进行加载</p><p><code>/etc/profile</code></p></li></ul></li><li><p>用户级别：</p><ul><li><p>普通用户</p><p><code>~/.bash_profile</code></p></li><li><p>root用户</p><p><code>/root/.bashrc</code></p><p>如果出现root用户无法读取到环境变量时，可以在这个文件的末尾添加</p><p><code>source /etc/profile</code>使profile文件自动生效</p></li></ul></li></ul><h2 id="环境变量文件格式"><a href="#环境变量文件格式" class="headerlink" title="环境变量文件格式"></a>环境变量文件格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/environment/jdk1.8.0_241</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/environment/hadoop-3.1.4</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure><h1 id="服务器环境搭建"><a href="#服务器环境搭建" class="headerlink" title="服务器环境搭建"></a>服务器环境搭建</h1><p>作者使用了CentOS7.6版本作为服务器版本</p><h2 id="宝塔面板"><a href="#宝塔面板" class="headerlink" title="宝塔面板"></a>宝塔面板</h2><p>傻瓜式环境搭建</p><p>官方地址<a href="https://www.bt.cn/download/linux.html">宝塔linux面板，一键安装LAMP/LNMP/SSL/Tomcat (bt.cn)</a></p><p>CentOS下安装指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p><strong>端口开放需求</strong></p><p>如需完整使用宝塔的所有功能 你还需要放行如下端口<br>20 、21、 39000-40000端口（linux 系统 ），3000-4000（windows系统）<br>22 (SSH)<br>80、443（网站及SSL）<br>3306 （数据库远程连接）<br>888 （phpmyadmin）</p><p>在软件商店即可一键部署各种环境</p><h2 id="使用终端命令创建"><a href="#使用终端命令创建" class="headerlink" title="使用终端命令创建"></a>使用终端命令创建</h2><h3 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h3><p>安装jdk，先检测是否已经安装了jdk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep jdk <span class="comment">#检测jdk信息</span></span><br><span class="line">rpm -e --nodeps jdk_ <span class="comment">#强制卸载jdk</span></span><br></pre></td></tr></table></figure><p>安装jdk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh jdk-8u65-linux-x64.rpm <span class="comment">#部署安装</span></span><br></pre></td></tr></table></figure><p><strong>rpm方式不需要手动配置环境变量</strong></p><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><p>安装Tomcat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-9.0.53.tar.gz <span class="comment">#解压缩</span></span><br></pre></td></tr></table></figure><p>运行</p><ul><li><p>进入/apache-tomcat-9.0.53/bin目录</p></li><li><p>相关命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh <span class="comment">#启动</span></span><br><span class="line">./shutdown.sh <span class="comment">#停止</span></span><br></pre></td></tr></table></figure></li></ul><p>Tomcat用来把我们发布的一些war包部署上去，只要我们把war包放在/apache-tomcat-9.0.5/webapps目录下，运行Tomcat即会自动部署</p><blockquote><p>域名解析之后</p></blockquote><p>域名解析、备案之后如果项目配置的端口与http和https的端口不同，则需要通过Apache或Nginx做一下反向代理，我们修改相应的配置文件即可发布网站</p><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><p>安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/redhat-release <span class="comment">#检测CentOS系统版本</span></span><br></pre></td></tr></table></figure><p>安装准备环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -y表示所有的询问都默认选yes</span></span><br><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#卸载之前环境（如果存在）</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                docker-client \</span><br><span class="line">                docker-client-latest \</span><br><span class="line">                docker-common \</span><br><span class="line">                docker-latest \</span><br><span class="line">                docker-latest-logrotate \</span><br><span class="line">                docker-logrotate \</span><br><span class="line">                docker-engine</span><br><span class="line">  </span><br><span class="line"><span class="comment">#安装依赖包</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment">#配置阿里云镜像</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#更新软件包索引</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line"><span class="comment">#安装Docker CE</span></span><br><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>启动docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">systemctl start  docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">docker version</span><br><span class="line">docker run hello-world</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment">#结束</span></span><br><span class="line">systemctl stop docker.service</span><br></pre></td></tr></table></figure><h1 id="其他常用指令"><a href="#其他常用指令" class="headerlink" title="其他常用指令"></a>其他常用指令</h1><h2 id="解压缩-1"><a href="#解压缩-1" class="headerlink" title="解压缩"></a>解压缩</h2><p>推荐一篇博客</p><p><a href="https://www.cnblogs.com/ysocean/p/7746786.html#_label0_0">Linux常用命令之压缩和解压缩命令</a></p><h2 id="移动覆盖"><a href="#移动覆盖" class="headerlink" title="移动覆盖"></a>移动覆盖</h2><ol><li><p>先查看自己系统上的cp指令有没有cp指令的别名<code>alias</code></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220125142944.png" alt="image-20220125142937291"></p><p><code>-i</code>表示的是每次覆盖操作都需要手动确认，当我们进行大量文件的操作时一个个手动确认会十分麻烦</p></li><li><p>如果发现如上图所示，需要手动暂时取消cp指令的别名<code>unalias cp</code>，这样能够暂时取消别名</p></li><li><p>进行cp覆盖操作<code>cp -rf sourcedir distdir</code></p></li><li><p>尽管取消别名是暂时的，为了安全最好还是先将别名修改回去<code>alias cp=&#39;cp -i&#39;</code></p></li></ol><h2 id="内存查看"><a href="#内存查看" class="headerlink" title="内存查看"></a>内存查看</h2><ul><li>内存查看<code>free</code></li><li>外存查看<code>df -h</code></li></ul>]]></content>
    
    
    <summary type="html">linux操作以及服务器部署</summary>
    
    
    
    <category term="微服务" scheme="http://lan5th.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://lan5th.github.io/2021/09/18/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    <id>http://lan5th.github.io/2021/09/18/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/</id>
    <published>2021-09-18T05:55:39.412Z</published>
    <updated>2022-01-17T06:44:14.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis特点"><a href="#Redis特点" class="headerlink" title="Redis特点"></a>Redis特点</h1><p><strong>NoSQL特点</strong></p><ol><li>大数据高性能(Redis一秒写8w次，读11w次，细粒度的关村，性能较高)</li><li>数据类型多样性，不需要实现设计数据库，随取随用，键值对存储，列存储，文档存储，图形数据库</li><li>方便扩展（数据之间没有关系，容易扩展）</li><li>没有固定查询语言</li><li>最终一致性</li><li>CAP定理和BASE （异地多活）</li></ol><p><strong>大数据特点</strong></p><ul><li>3V：描述问题<ul><li>海量Volume</li><li>多样Variety</li><li>实时Veiocity</li></ul></li><li>3高：对程序的要求<ul><li>高并发</li><li>高可用（随时水平拆分）</li><li>高性能（保证用户使用）</li></ul></li></ul><p><strong>NoSQL分类</strong></p><ul><li><p>KV键值对：Redis</p></li><li><p>文档型数据库：</p><ul><li>MongoDB：分布式文件存储的数据库，c++变编写，一个介于关系型和非关系型之间的产品</li><li>CouchDB</li></ul></li><li><p>列存储数据库：HBase</p></li><li><p>图关系数据库：Neo4j，InfoGrid</p><p>用来存储对象之间的关系网图，如社交关系网</p></li></ul><p><strong>Redis：Remote DIctionary Server</strong></p><p><strong>特点</strong></p><ul><li>内存存储，持久化（rdb,aof）</li><li>效率高，用于高速存储</li><li>发布订阅信息</li><li>地图信息分析</li><li>计时器、计数器（浏览量等）</li><li>Redis的常见用途：<strong>数据库</strong>、<strong>缓存</strong>、<strong>消息中间件MQ</strong></li></ul><blockquote><p><strong>为什么Redis是单线程的？</strong></p><p>Redis给予内存操作，Redis的性能瓶颈不是CPU，而是机器的内存和网络带宽，既然可以使用单线程来实现，就没必要用多线程</p><ul><li>避免线程上下文切换开销</li><li>避免线程同步机制的开销</li><li>如果是多线程模型就需要设计底层线程安全的数据结构，这会让redis更加复杂</li></ul></blockquote><p><strong>Redis是多线程吗？</strong></p><ul><li>Redis4.0(引入多线程处理异步任务)</li><li>Redis6.0(在网络模型中实现多线程IO)</li></ul><p>一般讨论的单线程Redis一般指Redis6.0之前的单线程多路复用网络模型</p><p>但Redis6.0执行实际任务仍然是单线程，除非是非阻塞命令，如：UNLINK, FLUSHALL ASYNC, FLUSHDB ASYNC</p><h1 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h1><h2 id="安装和运行"><a href="#安装和运行" class="headerlink" title="安装和运行"></a>安装和运行</h2><blockquote><p>Redis官方推荐在linux上进行redis的部署，github的windows版本已经停更许久</p></blockquote><p>redis默认端口号6379</p><p>操作流程：</p><ol><li><p>直接解压<code>redis-6.2.5.tar.gz</code></p></li><li><p>安装依赖<code>yum install gcc-c++</code></p><p><code>gcc -v</code>检查版本</p></li><li><p>redis目录中运行<code>make</code></p></li><li><p>redis默认不是后台启动的，需要修改配置文件，我们可以将make文件同级目录的<code>redis.conf</code>文件拷贝一份到我们指定的目录，以防止错误配置报错，同时对其进行修改，开启守护进程模式</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210920153359292.png" alt="image-20210920153359292"></p></li><li><p>redis默认指令在make目录下的src目录，进入后输入指令，指定配置文件并运行redis服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-server ../redis.conf <span class="comment">#后面的参数使我们自己的配置文件路径</span></span><br></pre></td></tr></table></figure></li><li><p>启动客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli [-h 主机ip] -p 6379 <span class="comment">#默认主机ip为本机，可以不写</span></span><br></pre></td></tr></table></figure></li><li><p>客户端测试连接<code>ping</code>，如果出现PONG的返回提示即运行成功</p></li><li><p>查看进程<code>ps -ef|grep redis</code></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210920153854917.png" alt="image-20210920153854917"></p></li><li><p>客户端关闭服务<code>shutdown</code></p></li></ol><h2 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h2><p>redis-benchmark：压力测试工具</p><p>指令示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#100个并发客户端 100000条请求</span></span><br><span class="line">redis-benchmark -p 6379 -c 100 -n 100000</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210920162142997.png" alt="image-20210920162142997"></p><h2 id="RedisKey基础操作"><a href="#RedisKey基础操作" class="headerlink" title="RedisKey基础操作"></a>RedisKey基础操作</h2><ul><li><p>redis默认有16个数据库，默认使用第’0’个</p><p>可以使用<code>select 编号</code>来切换数据库</p></li><li><p>查看db大小<code>dbsize</code></p></li><li><p>清空数据库（不会清空已经持久化的数据）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flushdb <span class="comment">#清除当前数据库</span></span><br><span class="line">flushall <span class="comment">#清除全部数据库</span></span><br></pre></td></tr></table></figure></li><li><pre><code class="bash">keys * #查看所有的keyset &lt;key&gt; &lt;value&gt; #设置键值对get &lt;key&gt; #获取key对应的value值exists &lt;key&gt; #查看指定key是否存在move &lt;key&gt; &lt;db_id&gt; #将指定k-v键值对移动至指定数据库expire &lt;key&gt; &lt;seconds&gt; #指定过期时间ttl &lt;key&gt; #查看指定key剩余时间type &lt;key&gt; #查看指定key对应value类型<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## Redis配置文件</span><br><span class="line"></span><br><span class="line">+ 配置文件对大小写不敏感</span><br><span class="line"></span><br><span class="line">  可以&#96;include xxx.config&#96;导入多个配置文件</span><br><span class="line"></span><br><span class="line">+ 可以通过客户端对配置文件进行修改(如果有密码要求已经认证)，如</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;bash</span><br><span class="line">  config set requirepass &quot;&quot; #修改密码</span><br></pre></td></tr></table></figure></code></pre></li><li><p>网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1 <span class="comment">#绑定ip</span></span><br><span class="line">protected-mode yes <span class="comment">#保护模式</span></span><br><span class="line">port 6379 <span class="comment">#端口</span></span><br></pre></td></tr></table></figure></li><li><p>通用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes <span class="comment">#守护者进程运行（后台运行）</span></span><br><span class="line">pidfile /var/run/redis_6379.pid <span class="comment">#守护者模式需要指定pid文件</span></span><br><span class="line">loglevel notice <span class="comment">#日志级别: debug verbose notice warning</span></span><br><span class="line">logfile <span class="string">&quot;&quot;</span> <span class="comment">#日志文件名</span></span><br><span class="line">database 16 <span class="comment">#数据库数量</span></span><br><span class="line">always-show-log yes <span class="comment">#是否显示logo</span></span><br></pre></td></tr></table></figure></li><li><p>快照</p><p>持久化：在规定时间内执行多少次操作会持久化到.rdb.aof</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">save 900 1 <span class="comment">#900s内至少1个key修改了一次就进行持久化操作,下面两个同理</span></span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes <span class="comment">#异常之后是否继续工作</span></span><br><span class="line">rdbcompression yes <span class="comment">#是否压缩rdb文件，需要消耗cpu资源</span></span><br><span class="line">rdbchecksum yes <span class="comment">#保存rdb文件时是否错误校验</span></span><br><span class="line">dir ./ <span class="comment"># rdb文件保存的位置</span></span><br></pre></td></tr></table></figure></li><li><p>主从复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt; <span class="comment">#从机配置文件添加主机的ip和端口</span></span><br><span class="line">masterauth &lt;master-password&gt; <span class="comment">#如果主机有认证密码则在这里配置</span></span><br></pre></td></tr></table></figure></li><li><p>安全</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass xxx <span class="comment">#设置认证密码，默认为空</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth xxx <span class="comment">#在客户端访问时进行密码认证</span></span><br></pre></td></tr></table></figure></li><li><p>客户端限制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxclients 10000 <span class="comment">#最大客户端数量</span></span><br></pre></td></tr></table></figure></li><li><p>内存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">maxmemory &lt;bytes&gt; <span class="comment">#最大内存容量</span></span><br><span class="line">maxmemory-policy noeviction <span class="comment">#内存达到上限的策略</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#内存策略</span></span><br><span class="line">volatile-lru <span class="comment">#只对设置了过期时间的的key进行lru（默认）</span></span><br><span class="line">allkeys-lru <span class="comment">#删除lru算法的key</span></span><br><span class="line">volatile-random <span class="comment">#随机删除即将过期key</span></span><br><span class="line">allkeys-random <span class="comment">#随机删除</span></span><br><span class="line">volatile-ttl <span class="comment">#删除季建国七的</span></span><br><span class="line">noeviction <span class="comment">#永不过期，返回错误</span></span><br></pre></td></tr></table></figure></li><li><p>append only模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendonly no <span class="comment">#默认不开启aof模式，而是使用rdb模式</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span> <span class="comment">#持久化文件的名字</span></span><br><span class="line">appendfsync everysec <span class="comment">#每秒执行一次sync，可能丢失数据，其它选项 always no</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Redis数据"><a href="#Redis数据" class="headerlink" title="Redis数据"></a>Redis数据</h1><h2 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>String类型操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">append &lt;key&gt; <span class="string">&quot;someString&quot;</span> <span class="comment">#向指定key的value字符串后面追加自定义字符串 / 如果当前key不存在就相当于set key value</span></span><br><span class="line">strlen &lt;key&gt; <span class="comment">#获取指定key的value字符串长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#getrange &lt;key&gt; 0 -1表示获取全部</span></span><br><span class="line">getrange &lt;key&gt; left right <span class="comment">#截取字符串，相当于切片 </span></span><br><span class="line">setrange &lt;key&gt; offset &lt;value&gt; <span class="comment">#将偏移量为offset的值开始向后替换为所指的value</span></span><br><span class="line"></span><br><span class="line">setex &lt;key&gt; &lt;seconds&gt; &lt;value&gt; <span class="comment">#set with expire 设置过期时间</span></span><br><span class="line">setnx &lt;key&gt; &lt;value&gt;<span class="comment">#set not exists 如果不存在设置，在分布式所常见</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#批量操作都是原子性操作，同时成功或失败</span></span><br><span class="line">mset &lt;key1&gt; &lt;value1&gt; &lt;key2&gt; &lt;value&gt; ... <span class="comment">#批量设置值</span></span><br><span class="line">mget &lt;key1&gt; &lt;key2&gt; ... <span class="comment">#批量获取值</span></span><br><span class="line"></span><br><span class="line">getset &lt;key&gt; &lt;value&gt; <span class="comment">#先get再set</span></span><br></pre></td></tr></table></figure><p>int类型操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">incr &lt;key&gt; <span class="comment">#i++ 如果指定key不存在则会自动自动设置kv，且v=1</span></span><br><span class="line">decr &lt;key&gt; <span class="comment">#i-- 如果指定key不存在则会自动自动设置kv，且v=-1</span></span><br><span class="line">incrby &lt;key&gt; num <span class="comment">#数值增加num 同上，自动设置值为num</span></span><br><span class="line">decrby &lt;key&gt; num <span class="comment">#数值减少num 同上，自动设置值为-num</span></span><br></pre></td></tr></table></figure><p>对象操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> user:1 &#123;name:zhangsan,age:3&#125; <span class="comment">#以对象形式保存</span></span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>可以将其看做一个双向链表，在两头进行操作效率最高</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">lpush &lt;list&gt; &lt;value&gt; <span class="comment">#左入栈（新建list）</span></span><br><span class="line">rpush &lt;list&gt; &lt;value&gt; <span class="comment">#右入栈（新建list）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#与getrange类似 lrange 0 -1表示获取全部</span></span><br><span class="line">lrange &lt;list&gt; left right <span class="comment">#从左到右排列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#其他的操作也可以通过l和r作以区分</span></span><br><span class="line">lpop &lt;list&gt; <span class="comment">#左出栈</span></span><br><span class="line">rpop &lt;list&gt; <span class="comment">#右出栈</span></span><br><span class="line"></span><br><span class="line">lset &lt;list&gt; i &lt;newItem&gt; <span class="comment">#更新下标为i的值</span></span><br><span class="line"></span><br><span class="line">lindex &lt;list&gt; i <span class="comment">#获取list中第i个值</span></span><br><span class="line"></span><br><span class="line">llen &lt;list&gt; <span class="comment">#获取list长度</span></span><br><span class="line"></span><br><span class="line">lrem &lt;list&gt; num &lt;value&gt; <span class="comment">#移除list中num个为value的值</span></span><br><span class="line"></span><br><span class="line">ltrim &lt;list&gt; left right <span class="comment">#切片（与range不同并且会改变原list）</span></span><br><span class="line"></span><br><span class="line">lpoprpush &lt;list1&gt; &lt;list2&gt; <span class="comment">#将list1中左端元素移至list2最右端</span></span><br><span class="line"></span><br><span class="line">linsert &lt;list&gt; before/after &lt;value1&gt; &lt;value2&gt; <span class="comment">#在value1值得前/后插入value2</span></span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sadd &lt;<span class="built_in">set</span>&gt; &lt;value&gt; <span class="comment">#向set中添加value值对（新建set）</span></span><br><span class="line">smember &lt;<span class="built_in">set</span>&gt; <span class="comment">#查看指定set的所有值</span></span><br><span class="line">sismenmber &lt;<span class="built_in">set</span>&gt; &lt;value&gt; <span class="comment">#判断某个值是否是set中的元素</span></span><br><span class="line">scard &lt;<span class="built_in">set</span>&gt; <span class="comment">#查看set中元素的个数</span></span><br><span class="line">srem &lt;<span class="built_in">set</span>&gt; &lt;value&gt; <span class="comment">#移除set中某个元素</span></span><br><span class="line"></span><br><span class="line">srandmember &lt;<span class="built_in">set</span>&gt; [i] <span class="comment">#随机抽出i个数的元素（默认一个）</span></span><br><span class="line"></span><br><span class="line">spop &lt;<span class="built_in">set</span>&gt; <span class="comment">#随机出栈元素</span></span><br><span class="line">smove &lt;set1&gt; &lt;set2&gt; &lt;value&gt;<span class="comment">#将set1中指定值元素移至set2中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集合相关</span></span><br><span class="line">sdiff &lt;set1&gt; &lt;set2&gt; <span class="comment">#求差集</span></span><br><span class="line">sinter &lt;set1&gt; &lt;set2&gt; <span class="comment">#求交集</span></span><br><span class="line">sunion &lt;set1&gt; &lt;set2&gt; <span class="comment">#求并集</span></span><br></pre></td></tr></table></figure><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>key-map，可以存一些变更数据，且更适合对象的存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">hset &lt;map&gt; &lt;key&gt; &lt;value&gt; <span class="comment">#给map中填入kv值（新建map）</span></span><br><span class="line">hset &lt;map&gt; &lt;key1&gt; &lt;value2&gt; &lt;key2&gt; &lt;value2&gt; ... <span class="comment">#可以同时赋多个kv值</span></span><br><span class="line"></span><br><span class="line">hgetall &lt;map&gt; <span class="comment">#获取一个map中的全部kv值</span></span><br><span class="line">hdel &lt;map&gt; &lt;key&gt; <span class="comment">#删除一个map中指定的kv值</span></span><br><span class="line"></span><br><span class="line">hlen &lt;map&gt; <span class="comment">#获取map长度</span></span><br><span class="line"></span><br><span class="line">hexists &lt;map&gt; &lt;key&gt; <span class="comment">#判断一个map中指定kv是否存在</span></span><br><span class="line"></span><br><span class="line">hkeys &lt;map&gt; <span class="comment">#获取一个map所有key</span></span><br><span class="line">hvals &lt;map&gt; <span class="comment">#获取一个map所有value</span></span><br><span class="line"></span><br><span class="line">incr/decr &lt;map&gt; &lt;key&gt; <span class="comment">#自增/自减</span></span><br><span class="line"></span><br><span class="line">hsetnx &lt;map&gt; &lt;key&gt; &lt;value&gt; <span class="comment">#不存在则设置</span></span><br></pre></td></tr></table></figure><h3 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h3><p>有序集合</p><p>可以用来是先重要消息，以及带权重任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">zadd &lt;zset&gt; &lt;score&gt; &lt;value&gt; <span class="comment">#给zset插入值score和value</span></span><br><span class="line">zrange &lt;zset&gt; left right <span class="comment">#查看从左到右排列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#left和right可以使用+/-inf表示无穷</span></span><br><span class="line">zrangebyscore &lt;zset&gt; left right <span class="comment">#按score排序，区间为left~right</span></span><br><span class="line">zrevrangebyscore &lt;zset&gt; right left <span class="comment">#同上降序排序</span></span><br><span class="line">zrevrange &lt;zset&gt; left right <span class="comment">#按照索引排序，与上面不一样！</span></span><br><span class="line"></span><br><span class="line">zrem &lt;<span class="built_in">set</span>&gt; &lt;value&gt; <span class="comment">#移除指定值的元素</span></span><br><span class="line">zcard &lt;<span class="built_in">set</span>&gt; <span class="comment">#获取集合中的个数</span></span><br><span class="line">zcount &lt;<span class="built_in">set</span>&gt; low high <span class="comment">#同级score在low和high之间的个数</span></span><br></pre></td></tr></table></figure><h2 id="特殊数据类型"><a href="#特殊数据类型" class="headerlink" title="特殊数据类型"></a>特殊数据类型</h2><h3 id="geospatial"><a href="#geospatial" class="headerlink" title="geospatial"></a>geospatial</h3><p>地理位置信息geospatial简称<strong>GEO</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#lot:经度，lat纬度，member详细信息</span></span><br><span class="line"><span class="comment">#规则：南北极无法直接添加，一般会下载城市数据通过java一次性导入</span></span><br><span class="line"><span class="comment">#可以使用key和member联合确定，如key=china:city member=beijing</span></span><br><span class="line">geoadd &lt;key&gt; &lt;lot&gt; &lt;lat&gt; &lt;member&gt; <span class="comment">#添加geo数据</span></span><br><span class="line">geopos &lt;key&gt; &lt;member1&gt; [&lt;member2&gt; ...] <span class="comment">#获取位置信息</span></span><br><span class="line"></span><br><span class="line">geodist &lt;key&gt; &lt;member1&gt; &lt;member2&gt; <span class="comment">#计算直线距离</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如附近的人</span></span><br><span class="line">georadius &lt;key&gt; &lt;lot&gt; &lt;lat&gt; 5 km <span class="comment">#给出某一个位置指定半径之内的元素</span></span><br><span class="line">georadiusbymember &lt;key&gt; &lt;member&gt; 5 km <span class="comment">#给出某一个元素指定半径之内的元素</span></span><br><span class="line"></span><br><span class="line">geohash &lt;key&gt; &lt;member1&gt; &lt;member2&gt; <span class="comment">#将二维经纬度转换为一维的字符串，两个字符串越相近，距离也越相近</span></span><br></pre></td></tr></table></figure><p>获取附近的人示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取以北京为中心，500km为半径距离最近的前三个城市的全部信息</span></span><br><span class="line">georadiusbymember china:city beijing 500 km withdist withcoord count 3</span><br></pre></td></tr></table></figure><p>可用的距离单位：</p><ul><li>m ：米，默认单位。</li><li>km ：千米。</li><li>mi ：英里。</li><li>ft ：英尺。</li></ul><p>底层其实是zset，我们可以使用zset相关命令来操作geo，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrange &lt;ket&gt; left right <span class="comment">#查看元素</span></span><br><span class="line">zrem &lt;key&gt; left right <span class="comment">#删除元素</span></span><br></pre></td></tr></table></figure><h3 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h3><p>基数：不重复的元素</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210920223331016.png" alt="image-20210920223331016"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pfadd &lt;key&gt; &lt;value1&gt; &lt;value3&gt; ... <span class="comment">#添加数据</span></span><br><span class="line">pfcount &lt;key&gt; <span class="comment">#统计数据</span></span><br><span class="line">pfmerge &lt;key1&gt; &lt;key2&gt; <span class="comment">#合并集合（包括去重）</span></span><br></pre></td></tr></table></figure><p>如果允许容错就可以使用Hyperloglog，不允许容错则使用set()集合或自定义数据类型去重</p><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><p>位存储</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210920224558909.png" alt="image-20210920224558909"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setbit &lt;key&gt; &lt;offset&gt; &lt;value&gt; <span class="comment">#给位移量为offset的位置放入元素value，当然value只能为0,1</span></span><br><span class="line">bitcount &lt;key&gt; <span class="comment">#统计为1的位数</span></span><br></pre></td></tr></table></figure><h1 id="Redis高级特性"><a href="#Redis高级特性" class="headerlink" title="Redis高级特性"></a>Redis高级特性</h1><h2 id="Redis的事务"><a href="#Redis的事务" class="headerlink" title="Redis的事务"></a>Redis的事务</h2><ul><li>为了保持简单，redis事务保证了其中的一致性和隔离性，不满足原子性和持久性；</li><li>一次性，顺序性，排他性的执行一系列的命令</li></ul><p><strong>事务指令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">multi <span class="comment">#开启事务</span></span><br><span class="line">... <span class="comment">#输入一系列指令</span></span><br><span class="line"><span class="built_in">exec</span> <span class="comment">#执行事务中所有的指令</span></span><br><span class="line">discard <span class="comment">#取消事务</span></span><br></pre></td></tr></table></figure><p><strong>不保证原子性的原因</strong></p><ul><li><p>编译型异常：代码有问题，事务中所有指令都不会执行</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images//image-20210921131338267.png" alt="image-20210921131338267"></p></li><li><p>运行时异常：逻辑错误，只有事务中出错的指令不会执行，其他正确指令正常运行</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images//image-20210921131647150.png" alt="image-20210921131647150"></p></li></ul><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><ul><li>悲观锁：认为什么时候都会出问题，任何操作都会加锁</li><li>乐观锁：认为什么时候都不会出问题，所以不会上锁，更新数据的时候判断数据是否已被修改</li></ul><p><strong>Redis监视变量，可以视为乐观锁操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先watch某个key再开启事务，如果exec时key对应的value改变，则事务中的所有指令提交失败，事务回滚</span></span><br><span class="line">watch &lt;key&gt;</span><br><span class="line">multi</span><br><span class="line"></span><br><span class="line">unwatch <span class="comment">#取消之前的watch指令</span></span><br></pre></td></tr></table></figure><p><strong>如果watch发现value已经改变，事务执行失败：</strong></p><ul><li><code>unwatch</code>先解锁监视</li><li><code>watch</code>获取最新值，重新监视</li><li>重新提交事务</li></ul><h2 id="订阅发布"><a href="#订阅发布" class="headerlink" title="订阅发布"></a>订阅发布</h2><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921204012895.png" alt="image-20210921204012895"></p><p>一些常用命令</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921204032829.png" alt="image-20210921204032829"></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921204110130.png" alt="image-20210921204110130"></p><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921204255540.png" alt="image-20210921204255540"></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921205757888.png" alt="image-20210921205757888"></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921205827739.png" alt="image-20210921205827739"></p><p><strong>复制原理</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921212534965.png" alt="image-20210921212534965"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">info replication <span class="comment">#查看从属关系</span></span><br><span class="line"><span class="comment">#返回信息</span></span><br><span class="line">role:master <span class="comment">#角色：master，每台redis服务器默认都是master</span></span><br><span class="line">connected_slaves:0 <span class="comment">#已连接的从机</span></span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:20e2fc4f1bef8039f45fc11e89e7abb7c6dbd2dd</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><h3 id="环境测试"><a href="#环境测试" class="headerlink" title="环境测试"></a>环境测试</h3><p>将原配置文件拷贝三份<code>redis-m1.config redis-s1.config redis-s2.config</code></p><p>修改其中的属性：端口，pid，log，dump.rdb</p><p>然后分别运行，检查情况</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921210922412.png" alt="image-20210921210922412"></p><p>一主二从，在从机的客户端使用命令<code>salveof &lt;ip&gt; &lt;port&gt;</code>使其成为某个主机的从机（暂时），使用<code>salveof no one</code>使其重新变为主机</p><p>然后在主机查看结果</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921211506064.png" alt="image-20210921211506064"></p><ul><li>只有主机可以进行写操作，从机进行写操作会进行报错，且从机可以读到主机新写入的数据（<strong>增量复制</strong>）</li><li>主机断开连接，从机依旧保持从机状态，不能进行写操作，主机如果重新上线，从机依旧可以读取主机写的数据</li><li>如果是命令行进行的配置，从机重启后会重新变为主机，只要变回从机，会立即从主机中获取值，进行<strong>完全复制</strong></li></ul><h3 id="主机宕机的解决方案"><a href="#主机宕机的解决方案" class="headerlink" title="主机宕机的解决方案"></a>主机宕机的解决方案</h3><p>如果主机m1突然断开连接，如何选取一个新的主机？</p><ul><li><p>手动选取某个从机为主机<code>salveof no one</code></p></li><li><p><strong>哨兵模式</strong>（自动选取主机的模式）</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921215322848.png" alt="image-20210921215322848"></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921215405539.png" alt="image-20210921215405539"></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921213724681.png" alt="image-20210921213724681"></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921213850531.png" alt="image-20210921213850531"></p><p>当主机客观下线之后，所有哨兵会根据算法投票选取一个从机成为新的主机</p><p>哨兵模式配置文件<code>sentinel.conf</code></p><p>最基础的配置文件可以只配置<code>sentinel monitor mymaster 127.0.0.1 6379 1</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example sentinel.conf</span></span><br><span class="line"><span class="comment"># 哨兵sentinel实例运行的端口 默认26379</span></span><br><span class="line">port 26379</span><br><span class="line"><span class="comment"># 哨兵sentinel的工作目录</span></span><br><span class="line">dir /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 哨兵sentinel监控的redis主节点的 ip port</span></span><br><span class="line"><span class="comment"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span></span><br><span class="line"><span class="comment"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt; </span></span><br><span class="line"><span class="comment"># 最后的1表示总共有1个哨兵观测到宕机就判断主机宕机</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class="line"><span class="comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span></span><br><span class="line"><span class="comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span></span><br><span class="line"><span class="comment"># 这个数字越小，完成failover所需的时间就越长，</span></span><br><span class="line"><span class="comment"># 但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span></span><br><span class="line"><span class="comment"># 可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span></span><br><span class="line"><span class="comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面：</span></span><br><span class="line"><span class="comment"># 1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span></span><br><span class="line"><span class="comment"># 2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span></span><br><span class="line"><span class="comment"># 3.当想要取消一个正在进行的failover所需要的时间。</span></span><br><span class="line"><span class="comment"># 4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span></span><br><span class="line"><span class="comment"># 默认三分钟</span></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"></span><br><span class="line"><span class="comment"># SCRIPTS EXECUTION</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span></span><br><span class="line"><span class="comment"># 对于脚本的运行结果有以下规则：</span></span><br><span class="line"><span class="comment"># 若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span></span><br><span class="line"><span class="comment"># 若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span></span><br><span class="line"><span class="comment"># 如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span></span><br><span class="line"><span class="comment"># 一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span></span><br><span class="line"><span class="comment"># 通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span></span><br><span class="line"><span class="comment"># 通知脚本</span></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端重新配置主节点参数脚本</span></span><br><span class="line"><span class="comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class="line"><span class="comment"># 以下参数将会在调用脚本时传给脚本:</span></span><br><span class="line"><span class="comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class="line"><span class="comment"># 目前&lt;state&gt;总是“failover”,</span></span><br><span class="line"><span class="comment"># &lt;role&gt;是“leader”或者“observer”中的一个。</span></span><br><span class="line"><span class="comment"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span></span><br><span class="line"><span class="comment"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br></pre></td></tr></table></figure><p><strong>如果主机宕机之后重新启动，他不会重新成为主机，而是成为新主机的一个从机</strong></p><ul><li>优点：<ul><li>哨兵集群基于主从复制，主从复制的优点都有</li><li>主从可以切换，故障可以转移，系统可用性更高</li><li>哨兵模式是主从模式的升级，健壮性更高</li></ul></li></ul></li></ul><h2 id="缓存穿透与雪崩"><a href="#缓存穿透与雪崩" class="headerlink" title="缓存穿透与雪崩"></a>缓存穿透与雪崩</h2><p>服务的高可用问题</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>查不到</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921220552480.png" alt="image-20210921220552480"></p><p><strong>解决方案</strong></p><ul><li><p>布隆过滤器</p><p>是一种数据结构，对所有可能查询的数据以hash形式存储，在控制层先进行校验，不符合则丢弃，避免对底层存储系统的压力</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921220800881.png" alt="image-20210921220800881"></p></li><li><p>缓存空对象</p><p>当存储层不命中后，即使返回空对象也将其缓存起来，并设置过期时间，之后相同的查询请求会从缓存中获取，保护后端数据源</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921220932184.png" alt="image-20210921220932184"></p><p>缺点：</p><ul><li>缓存需要更多地存储空间来保存许多值为空的key</li><li>即使设置了过期时间，缓存层和存储层的数据还是会存在一段时间的不一致性（缓存中为空但已经向存储层存放了新值），对于需要保持一致性的业务会有影响</li></ul></li></ul><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>量大，缓存过期</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921221322161.png" alt="image-20210921221322161"></p><p><strong>解决方案</strong></p><ul><li><p>设置热点数据不过期</p></li><li><p>加互斥锁</p><p>保证缓存过期后同时仅有一个线程能够查询数据</p></li></ul><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存集体失效或Redis宕机</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921221700754.png" alt="image-20210921221700754"></p><p>比如双十一：停掉一些服务，保证主要业务可用</p><p><strong>解决方案</strong></p><ul><li><p>redis高可用</p><p>多设Redis服务器，搭建大型redis集群</p></li><li><p>限流降级</p><p>缓存失效后通过加锁或队列来控制数据库写缓存的线程数量，比如某个key仅允许一个线程查询和写缓存</p></li><li><p>数据预热</p><p>正式部署之前把可能的数据先预先访问一遍，大量访问的数据就会加载到缓存中，在即将发生大的并发访问时手动触发加载不同的key设置不同的过期时间，让缓存失效的时间点尽量均匀</p></li></ul><h2 id="数据淘汰策略"><a href="#数据淘汰策略" class="headerlink" title="数据淘汰策略"></a>数据淘汰策略</h2><p>配置文件对应项：<code>maxmemory-policy</code></p><p>Redis提供了5种数据淘汰策略： </p><ul><li>volatile-lru：使用LRU算法进行数据淘汰（淘汰上次使用时间最早的，且使用次数最少的key），只淘汰设定了有效期的key</li><li>allkeys-lru：使用LRU算法进行数据淘汰，所有的key都可以被淘汰</li><li>volatile-random：随机淘汰数据，只淘汰设定了有效期的key</li><li>allkeys-random：随机淘汰数据，所有的key都可以被淘汰</li><li>volatile-ttl：淘汰剩余有效期最短的key</li><li>no-eviction：不进行去主数据，直接报错（默认，但不推荐使用）</li></ul><p><strong>Redis4.0新增策略</strong></p><ul><li>volatile-lfu：从已设置过期时间的数据集挑选使用频率最低的数据淘汰。</li><li>allkeys-lfu：从数据集中挑选使用频率最低的数据淘汰。</li></ul><p>​    最好为Redis指定一种有效的数据淘汰策略以配合maxmemory设置，避免在内存使用满后发生写入失败的情况。</p><p>​    一般来说，推荐使用的策略是volatile-lru，并辨识Redis中保存的数据的重要性。对于那些重要的，绝对不能丢弃的数据（如配置类数据等），应不设置有效期，这样Redis就永远不会淘汰这些数据。对于那些相对不是那么重要的，并且能够热加载的数据（比如缓存最近登录的用户信息，当在Redis中找不到时，程序会去DB中读取），可以设置上有效期，这样在内存不够时Redis就会淘汰这部分数据。</p><h1 id="整合Java"><a href="#整合Java" class="headerlink" title="整合Java"></a>整合Java</h1><h2 id="阿里云redis连接失败的原因"><a href="#阿里云redis连接失败的原因" class="headerlink" title="阿里云redis连接失败的原因"></a>阿里云redis连接失败的原因</h2><ul><li>阿里云安全组策略是否开启对应端口？</li><li>redis-server配置文件中是否绑定0.0.0.0？</li><li>server密码问题</li><li>服务器防火墙是否开放对应端口，如CentOS7系统：<ul><li>开放防火墙对应端口<code>firewall-cmd --zone=public --add-port=6379/tcp --permanent</code></li><li>查看端口开放情况<code>netstat -ntlp</code></li></ul></li></ul><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><h3 id="java实例"><a href="#java实例" class="headerlink" title="java实例"></a>java实例</h3><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//Jedis实例能够调用方法以执行任何redis命令</span></span><br><span class="line">    System.out.println(jedis.ping());</span><br><span class="line">    jedis.flushDB();</span><br><span class="line">    System.out.println(jedis.set(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line"><span class="comment">//记得结束后关闭客户端</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Jedis事务"><a href="#Jedis事务" class="headerlink" title="Jedis事务"></a>Jedis事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(multi.set(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>));</span><br><span class="line">            System.out.println(multi.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">            multi.exec();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="整合SpringBoot"><a href="#整合SpringBoot" class="headerlink" title="整合SpringBoot"></a>整合SpringBoot</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springboot2.x后原来的jedis被替换为了lettuce</p><ul><li>jedis：采用直连方法，多个线程操作是不安全的，避免这种情况需要使用jedis pool，类似BIO模式</li><li>lettuce：采用netty，实例可以在多个线程中共享，不存在线程安全问题，减少线程数据，类似NIO模式</li></ul><h3 id="使用默认的RedisTemplate"><a href="#使用默认的RedisTemplate" class="headerlink" title="使用默认的RedisTemplate"></a>使用默认的RedisTemplate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">redisTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取连接对象</span></span><br><span class="line">    RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">    connection.flushDb();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先用opsForXXX()获取专门处理某类业务的工具</span></span><br><span class="line">    <span class="comment">//如valueOperations专门操作字符串</span></span><br><span class="line">    ValueOperations valueOperations = redisTemplate.opsForValue();</span><br><span class="line">    <span class="comment">//再调用valueOperations的方法来执行具体操作</span></span><br><span class="line">    valueOperations.set(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    System.out.println(valueOperations.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义RedisTemplate"><a href="#自定义RedisTemplate" class="headerlink" title="自定义RedisTemplate"></a>自定义RedisTemplate</h3><p>自定义配置类给容器中注入自定义Bean，默认的Bean就会失效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span></span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义Jackson序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//key使用String的序列化方式</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">//hash的key也是用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">//value的key使用jackson的序列化方式</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">//hash的value也是用jackson的序列化方式</span></span><br><span class="line">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete((Collection&lt;String&gt;) CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><h2 id="RDB-Redis-DataBase"><a href="#RDB-Redis-DataBase" class="headerlink" title="RDB(Redis DataBase)"></a>RDB(Redis DataBase)</h2><p>主从复制中rdb可以在从机备用</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921200555786.png" alt="image-20210921200555786"></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921200652340.png" alt="image-20210921200652340"></p><blockquote><p>rdb文件命默认为 dump.rdb，可以在配置文件中修改dbfilename进行修改</p></blockquote><p><strong>生成rdb文件的触发规则：</strong></p><ul><li>满足save规则，自动生成rdb</li><li>执行<code>flushall</code>命令，自动生成rdb(flushdb不会)</li><li>退出redis，生成rdb文件</li></ul><p><strong>如何恢复rdb文件：</strong></p><ul><li><p>将rdb文件放在redis启动目录，redis启动时会自动检查dump.rdb并恢复其中的数据</p></li><li><p>查看需要存放的位置<code>config get dir</code></p></li><li><p>优点</p><ul><li>适合大规模数据恢复</li><li>对数据完整性要求不高</li></ul></li><li><p>缺点</p><ul><li>需要一定的时间进行进程操作，如果redis意外宕机，最后一次修改的数据就会消失</li><li>fork进程的时候也会占用一定的内存空间</li></ul></li></ul><p>一般来说，rdb的默认机制就足够我们日常使用了</p><h2 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF(Append Only File)"></a>AOF(Append Only File)</h2><p>将我们所有的命令都几乎下来，相当于history，恢复时即将所有命令全部记录下来</p><blockquote><p>aof文件命默认为 appendonly.aof，可以在配置文件中修改dbfilename进行修改</p></blockquote><ul><li><p>默认不开启，需要手动更改配置文件中<code>appendonly </code>修改为<code>yes</code>进行开启</p></li><li><p>优点(三种不同的同步策略)</p><ul><li>每一次修改都同步，文件完整性好</li><li>每秒同步一次，可能丢失一秒的数据</li><li>从不同步，效率最高</li></ul></li><li><p>缺点</p><ul><li>相对于数据文件来说，aof远远大于rdb，修复速度也比rdb慢</li><li>aof运行效率也比rdb慢，因此redis默认配置就是rdb持久化</li></ul></li></ul><p><strong>扩展</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921202615736.png" alt="image-20210921202615736"></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921202658568.png" alt="image-20210921202658568"></p>]]></content>
    
    
    <summary type="html">redis数据库以及Jedis连接Java</summary>
    
    
    
    <category term="数据库" scheme="http://lan5th.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot</title>
    <link href="http://lan5th.github.io/2021/08/17/JavaEE/SpringBoot/"/>
    <id>http://lan5th.github.io/2021/08/17/JavaEE/SpringBoot/</id>
    <published>2021-08-17T09:32:30.172Z</published>
    <updated>2022-07-12T02:37:13.162Z</updated>
    
    <content type="html"><![CDATA[<p><strong>微服务阶段</strong></p><p>Springboot：jar包，内嵌tomcat</p><a id="more"></a><p><strong>最大特点：自动装配</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210817174815920.png" alt="image-20210817174815920"></p><h1 id="Springboot原理简析"><a href="#Springboot原理简析" class="headerlink" title="Springboot原理简析"></a>Springboot原理简析</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol><li>从官网<a href="https://start.spring.io/">Spring Initializr</a>进行配置并下载压缩文件</li><li>idea直接集成，实现原理同上</li></ol><h2 id="Springboot新功能"><a href="#Springboot新功能" class="headerlink" title="Springboot新功能"></a>Springboot新功能</h2><ul><li><p>自动配置好SpringMVC</p><ul><li>引入SpringMVC全套组件</li><li>自动配好SpringMVC常用组件（功能）</li></ul></li><li><p>自动配号Web常见功能：如字符集编码问题</p></li><li><p>默认包结构</p><ul><li><p>主程序所在包及以下的所有子包内的组件会被默认扫描出来</p></li><li><p>无需手动配置包路径</p></li><li><p>如果要在上层目录也进行扫描，则可以配置注解属性</p><p><code>@SpringBootApplication(scanBasePackages = &quot;com.lan5th&quot;)</code></p></li></ul></li><li><p>各种配置拥有默认值</p><ul><li>默认配置最终映射到MultipartProperties</li><li>配置文件的值最终绑定到每个类上，并在容器中创建对象</li></ul></li><li><p>按需加载所有自动配置项</p><ul><li>starter启动器，引入哪些启动器就启动哪些场景的依赖</li><li>springboot所有自动配置功能都在<code>spring-boot-autoconfigure</code>包中</li></ul></li></ul><h2 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h2><ul><li><p><code>@SpringBootApplication</code>标识这个类是springboot的应用</p><ul><li>springboot项目启动时会从<code>spring-boot-autoconfigure-2.x.x.jar\META-INF\spring.factories</code>下自动获取指定的值</li><li>它会把所有需要导入的组件一类名的方式返回，以添加到springboot容器中</li><li>这个文件中存在大量xxxAutoConfigiration的类名，提供了当前starter所需的所有组件</li></ul></li><li><p><code>SpringApplication.run()</code></p><p>运行过程：</p><ul><li>推断应用类型（是否为web项目）</li><li>查找并加载所有可用初始化器，设置到initializers属性中</li><li>找出所有应用程序监听器，添加到listeners属性中</li><li>团短并设置main方法的定义类，找到运行主类</li></ul></li></ul><p><strong>简单案例</strong></p><p><code>spring.factories</code>中配置以下自动配置类<code>HttpEncodingAutoConfiguration.java</code>，我们以它为例更进一步了解原理</p><p><code>HttpEncodingAutoConfiguration.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标识是一个配置类</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="comment">//自动装配属性ServerProperties</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ServerProperties.class)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;server.servlet.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>ServerProperties.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这与我们在配置文件中所标写的前缀所绑定，并在实例化时进行自动注入</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;server&quot;, ignoreUnknownFields = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerProperties</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p>ConditionalOn注解</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210821182716543.png" alt="image-20210821182716543"></p></li></ul><p><code>HttpEncodingAutoConfiguration</code>开启自动装配，并给<code>ServerProperties</code>一些属性赋默认值，<code>ServerProperties</code>从yml配置文件中读取前缀相关的属性，替换默认值，从而加载相关组件。</p><blockquote><p>总结</p></blockquote><ul><li>springboot先加载所有的自动动配置类xxxAutoConfiguration</li><li>每个自动配置类按照条件进行生效，默认绑定配置文件所指定的值，通过xxxProperties与配置文件进行绑定</li><li>生效的配置类为容器中注入相应的组建环境</li><li>用户如果自己进行了某些组建的配置，就以用户的配置为优先</li><li>自定义配置方法<ul><li>用户自定义@Bean进行注入，替换底层代码</li><li>用户查看组件绑定的配置文件前缀进行修改</li></ul></li></ul><h2 id="请求映射原理"><a href="#请求映射原理" class="headerlink" title="请求映射原理"></a>请求映射原理</h2><p><code>DispatcherServlet.java</code>中由<code>doDispatch()</code>方法进行请求处理，并调用<code>getHandler()</code>方法进行处理器映射器的选择</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Determine handler for the current request.</span></span><br><span class="line">mappedHandler = getHandler(processedRequest);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//getHandler方法会在所有能够得到的handlerMapping中进行遍历并试图进行url匹配</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (HandlerMapping mapping : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line">         HandlerExecutionChain handler = mapping.getHandler(request);</span><br><span class="line">         <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> handler;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210910204412853.png" alt="image-20210910204412853"></p><p>其中，RequestMappingHandlerMapping为SpringBoot帮我们配置的映射器，在mappingRegistry属性中注册了我们所有在Controller中配置的请求url和执行方法的匹配映射</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210910204619014.png" alt="image-20210910204619014"></p><p>同理，WelcomePageHandlerMapping会在RequestMappingHandlerMapping匹配url失败后进行匹配，并且仅匹配<code>/</code>路径，用于web应用首页的跳转</p><h2 id="参数处理原理"><a href="#参数处理原理" class="headerlink" title="参数处理原理"></a>参数处理原理</h2><h3 id="参数处理流程"><a href="#参数处理流程" class="headerlink" title="参数处理流程"></a>参数处理流程</h3><ol><li><p>处理器适配器HandlerAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DispatcherServlet</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.handlerAdapters != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (HandlerAdapter adapter : <span class="keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line">         <span class="keyword">if</span> (adapter.supports(handler)) &#123;</span><br><span class="line">            <span class="keyword">return</span> adapter;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;No adapter for handler [&quot;</span> + handler +</span><br><span class="line">         <span class="string">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210912100135032.png" alt="image-20210912100135032"></p></li><li><p>执行目标方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DispatcherServlet</span></span><br><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RequestMappingHandlerAdapter(具体的handlerAdapter)</span></span><br><span class="line"><span class="comment">//执行目标方法</span></span><br><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod);</span><br></pre></td></tr></table></figure></li><li><p>参数解析器ArgumentResolver</p><p>目标方法能够写的参数类型都取决于参数解析器</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210912101130177.png" alt="image-20210912101130177"></p></li><li><p>返回值处理器ReturnValueHandler</p><p>目标方法能够写的返回值类型都取决于返回值处理器</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210912101408958.png" alt="image-20210912101408958"></p></li></ol><h3 id="复杂参数"><a href="#复杂参数" class="headerlink" title="复杂参数"></a>复杂参数</h3><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913105920294.png" alt="image-20210913105920294"></p><p>给Map或Model对象里面添加数据相当于给HttpServletRequest中setAttribute。</p><p>Map和Model在实际解析参数时都会返回<code>mavContainer.getModel();</code>其中的BindingAwareModelMap能够同时实现Map和Model的具体功能</p><p>在执行具体方法时如果同时传入Map和Model对象，实际运行时只有同一个BindingAwareModelMap对象</p><p>目标方法执行完成时将所有的数据都放在ModelAndViewContainer(mavContainer)中，包含目标视图VIew和相关数据Model</p><blockquote><p>ModelAndView转移流程</p></blockquote><ol><li>Map和Model被BindingAwareModelMap实现</li><li>BindingAwareModelMap被封装于ModelAndViewContainer</li><li>BindingAwareModelMap被取出分封装于ModelAndView</li><li>BindingAwareModelMap数据被取出封装于ModelMap(新对象)中</li><li><code>exposeModelAsRequestAttributes(model, request);</code>暴露模型作为请求域属性</li><li>对ModelMap进行遍历并将其添加到请求域参数中</li></ol><h3 id="自定义对象参数"><a href="#自定义对象参数" class="headerlink" title="自定义对象参数"></a>自定义对象参数</h3><p>由ServletModelAttributeMethodProcessor参数处理器(有重名)进行解析</p><ol><li><p>根据实体类判断是否为简单类型</p></li><li><p>创建出一个对象实例JavaBean</p></li><li><p><code>WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)</code>Web数据绑定器，可以将请求的参数封装在指定的JavaBean(方法中指attribute)中</p><p>WebDataBinder底层有非常多的数据转换器Converters来帮助我们转换常见的参数类型</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913114942990.png" alt="image-20210913114942990"></p></li><li><p>GenericConversionService在设置每一个值时，会遍历所有Converter，寻找能将转换指定数据类型的转换器，转换器底层利用反射获取实体类数据类型并进行相应转换</p></li><li><p>我们也可以自定义Converter：实现WebMvcConfigurer中的addFormatters方法，用于添加我们自己的Converter</p><p>上层接口</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913165406673.png" alt="image-20210913165406673"></p></li></ol><h2 id="数据响应原理"><a href="#数据响应原理" class="headerlink" title="数据响应原理"></a>数据响应原理</h2><h3 id="返回参数"><a href="#返回参数" class="headerlink" title="返回参数"></a>返回参数</h3><p>springboot已经帮我们导入了jackson的相关依赖</p><p>returnValueHandler返回值处理器对不同的返回值类型进行处理，其上层接口结构：</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913164852244.png" alt="image-20210913164852244"></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913162803918.png" alt="image-20210913162803918"></p><p>执行流程：</p><ul><li><p>supportsReturnType判断是否支持该类型返回值</p></li><li><p>handleReturnType进行处理</p></li><li><p>利用MessageConverters处理返回值</p><ul><li><p><strong>内容协商</strong>：浏览器默认会以请求头的方式高速服务能够就接受怎样的内容类型</p></li><li><p>服务器根据自身能力决定能生产出什么样类型的内容数据</p></li><li><p>遍历所有容器底层的HttpMessageConverter，得到MappingJackson2HttpMessageConverter可以将对象转为Json格式</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913192101770.png" alt="image-20210913192101770"></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913192255767.png" alt="image-20210913192255767"></p></li></ul></li></ul><h3 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h3><p>流程：</p><ul><li><p>判断当前响应头中是否已经有了确定的媒体类型</p></li><li><p>获取客户端中支持的内容类型(请求头accept字段，如<code>application/json</code>，一般都带有权重)</p></li><li><p>遍历循环所有的MessageConverter，寻找支持操作对象的Converter列表</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913200339922.png" alt="image-20210913200339922"></p></li><li><p>将Converter支持的媒体类型统计出来</p><p>客户端需要<code>application/json</code>，服务端可以处理的类型列表：</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913200226642.png" alt="image-20210913200226642"></p></li><li><p>进行内容协商的最佳匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (MediaType requestedType : acceptableTypes) &#123;</span><br><span class="line">    <span class="keyword">for</span> (MediaType producibleType : producibleTypes) &#123;</span><br><span class="line">        <span class="keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;</span><br><span class="line">            mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用支持将对象转为最佳匹配媒体类型的converter进行内容转化</p></li></ul><h3 id="开启参数方式的内容协商"><a href="#开启参数方式的内容协商" class="headerlink" title="开启参数方式的内容协商"></a>开启参数方式的内容协商</h3><p>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.mvc.contentnegotiation.favor-parameter</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>使用方式<code>url?format=相应格式</code>，如<code>http://localhost:8080/test/user?format=xml</code></p><p>进行自定义Convertor实现<code>HttpMessageConverter&lt;支持操作的数据类型&gt;</code>接口，并在WebMvcConfigurer中添加进容器</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210915231645160.png" alt="image-20210915231645160"></p><p>或自定义协议</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210915231819843.png" alt="image-20210915231819843"></p><h2 id="模板引擎与视图解析原理"><a href="#模板引擎与视图解析原理" class="headerlink" title="模板引擎与视图解析原理"></a>模板引擎与视图解析原理</h2><ol><li><p>目标方法处理的过程中，所有数据都会被放在ModelAndViewContainer中，包括数据和试图抵制</p></li><li><p>方法的参数是自定义对象时（从请求参数中获取），也会将其放在ModelAndViewContainer中</p></li><li><p>任何目标方法执行完成后都会返回ModelAndView对象</p></li><li><p>processDispatcherResult处理派发结果（页面响应方式）</p><ul><li><p><code>render(mv,request,response)</code>页面渲染逻辑</p><ul><li><p>根据方法的String返回值得到View对象（定义了页面的渲染逻辑）</p></li><li><p>所有的视图解析器尝试是否能通过当前返回值得到View对象</p><p>如返回值<code>redirect:/main.html</code>由ThymeleafViewResolver进行相关判断并new了一个RedirectView对象</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210916223209162.png" alt="image-20210916223209162"></p></li><li><p>ContentNegotiatingViewResolver包含了下面的所有视图解析器，原理还是利用这些视图解析器获取View对象</p></li><li><p>VIew视图对象调用自身的render方法对页面进行渲染</p></li></ul></li></ul></li></ol><p>View视图对象如何进行页面渲染？</p><ul><li><p>返回值以forward开始：<code>new InternalResourceView(forwardUrl)</code>-&gt;</p><p><code>request.getRequestDispatcher(path).forward(request, response)</code></p></li><li><p>返回值以redirect开始：<code>new RedirectView()</code>-&gt;</p><p><code>response.sendRedirect(encodedURL)</code></p></li><li><p>返回值是普通字符串：<code>new ThymeleafView()</code>-&gt;</p><p>ThymeleafView调用自己底层的输出流方法对页面进行渲染</p></li></ul><h2 id="拦截器原理"><a href="#拦截器原理" class="headerlink" title="拦截器原理"></a>拦截器原理</h2><ol><li><p>根据前当前请求找到可以处理请求的handler和handler的所有拦截器</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917132912615.png" alt="image-20210917132912615"></p></li><li><ul><li>先<strong>顺序执行</strong>所有拦截器的preHandle方法</li><li>如果有某个拦截器返回为false，则<strong>倒序执行</strong>所有已经执行了的拦截器的afterCompletion</li></ul></li><li><p>如果任何一个拦截器返回为false，则会跳出不执行目标方法</p></li><li><ul><li>如果所有拦截器都返回为true，则执行目标方法</li><li>倒序执行所有拦截器的postHandle方法</li></ul></li><li><p>页面成功渲染之后也会<strong>倒序触发</strong>afterCompletion方法</p></li><li><p><strong>以上任何一步出现异常也会直接倒序触发afterCompletion方法</strong></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917134058094.png" alt="image-20210917134058094"></p><h2 id="文件上传原理"><a href="#文件上传原理" class="headerlink" title="文件上传原理"></a>文件上传原理</h2><p>文件上传自动配置类<code>MultipartAutoConfiguration</code>自动配置好了<code>StandardServletMultipartResolver</code>文件上传解析器</p><ol><li>文件上传解析器判断是否为Multipart请求，并封装为MultipartHttpServletRequest文件上传请求</li><li>参数解析器来解析请求中的文件内容封装成MultipartFIle</li><li>将request中的文件信息封装为Map：<code>MultiValueMap&lt;String, MultipartFile&gt;</code></li><li>FileCopyUtils可以实现文件流的拷贝</li></ol><h2 id="错误处理原理"><a href="#错误处理原理" class="headerlink" title="错误处理原理"></a>错误处理原理</h2><p>异常处理自动配置类<code>ErrorMvcAutoConfiguration</code></p><ul><li><p>异常处理自动配置原理</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917160830225.png" alt="image-20210917160830225"></p><p>如果想要返回页面，就会找到error视图(staticView)，默认为空白页</p></li><li><p>异常处理流程</p><ol><li><p>目标方法运行期间任何异常，都会被catch，并被dispatchException封装</p></li><li><p>进入视图解析流程(页面渲染)</p><p><code>processDispatchResult(processedRequest, response, mappedHandler, mv, dispathcerException)</code></p></li><li><p>processHandlerException方法处理handler发生的异常，处理完成返回ModelAndView</p><ul><li><p>遍历所有的handlerExceptionResolvers，看谁能处理当前异常</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917162126075.png" alt="image-20210917162126075"></p></li><li><p>系统默认的异常解析器</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917161933384.png" alt="image-20210917161933384"></p><ul><li>defaultErrorAttribute现来处理异常，把异常信息保存到request域，并且返回null</li><li>默认没有任何handlerExceptionResolvers能够处理，因此直接抛出异常<ul><li>如果这种情况，则spring会自动发送一个/error请求，会被底层的BasicErrorController处理</li><li>解析错误视图，遍历所有的<strong>ErrorViewResolver</strong>看谁能够解析</li><li>默认DefaultErrorViewResolver作用是把响应状态码作为错误页的地址，如error/500.html</li><li>模板引擎最终响应这个页面</li></ul></li></ul></li></ul></li></ol></li><li><p>定制错误处理逻辑</p><ul><li><p>在/error路径下添加404.html,5xx.html错误页</p></li><li><p>@ControllerAdvice+@ExceptionHandler处理全局异常：底层由<strong>ExceptionHandlerExceptionResolver</strong>支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//处理计算错误异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;ArithmeticException.class,NullPointerException.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleArithException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ResponseStatus+自定义异常：底层由<strong>ResponseStatusExceptionResolver</strong>支持，把responsestatus注解的信息调用<code>response.sendError(statusCode,resolvedReason)</code>给Tomcat发送/error请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus(value = HttpStatus.FORBIDDEN, reason = &quot;用户数量太多了&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTooManyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserTooManyException</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserTooManyException</span><span class="params">(String msg)</span></span>&#123;<span class="keyword">super</span>(msg);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>DefaultHandlerExceptionResolver</strong>为Spring处理框架底层的异常</p><p><code>response.sendError(HttpServletResponse.SC_BAD_REQUEST,ex.getMessage)</code></p><p>自定义实现HandlerExceptionResolver处理异常，可以作为全局磨人的异常处理规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//优先级设置为最高，否则会由其他三个HandlerExceptionResolver接管异常的处理</span></span><br><span class="line"><span class="meta">@Order(value = Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerHandlerExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.sendError(<span class="number">511</span>,<span class="string">&quot;自定义的错误类型&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//尽管我们未对ModelAndView作任何处理，但只要返回值不为空</span></span><br><span class="line">        <span class="comment">//都会直接跳出循环，不再进行HandlerExceptionResolver的遍历</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>ErrorViewResolver</p><ul><li>response.sendError，error请求就会转给Controller</li><li>当一个异常没有任何handlerExceptionResolvers能够处理，error请求也会转给Controller</li><li>basicErrorController要去的页面地址是ErrorViewResolver解析的</li></ul></li></ul><h2 id="嵌入式Servlet容器"><a href="#嵌入式Servlet容器" class="headerlink" title="嵌入式Servlet容器"></a>嵌入式Servlet容器</h2><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917205230494.png" alt="image-20210917205230494"></p><p>切换容器类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义Servlet容器</p><ul><li>修改配置文件server.xxx</li><li>注入ConfigurableServletWebServerFactory</li><li>实现<code>WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt;</code>接口</li></ul><h2 id="定制化原理"><a href="#定制化原理" class="headerlink" title="定制化原理"></a>定制化原理</h2><h3 id="定制化的常见方式"><a href="#定制化的常见方式" class="headerlink" title="定制化的常见方式"></a>定制化的常见方式</h3><ul><li><p>修改配置文件</p></li><li><p>xxxCustomizer</p></li><li><p>编写自定义配置类 xxxConfig + <code>@Bean</code>增加组件来替换默认配置</p></li><li><p><strong>Web应用实现WebMvcConfigurer定制化Web功能</strong></p></li><li><p>WebMvcConfigurer+<code>@EnableWebMvc</code>：全面接管Mvc，自动配置全部失效，所有配置项都需要我们进行配置</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917211317115.png" alt="image-20210917211317115"></p></li></ul><h3 id="原理分析常用方式"><a href="#原理分析常用方式" class="headerlink" title="原理分析常用方式"></a>原理分析常用方式</h3><blockquote><p> 场景starter -&gt; xxxAutoConfiguration -&gt; 导入xxx组件 -&gt; 绑定xxxProperties -&gt; 绑定配置文件项</p></blockquote><h1 id="SpringBoot配置"><a href="#SpringBoot配置" class="headerlink" title="SpringBoot配置"></a>SpringBoot配置</h1><h2 id="Maven-in-SpringBoot"><a href="#Maven-in-SpringBoot" class="headerlink" title="Maven in SpringBoot"></a>Maven in SpringBoot</h2><p><code>pom.xml</code>中规定了springboot项目的府项目，而在父项目中规定了许多常用依赖的版本号，我们进行依赖导入时一般不需要再手动指定版本号，减少了版本不兼容的发生频率</p><p>在进行依赖导入时通常直接导入启动器，一个启动器包含了多个相关的maven依赖，使用起来更为方便，一般格式为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一般来说，<code>spring-boot-starter-XXX</code>格式为springboot官方启动器，不需要指定版本，而<code>XXX-spring-boot-starter</code>为第三方启动器，版本管理文件中是否有而决定是否需要手动配置</p><p>所有场景启动器有一个共同的依赖<code>spring-boot-starter</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h2><p>springboot配置文件<code>application.yml</code>可以后缀使用<code>.yml .yaml .properties</code>(yml是yaml的缩写)</p><p>其中yml作为springboot的推荐配置文件类型，可以存储多种数据类型</p><p>yaml还可以获取<code>pom.xml</code>配置文件中的信息，如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">appVersion:</span> <span class="string">@project.version@</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#key-value键值对</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">lan5th</span></span><br><span class="line"><span class="comment">#对象</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">lan5th</span></span><br><span class="line"> <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line"><span class="comment">#数组</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>并且yml可以注入到我们的配置之中</p><p><code>User.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">//使用此注解容器会将yml中指定前缀的属性自动注入</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean married;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Dog.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lan5th</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">married:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2021</span><span class="string">/8/19</span></span><br><span class="line">  <span class="attr">map:</span> &#123;<span class="attr">key1:</span> <span class="string">value1</span>, <span class="attr">key2:</span> <span class="string">value2</span>&#125;</span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">myDog</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>注意：yaml的字符串转义问题</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">myString:</span> <span class="string">&#x27;string1 /n string2&#x27;</span></span><br><span class="line"><span class="attr">newString:</span> <span class="string">&quot;string1 /n string2&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>单引号会输出<code>string1 /n string2</code>原字符串</p></li><li><p>双引号会进行转义，变为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string1 </span><br><span class="line"> string2</span><br></pre></td></tr></table></figure></li></ul><p><strong>yml与properties功能对比</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210819225635969.png" alt="image-20210819225635969"></p><ul><li><p>松散绑定：yml文件中<code>-</code>后的字母默认大写，如yml中的last-name注入式会变成lastName</p></li><li><p>SpEL：使用properties文件时用于给属性赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li><li><p>JSR303数据校验</p><p>需要导入starter环境</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用方式如下，可以只接受email格式的注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分校验功能</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210819231649005.png" alt="image-20210819231649005"></p></li><li><p>复杂类型封装：如对象</p></li></ul><p>共有四处可以配置<code>application.yml</code>配置文件</p><p>按优先级从高到低排序如下：</p><ul><li><code>file:./config/</code>：项目根路径下的config文件夹</li><li><code>file:./：</code>项目根路径下直接创建文件</li><li><code>classpath:/congfig/</code>：resources目录下的config文件夹</li><li><code>classpath:/</code>：resources目录下直接创建文件（idea创建springboot项目默认于此）</li></ul><h2 id="yaml提示依赖"><a href="#yaml提示依赖" class="headerlink" title="yaml提示依赖"></a>yaml提示依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--在打包时不将插件打包--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多环境配置文件"><a href="#多环境配置文件" class="headerlink" title="多环境配置文件"></a>多环境配置文件</h2><p>新建多套配置文件</p><p><code>application.properties</code></p><p><code>application-dev.properties</code>生产环境</p><p><code>application-test.properties</code>测试环境</p><ul><li><p>通过配置文件激活多环境（properties或yaml）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接指定后缀可直接切换</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure></li><li><p>在部署时命令行激活（命令行最为优先）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar springboot-0.0.1-SNAPSHOT.jar --spring.profiles.active&#x3D;test</span><br></pre></td></tr></table></figure></li><li><p>yml单文件激活环境</p><p>单文件多环境</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="comment">#---用于分割不同的生产环境</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure></li><li><p>自定义类按环境切换<code>@Profile</code>可以标注在类上和方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Profile(&quot;dev&quot;)</span> <span class="comment">//只有dev环境才会启用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile(&quot;test&quot;)</span> <span class="comment">//只有test环境才会启用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p>指定激活多个配置文件</p><p>现在有四个配置文件</p><p><code>application.properties</code></p><p><code>application-dev.properties</code></p><p><code>application-prod.properties</code></p><p><code>application-test.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">myenv</span></span><br><span class="line"><span class="comment"># 自定义环境myenv</span></span><br><span class="line"><span class="meta">spring.profile.group.myenv[0]</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.profile.group.myenv[1]</span>=<span class="string">prod</span></span><br><span class="line"><span class="comment"># 自定义环境mytest</span></span><br><span class="line"><span class="meta">spring.profile.group.mytest[0]</span>=<span class="string">test</span></span><br></pre></td></tr></table></figure><p>当激活myenv时，<code>application.properties, application-dev.properties, application-prod.properties</code>会全部生效，实现多个配置文件的加载</p></li></ul><h2 id="高级自定义配置"><a href="#高级自定义配置" class="headerlink" title="高级自定义配置"></a>高级自定义配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过向容器中注入WebMvcConfigurer来实现一些自定义的组件，这个接口有许多添加组件的默认方法，借由此可以进行添加</p><h2 id="配置加载规则"><a href="#配置加载规则" class="headerlink" title="配置加载规则"></a>配置加载规则</h2><ul><li><p>常见外部配置源</p><p>java属性文件，yaml，环境变量，命令行参数</p></li><li><p>配置文件加载优先级</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210918214141412.png" alt="image-20210918214141412"></p><p>从上至下优先级依次变高</p></li><li><p><strong>总结：指定环境优先，外部优先，后项覆盖前项同名项</strong></p></li></ul><h1 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h1><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><ul><li><p><code>@Configuration</code>标识是一个配置类</p><p><code>@Bean</code>，方法级别的注解，代替xml向容器中添加组件，组件的id默认为方法名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myconfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">userRegist</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;lan5th&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置类本身也是组件</li><li><code>@Configuration</code>注解中的属性<code>proxyBeanMethods</code>默认为true，表示配置类在容器中以代理对象形式所存在，只能拿到单例的Bean实例。同时以此区分Full模式与Lite模式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(MultipartResolver.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line">   <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个方法中添有@Bean注解，而且有传入值，表示执行方法时会从容器中自动寻找一个与<code>MultipartResolver</code>类型相匹配的组件，将它的属性赋值给新的<code>multipartResolver</code></li></ul></li><li><p><code>@Import</code>必须放置在组件类型的注解上：<code>@Component,@Configuration,@Controller,@Service,@Repository</code>等</p><p>用于给容器中导入自己所需要的组件或第三方组件，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(DBHelper.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myconfig</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@Conditional</code>满足指定条件时再进行注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常见注解</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span><span class="comment">//指定Bean在容器中存在</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span><span class="comment">//指定Bean在容器中不存在</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span><span class="comment">//指定Class在容器中存在</span></span><br><span class="line"><span class="meta">@ConditionalOnResource</span><span class="comment">//项目路径中存在指定资源</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span><span class="comment">//当前运行环境为Web环境</span></span><br></pre></td></tr></table></figure></li><li><p><code>@ImportResource</code>在某个配置类上导入xml类型的Bean资源，如</p><p><code>@ImportResource(classpath:beans.xml)</code></p></li><li><p><code>@ConfigurationProperties</code>必须配合组件类型的注解使用，将配置文件中指定前缀的kv自动注入实体类中的属性。，如</p><p><code>@ConfigurationProperties(prefix = &quot;user&quot;)</code></p><p>或在配置类中使用<code>@EnableConfigurationProperties(User.class)</code>来代替<code>@Component + @ConfigurationProperties</code>的组合</p></li></ul><h2 id="Controller请求参数"><a href="#Controller请求参数" class="headerlink" title="Controller请求参数"></a>Controller请求参数</h2><p>注解参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="comment">//Restful获取url参数</span></span><br><span class="line"><span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv <span class="comment">//Restful获取url参数并自动封装，只能Map&lt;String,String&gt;类型</span></span><br><span class="line"><span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> <span class="comment">//获取请求头</span></span><br><span class="line"><span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header <span class="comment">//获取请求头并自动封装，只能Map&lt;String,String&gt;类型</span></span><br><span class="line"><span class="meta">@RequestParam(&quot;id&quot;)</span> <span class="comment">//获取普通类型url参数</span></span><br><span class="line"><span class="meta">@RequestParam</span> Map&lt;String,String&gt; params <span class="comment">//获取普通类型url参数并自动封装，只能Map&lt;String,String&gt;类型</span></span><br><span class="line"><span class="meta">@CookieValue(&quot;id&quot;)</span> <span class="comment">//获取cookie参数</span></span><br><span class="line"><span class="meta">@CookieValue</span> Cookie cookie <span class="comment">//获取cookie并封装成对象</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@RequestBody</span> <span class="comment">//获取post表单数据</span></span><br><span class="line"><span class="meta">@RequestAttribute(&quot;msg&quot;)</span> <span class="comment">//获取request.setAttribute中设置的参数(用于方法之间)</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@MatrixVariable</span></span><br></pre></td></tr></table></figure><h2 id="导入静态资源"><a href="#导入静态资源" class="headerlink" title="导入静态资源"></a>导入静态资源</h2><p><code>WebMvcProperties.java</code>中定义了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String staticPathPattern = <span class="string">&quot;/**&quot;</span>;</span><br></pre></td></tr></table></figure><p><code>WebProperties.java</code>中定义了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class="line"><span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>这4处即为一般默认能够引入静态资源的位置（<code>classpath:/META-INF/resources/</code>即为WebJars下的相关路径）</p><p><strong>访问方式</strong></p><ul><li>webjars <code>localhost:8080/webjars/</code>+fileName</li><li>public, static,  resources <code>localhost:8080/</code>+fileName</li></ul><p>优先级：resources&gt;static(默认)&gt;public</p><p>可以通过在配置文件中配置<code>spring.mvc.static-path-pattern</code>来更改静态资源访问url前缀，配置<code>spring.resources.static-locations</code>来更改静态资源存储位置</p><h3 id="原理探究"><a href="#原理探究" class="headerlink" title="原理探究"></a>原理探究</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果一个类只有一个有参构造器，那么所有的参数都会自动从容器中匹配获取</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcAutoConfigurationAdapter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      org.springframework.boot.autoconfigure.web.ResourceProperties resourceProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">      WebProperties webProperties, WebMvcProperties mvcProperties, ListableBeanFactory beanFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">      ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">      ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">      ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span></span><br><span class="line"><span class="function"><span class="params">      ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.resourceProperties = resourceProperties.hasBeenCustomized() ? resourceProperties</span><br><span class="line">         : webProperties.getResources();</span><br><span class="line">   <span class="keyword">this</span>.mvcProperties = mvcProperties;</span><br><span class="line">   <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">   <span class="keyword">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line">   <span class="keyword">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line">   <span class="keyword">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line">   <span class="keyword">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line">   <span class="keyword">this</span>.mvcProperties.checkConfiguration();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板引擎Thymeleaf"><a href="#模板引擎Thymeleaf" class="headerlink" title="模板引擎Thymeleaf"></a>模板引擎Thymeleaf</h2><p>代替了之前学习的jsp，允许在html页面中写入逻辑语法</p><p>直接导入相应启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Thymeleaf本体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加对java8时间LocalDate和LocalDateTime的支持依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ThymeleafProperties.java</code>中规定了Thymeleaf保存文件的位置和后缀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;</span><br></pre></td></tr></table></figure><p>使用时需要导入命名空间<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code></p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><ul><li><p>表达式</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210901213203012.png" alt="image-20210901213203012"></p></li><li><p>取值方法</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210830195948186.png" alt="image-20210830195948186"></p></li></ul><h2 id="扩展装配SpringMVC"><a href="#扩展装配SpringMVC" class="headerlink" title="扩展装配SpringMVC"></a>扩展装配SpringMVC</h2><p>自定义视图解析器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//不能添加@EnableWebMvc，否则自动配置将会全部失效，需要手动进行全部配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String s, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册到Spring容器之后，我们就可以使用我们自定义的视图解析器相关配置</p><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><ul><li><p>配置<code>i18n</code>文件夹（internationalization的缩写）</p><p>其中保存.properties文件并以键值对的形式保存不同翻译</p><p>语言切换，例：</p><ul><li>中文<code>login_zh_CN.properties</code></li><li>英文<code>login_en_US.properties</code></li></ul></li><li><p>如果需要进行按钮切换，需要自定义组件实现<code>LocaleResolver</code>，并将其添加到spring容器中</p></li><li><p>使用<code>#&#123;&#125;进行取值</code></p></li></ul><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><ul><li><p>实现拦截器接口<code>HandlerInterceptor</code>，实现preHandle和postHandle接口的方法</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210901160255460.png" alt="image-20210901160255460"></p></li><li><p>在自定义配置类继承<code>WebMvcConfigurer</code>中实现方法，注册拦截器</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210901160411301.png" alt="image-20210901160411301"></p></li></ul><p>防止拦截静态资源：</p><ul><li><p>添加排除拦截<code>registry.addInterceptor(new LoginHandlerInterceptor()).exclude(...)</code></p></li><li><p>配置文件中添加<code>spring.mvc.static-path-pattern</code>，并将所有静态文件放置在/static路径下</p><p>注意：使用这种方法在访问静态资源时，必须在static目录下新建一层static目录，静态资源路径默认不显示第一层static</p></li></ul><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>文件上传与MultipartAutoConfiguration相关，文件相关属性绑定：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">100MB</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/upload&#125;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;headerImg&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多文件上传--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photos&quot;</span> <span class="attr">multiple</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只需要以MultipartFile接收传输的参数即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单文件及多文件上传</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!headerImg.isEmpty())&#123;</span><br><span class="line">        String filename = headerImg.getOriginalFilename();</span><br><span class="line">        <span class="comment">//这里使用静态路径</span></span><br><span class="line">        headerImg.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;D:\\cache\\&quot;</span>+filename));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (photos.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile photo: photos)&#123;</span><br><span class="line">            String filename = photo.getOriginalFilename();</span><br><span class="line">            photo.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;D:\\cache\\&quot;</span>+filename));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917152141146.png" alt="image-20210917152141146"></p><p>具体实现在原理部分</p><h2 id="注入原生组件"><a href="#注入原生组件" class="headerlink" title="注入原生组件"></a>注入原生组件</h2><p>一般用于转化老项目</p><ul><li><p>Servlet3.0注解：主程序类上注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ServletComponentScan(basePackage = &quot;com.lan5th&quot;)</span></span><br></pre></td></tr></table></figure><p>组件类上注解<code>@WebServlet, @WebFilter, @WebListener</code>进行自动扫描注入容器</p></li><li><p>RegistrationBean进行添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于SpringBoot内置了servlet容器，没有web.xml文件，因此使用替代方法:ServletRegistrationBean将需要的Servlet注册进容器</span></span><br><span class="line"><span class="comment">//使用代理模式，生成单实例</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRegistConfig</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyServlet myServlet = <span class="keyword">new</span> MyServlet();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(myServlet,<span class="string">&quot;/myrequest&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyFilter myFilter = <span class="keyword">new</span> MyFilter();</span><br><span class="line">        <span class="comment">//设置拦截的Servlet</span></span><br><span class="line">        <span class="comment">//FilterRegistrationBean bean = new FilterRegistrationBean(myFilter, myServlet());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//或设置拦截url</span></span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean(myFilter);</span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/myrequest&quot;</span>,<span class="string">&quot;/css/&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyListener myListener = <span class="keyword">new</span> MyListener();</span><br><span class="line">        <span class="keyword">return</span> ServletListenerRegistrationBean(myListener)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ServletRegistrationBean, FilterRegistrationBean, ListenerRegistrationBean</code></p></li></ul><p><strong>拓展</strong></p><p>容器中的DispatcherServlet也是通过RegistrationBean的方法注册进来，对应配置文件的前缀spring.mvc，默认映射<code>/</code>路径</p><p><strong>多个Servlet能够处理同一路径时，采用精确优先原则</strong></p><p>因此当我们向容器中注册Servlet路径为<code>/</code>的子目录时默认以我们的Servlet更为优先</p><h2 id="使用AOP"><a href="#使用AOP" class="headerlink" title="使用AOP"></a>使用AOP</h2><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同时标注这两个注解才能生效</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * com.example.mybatisplus.web.controller.TestController.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">webLog</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deBefore</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 接收到请求，记录请求内容</span></span><br><span class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = attributes.getRequest();</span><br><span class="line">        <span class="comment">// 记录下请求内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;URL : &quot;</span> + request.getRequestURL().toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;HTTP_METHOD : &quot;</span> + request.getMethod());</span><br><span class="line">        System.out.println(<span class="string">&quot;IP : &quot;</span> + request.getRemoteAddr());</span><br><span class="line">        System.out.println(<span class="string">&quot;CLASS_METHOD : &quot;</span> + joinPoint.getSignature().getDeclaringTypeName() + <span class="string">&quot;.&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;ARGS : &quot;</span> + Arrays.toString(joinPoint.getArgs()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;webLog()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(Object ret)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理完请求，返回内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法的返回值 : &quot;</span> + ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">throwss</span><span class="params">(JoinPoint jp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法异常时执行.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置最终通知,final增强，不管是抛出异常或者正常退出都会执行</span></span><br><span class="line">    <span class="meta">@After(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint jp)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法最后执行.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知,环绕增强，相当于MethodInterceptor</span></span><br><span class="line">    <span class="meta">@Around(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">arround</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法环绕start.....&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object o =  pjp.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;方法环绕proceed，结果是 :&quot;</span> + o);</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jar包启动springboot"><a href="#jar包启动springboot" class="headerlink" title="jar包启动springboot"></a>jar包启动springboot</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar -Xdebug -Xrunjdwp:transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=配置的debug端口号 -Dspring.profiles.active=prod 包名.jar</span><br><span class="line">java -jar -Xdebug -Xrunjdwp:transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=8792 -Dspring.profiles.active=prod blog-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><h1 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h1><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>切换mysql-connector-java版本方法：</p><ul><li><p>直接指定<code>&lt;version&gt;&lt;/version&gt;</code></p></li><li><p>由maven就近优先原则在最外层Pom中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>一些相关的自动配置类：</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917214258823.png" alt="image-20210917214258823"></p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917214220691.png" alt="image-20210917214220691"></p><p>配置项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h2 id="Druid数据源"><a href="#Druid数据源" class="headerlink" title="Druid数据源"></a>Druid数据源</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以通过导入starter或自定义注入的方式导入数据源</p><p>配置完成druid后台监控之后可以根据配置的路径访问数据源后台监控页面</p><p>如：配置了url为<code>/druid/*</code>，项目启动之后我们在浏览器中访问<code>http://localhost:8080/druid/</code>就可以进行后台监控了</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210903162644116.png" alt="image-20210903162644116"></p><h3 id="自行导入"><a href="#自行导入" class="headerlink" title="自行导入"></a>自行导入</h3><p>不进行配置这些设置会有默认值</p><p>由于Druid后台监控必须通过特定Servlet进行开启，因此选用ServletRegistrationBean方式进行注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//自动装配DruidDataSource</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        druidDataSource.setFilters(<span class="string">&quot;stat,wall&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后台监控</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(),<span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//后台需要登录，进行账号密码配置</span></span><br><span class="line">        HashMap&lt;String, String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//登录的用户名和密码key是固定的，不能随意更改</span></span><br><span class="line">        <span class="comment">//value与数据库无关，可以自定义配置</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        initParameters.put(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志记录</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;Filter&gt; bean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        HashMap&lt;String, String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//这些路径不进行过滤</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，我们配置这些JavaBean的过程也可以用配置文件所代替</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#SpringBoot默认是不注入这些的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许报错，java.lang.ClassNotFoundException: org.apache.Log4j.Properity</span></span><br><span class="line">    <span class="comment">#则导入log4j 依赖就行</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionoProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line">    <span class="bullet">-</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">Zyh20010605</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/lz_blog?useSSl=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#连接池属性</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">validation-query-timeout:</span> <span class="number">1000</span></span><br><span class="line">      <span class="attr">keep-alive:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">remove-abandoned:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">remove-abandoned-timeout:</span> <span class="number">180</span></span><br><span class="line">      <span class="attr">log-abandoned:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">      <span class="attr">use-global-data-source-stat:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">maxOpenPreparedStatements:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">connect-properties.mergeSql:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">connect-properties.slowSqlMillis:</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 配置DruidStatFilter</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">&quot;/*&quot;</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span></span><br><span class="line">      <span class="comment"># 配置DruidStatViewServlet</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">&quot;/druid/*&quot;</span></span><br><span class="line">        <span class="comment"># IP白名单(没有配置或者为空，则允许所有访问)</span></span><br><span class="line">        <span class="attr">allow:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="comment"># IP黑名单 (存在共同时，deny优先于allow)</span></span><br><span class="line">        <span class="attr">deny:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="comment">#  禁用HTML页面上的“Reset All”功能</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 登录名</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="comment"># 登录密码</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="comment"># 新版需要配置这个属性才能访问监控页面</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Starter方式导入"><a href="#Starter方式导入" class="headerlink" title="Starter方式导入"></a>Starter方式导入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>start方式也需要配置类来注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//自动装配DruidDataSource</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span> <span class="comment">#监控sql，防火墙，日志</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span> <span class="comment">#监控页</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span> <span class="comment">#监控web</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/*</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&#x27;*.js,*.css,/druid/*&#x27;</span></span><br><span class="line">      <span class="attr">aop-patterns:</span> <span class="string">com.lan5th</span> <span class="comment">#监控Bean</span></span><br><span class="line">      <span class="attr">filter:</span> <span class="comment">#对于上面filters的详细配置</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注册Mapper方式</p><ul><li>在Mapper类上方添加<code>@Mapper</code>注解</li><li>在主类上方添加<code>@MapperScan(&quot;com.lan5th.mapper&quot;)</code>自动扫描包注解</li></ul><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.lan5th.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span> <span class="comment">#配置文件可以不配置，而是使用下面的方式进行配置</span></span><br><span class="line">  <span class="attr">configuration:</span> <span class="comment">#代替配置文件的功能</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="一般方式"><a href="#一般方式" class="headerlink" title="一般方式"></a>一般方式</h3><p>使用方式与之前相似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果是包扫描方式需要@Repository注解</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Mapper.xml需要在配置文件中所确定的路径下进行编写，不能像之前放在Mapper类的同级目录下</strong></p><p>然后在对应的<code>xxxMapper.xml</code>中编写sql</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.lan5th.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.student;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><p>直接在mapper接口的方法中添加sql相关注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from User;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>当然也可以使用混合方法，即两种方法同时使用</strong></p><p>使用方法：</p><ul><li>引入<code>mybatis-spring-boot-starter</code></li><li>配置<code>application.yaml</code>指明mapper-location位置</li><li>编写Mapper接口，标注@Mapper注解(或使用包扫描)</li><li>简单操作使用注解方式（如单表select）</li><li>复杂操作使用mapper.xml进行绑定映射</li></ul><h2 id="MybatisPlus"><a href="#MybatisPlus" class="headerlink" title="MybatisPlus"></a>MybatisPlus</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MybatisPlusProperties已经默认配置好了mapper映射文件的路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] mapperLocations = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;classpath*:/mapper/**/*.xml&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>即任意路径下的mapper包都会被扫描</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210918114811888.png" alt="image-20210918114811888"></p><p>Mapper接口继承BaseMapper，其中已经实现了一些简单的CRUD方法</p><p><code>UserMapper.java</code>继承BaseMapper&lt;&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><code>UserService.java</code>继承IService&lt;&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserServiceImpl.java</code>继承ServiceImpl&lt;&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分页功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUser&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserList</span><span class="params">(<span class="meta">@RequestParam(value = &quot;pn&quot;, defaultValue = &quot;1&quot;)</span> Integer pageNo,</span></span></span><br><span class="line"><span class="function"><span class="params">                         Model model)</span></span>&#123;</span><br><span class="line">    Page&lt;User&gt; userPage = <span class="keyword">new</span> Page&lt;&gt;(pageNo, <span class="number">10</span>);</span><br><span class="line">    Page&lt;User&gt; page = userService.page(userPage);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;page&quot;</span>, page);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/tablePage&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">47.113</span><span class="number">.225</span><span class="number">.244</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxxxx</span> <span class="comment">#这个是redis-server的密码</span></span><br></pre></td></tr></table></figure></li><li><p>redis需要的连接工厂已经自动配置完成：LettuceConnectionConfiguraion和JedisConnectionConfiguration</p></li><li><p>Redis模板</p><ul><li>RedisTemplate：可以实现Redis基本操作</li><li>StringRedisTemplate：由于String类型是常用类型，因此springboot将其提取为一个单独的组件</li></ul></li><li><p>SpringBoot2.0以上默认使用lettuce作为默认客户端，如果要使用jedis，需要自行导入jedis的依赖包并在配置文件中手动指定客户端类型<code>spring.redis.client-type</code></p></li></ul><p>操作实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">redisTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取连接对象</span></span><br><span class="line">    RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">    connection.flushDb();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先用opsForXXX()获取专门处理某类业务的工具</span></span><br><span class="line">    <span class="comment">//如valueOperations专门操作字符串</span></span><br><span class="line">    ValueOperations valueOperations = redisTemplate.opsForValue();</span><br><span class="line">    <span class="comment">//再调用valueOperations的方法来执行具体操作</span></span><br><span class="line">    valueOperations.set(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    System.out.println(valueOperations.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>阿里云redis连接失败的原因</strong> </p><ul><li>阿里云安全组策略是否开启对应端口？</li><li>redis-server配置文件中是否绑定0.0.0.0？</li><li>server密码问题</li><li>服务器防火墙是否开放对应端口，如CentOS7系统：<ul><li>开放防火墙对应端口<code>firewall-cmd --zone=public --add-port=6379/tcp --permanent</code></li><li>查看端口开放情况<code>netstat -ntlp</code></li></ul></li></ul><p>连接失败与protected-mode联系不大，请勿轻易关闭</p><h1 id="单元测试Junit5"><a href="#单元测试Junit5" class="headerlink" title="单元测试Junit5"></a>单元测试Junit5</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--兼容Junit4--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写测试方法：<code>@Test</code>注解（使用Junit5的注解）</li><li>Junit具有Spring的功能如<code>@AutoWired</code>，<code>@Transactional</code>测试方法，完成后自动回滚</li></ul><h2 id="常用测试注解"><a href="#常用测试注解" class="headerlink" title="常用测试注解"></a>常用测试注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="comment">//单元测试注解</span></span><br><span class="line"><span class="meta">@ParameterizedTest</span> <span class="comment">//参数化测试</span></span><br><span class="line"><span class="meta">@RepeatedTest</span> <span class="comment">//方法可重复执行</span></span><br><span class="line"><span class="meta">@DisplayName</span> <span class="comment">//为测试类或方法设置展示名称</span></span><br><span class="line"><span class="meta">@BeforeEach</span> <span class="comment">//每个单元测试之前执行</span></span><br><span class="line"><span class="meta">@AfterEach</span> <span class="comment">//每个单元测试之后执行</span></span><br><span class="line"><span class="meta">@BeforeAll</span> <span class="comment">//所有单元测试之前执行（必须static）</span></span><br><span class="line"><span class="meta">@AfterAll</span> <span class="comment">//所有单元测试之后执行（必须static）</span></span><br><span class="line"><span class="meta">@Tag</span> <span class="comment">//表示单元测试类型</span></span><br><span class="line"><span class="meta">@Disabled</span> <span class="comment">//表示测试方法不执行</span></span><br><span class="line"><span class="meta">@Timeout</span> <span class="comment">//表示测试方法超过规定时间就会返回异常</span></span><br><span class="line"><span class="meta">@ExtendWith</span> <span class="comment">//为测试类或方法提供扩展类引用，如使用SpringBoot自动注入功能 @ExtendWith(SpringExtension.class)</span></span><br></pre></td></tr></table></figure><h2 id="断言机制"><a href="#断言机制" class="headerlink" title="断言机制"></a>断言机制</h2><p>检查业务逻辑返回的数据是否合理，所有测试运行结束后会有一个详细的运行报告</p><p><strong>简单断言</strong></p><p>使用Assertions包下的相关方法，也可以直接导入Assertions的静态方法，在编写测试类时直接调用</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210918170825707.png" alt="image-20210918170825707"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = cal(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    Assertions.assertEquals(<span class="number">3</span>,res,<span class="string">&quot;业务逻辑断言失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i+j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个断言失败，这个方法中后续的所有代码都不会执行</p><p><strong>组合断言</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里的静态方法都已经import调用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Assertions.assertAll(<span class="string">&quot;test&quot;</span>,</span><br><span class="line">            ()-&gt; assertTrue(<span class="keyword">true</span>&amp;&amp;<span class="keyword">true</span>),</span><br><span class="line">            ()-&gt; assertEquals(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>异常断言</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//抛出异常表示断言成功，无异常表示断言失败，输出响应提示信息</span></span><br><span class="line">    assertThrows(ArithmeticException.class,</span><br><span class="line">            ()-&gt;&#123;<span class="keyword">int</span> i = <span class="number">10</span>/<span class="number">0</span>;&#125;,</span><br><span class="line">            <span class="string">&quot;业务逻辑居然正常运行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>快速失败</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//实际上if条件为真不论其他代码怎样都会直接失败</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == <span class="number">2</span>)&#123;</span><br><span class="line">        fail(<span class="string">&quot;测试失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//前置条件失效，会skip错误，而不是和断言错误汇总在一起</span></span><br><span class="line">    Assumptions.assumeTrue(<span class="keyword">false</span>, <span class="string">&quot;结果不是true&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;111111&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套测试"><a href="#嵌套测试" class="headerlink" title="嵌套测试"></a>嵌套测试</h2><p>嵌套测试中，外层Test不能驱动内层Test的<code>@BeforeEach</code>之类的方法，内层的Test能够驱动外层Test的<code>@BeforeEach</code>方法</p><p>嵌套测试即多个测试内部类层层嵌套</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterTest</span></span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">outertest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = cal(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        assertEquals(<span class="number">3</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MiddleTest</span></span>&#123;</span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">middleTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">            assertEquals(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Nested</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">innerTest</span></span>&#123;</span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">innerTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">                assertEquals(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h2><p>静态数据参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(ints = &#123;1,2,3,4,5&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test6</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法返回值参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@MethodSource(&quot;method&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test6</span><span class="params">(String i)</span></span>&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法必须为静态，且返回流数据</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Stream&lt;String&gt; <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;lan5th&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h1><h2 id="开启Actuator"><a href="#开启Actuator" class="headerlink" title="开启Actuator"></a>开启Actuator</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>actuator的所有监控功能称为EndPoints，开启所有功能即暴露所有端点信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span> <span class="comment">#配置所有端点</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">true</span> <span class="comment">#暴露所有端点信息</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span> <span class="comment">#以web方式暴露</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="comment">#详细配置单个端点</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p><strong>最常用的EndPoint</strong></p><ul><li>health</li><li>Metric</li><li>loggers</li></ul><h2 id="SpringBootAdmin"><a href="#SpringBootAdmin" class="headerlink" title="SpringBootAdmin"></a>SpringBootAdmin</h2><p>是一个开源的后台监管应用程序，如果添加了SpringSecurity，还需要作一些其他配置</p><p><strong>新建一个springboot项目作为adminServer服务端</strong>，只需要引入这两个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主程序类添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminserverApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AdminserverApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>防止端口冲突更改端口号<code>server.port=8888</code></p><p><strong>为我们需要监控的项目添加依赖作为adminServer客户端</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8888</span> <span class="comment">#指定adminServer的ip和端口</span></span><br><span class="line">        <span class="attr">instance:</span></span><br><span class="line">          <span class="attr">prefer-ip:</span> <span class="literal">true</span> <span class="comment">#使用ip金星识别，否则会显示计算机名</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mainServer</span> <span class="comment">#应用程序名称</span></span><br></pre></td></tr></table></figure><h1 id="深层原理剖析"><a href="#深层原理剖析" class="headerlink" title="深层原理剖析"></a>深层原理剖析</h1><h2 id="自定义Starter"><a href="#自定义Starter" class="headerlink" title="自定义Starter"></a>自定义Starter</h2><p>新建项目包含一个maven模块和SpringBoot模块</p><p><strong>mystarter-spring-boot-starter</strong></p><p>starter负责导入Autoconfiguration模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mystarter-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lan5th<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mystarter-spring-boot-starter-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>mystarter-spring-boot-starter-autoconfigure</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lan5th<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mystarter-spring-boot-starter-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>mystarter-spring-boot-starter-autoconfigure<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先我们定义一个逻辑应用HelloService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String userName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix()+userName+helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloService需要HelloServiceAutoConfiguration来给容器中进行注入，同时HelloServiceAutoConfiguration会绑定HelloProperties来读取配置文件的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(HelloService.class)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HelloService helloService = <span class="keyword">new</span> HelloService();</span><br><span class="line">        <span class="keyword">return</span> helloService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;lan5th.hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210918230038309.png" alt="image-20210918230038309"></p><p>我们还需要在这个路径下新建<code>spring.factories</code>来告诉springboot应该导入哪些自动配置类</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.lan5th.mystarterspringbootstarterautoconfigure.auto.HelloServiceAutoConfiguration</span></span><br></pre></td></tr></table></figure><blockquote><p>在starter和autoconfigure编写完成后使用maven操作clean和install，此时我们自己编写的包就被安装在了本地的maven库，可以供其他程序进行调用</p></blockquote><p><strong>实际应用程序</strong></p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lan5th<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mystarter-spring-boot-starter-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过配置文件来注入属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lan5th:</span></span><br><span class="line">  <span class="attr">hello:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">&#x27;你好&#x27;</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">&#x27;再见&#x27;</span></span><br></pre></td></tr></table></figure><p>测试Controller进行调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String hello = helloService.sayHello(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> hello;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际效果</p><p><img src="https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210918230441414.png" alt="image-20210918230441414"></p><p>到此我们已经能够编写我们自己的starter来适应各种情况了！</p><h2 id="Springboot启动原理"><a href="#Springboot启动原理" class="headerlink" title="Springboot启动原理"></a>Springboot启动原理</h2><blockquote><p><code>getSpringFactoriesInstances()</code>一般都指从各个依赖的<code>spring.factories</code>文件中取值</p></blockquote><h3 id="创建SpringApplication"><a href="#创建SpringApplication" class="headerlink" title="创建SpringApplication"></a>创建SpringApplication</h3><ul><li><p>保存一些信息</p></li><li><p>使用ClassUtils判断当前应用类型</p></li><li><p>寻找<strong>Bootstrappers</strong>：初始化引导器</p><p>获取<code>List&lt;Bootstrapper&gt;</code>：从<code>spring.factories</code>中寻找</p></li><li><p>寻找<strong>ApplicationContextInitializer</strong>：初始化器</p><p>获取<code>List&lt;ApplicationContextInitializer&lt;?&gt;&gt;</code>从<code>spring.factories</code>中寻找</p></li><li><p>寻找<strong>ApplicationListener</strong>：应用监听器</p><p>获取<code>List&lt;ApplicationListener&gt;</code>从<code>spring.factories</code>中寻找</p></li></ul><h3 id="运行SpringApplication"><a href="#运行SpringApplication" class="headerlink" title="运行SpringApplication"></a>运行SpringApplication</h3><ul><li><p>StopWatch</p></li><li><p>记录应用启动时间</p></li><li><p>创建引导上下文<code>createBootstrapContext()</code></p><ul><li>获取之前所有的<strong>Bootstrappers</strong>遍历执行<code>inititialize()</code>来完成对引导启动器的上下文环境配置</li><li>让当前应用进入headless模式<code>java.awt.headless</code></li></ul></li><li><p>获取所有的<strong>SpringApplicationRunListener</strong>：运行监听器</p><ul><li><p>获取<code>List&lt;SpringApplicationRunListener&gt;</code>从<code>spring.factories</code>中寻找</p></li><li><p>遍历所有的SpringApplicationRunListener调用starting方法</p><p>相当于通知所有关注系统启动过程的Listener进行监听</p></li></ul></li><li><p>保存命令行参数：ApplicationArgument</p></li><li><p>准备环境：<code>prepareEnvironment()</code></p><ul><li>返回或创建基础环境信息：<strong>StandardServletEnvironment</strong></li><li>配置环境信息：读取所有的配置源属性的配置属性值（包括命令行和外部配置文件）</li><li>绑定环境信息</li><li>监听器调用<code>environmentPrepared()</code>：通知所有Listener当前环境准备完成</li></ul></li><li><p>创建IOC容器<code>createApplicationContext()</code></p><ul><li>根据当前项目类型创建容器(当前为servlet)，因此会创建AnnotationConfigServletWebServerApplicationContext</li></ul></li><li><p><strong>准备ApplicationContext IOC容器的基本信息 <code>prepareContext()</code></strong></p><ul><li><p>保存环境信息</p></li><li><p>IOC容器的后置处理流程</p></li><li><p>应用初始化器applyInitializers()</p><ul><li><p>遍历所有的<strong>ApplicationContextInitializer</strong>，调用initialize方法对IOC容器进行初始化扩展功能</p></li><li><p>调用所有的监听器的<code>contextPrepared(),EventPublishRunListener()</code>，通知所有的Listener上下文准备完成</p></li></ul></li><li><p>调用所有的监听器的<code>contextLoaded()</code>通知所有Listener上下文已经加载完成</p></li></ul></li><li><p>刷新IOC容器<code>refreshContext()</code></p><ul><li>创建容器中的所有组件Bean（Spring注解）</li></ul></li><li><p>调用所有的监听器的<code>started(context)</code>方法，通知所有Listener项目已经启动</p></li><li><p>调用所有的Runners：callRunners()</p><ul><li>获取容器中的<strong>ApplicationRunner</strong></li><li>获取容器中的<strong>CommandLineRunner</strong></li><li>合并所有Runner并按照<code>@Order</code>进行排序</li><li>遍历所有的Runner，调用<code>run()</code>方法</li></ul></li><li><p>调用所有的监听器的<code>running()</code>方法，通知Listener应用开始运行</p></li><li><p>如果以上出现任何异常，调用所有的监听器的<code>failed()</code>方法，通知Listener出现异常</p></li></ul><h2 id="自定义Listener"><a href="#自定义Listener" class="headerlink" title="自定义Listener"></a>自定义Listener</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext configurableApplicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyApplicationContextInitializer is running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent applicationEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyApplicationListener is running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SpringApplication application;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySpringApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.application = application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">(ConfigurableBootstrapContext bootstrapContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener is starting......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener is environmentPrepared......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener is contextPrepared......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener is contextLoaded......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener is started......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener is running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySpringApplicationRunListener is failed......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行开始时的一次性业务</span></span><br><span class="line"><span class="comment"> * MyApplicationRunner是从容器中获取因此不需要给spring.factories中添加配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyApplicationRunner is running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行开始时的一次性业务</span></span><br><span class="line"><span class="comment"> * MyCommandLineRunner是从容器中获取因此不需要给spring.factories中添加配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyCommandLineRunner is running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>spring.factories</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Run Listeners</span></span><br><span class="line"><span class="meta">org.springframework.boot.SpringApplicationRunListener</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.lan5th.listener.MySpringApplicationRunListener</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Application Context Initializers</span></span><br><span class="line"><span class="meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.lan5th.listener.MyApplicationContextInitializer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Application Listeners</span></span><br><span class="line"><span class="meta">org.springframework.context.ApplicationListener</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.lan5th.listener.MyApplicationListener</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;微服务阶段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Springboot：jar包，内嵌tomcat&lt;/p&gt;</summary>
    
    
    
    <category term="JavaEE" scheme="http://lan5th.github.io/categories/JavaEE/"/>
    
    
  </entry>
  
</feed>
