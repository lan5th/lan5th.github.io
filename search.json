[{"title":"Linux和服务器","url":"/2021/09/19/Linux/Linux/","content":"<h1 id=\"Linux基本概念\"><a href=\"#Linux基本概念\" class=\"headerlink\" title=\"Linux基本概念\"></a>Linux基本概念</h1><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210919145531127.png\" alt=\"image-20210919145531127\"></p>\n<p>常见的服务器搭配组合：</p>\n<ul>\n<li>LAMP: linux+apache+mysql+php</li>\n<li>LNMP: linux+nginx+mysql+php</li>\n</ul>\n<p><strong>控制程序</strong></p>\n<ul>\n<li>终端命令：Xshell</li>\n<li>文件传输：FileZilla</li>\n</ul>\n<h1 id=\"CentOS基础\"><a href=\"#CentOS基础\" class=\"headerlink\" title=\"CentOS基础\"></a>CentOS基础</h1><h2 id=\"通用命令\"><a href=\"#通用命令\" class=\"headerlink\" title=\"通用命令\"></a>通用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sync <span class=\"comment\">#将数据从内存存储到硬盘中，一般用于shutdown之前</span></span><br><span class=\"line\">shutdown <span class=\"comment\">#关机</span></span><br><span class=\"line\">reboot <span class=\"comment\">#重启</span></span><br><span class=\"line\">halt <span class=\"comment\">#关闭系统，相当于shutdown -h now和poweroff</span></span><br><span class=\"line\">ifconfig <span class=\"comment\">#对应windows下的ipconfig，查看ip地址</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><ul>\n<li><p><code>find -name 文件名</code>查找文件位置</p>\n</li>\n<li><p><code>pwd</code>显示当前路径</p>\n</li>\n<li><p><code>ls</code>显示目录内容(类似dir)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-a\t\t\t\t\t\t显示所有内容(包括隐藏文件)</span><br><span class=\"line\">-l\t\t\t\t\t\t列表显示</span><br><span class=\"line\">-h\t\t\t\t\t\t配合-l人性化显示(显示单位？)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>touch</code>创建文件(更新修改日期)</p>\n</li>\n<li><p><code>mkdir</code>创建文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-p\t\t\t\t\t\t创建多级目录</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>rm</code>删除文件/目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-f\t\t\t\t\t\t强制删除(忽略不存在的文件)</span><br><span class=\"line\">-r\t\t\t\t\t\t多级删除内容(删除文件夹必需)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>tree</code>树状显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-d\t\t\t\t\t\t只显示目录</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>cp 源文件 目标文件</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-f\t\t\t\t\t\t强制复制(直接覆盖)</span><br><span class=\"line\">-i\t\t\t\t\t\t覆盖文件提示</span><br><span class=\"line\">-r\t\t\t\t\t\t多级复制(复制文件夹必须)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>mv  源文件 目标文件</code><strong>可以用这个办法给文件重命名</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-i\t\t\t\t\t\t覆盖文件提示</span><br><span class=\"line\">-u\t\t\t\t\t\t只覆盖已经更新过的文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong><code>cat</code>查看文件内容/创建文件/文件合并/追加文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-b\t\t\t\t\t\t非空行输出行号</span><br><span class=\"line\">-n\t\t\t\t\t\t所有行输出行号</span><br></pre></td></tr></table></figure>\n\n<p>同类型命令</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210919170049297.png\" alt=\"image-20210919170049297\"></p>\n<ul>\n<li><code>more</code>命令查看过程中，空格查看下一页，enter查看下一行，:f查看行号，<code>less</code>命令pageUp和pageDown键就可以翻页</li>\n<li>这两个命令都使用<code>Q</code>退出，使用<code>/</code>向下查找字符串。使用<code>?</code>向上查找字符串，<code>n</code>下一个，<code>N</code>上一个</li>\n</ul>\n</li>\n<li><p><code>grep</code>查找文件内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-n\t\t\t\t\t\t显示匹配及行号</span><br><span class=\"line\">-v\t\t\t\t\t\t显示不包含匹配的所有行</span><br><span class=\"line\">-i\t\t\t\t\t\t忽略大小写</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>echo</code>重定向及管道<code>|</code></p>\n<p><code>echo</code>能将导向的内容显示出来，管道<code>|</code>能将前一个指令的结果转为后一个指令的参数，可以递归使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo 文本 &gt;&gt; 文件名\t\t\t将指定字符串输入到文件中</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ln 被链接的文件 新链接文件</code>创建链接，默认硬链接，可以通过创建硬链接的方式防止误删一些文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-s\t\t\t\t\t\t创建软连接（符号链接）</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p><strong>根目录</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210919154205047.png\" alt=\"image-20210919154205047\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210919154220498.png\" alt=\"image-20210919154220498\"></p>\n<p>服务器独有路径<code>/www</code>：存放服务器网站相关的资源环境以及网站的项目</p>\n<p><strong>Linux文件中第一个字符代表这个文件是怎样的基础类型</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210919162113703.png\" alt=\"image-20210919162113703\"></p>\n<h2 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210919162250803.png\" alt=\"image-20210919162250803\"></p>\n<p><strong>权限管理</strong></p>\n<ul>\n<li><pre><code class=\"bash\">chgrp -R 组名 文件/目录名         修改文件/目录所属组\nchown -R 所属用户 文件名         修改所乎用户\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">+ **&#96;chmod 权限编号 文件名&#96;赋予权限**</span><br><span class=\"line\"></span><br><span class=\"line\">  chmod 777会给文件赋予最高权限，即所有用户可读可写可执行</span><br><span class=\"line\"></span><br><span class=\"line\">  权限编号的相关规则如下</span><br><span class=\"line\"></span><br><span class=\"line\">  ![image-20210919165924067](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;lan5th&#x2F;pics&#x2F;blog_images&#x2F;image-20210919165924067.png)</span><br><span class=\"line\"></span><br><span class=\"line\">## 文件编辑</span><br><span class=\"line\"></span><br><span class=\"line\">**Vim编辑器**</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20210919200205886](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;lan5th&#x2F;pics&#x2F;blog_images&#x2F;image-20210919200205886.png)</span><br><span class=\"line\"></span><br><span class=\"line\">三种模式</span><br><span class=\"line\"></span><br><span class=\"line\">+ 命令模式：刚进入vim</span><br><span class=\"line\">+ 输入模式：使用&#96;i&#96;命令进入输入模式，编辑模式按Esc进入命令模式</span><br><span class=\"line\">+ 底线命令模式：命令前加&#96;:&#96;进入底线命令模式</span><br><span class=\"line\"></span><br><span class=\"line\">一些常用指令</span><br><span class=\"line\"></span><br><span class=\"line\">+ &#96;i&#96;进入编辑模式</span><br><span class=\"line\">+ &#96;[Esc]&#96;进入命令模式</span><br><span class=\"line\">+ &#96;u&#96; 重复前一个动作</span><br><span class=\"line\">+ &#96;[Ctrl]+r&#96;重复上一个动作</span><br><span class=\"line\">+ &#96;:wq&#96;保存退出</span><br><span class=\"line\">+ &#96;:ZZ&#96;不保存直接退出</span><br><span class=\"line\">+ &#96;:set nu&#96;显示行号</span><br><span class=\"line\">+ &#96;:set nonu&#96;不显示行号</span><br><span class=\"line\"></span><br><span class=\"line\">## 用户管理</span><br><span class=\"line\"></span><br><span class=\"line\">用户相关信息在&#96;&#x2F;etc&#x2F;passwd&#96;文件中</span><br><span class=\"line\"></span><br><span class=\"line\">+ &#96;useradd -m 用户名&#96;一般新建用户&#96;-m&#96;选项来创建使用者目录</span><br><span class=\"line\"></span><br><span class=\"line\">  ![image-20210919202201446](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;lan5th&#x2F;pics&#x2F;blog_images&#x2F;image-20210919202201446.png)</span><br><span class=\"line\"></span><br><span class=\"line\">+ &#96;userdel -r 用户名&#96;一般删除用户&#96;-r&#96;选项来删除该用户的目录页</span><br><span class=\"line\"></span><br><span class=\"line\">+ &#96;usermod 修改内容 用户名&#96;修改的选项和&#96;useradd&#96;指令的选项相同</span><br><span class=\"line\"></span><br><span class=\"line\">  如&#96;usermod -d newdirectory user1&#96;修改用户主目录</span><br><span class=\"line\"></span><br><span class=\"line\">+ &#96;su 用户名&#96;切换用户，普通用户切换超级用户可以使用&#96;sudo su&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">+ 超级用户专有权限：&#96;passwd 用户名&#96;，给用户设置密码</span><br><span class=\"line\"></span><br><span class=\"line\">  &#96;&#96;&#96;bash</span><br><span class=\"line\">  -l #锁定用户</span><br><span class=\"line\">  -u #启用已被停止的账户</span><br><span class=\"line\">  -d #使目标用户删除密码</span><br></pre></td></tr></table></figure>\n\n普通用户：`passwd`修改自己的密码\n</code></pre>\n</li>\n</ul>\n<p>超级用户root的命令行提示符为<code>#</code>，而普通用户的命令行提示符为<code>$</code></p>\n<p><strong>passwd文件的查看</strong></p>\n<p>信息顺序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">用户名:密码(不可见):用户id:用户组id:注释性描述:主目录:登录shell</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210919210055675.png\" alt=\"image-20210919210055675\"></p>\n<p>不可见得密码一般用x或*替代</p>\n<p>真正加密后的密码保存在<code>/etc/shadow</code>文件中，不过由于是安全加密过得，我们依然无法直接查看</p>\n<h2 id=\"用户组管理\"><a href=\"#用户组管理\" class=\"headerlink\" title=\"用户组管理\"></a>用户组管理</h2><p>用户组相关信息在<code>/etc/group</code>文件中</p>\n<ul>\n<li><p><code>groupadd 组名</code>新建用户组</p>\n</li>\n<li><p><code>groupdel 组名</code>删除用户组</p>\n</li>\n<li><p><code>groupmod 组名</code>修改用户组信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-g <span class=\"comment\">#修改组id</span></span><br><span class=\"line\">-n <span class=\"comment\">#修改组名</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"磁盘管理\"><a href=\"#磁盘管理\" class=\"headerlink\" title=\"磁盘管理\"></a>磁盘管理</h2><ul>\n<li><p><strong><code>df</code>列出文件系统整体磁盘使用量</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-h <span class=\"comment\">#人性化显示</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>du</code>显示目录或文件的大小</p>\n</li>\n</ul>\n<p><strong>挂载设备</strong></p>\n<p>如果一些设备不兼容，则使用挂载命令来实现访问</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mount /dev/mydevice /mnt/newmount <span class=\"comment\">#dev目录存放外部设备，mnt存放挂载点</span></span><br></pre></td></tr></table></figure>\n\n<p>同理，<code>umount -f 挂载位置</code>取消挂载点</p>\n<h2 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><ul>\n<li><p><code>ps</code>查看系统中正在执行各个进程的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#默认仅显示与当前用户相关的进程</span></span><br><span class=\"line\">-a <span class=\"comment\">#显示所有进程信息</span></span><br><span class=\"line\">-u <span class=\"comment\">#显示较为详细的信息</span></span><br><span class=\"line\">-x <span class=\"comment\">#显示所有用户的进程</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>常用命令<code>ps -aux|grep 关键词</code>查找与关键词相关的进程</strong></p>\n<p>用管道和grep选择器进行过滤查询</p>\n</li>\n<li><p><code>ps -ef</code>功能与<code>ps -aux</code>相似，只是显示格式略有区别</p>\n</li>\n<li><p><code>pstree</code>以树状图来查看进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-p <span class=\"comment\">#显示父进程id</span></span><br><span class=\"line\">-u <span class=\"comment\">#显示用户组id</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>kill -9 进程id</code>杀死进程（服务器慎用）</p>\n</li>\n</ul>\n<h2 id=\"防火墙和网络\"><a href=\"#防火墙和网络\" class=\"headerlink\" title=\"防火墙和网络\"></a>防火墙和网络</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#开放防火墙对应端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看端口开放情况</span></span><br><span class=\"line\">netstat -ntlp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看ip配置</span></span><br><span class=\"line\">ifconfig</span><br><span class=\"line\"><span class=\"comment\">#查看网卡</span></span><br><span class=\"line\">ip addr</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h1><p>linux系统的环境变量配置一直是一个很让人头疼的问题，这里简单介绍下不同位置环境变量之间的区别</p>\n<h2 id=\"环境变量文件位置\"><a href=\"#环境变量文件位置\" class=\"headerlink\" title=\"环境变量文件位置\"></a>环境变量文件位置</h2><ul>\n<li><p>系统级别</p>\n<ul>\n<li><p>系统环境级别：在加载环境时进行加载</p>\n<p><code>/etc/environment</code></p>\n</li>\n<li><p>系统用户级别：在每个用户登录时进行加载</p>\n<p><code>/etc/profile</code></p>\n</li>\n</ul>\n</li>\n<li><p>用户级别：</p>\n<ul>\n<li><p>普通用户</p>\n<p><code>~/.bash_profile</code></p>\n</li>\n<li><p>root用户</p>\n<p><code>/root/.bashrc</code></p>\n<p>如果出现root用户无法读取到环境变量时，可以在这个文件的末尾添加</p>\n<p><code>source /etc/profile</code>使profile文件自动生效</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"环境变量文件格式\"><a href=\"#环境变量文件格式\" class=\"headerlink\" title=\"环境变量文件格式\"></a>环境变量文件格式</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/environment/jdk1.8.0_241</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_HOME=/environment/hadoop-3.1.4</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HADOOP_HOME</span>/bin:<span class=\"variable\">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"服务器环境搭建\"><a href=\"#服务器环境搭建\" class=\"headerlink\" title=\"服务器环境搭建\"></a>服务器环境搭建</h1><p>作者使用了CentOS7.6版本作为服务器版本</p>\n<h2 id=\"宝塔面板\"><a href=\"#宝塔面板\" class=\"headerlink\" title=\"宝塔面板\"></a>宝塔面板</h2><p>傻瓜式环境搭建</p>\n<p>官方地址<a href=\"https://www.bt.cn/download/linux.html\">宝塔linux面板，一键安装LAMP/LNMP/SSL/Tomcat (bt.cn)</a></p>\n<p>CentOS下安装指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y wget &amp;&amp; wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>\n\n<p><strong>端口开放需求</strong></p>\n<p>如需完整使用宝塔的所有功能 你还需要放行如下端口<br>20 、21、 39000-40000端口（linux 系统 ），3000-4000（windows系统）<br>22 (SSH)<br>80、443（网站及SSL）<br>3306 （数据库远程连接）<br>888 （phpmyadmin）</p>\n<p>在软件商店即可一键部署各种环境</p>\n<h2 id=\"使用终端命令创建\"><a href=\"#使用终端命令创建\" class=\"headerlink\" title=\"使用终端命令创建\"></a>使用终端命令创建</h2><h3 id=\"rpm\"><a href=\"#rpm\" class=\"headerlink\" title=\"rpm\"></a>rpm</h3><p>安装jdk，先检测是否已经安装了jdk</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -qa|grep jdk <span class=\"comment\">#检测jdk信息</span></span><br><span class=\"line\">rpm -e --nodeps jdk_ <span class=\"comment\">#强制卸载jdk</span></span><br></pre></td></tr></table></figure>\n\n<p>安装jdk</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -ivh jdk-8u65-linux-x64.rpm <span class=\"comment\">#部署安装</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>rpm方式不需要手动配置环境变量</strong></p>\n<h3 id=\"解压缩\"><a href=\"#解压缩\" class=\"headerlink\" title=\"解压缩\"></a>解压缩</h3><p>安装Tomcat</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf apache-tomcat-9.0.53.tar.gz <span class=\"comment\">#解压缩</span></span><br></pre></td></tr></table></figure>\n\n<p>运行</p>\n<ul>\n<li><p>进入/apache-tomcat-9.0.53/bin目录</p>\n</li>\n<li><p>相关命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./startup.sh <span class=\"comment\">#启动</span></span><br><span class=\"line\">./shutdown.sh <span class=\"comment\">#停止</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>Tomcat用来把我们发布的一些war包部署上去，只要我们把war包放在/apache-tomcat-9.0.5/webapps目录下，运行Tomcat即会自动部署</p>\n<blockquote>\n<p>域名解析之后</p>\n</blockquote>\n<p>域名解析、备案之后如果项目配置的端口与http和https的端口不同，则需要通过Apache或Nginx做一下反向代理，我们修改相应的配置文件即可发布网站</p>\n<h3 id=\"yum\"><a href=\"#yum\" class=\"headerlink\" title=\"yum\"></a>yum</h3><p>安装docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /etc/redhat-release <span class=\"comment\">#检测CentOS系统版本</span></span><br></pre></td></tr></table></figure>\n\n<p>安装准备环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -y表示所有的询问都默认选yes</span></span><br><span class=\"line\">yum -y install gcc</span><br><span class=\"line\">yum -y install gcc-c++</span><br></pre></td></tr></table></figure>\n\n<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#卸载之前环境（如果存在）</span></span><br><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                docker-client \\</span><br><span class=\"line\">                docker-client-latest \\</span><br><span class=\"line\">                docker-common \\</span><br><span class=\"line\">                docker-latest \\</span><br><span class=\"line\">                docker-latest-logrotate \\</span><br><span class=\"line\">                docker-logrotate \\</span><br><span class=\"line\">                docker-engine</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#安装依赖包</span></span><br><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"><span class=\"comment\">#配置阿里云镜像</span></span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"comment\">#更新软件包索引</span></span><br><span class=\"line\">sudo yum makecache fast</span><br><span class=\"line\"><span class=\"comment\">#安装Docker CE</span></span><br><span class=\"line\">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<p>启动docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#启动</span></span><br><span class=\"line\">systemctl start  docker.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#测试</span></span><br><span class=\"line\">docker version</span><br><span class=\"line\">docker run hello-world</span><br><span class=\"line\">docker images</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#结束</span></span><br><span class=\"line\">systemctl stop docker.service</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"其他常用指令\"><a href=\"#其他常用指令\" class=\"headerlink\" title=\"其他常用指令\"></a>其他常用指令</h1><h2 id=\"解压缩-1\"><a href=\"#解压缩-1\" class=\"headerlink\" title=\"解压缩\"></a>解压缩</h2><p>推荐一篇博客</p>\n<p><a href=\"https://www.cnblogs.com/ysocean/p/7746786.html#_label0_0\">Linux常用命令之压缩和解压缩命令</a></p>\n<h2 id=\"移动覆盖\"><a href=\"#移动覆盖\" class=\"headerlink\" title=\"移动覆盖\"></a>移动覆盖</h2><ol>\n<li><p>先查看自己系统上的cp指令有没有cp指令的别名<code>alias</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220125142944.png\" alt=\"image-20220125142937291\"></p>\n<p><code>-i</code>表示的是每次覆盖操作都需要手动确认，当我们进行大量文件的操作时一个个手动确认会十分麻烦</p>\n</li>\n<li><p>如果发现如上图所示，需要手动暂时取消cp指令的别名<code>unalias cp</code>，这样能够暂时取消别名</p>\n</li>\n<li><p>进行cp覆盖操作<code>cp -rf sourcedir distdir</code></p>\n</li>\n<li><p>尽管取消别名是暂时的，为了安全最好还是先将别名修改回去<code>alias cp=&#39;cp -i&#39;</code></p>\n</li>\n</ol>\n<h2 id=\"内存查看\"><a href=\"#内存查看\" class=\"headerlink\" title=\"内存查看\"></a>内存查看</h2><ul>\n<li>内存查看<code>free</code></li>\n<li>外存查看<code>df -h</code></li>\n</ul>\n","categories":["微服务"]},{"title":"Unbuntu终端操作","url":"/2020/10/25/Linux/Ubuntu%E7%BB%88%E7%AB%AF/","content":"<p>通用指令格式<code>comman [-option] [parameter]</code></p>\n<a id=\"more\"></a>\n\n<h2 id=\"通用指令\"><a href=\"#通用指令\" class=\"headerlink\" title=\"通用指令\"></a>通用指令</h2><ul>\n<li><p><code>ls</code>显示目录内容(类似dir)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-a\t\t\t\t\t\t显示所有内容(包括隐藏文件)</span><br><span class=\"line\">-l\t\t\t\t\t\t列表显示</span><br><span class=\"line\">-h\t\t\t\t\t\t配合-l人性化显示(显示单位？)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>touch</code>创建文件(更新修改日期)</p>\n</li>\n<li><p><code>mkdir</code>创建文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-p\t\t\t\t\t\t创建多级目录</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>rm</code>删除文件/目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-f\t\t\t\t\t\t强制删除(忽略不存在的文件)</span><br><span class=\"line\">-r\t\t\t\t\t\t多级删除内容(删除文件夹必需)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>tree</code>树状显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-d\t\t\t\t\t\t只显示目录</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>cp 源文件 目标文件</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-f\t\t\t\t\t\t强制复制(直接覆盖)</span><br><span class=\"line\">-i\t\t\t\t\t\t覆盖文件提示</span><br><span class=\"line\">-r\t\t\t\t\t\t多级复制(复制文件夹必须)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>mv  源文件 目标文件</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-i\t\t\t\t\t\t覆盖文件提示</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>cat</code>查看文件内容/创建文件/文件合并/追加文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-b\t\t\t\t\t\t非空行输出行号</span><br><span class=\"line\">-n\t\t\t\t\t\t所有行输出行号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>more</code>分屏显示文件内容</p>\n</li>\n<li><p><code>grep</code>查找文件内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-n\t\t\t\t\t\t显示匹配及行号</span><br><span class=\"line\">-v\t\t\t\t\t\t显示不包含匹配的所有行</span><br><span class=\"line\">-i\t\t\t\t\t\t忽略大小写</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>echo</code>重定向及管道<code>|</code></p>\n<p><code>echo</code>能将导向的内容显示出来，管道<code>|</code>能将前一个指令的结果转为后一个指令的参数，可以递归使用</p>\n</li>\n</ul>\n<h2 id=\"远程管理指令\"><a href=\"#远程管理指令\" class=\"headerlink\" title=\"远程管理指令\"></a>远程管理指令</h2><ul>\n<li><p><code>shutdown</code>关机</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-r\t\t\t\t\t\t重启</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ifconfig</code>查看网卡信息ip</p>\n</li>\n<li><p><code>ping ip地址</code>测试与目标地址网络连接</p>\n</li>\n<li><p>ssh基础</p>\n<ul>\n<li><p><code>ssh [-p 端口号(默认22)] user@ip地址</code>远程连接目标服务器</p>\n</li>\n<li><p><code>scp [-P 端口号(默认22)]</code>远程拷贝(两种格式)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">user@ip地址:远端目录 本机目录\t\t\t\t将服务器文件拷贝到本地</span><br><span class=\"line\">本机目录 user@ip地址:远端目录\t\t\t\t将本地文件拷贝到服务器</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>免密登录设置方法：1.执行<code>ssh-keygen</code>生成ssh密钥；2.将pub文件复制到服务器:user/.ssh并重命名为authorized_keys；</p>\n</li>\n<li><p>配置远程计算机别名：本机user/.ssh文件夹中创建config文件并添加以下内容(Host之后的为别名)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Host mylinux</span><br><span class=\"line\">\tHostName 192.168.123.133</span><br><span class=\"line\">\tUser lan5th</span><br><span class=\"line\">\tPort 22</span><br></pre></td></tr></table></figure>\n\n<p>之后登录远端服务器只需要<code>ssh mylinux</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"高级指令\"><a href=\"#高级指令\" class=\"headerlink\" title=\"高级指令\"></a>高级指令</h2><h5 id=\"用户权限\"><a href=\"#用户权限\" class=\"headerlink\" title=\"用户权限\"></a>用户权限</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">r(read)\t\t\t\t\t\t可读</span><br><span class=\"line\">w(write)\t\t\t\t\t可写</span><br><span class=\"line\">x(excute)\t\t\t\t\t可执行</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>chmod</code>修改用户/组对文件权限，格式<code>chmod +/-rwx 文件/目录名</code></p>\n</li>\n<li><p><code>sudo</code>使用另一用户身份(默认root)</p>\n</li>\n<li><p>组管理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">groupadd 组名\t\t\t\t\t添加组</span><br><span class=\"line\">groupdel 组名\t\t\t\t\t删除组</span><br><span class=\"line\">cat &#x2F;etc&#x2F;group\t\t\t\t  确认组信息</span><br><span class=\"line\">chgrp -R 组名 文件&#x2F;目录名\t\t 修改文件&#x2F;目录所属组</span><br><span class=\"line\">chown -R 所属用户 文件名\t\t 修改所乎用户</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用户管理</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>useradd -m -g 组名 用户名</td>\n<td>添加新用户</td>\n<td>-m自动建立用户家目录；-g指定用户所在组，否则创建一个同名组</td>\n</tr>\n<tr>\n<td>passwd 用户名</td>\n<td>设置用户密码</td>\n<td>普通用户直接passwd修改自己账户密码</td>\n</tr>\n<tr>\n<td>userdel -r 用户名</td>\n<td>删除用户</td>\n<td>-r自动删除用户家目录</td>\n</tr>\n<tr>\n<td>cat etc/passwd|grep 用户名</td>\n<td>确认用户信息</td>\n<td>新建用户后，用户信息保存在/etv/passwd文件中</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>查看用户信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">id [username]\t\t\t查看UID和GID</span><br><span class=\"line\">who\t\t\t\t\t\t查看所有用户列表</span><br><span class=\"line\">whoami\t\t\t\t\t查看当前登录用户账户名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">usermod -g 组 用户名\t\t修改用户主组</span><br><span class=\"line\">usermod -G 组 用户名\t\t修改用户附加组(附加权限)</span><br><span class=\"line\">usermod -s &#x2F;bin&#x2F;bash\t\t修改用户登录shell(bash&#x2F;dash)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>which 指令</code>查看指令所在目录</p>\n</li>\n<li><p><code>su [-] username</code>切换用户(不跟任何参数则默认root)</p>\n</li>\n<li><p><code>exit</code>退出shell</p>\n</li>\n<li><p><code>chown username 文件/目录名</code>修改所有者</p>\n<p><code>chmod -R 755 文件/目录名</code>修改权限(常用)</p>\n<p><code>chmod +/-rwx 文件/目录名</code>(简单用法)</p>\n<p><img src=\"https://i.loli.net/2020/10/27/SVbqePGLv7BnOYi.png\" alt=\"img\"></p>\n</li>\n</ul>\n<h2 id=\"系统信息相关\"><a href=\"#系统信息相关\" class=\"headerlink\" title=\"系统信息相关\"></a>系统信息相关</h2><ul>\n<li><pre><code>date                    查询系统时间\ncal [-y]                查询日历(显示一年)\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">+ &#96;&#96;&#96;</span><br><span class=\"line\">  df -h\t\t\t\t\tdisk free查看磁盘剩余空间(-h人性化显示)</span><br><span class=\"line\">  du -h [目录名]\t\t\t   disk usage显示目录下文件大小</span><br></pre></td></tr></table></figure></code></pre>\n</li>\n<li><p>进程相关</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ps aux\t\t\t\t\tprocess status产看进程</span><br><span class=\"line\">top\t\t\t\t\t\t动态显示运行中的进程并排序(q退出)</span><br><span class=\"line\">kill [-9] 进程号\t\t   终止进程[-9]表示强行终止</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">a\t\t\t\t\t显示所有进程，包括其他用户</span><br><span class=\"line\">u\t\t\t\t\t显示进程详细状态</span><br><span class=\"line\">x\t\t\t\t\t显示没有控制终端的进程</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>find [路径] -name &quot;*.py&quot;</code>查找指定路径下扩展名为py的文件</p>\n</li>\n<li><p><code>ln -s 被链接的源文件 链接文件</code>建立软链接，类似快捷方式(绝对路径)</p>\n<p>去掉<code>-s</code>创建硬链接</p>\n</li>\n<li><p>打包压缩</p>\n<p>linux常用格式tar.gz</p>\n<ul>\n<li><p>tar打包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -cvf 文件.tar 被压缩文件\t\t打包文件</span><br><span class=\"line\">tar -xvf 文件.tar\t-C [解压路径]\t 解包文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>gzip压缩</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zcvf 文件.tar 被压缩文件\t\t添加-z进行压缩</span><br><span class=\"line\">tar -zxvf 文件.tar -C [解压路径]\t 上</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>bzip2压缩:将<code>-z</code>换为<code>-j</code></p>\n</li>\n</ul>\n</li>\n<li><p>apt安装软件(软件包管理工具)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install 软件名\t\t安装</span><br><span class=\"line\">sudo apt remove 软件名\t\t\t卸载</span><br><span class=\"line\">sudo apt upgrade\t\t\t 更新已安装的包</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n","categories":["Linux"]},{"title":"JVM","url":"/2021/03/16/JavaSE/JVM/","content":"<p>JVM相关问题</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210316204938405.png\" alt=\"image-20210316204938405\"></p>\n<ol>\n<li><p>JVM位置</p>\n<ul>\n<li><p>JVM处于Java程序之下，os操作系统之上</p>\n</li>\n<li><p>java程序执行过程</p>\n<blockquote>\n<p>注：jdk1.8后，方法区在堆中的元空间中，这里为了直观表现将其单独划分出来</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210316211308576.png\" alt=\"image-20210316211308576\"></p>\n<p>栈和程序计数器中不会有垃圾，JVM调优一般指对堆进行调优</p>\n</li>\n<li><p>类加载器</p>\n<p>作用：加载Class文件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210316212657927.png\" alt=\"image-20210316212657927\"></p>\n<p>虚拟机自带加载器</p>\n<ul>\n<li>启动类（根）加载器</li>\n<li>扩展类加载器B</li>\n<li>应用程序加载器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>双亲委派机制</strong>（安全）：APP-&gt;EXC-&gt;BOOT(最终执行)</p>\n<ul>\n<li>类加载器收到类加载的请求</li>\n<li>将请求向上委托给父类加载器去完成，一直向上委托，直到启动类加载器</li>\n<li>启动加载器检查是否能加载当前类，能加载就结束，使用当前加载器，否则抛出异常，通知子加载器进行加载</li>\n<li>重复步骤3，如果最终APP加载器也未找到，则class not found</li>\n</ul>\n</li>\n<li><p>沙箱安全机制（了解）</p>\n<p>对于远程代码所添加安全性评估</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210317212730693.png\" alt=\"image-20210317212730693\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210317212804935.png\" alt=\"image-20210317212804935\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210317212829577.png\" alt=\"image-20210317212829577\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210317212913937.png\" alt=\"image-20210317212913937\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210317212939096.png\" alt=\"image-20210317212939096\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210317213055170.png\" alt=\"image-20210317213055170\"></p>\n</li>\n<li><p>Native关键字</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210317213554828.png\" alt=\"image-20210317213554828\"></p>\n<p>带native关键字的说明java的作用范围无法达到，调用了底层C语言库，进入本地方法栈，调用本地方法本地接口JNI(Java Native Interface)</p>\n<p>JNI作用：扩展Java使用，融合不同的编程语言为Java所用，最初有C和C++；他在内存中专门开辟一块标记区域：Native Method Stack，等级native方法；最终执行时，加载本地方法库中的方法通过JNI</p>\n<p>用于驱动打印机，管理系统等</p>\n</li>\n<li><p>PC：程序计数器</p>\n<p>每个线程私有的一个指针，指向方法区中的方法字节码，在执行引擎读取下一条指令，内存空间很小</p>\n</li>\n<li><p>方法区</p>\n<p>静态变量(static)、常量(final)、类信息(Class)，运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关</p>\n</li>\n<li><p><strong>java栈</strong></p>\n<p>先进先后，后进先出(main()方法最先执行，最后结束)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210317223932685.png\" alt=\"image-20210317223932685\"></p>\n<p>存储内容：8大基本类型，对象引用，实例方法</p>\n<p>运行原理：栈帧</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210318001816793.png\" alt=\"image-20210318001816793\"></p>\n<p>栈满后抛出错误：StackOverflowError</p>\n</li>\n<li><p>Java种类</p>\n<ul>\n<li>Sun公司Hotspot(主修)</li>\n<li>BEA JRsocket</li>\n<li>IBM J9 VM</li>\n</ul>\n</li>\n<li><p><strong>堆</strong></p>\n<p>一个JVM只有一个堆内存，堆内存的大小是可以调节的</p>\n<p>类加载器读取了类文件后，一般把<code>类、方法、常量、变量</code>，保存我们所有引用类型的真实对象</p>\n<ul>\n<li><p>堆内存</p>\n<ul>\n<li><p>新生区(伊甸园区)</p>\n<p>类诞生和成长的低方，所有对象都是在伊甸园区new出来的</p>\n<ul>\n<li><p>伊甸园区</p>\n</li>\n<li><p>幸存区0区(from区)</p>\n</li>\n<li><p>幸存区1区(to区)</p>\n<p><strong>from区和to区会轮流交换，而to区一般为空</strong>：为了平衡空间，内存占用多的区会将对象移向内存较小的区，即from被占用内存多to空区</p>\n</li>\n</ul>\n</li>\n<li><p>养老区(老年区)</p>\n</li>\n<li><p>永久区</p>\n<p>(jdk8以后，永久区更名为元空间)</p>\n<ul>\n<li>jdk1.6前：永久代，常量在方法区</li>\n<li>jdk1.7：永久代，慢慢退化（区有就代），常量在堆中</li>\n<li>jdk1.8之后：无永久代，常量池在元空间</li>\n</ul>\n<p>方法区(非堆)也在元空间中，而常量池在方法区中</p>\n<p>常驻内存，用来存放jdk自身携带的Class对象，Interface元数据，存储的是Java运行时的一些环境或类信息，该区域不存在垃圾回收，关闭VM虚拟机会释放这个区域的内存</p>\n<p>警告：启动类加载了大量的第三方jar包，Tomcat部署了太多应用或大量动态生成的反射类，不断被加载直到内存满，也会出现OOM</p>\n</li>\n</ul>\n</li>\n<li><p>垃圾回收</p>\n<p>GC垃圾回收主要是在伊甸园区和养老区，假设内存都满了，堆内存不够，抛出错误：OutOfMemoryError</p>\n<ul>\n<li>轻GC</li>\n<li>重GC(Full GC)</li>\n</ul>\n</li>\n<li><p>新生区的子区伊甸园区满后触发一次轻GC，过滤后的对象进入幸存区0区，新生区的三个子区都满后触发一次重GC，过滤后的对象进入养老区</p>\n</li>\n<li><p>经研究，99%的对象都是临时对象</p>\n</li>\n<li><p><strong>在计算内存时元空间逻辑上存在，物理上不存在</strong></p>\n<p>通过添加VM option<code>-Xms1024m -Xmx1024m -XX:+PrintGCDetails</code>来自定义虚拟机参数r</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-Xms 设置初始化内存分配大小，默认1&#x2F;64</span><br><span class=\"line\">-Xmx 设置最大分配内存，默认1&#x2F;4</span><br><span class=\"line\">-XX:+PrintPrintGCDetails 打印GC垃圾回收信息</span><br><span class=\"line\">-XX:+HeapDumpOnOutOfMemoryError 当发生OutOfMemoryError时dump出内存文件，可被jprofiler等调优软件读取</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210320170930669.png\" alt=\"image-20210320170930669\"></p>\n<p>经计算新生区和养老区大小之和为实际堆占用大小，即堆内存未计算元空间大小</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210320171030538.png\" alt=\"image-20210320171030538\"></p>\n</li>\n<li><p>MAT，Jprofiler等调优器作用</p>\n<ul>\n<li>分析Dump内存文件，快速定位内存泄漏</li>\n<li>获得堆中数据</li>\n<li>获得大对象等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>GC</strong>：垃圾回收机制</p>\n<p>两种类型：轻GC/重GC</p>\n<p>GC常用算法：</p>\n<ol>\n<li><p>标记清除法</p>\n<p>第一阶段：标记。从根结点出发遍历对象，对访问过的对象打上标记，表示该对象可达。</p>\n<p>第二阶段：清除。对那些没有标记的对象进行回收，这样使得不能利用的空间能够重新被利用。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210320221642511.png\" alt=\"image-20210320221642511\"></p>\n<p>优点：不需要额外空间</p>\n<p>缺点：两次扫描严重浪费时间，会产生内存碎片</p>\n</li>\n<li><p>标记压缩(标记整理)</p>\n<p>对标记清除法的优化</p>\n<p>可以先标记清除多次再进行标记压缩(标记清除压缩)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210320222153030.png\" alt=\"image-20210320222153030\"></p>\n<p>优点：防止内存碎片产生</p>\n<p>缺点：又增加了一次扫描时间和移动成本</p>\n</li>\n<li><p>复制算法</p>\n<p>每次GC都会将Eden区的对象移至幸存区，而Eden区被GC后就会变空，两个幸存区中，谁空谁是to区</p>\n<p>一个对象经历了15次GC(默认)都没有死时会进入养老区</p>\n<p>用<code>-XX:MaxTenuringThreshold=9</code>设置参数可以设定进入养老区所需GC次数为9</p>\n<p>复制算法一般用于年轻代GC，如图所示</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210320220709842.png\" alt=\"image-20210320220709842\"></p>\n<p>优点：没有内存碎片，对象存活度较低时使用效果好</p>\n<p>缺点：浪费一半的幸存空间</p>\n</li>\n<li><p>引用计数器</p>\n<p>给每个计数器创造专属计数器并赋值为0，每当一个对象被引用便给它的计数器+1，触发GC时淘汰计数器数值小的数个对象</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210320214546430.png\" alt=\"image-20210320214546430\"></p>\n<p>缺点是计数器本身也要占用内存，因此在JVM中不应用此方法</p>\n</li>\n</ol>\n</li>\n<li><p>GC总结</p>\n<ul>\n<li>内存效率：复制效率&gt;标记清除算法&gt;标记压缩算法(时间复杂度)</li>\n<li>内内存整齐度：复制算法=标记压缩算法&gt;标记清除算法</li>\n<li>内存利用率：标记压缩算法=标记清除算法&gt;复制算法</li>\n</ul>\n<p>没有最好的算法，只有最合适的算法</p>\n<p>GC：分代收集算法</p>\n<ul>\n<li>年轻代：存活率低：复制算法</li>\n<li>老年代：区域大，存活率高：标记清除+标记压缩混合实现</li>\n</ul>\n</li>\n<li><p>JMM(Java Memory Model)</p>\n<p>作用：缓存一致性协议，用于定义数据读取的规则；定义了线程工作内存和主内存之间的抽象关系：线程之间的共享变量储存在主内存中，每个线程都有一个私有的本地内存</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210320225105255.png\" alt=\"image-20210320225105255\"></p>\n<p>解决共享对象可见性问题：volilate关键字</p>\n<p>JMM对这八种指令的使用，制定了如下规则：</p>\n<ul>\n<li>不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write</li>\n<li>不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存</li>\n<li>不允许一个线程将没有assign的数据从工作内存同步回主内存</li>\n<li>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是怼变量实施use、store操作之前，必须经过assign和load操作</li>\n<li>一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁</li>\n<li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值</li>\n<li>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量</li>\n<li>对一个变量进行unlock操作之前，必须把此变量同步回主内存</li>\n</ul>\n<p>　　JMM对这八种操作规则和对volatile的一些特殊规则就能确定哪里操作是线程安全，哪些操作是线程不安全的了。但是这些规则实在复杂，很难在实践中直接分析。所以一般我们也不会通过上述规则进行分析。更多的时候，使用java的happen-before规则来进行分析。</p>\n</li>\n</ol>\n","categories":["JavaSE"]},{"title":"Java命令行工具","url":"/2021/10/15/JavaSE/Java%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/","content":"<a id=\"more\"></a>\n\n<p>本文将带大家了解一下经典的java命令行工具</p>\n<h1 id=\"javac-amp-javap\"><a href=\"#javac-amp-javap\" class=\"headerlink\" title=\"javac&amp;javap\"></a>javac&amp;javap</h1><p>首先是最基础的javac和javap，javac</p>\n<ul>\n<li><p><strong>Javac</strong>：编译</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">用法: javac &lt;options&gt; &lt;<span class=\"built_in\">source</span> files&gt;</span><br><span class=\"line\">其中, 可能的选项包括:</span><br><span class=\"line\">      -g                         生成所有调试信息</span><br><span class=\"line\">      -g:none                    不生成任何调试信息</span><br><span class=\"line\">      -g:&#123;lines,vars,<span class=\"built_in\">source</span>&#125;     只生成某些调试信息</span><br><span class=\"line\">      -nowarn                    不生成任何警告</span><br><span class=\"line\">      -verbose                   输出有关编译器正在执行的操作的消息</span><br><span class=\"line\">      -deprecation               输出使用已过时的 API 的源位置</span><br><span class=\"line\">      -classpath &lt;路径&gt;            指定查找用户类文件和注释处理程序的位置</span><br><span class=\"line\">      -cp &lt;路径&gt;                   指定查找用户类文件和注释处理程序的位置</span><br><span class=\"line\">      -sourcepath &lt;路径&gt;           指定查找输入源文件的位置</span><br><span class=\"line\">      -bootclasspath &lt;路径&gt;        覆盖引导类文件的位置</span><br><span class=\"line\">      -extdirs &lt;目录&gt;              覆盖所安装扩展的位置</span><br><span class=\"line\">      -endorseddirs &lt;目录&gt;         覆盖签名的标准路径的位置</span><br><span class=\"line\">      -proc:&#123;none,only&#125;          控制是否执行注释处理和/或编译。</span><br><span class=\"line\">      -processor &lt;class1&gt;[,&lt;class2&gt;,&lt;class3&gt;...] 要运行的注释处理程序的名称; 绕过默认的搜索进程</span><br><span class=\"line\">      -processorpath &lt;路径&gt;        指定查找注释处理程序的位置</span><br><span class=\"line\">      -d &lt;目录&gt;                    指定放置生成的类文件的位置</span><br><span class=\"line\">      -s &lt;目录&gt;                    指定放置生成的源文件的位置</span><br><span class=\"line\">      -implicit:&#123;none,class&#125;     指定是否为隐式引用文件生成类文件</span><br><span class=\"line\">      -encoding &lt;编码&gt;             指定源文件使用的字符编码</span><br><span class=\"line\">      -<span class=\"built_in\">source</span> &lt;发行版&gt;              提供与指定发行版的源兼容性</span><br><span class=\"line\">      -target &lt;发行版&gt;              生成特定 VM 版本的类文件</span><br><span class=\"line\">      -version                   版本信息</span><br><span class=\"line\">      -<span class=\"built_in\">help</span>                      输出标准选项的提要</span><br><span class=\"line\">      -A关键字[=值]                  传递给注释处理程序的选项</span><br><span class=\"line\">      -X                         输出非标准选项的提要</span><br><span class=\"line\">      -J&lt;标记&gt;                     直接将 &lt;标记&gt; 传递给运行时系统</span><br><span class=\"line\">      -Werror                    出现警告时终止编译</span><br><span class=\"line\">      @&lt;文件名&gt;                     从文件读取选项和文件名</span><br></pre></td></tr></table></figure>\n\n<p>如果需要编译多个类，可以将他们的类名写在一个txt文件中：<code>class_info.txt</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Test01.java Test02.java Test03.java -verbose</span><br></pre></td></tr></table></figure>\n\n<p>使用时指定文件<code>javac @class_info.txt</code></p>\n</li>\n<li><p><strong>javap</strong>：反编译</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">javap &lt;options&gt; &lt;classes&gt;</span><br><span class=\"line\">    -<span class=\"built_in\">help</span>  --<span class=\"built_in\">help</span>  -?        输出此用法消息</span><br><span class=\"line\">    -version                 版本信息，其实是当前javap所在jdk的版本信息，不是class在哪个jdk下生成的。</span><br><span class=\"line\">    -v  -verbose             输出附加信息（包括行号、本地变量表，反汇编等详细信息）</span><br><span class=\"line\">    -l                         输出行号和本地变量表</span><br><span class=\"line\">    -public                    仅显示公共类和成员</span><br><span class=\"line\">    -protected               显示受保护的/公共类和成员</span><br><span class=\"line\">    -package                 显示程序包/受保护的/公共类 和成员 (默认)</span><br><span class=\"line\">    -p  -private             显示所有类和成员</span><br><span class=\"line\">    -c                       对代码进行反汇编</span><br><span class=\"line\">    -s                       输出内部类型签名</span><br><span class=\"line\">    -sysinfo                 显示正在处理的类的系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class=\"line\">    -constants               显示静态最终常量</span><br><span class=\"line\">    -classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class=\"line\">    -bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure>\n\n<p>一般常用-v -l -c三个选项</p>\n<p>输出结果到文件中<code>javap -c 类名.class &gt; 文件名.txt</code></p>\n</li>\n</ul>\n<h1 id=\"jps-amp-jstat-amp-jinfo\"><a href=\"#jps-amp-jstat-amp-jinfo\" class=\"headerlink\" title=\"jps&amp;jstat&amp;jinfo\"></a>jps&amp;jstat&amp;jinfo</h1><ul>\n<li><p>jps：与linux中ps功能类似，查看java虚拟机进程信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式：jps [ options ] [ hostid ]</span><br><span class=\"line\"></span><br><span class=\"line\">参数：</span><br><span class=\"line\">-q 不输出类名、Jar名和传入main方法的参数</span><br><span class=\"line\">-m 输出传入main方法的参数</span><br><span class=\"line\">-l 输出main类或Jar的全限名</span><br><span class=\"line\">-v 输出传入JVM的参数</span><br></pre></td></tr></table></figure>\n\n<p>不指定hostId默认为本机</p>\n</li>\n<li><p>jstat：虚拟机统计信息监控工具</p>\n<p><code>jstat [ option vmid [ interval [ s | ms ] [ count ] ] ]</code>、</p>\n<p>option：</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1351999/201905/1351999-20190514102358898-281086829.png\"></p>\n<p>vmid：虚拟机id（使用jps查到的id），linux上是进程id</p>\n<p>interval和count：查询间隔和查询次数</p>\n</li>\n<li><p>jinfo：java配置信息工具，可以实时查看和修改虚拟机参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">格式：jinfo [option] pid</span><br><span class=\"line\">参数：</span><br><span class=\"line\">-v 查看虚拟机启动时显式指定的参数列表</span><br><span class=\"line\">-flag name=value 修改一部分运行期可修改的虚拟机参数值</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"jmap-amp-jhat-amp-jstack\"><a href=\"#jmap-amp-jhat-amp-jstack\" class=\"headerlink\" title=\"jmap&amp;jhat&amp;jstack\"></a>jmap&amp;jhat&amp;jstack</h1><ul>\n<li><p>jmap：java内存映像工具，生成堆转储快照(heapdump或dump文件)</p>\n<p><code>jmap [option] vmid</code></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1351999/201905/1351999-20190514105400993-831304301.png\"></p>\n</li>\n<li><p>jhat：虚拟机堆转储快照分析工具，和jmap联合使用，不过较为简陋，后来的Eclipse Memory Analyzer和IBM HeapAnalyzer可以替代它的功能</p>\n<p>格式：<code>jhat [-port 端口号] 文件路径</code></p>\n<p>-port指定端口号，默认为7000</p>\n</li>\n<li><p>jstack：堆栈跟踪工具，生成虚拟机当前时刻的线程快照(threaddump或javacore文件)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">命令格式：jstack  [option] vmid</span><br><span class=\"line\">参数：</span><br><span class=\"line\">-F 当正常输出的请求不被响应时，强制输出线程堆栈</span><br><span class=\"line\">-l 除了堆栈外，显示关于锁的附加信息</span><br><span class=\"line\">-m 显示本地方法的堆栈（C/C++）</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n","categories":["JavaSE"]},{"title":"多线程、注解和反射","url":"/2020/10/12/JavaSE/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%81%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/","content":"<h1 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>线程分为执行时间与等待事件，在一个线程的等待事件中可以执行其他线程</p>\n<p><img src=\"https://i.loli.net/2020/10/12/3KTGNOI9QVbX5JE.png\" alt=\"img\"></p>\n<p><img src=\"https://i.loli.net/2020/10/12/ZObc9fhugFURzx1.png\" alt=\"img\"></p>\n<p><img src=\"https://i.loli.net/2020/10/12/Qg3lEnVezFq56jL.png\" alt=\"img\"></p>\n<p>线程继承于线程类Thread并重写run方法，当线程启动时自动执行run方法</p>\n<p>多线程的运行顺序时随机的</p>\n<p>线程分为用户线程与守护线程，守护线程为其他线程提供服务，如垃圾回收器（GC），且不能单独运行，当JVM中没有其他用户线程只有守护线程时，守护线程自动销毁，JVM会退出。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"创建线程\"><a href=\"#创建线程\" class=\"headerlink\" title=\"创建线程\"></a>创建线程</h2><ol>\n<li><p>声明类继承Thread类并创建一个该类对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">MyThread thread&#x3D;new MyThread();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>声明类实现Runnable接口并创建一个该类对象，声明一个Thread类对象(传入Runnable对象)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">MyRunnable runnable&#x3D;new MyRunnable();</span><br><span class=\"line\">Thread thread&#x3D;new Thread(runnable);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>声明类实现Callable接口并创建一个该类对象，创建一个FutureTask对象并调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Callable&lt;Integer&gt; callable &#x3D; new MyCallable();</span><br><span class=\"line\">FutureTask&lt;Integer&gt; futureTask &#x3D; new FutureTask&lt;&gt;(callable);</span><br><span class=\"line\">Thread thread &#x3D; new Thread(futureTask);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h2 id=\"线程的一些常用方法\"><a href=\"#线程的一些常用方法\" class=\"headerlink\" title=\"线程的一些常用方法\"></a>线程的一些常用方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">currentThread()\t\t\t\t当前运行的线程</span><br><span class=\"line\">isAlive()\t\t\t\t\t获取线程是否运行</span><br><span class=\"line\">sleep(num)\t\t\t\t\t让线程休眠一段时间</span><br><span class=\"line\">getid()\t\t\t\t\t\t获取线程ID</span><br><span class=\"line\">yield()\t\t\t\t\t\t线程让步，放弃CPU资源</span><br><span class=\"line\">setPriority(num)\t\t\t设置线程优先级（1~10）</span><br><span class=\"line\">interrupt()\t\t\t\t\t线程中断标志</span><br><span class=\"line\">setDaemon()\t\t\t\t\t设置为守护线程</span><br></pre></td></tr></table></figure>\n\n<p>附:</p>\n<ol>\n<li>当前线程表示运行该代码时运行的代码所在线程，如在main线程中使用MyThread类构造方法时处于main线程中</li>\n<li>某线程结束运行后其ID可能被后续线程使用</li>\n<li>优先级越高的线程获得的CPU资源越多，不能保证优先级越高的线程先运行，优先级设置不当可能会导致某些线程永远无法得到运行，即线程饥饿，一般编写代码不进行线程优先级设置</li>\n<li>线程标志中断后该线程需要自己检测是否中断并执行</li>\n<li>设置守护线程应该在线程运行之前就设置完毕</li>\n</ol>\n<h2 id=\"线程生命周期\"><a href=\"#线程生命周期\" class=\"headerlink\" title=\"线程生命周期\"></a>线程生命周期</h2><p>线程生命周期可以通过<code>getState()</code>方法获得，线程状态有：</p>\n<ul>\n<li>NEW，新建状态，即<code>start()</code>启动之前</li>\n<li>RUNNABLE，可运行状态，是一个复合状态，包括READY和RUNNING，READY状态可以被线程调度器调度使之处于RUNNING状态，RUNNING状态可通过<code>Thread.yield()</code>方法转换为READY状态</li>\n<li>BLOCKED，阻塞状态，线程发起阻塞的I/O操作，或申请由其他线程的独占资源，线程会转换为BLOCKED，不会占用CPU资源，当发起阻塞的I/O操作结束或获得申请的资源，线程可以转为RUNNABLE</li>\n<li>WAITING，等待状态，线程执行了<code>Object.wait(),Thread.join()</code>方法转换为WAITING状态，执行<code>Object.notify()</code>方法，或加入线程完毕转换为RUNNABLE状态</li>\n<li>TIMED_WAITING，类似于WAITING，但线程如果没有在指定时间范围完成期望操作，该线程会自动转换为RUNNABLE</li>\n<li>TERMINATED，终止状态，线程结束</li>\n</ul>\n<h2 id=\"其他性质\"><a href=\"#其他性质\" class=\"headerlink\" title=\"其他性质\"></a>其他性质</h2><h5 id=\"线程原子性\"><a href=\"#线程原子性\" class=\"headerlink\" title=\"线程原子性\"></a>线程原子性</h5><p>线程对数据操作的不可分割性</p>\n<p>使一个数同一时间只能被一个线程调用定义<code>AtomicInteger</code>变量</p>\n<h5 id=\"线程可见性\"><a href=\"#线程可见性\" class=\"headerlink\" title=\"线程可见性\"></a>线程可见性</h5><p>一个线程对数据的更新结果可以被其他线程读取则称为可见</p>\n<h5 id=\"重排序\"><a href=\"#重排序\" class=\"headerlink\" title=\"重排序\"></a>重排序</h5><p>不同处理器上执行的的多个操作顺序可能不同，可能导致线程安全问题</p>\n<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><p><code>@</code>+注释名在代码中存在，如重写注解<code>@Override</code></p>\n<h2 id=\"内置注解\"><a href=\"#内置注解\" class=\"headerlink\" title=\"内置注解\"></a>内置注解</h2><table>\n<thead>\n<tr>\n<th>注解名</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>@Override</code></td>\n<td>重写</td>\n</tr>\n<tr>\n<td><code>@Deprecated</code></td>\n<td>已过时，不推荐使用的方法</td>\n</tr>\n<tr>\n<td><code>@SuppressWarnings()</code></td>\n<td>镇压警告</td>\n</tr>\n</tbody></table>\n<h2 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h2><p>负责注解其他注解的注解</p>\n<table>\n<thead>\n<tr>\n<th>注解名</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Target()</td>\n<td>描述注解使用范围</td>\n</tr>\n<tr>\n<td>@Retention()</td>\n<td>在什么级别保存注释信息(SOURCE,CLASS,RUNTIME)</td>\n</tr>\n<tr>\n<td>@Documented</td>\n<td>说明注解将生成在javadoc中</td>\n</tr>\n<tr>\n<td>@Inherited</td>\n<td>说明子类可以继承父类中的该注解</td>\n</tr>\n</tbody></table>\n<h2 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h2><p>使用<code>@interface</code>自定义注解</p>\n<p>其中声明的参数在使用时必须添加，可以有默认值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@interface</span> MyAnnotation&#123;</span><br><span class=\"line\">\t<span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> &quot;L&quot;</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">age</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><p>区分静态动态语言</p>\n<p><img src=\"https://i.loli.net/2020/12/27/jMKiufBwVvso4AH.png\" alt=\"image-20201227162131463\"></p>\n<p><img src=\"https://i.loli.net/2020/12/27/e9gGU7fNku53ZJa.png\" alt=\"image-20201227162540384\"></p>\n<h2 id=\"Class类\"><a href=\"#Class类\" class=\"headerlink\" title=\"Class类\"></a>Class类</h2><p><img src=\"https://i.loli.net/2020/12/27/alzdQZR71jIiVbA.png\" alt=\"image-20201227165419393\"></p>\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>static Class.forName(String name)</code></td>\n<td>返回指定名的Class对象</td>\n</tr>\n<tr>\n<td><code>Object newInstance()</code></td>\n<td>调用缺省构造函数，返回Class对象实例</td>\n</tr>\n<tr>\n<td><code>getName()</code></td>\n<td>返回此Class对象表示的实体名</td>\n</tr>\n<tr>\n<td><code>Class getSuperClass()</code></td>\n<td>返回当前Class对象的父类Class对象</td>\n</tr>\n<tr>\n<td><code>Class[] getinterfaces()</code></td>\n<td>获取当前对象接口</td>\n</tr>\n<tr>\n<td><code>ClassLoader getClassLoader()</code></td>\n<td>返回该类的类加载器</td>\n</tr>\n<tr>\n<td><code>ClassLoader getConstructors()</code></td>\n<td>返回包含某些<code>Constructors</code>对象的数组</td>\n</tr>\n<tr>\n<td><code>Method getMethod(String name, Class...T)</code></td>\n<td>返回Method对象，此对象形参类型为paramType</td>\n</tr>\n<tr>\n<td><code>Field[] getDeclaredFields()</code></td>\n<td>返回Field对象的数组</td>\n</tr>\n</tbody></table>\n<h3 id=\"有Class对象的类型\"><a href=\"#有Class对象的类型\" class=\"headerlink\" title=\"有Class对象的类型\"></a>有Class对象的类型</h3><p><img src=\"https://i.loli.net/2020/12/27/87yCQNUvOB5W3k9.png\" alt=\"image-20201227202420407\"></p>\n<p>注意：一个类/类型只有一个Class对象</p>\n<p>如：类型相同长度不同的两个数组是同一对象，两者getClass()的hashCode相同</p>\n<p><img src=\"https://i.loli.net/2020/12/27/d3KWM7XqUNzDwyh.png\" alt=\"image-20201227204625890\"></p>\n<h3 id=\"主动-被动初始化\"><a href=\"#主动-被动初始化\" class=\"headerlink\" title=\"主动/被动初始化\"></a>主动/被动初始化</h3><p><img src=\"https://i.loli.net/2020/12/27/kXQTeG3IN1Phlis.png\" alt=\"image-20201227205857255\"></p>\n<h3 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h3><p><img src=\"https://i.loli.net/2020/12/27/TVoFR4QtCiscm3Z.png\" alt=\"image-20201227211950728\"></p>\n<p><img src=\"https://i.loli.net/2020/12/27/krh9AeIQHW4Ywdt.png\" alt=\"image-20201227212032776\"></p>\n<h6 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h6><p>如果一个类加载器收到了一个类加载请求，它不会自己去尝试加载这个类，而是把这个请求转交给父类加载器去完成。每一个层次的类加载器都是如此。因此所有的类加载请求都应该传递到最顶层的启动类加载器中，只有到父类加载器反馈自己无法完成这个加载请求（在它的搜索范围没有找到这个类）时，子类加载器才会尝试自己去加载。委派的好处就是避免有些类被重复加载。</p>\n<img src=\"https://img-blog.csdnimg.cn/20201217213314510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGV5YW5iYW8=,size_16,color_FFFFFF,t_70\" alt=\"双亲委派机制\" style=\"zoom:50%;\" />\n\n<h3 id=\"获取类运行时的结构\"><a href=\"#获取类运行时的结构\" class=\"headerlink\" title=\"获取类运行时的结构\"></a>获取类运行时的结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Class c1 &#x3D; Class.forName(&quot;&quot;)&#x2F;&#x2F;获取Class对象</span><br><span class=\"line\"></span><br><span class=\"line\">c1.getName()获取类名</span><br><span class=\"line\">c1.getSimpleName()获取简单名</span><br><span class=\"line\">c1.getFields()获取public属性，添加参数可获得特定属性</span><br><span class=\"line\">c1.getDeclaredFields()获取全部属性</span><br><span class=\"line\">c1.getMethods()获取本类及父类全部public方法，添加参数可获得特定方法</span><br><span class=\"line\">c1.getDeclaredMethods()获取本类全部方法</span><br><span class=\"line\">c1.getConstructor()获取public构造方法，添加参数可获得特定方法</span><br><span class=\"line\">c1.getDeclaredConstructor()获取全部构造方法</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"得到Class对象之后\"><a href=\"#得到Class对象之后\" class=\"headerlink\" title=\"得到Class对象之后\"></a>得到Class对象之后</h3><p><img src=\"https://i.loli.net/2020/12/27/HZO6c9dir2JfzW8.png\" alt=\"image-20201227214124782\"></p>\n<h4 id=\"通过构造器实例化对象\"><a href=\"#通过构造器实例化对象\" class=\"headerlink\" title=\"通过构造器实例化对象\"></a>通过构造器实例化对象</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Constructor constructor;</span><br><span class=\"line\">        constructor = Class.forName(<span class=\"string\">&quot;User&quot;</span>).getDeclaredConstructor(String.class,<span class=\"keyword\">int</span>.class,<span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">        User user1 = (User) constructor.newInstance(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">108</span>);</span><br><span class=\"line\">        System.out.println(user1);</span><br></pre></td></tr></table></figure>\n\n<p>注：<code>constructor.newInstance()</code>实例化新对象</p>\n<h4 id=\"通过反射调用普通方法\"><a href=\"#通过反射调用普通方法\" class=\"headerlink\" title=\"通过反射调用普通方法\"></a>通过反射调用普通方法</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">User user1 = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        Method setName = Class.forName(<span class=\"string\">&quot;User&quot;</span>).getDeclaredMethod(<span class=\"string\">&quot;setName&quot;</span>, String.class);</span><br><span class=\"line\">        setName.invoke(user1,<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        System.out.println(user1.getName());</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过反射更改私有属性\"><a href=\"#通过反射更改私有属性\" class=\"headerlink\" title=\"通过反射更改私有属性\"></a>通过反射更改私有属性</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">User user1 = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        Field name = Class.forName(<span class=\"string\">&quot;User&quot;</span>).getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        name.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置关闭安全检测</span></span><br><span class=\"line\">        name.set(user1,<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">        System.out.println(user1.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">注：`Class.setAccessible`是获取到的各种对象的通用方法，可以提高反射效率</span><br><span class=\"line\"></span><br><span class=\"line\">#### 反射获取泛型</span><br><span class=\"line\"></span><br><span class=\"line\">![image-<span class=\"number\">20201227222104618</span>](https:<span class=\"comment\">//i.loli.net/2020/12/27/A5cMGmvV6FCew94.png)</span></span><br><span class=\"line\"></span><br><span class=\"line\">#### 反射获取注解</span><br><span class=\"line\"></span><br><span class=\"line\">![image-<span class=\"number\">20201227222904779</span>](https:<span class=\"comment\">//i.loli.net/2020/12/27/joiJBuqxedZzaOS.png)</span></span><br></pre></td></tr></table></figure>","categories":["JavaSE"]},{"title":"CSS总结","url":"/2020/09/04/web%E5%89%8D%E7%AB%AF/CSS/","content":"<h2 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h2><ol>\n<li><p>选择器分组 <code>元素1,元素2,元素3&#123;属性;&#125;</code></p>\n</li>\n<li><ul>\n<li><p>派生（后代）选择器 <code>元素1 分级n&#123;属性;&#125;</code>（选择可以跨级）</p>\n</li>\n<li><p>子元素选择器 <code>元素1&gt;分级1&#123;属性;&#125;</code>（只能选择到下一级）</p>\n</li>\n<li><p>相邻兄弟选择器 (了解) <code>元素1+元素2&#123;属性;&#125;</code></p>\n<p>（被选择的元素必须具有前者元素）</p>\n</li>\n</ul>\n</li>\n<li><p>id选择器 <code>#id&#123;属性;&#125;</code></p>\n</li>\n<li><p>类选择器 <code>.class&#123;属性;&#125;</code></p>\n</li>\n<li><p>属性（和值）选择器（在head中加入）</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">[元素属性]&#123;属性1;&#125;/*含有目标属性*/</span><br><span class=\"line\">[元素属性=特定值]&#123;属性2;&#125;/*目标属性为特定值*/</span><br><span class=\"line\">[元素属性~=特定值]&#123;属性3;&#125;/*目标属性的值中包含有特定值*/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通用配置符 <code>*&#123;属性;&#125;</code></p>\n</li>\n<li><p>多类选择器</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*css文件*/</span></span><br><span class=\"line\">.p1&#123;属性1;&#125;</span><br><span class=\"line\">.p2&#123;属性2;&#125;</span><br><span class=\"line\">.p2.p3&#123;属性3;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*html文件*/</span></span><br><span class=\"line\">&lt;p class=&quot;p1&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;p class=&quot;p2&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">&lt;p class=&quot;p1 p2&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\"><span class=\"comment\">/*第三个段落属性为&quot;属性1+属性2+属性3&quot;*/</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>附:</p>\n<ol>\n<li><p>元素选择器可与类选择器结合使用<code>a.class&#123;属性&#125;</code>即a元素中class类的属性</p>\n</li>\n<li><p>ID选择器与类选择器区别：</p>\n<p>ID选择器只能在文档中使用一次，而类可以使用多次</p>\n<p>ID选择器不能结合使用</p>\n<p>当使用JS时需要用到ID</p>\n</li>\n</ol>\n<h2 id=\"CSS样式\"><a href=\"#CSS样式\" class=\"headerlink\" title=\"CSS样式\"></a>CSS样式</h2><h5 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h5><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>background-attachment</td>\n<td>背景图片是否随页面滚动</td>\n</tr>\n<tr>\n<td>background-color</td>\n<td>背景颜色</td>\n</tr>\n<tr>\n<td>background-image</td>\n<td>设置图片背景（<code>url</code>引入）</td>\n</tr>\n<tr>\n<td>background-position</td>\n<td>起始位置（两项属性）</td>\n</tr>\n<tr>\n<td>background-repeat</td>\n<td>是否及如何重复</td>\n</tr>\n<tr>\n<td>background-size</td>\n<td>图片尺寸</td>\n</tr>\n<tr>\n<td>background-origin</td>\n<td>图片定位区域</td>\n</tr>\n<tr>\n<td>background-clip</td>\n<td>图片绘制区域</td>\n</tr>\n</tbody></table>\n<h5 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h5><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>color</td>\n<td>文本颜色</td>\n</tr>\n<tr>\n<td>direction</td>\n<td>文本方向</td>\n</tr>\n<tr>\n<td>line-height</td>\n<td>行高</td>\n</tr>\n<tr>\n<td>letter-spacing</td>\n<td>字符间距</td>\n</tr>\n<tr>\n<td>text-align</td>\n<td>对齐文本</td>\n</tr>\n<tr>\n<td>text-decoration</td>\n<td>文本修饰</td>\n</tr>\n<tr>\n<td>text-indent</td>\n<td>缩进文本首行</td>\n</tr>\n<tr>\n<td>text-transform</td>\n<td>元素字母（大小写）</td>\n</tr>\n<tr>\n<td>unicode-bidi</td>\n<td>文本方向</td>\n</tr>\n<tr>\n<td>white-space</td>\n<td>空白处理方式</td>\n</tr>\n<tr>\n<td>word-spacing</td>\n<td>字间距</td>\n</tr>\n<tr>\n<td>text-shadow</td>\n<td>添加阴影</td>\n</tr>\n<tr>\n<td>word-wrap</td>\n<td>换行规则</td>\n</tr>\n</tbody></table>\n<p>text-shadow:四个属性（向右偏移 向下偏移 模糊程度 阴影颜色）</p>\n<p>word-wrap:另外设置行宽度</p>\n<h5 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h5><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>font-family</td>\n<td>字体系列</td>\n</tr>\n<tr>\n<td>font-size</td>\n<td>字体尺寸</td>\n</tr>\n<tr>\n<td>font-style</td>\n<td>字体风格</td>\n</tr>\n<tr>\n<td>font-variant</td>\n<td>大小写或正常字体显示文本</td>\n</tr>\n<tr>\n<td>font-weight</td>\n<td>字体粗细</td>\n</tr>\n</tbody></table>\n<p>网络字体引入</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: myfont;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h5><p>链接四种状态：</p>\n<table>\n<thead>\n<tr>\n<th>元素</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a:link</td>\n<td>普通未被访问的链接</td>\n</tr>\n<tr>\n<td>a:visited</td>\n<td>用户已访问的链接</td>\n</tr>\n<tr>\n<td>a:hover</td>\n<td>鼠标位于链接上方</td>\n</tr>\n<tr>\n<td>a:active</td>\n<td>鼠标被点击的时刻</td>\n</tr>\n</tbody></table>\n<p>链接样式：text-decoration</p>\n<p>背景颜色：background-color</p>\n<h5 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h5><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>list-style</td>\n<td>简写列表项</td>\n</tr>\n<tr>\n<td>list-style-image</td>\n<td>列表项图像（引入）</td>\n</tr>\n<tr>\n<td>list-style-position</td>\n<td>列表项标志位置</td>\n</tr>\n<tr>\n<td>list-style-type</td>\n<td>列表类型（普通图图表）</td>\n</tr>\n</tbody></table>\n<h5 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h5><p>使用实例</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#tb</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-collapse</span>: collapse;<span class=\"comment\">/*合并边框*/</span></span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#tb</span> <span class=\"selector-tag\">td</span>,<span class=\"selector-id\">#tb</span> <span class=\"selector-tag\">th</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid aqua;<span class=\"comment\">/*边框宽度 实线 颜色*/</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">tb</span> <span class=\"selector-tag\">th</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: right;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>:aqua;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#FFFFFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">tb</span> <span class=\"selector-tag\">tr</span><span class=\"selector-class\">.alt</span> <span class=\"selector-tag\">td</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: aquamarine;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"轮廓\"><a href=\"#轮廓\" class=\"headerlink\" title=\"轮廓\"></a>轮廓</h5><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>outline</td>\n<td>轮廓属性</td>\n</tr>\n<tr>\n<td>outline-color</td>\n<td>轮廓颜色</td>\n</tr>\n<tr>\n<td>outline-style</td>\n<td>轮廓样式</td>\n</tr>\n<tr>\n<td>outline-width</td>\n<td>轮廓宽度</td>\n</tr>\n</tbody></table>\n<h2 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h2><p><img src=\"https://i.loli.net/2020/09/05/PArs37gTpldyUEH.png\" alt=\"img\"></p>\n<ul>\n<li>padding-(): 设置边距</li>\n<li>border-()-style: 可设置具体方向边框<ul>\n<li>border-()-width: 设置(单边)宽度</li>\n<li>border-()-color: 设置(单边)颜色</li>\n<li>border-radius: 圆角边框大小</li>\n<li>box-shadow: 阴影效果(属性格式同文字阴影)</li>\n<li>border-image: 边框图片</li>\n</ul>\n</li>\n<li>margin-():设置边距</li>\n</ul>\n<p>两个盒子模型的外边框会合并</p>\n<h5 id=\"盒子模型实际应用\"><a href=\"#盒子模型实际应用\" class=\"headerlink\" title=\"盒子模型实际应用\"></a>盒子模型实际应用</h5><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">*<span class=\"comment\">/*通用配置符*/</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.top</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.top_content</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">75%</span>;</span><br><span class=\"line\">    height; 50px;</span><br><span class=\"line\">    <span class=\"selector-tag\">margin</span>: <span class=\"selector-tag\">Opx</span> <span class=\"selector-tag\">auto</span>;<span class=\"comment\">/*左右自适应*/</span></span><br><span class=\"line\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-tag\">blue</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">75%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">1500px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blanchedalmond;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.body_img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;<span class=\"comment\">/*占body75%中的100%*/</span></span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-coior</span>: darkorange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定位-amp-浮动\"><a href=\"#定位-amp-浮动\" class=\"headerlink\" title=\"定位&amp;浮动\"></a>定位&amp;浮动</h2><h5 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h5><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>position</td>\n<td>元素位置形式</td>\n</tr>\n<tr>\n<td>top</td>\n<td>向上偏移量</td>\n</tr>\n<tr>\n<td>left</td>\n<td>向左偏移量</td>\n</tr>\n<tr>\n<td>right</td>\n<td>向右偏移量</td>\n</tr>\n<tr>\n<td>bottom</td>\n<td>向下偏移量</td>\n</tr>\n<tr>\n<td>overflow</td>\n<td>元素溢出区</td>\n</tr>\n<tr>\n<td>clip</td>\n<td>显示形状</td>\n</tr>\n<tr>\n<td>vertical-align</td>\n<td>对齐方式</td>\n</tr>\n<tr>\n<td>z-index</td>\n<td>堆叠顺序</td>\n</tr>\n</tbody></table>\n<h5 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h5><p>float属性可用值：left right none inherit（从父级继承）</p>\n<p>clear属性（清除浮动属性）：left right both inherit</p>\n<p>附: 通过浮动可作瀑布流效果</p>\n<h2 id=\"CSS常用操作\"><a href=\"#CSS常用操作\" class=\"headerlink\" title=\"CSS常用操作\"></a>CSS常用操作</h2><ol>\n<li><p>应用margin position float操作对齐边框</p>\n</li>\n<li><p>行高 <code>line-height</code></p>\n<p>最大最小高宽度 <code>max-width</code></p>\n</li>\n<li><p>分类</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>clear</td>\n<td>设置侧面是否允许其他浮动元素</td>\n</tr>\n<tr>\n<td>cursor</td>\n<td>指向某元素上是的鼠标指针类型</td>\n</tr>\n<tr>\n<td>display</td>\n<td>设置是否及如何显示元素</td>\n</tr>\n<tr>\n<td>float</td>\n<td>定义元素在哪个方向浮动</td>\n</tr>\n<tr>\n<td>position</td>\n<td>设置元素位置</td>\n</tr>\n<tr>\n<td>visibility</td>\n<td>设置元素是否可见</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>导航栏展示</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">list-style-type</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span>, <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span><span class=\"comment\">/*a链接的状态*/</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: burlywood;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: aliceblue;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span>, <span class=\"selector-tag\">a</span>: <span class=\"selector-tag\">hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: crimson;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>图片展示</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">70%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: burlywood;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.image</span>&#123;</span><br><span class=\"line\">    border; 1px solid darkgray;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:_auto</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">float</span>: <span class=\"selector-tag\">left</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">text-align</span>: <span class=\"selector-tag\">center</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">margin</span>: 5<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>; <span class=\"comment\">/*透明度：0为完全透明，1为完全不透明*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.text</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span></span><br><span class=\"line\">    margin-bottom: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"CSS动画\"><a href=\"#CSS动画\" class=\"headerlink\" title=\"CSS动画\"></a>CSS动画</h2><h5 id=\"2D、3D转换\"><a href=\"#2D、3D转换\" class=\"headerlink\" title=\"2D、3D转换\"></a>2D、3D转换</h5><p>转换格式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transform</span>:转换方法;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-transform</span>:转换方法;<span class=\"comment\">/*safari chrome*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">-ms-transform</span>:转换方法;<span class=\"comment\">/*IE 360*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">-o-transform</span>:转换方法;<span class=\"comment\">/*opera*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">-moz-transform</span>:转换方法;<span class=\"comment\">/*firefox*/</span></span><br></pre></td></tr></table></figure>\n\n<p>2D转换方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>translate()</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>rotate()</td>\n<td>旋转</td>\n</tr>\n<tr>\n<td>scale()</td>\n<td>缩放</td>\n</tr>\n<tr>\n<td>skew()</td>\n<td>倾斜</td>\n</tr>\n<tr>\n<td>matrix()</td>\n<td>矩阵</td>\n</tr>\n</tbody></table>\n<p>3D转换方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rotateX()</td>\n<td>X轴旋转</td>\n</tr>\n<tr>\n<td>rotateY()</td>\n<td>Y轴旋转</td>\n</tr>\n</tbody></table>\n<h5 id=\"过渡\"><a href=\"#过渡\" class=\"headerlink\" title=\"过渡\"></a>过渡</h5><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>transition</td>\n<td>设置四个过渡属性</td>\n</tr>\n<tr>\n<td>transition-property</td>\n<td>过渡名称</td>\n</tr>\n<tr>\n<td>transition-duration</td>\n<td>过渡花费时间</td>\n</tr>\n<tr>\n<td>transition-timing-function</td>\n<td>过渡时间曲线</td>\n</tr>\n<tr>\n<td>transition-delay</td>\n<td>过渡开始时间</td>\n</tr>\n</tbody></table>\n<p>代码展示</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">108px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transition</span>: width <span class=\"number\">2s</span>,height_2s,-webkit-transform <span class=\"number\">2s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition </span>: width <span class=\"number\">2s</span>,height <span class=\"number\">2s</span>,transform <span class=\"number\">2s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transition-delay</span>:<span class=\"number\">2s</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition-delay</span>: <span class=\"number\">2s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span>: <span class=\"selector-tag\">hover</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">208px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">    <span class=\"attribute\">webkit-transform</span>: <span class=\"built_in\">rotate</span>( <span class=\"number\">360deg</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h5><p>代码展示</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">animation</span>:anim <span class=\"number\">5s</span> <span class=\"comment\">/*infinite alternate添加回溯及重复动画*/</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-animation</span>:anim <span class=\"number\">5s</span><span class=\"comment\">/*同加*/</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> anim&#123;</span><br><span class=\"line\">    0%&#123;<span class=\"attribute\">background</span>: red;<span class=\"attribute\">left</span>: <span class=\"number\">0px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">0px</span>&#125;</span><br><span class=\"line\">    25%&#123;<span class=\"attribute\">background</span>: blue;<span class=\"attribute\">left</span>: <span class=\"number\">200</span>;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>&#125;</span><br><span class=\"line\">    50%&#123;<span class=\"attribute\">background</span>:<span class=\"number\">#ccffcc</span>;<span class=\"attribute\">left</span>: <span class=\"number\">200px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">200px</span>&#125;</span><br><span class=\"line\">    75%&#123;<span class=\"attribute\">background</span>: <span class=\"number\">#B0ffff</span>;<span class=\"attribute\">left</span>: <span class=\"number\">0px</span>;<span class=\"attribute\">top</span>: <span class=\"number\">200px</span>&#125;</span><br><span class=\"line\">    100%&#123;<span class=\"attribute\">background</span>:red;<span class=\"attribute\">left</span>: <span class=\"number\">0px</span>;<span class=\"attribute\">top</span>: <span class=\"number\">0px</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-</span><span class=\"keyword\">@keyframes</span> anim&#123;</span><br><span class=\"line\">    0%&#123;<span class=\"attribute\">background</span>: red;<span class=\"attribute\">left</span>: <span class=\"number\">0px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">0px</span>&#125;</span><br><span class=\"line\">    25%&#123;<span class=\"attribute\">background</span>: blue;<span class=\"attribute\">left</span>: <span class=\"number\">200</span>;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>&#125;</span><br><span class=\"line\">    50%&#123;<span class=\"attribute\">background</span>:<span class=\"number\">#ccffcc</span>;<span class=\"attribute\">left</span>: <span class=\"number\">200px</span>; <span class=\"attribute\">top</span>: <span class=\"number\">200px</span>&#125;</span><br><span class=\"line\">    75%&#123;<span class=\"attribute\">background</span>: <span class=\"number\">#B0ffff</span>;<span class=\"attribute\">left</span>: <span class=\"number\">0px</span>;<span class=\"attribute\">top</span>: <span class=\"number\">200px</span>&#125;</span><br><span class=\"line\">    100%&#123;<span class=\"attribute\">background</span>:red;<span class=\"attribute\">left</span>: <span class=\"number\">0px</span>;<span class=\"attribute\">top</span>: <span class=\"number\">0px</span>&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多列\"><a href=\"#多列\" class=\"headerlink\" title=\"多列\"></a>多列</h5><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.div1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">column-count</span>: <span class=\"number\">4</span>;<span class=\"comment\">/*四列*/</span></span><br><span class=\"line\">    <span class=\"attribute\">column-gap</span>: <span class=\"number\">30px</span>;<span class=\"comment\">/*内边距*/</span></span><br><span class=\"line\">    <span class=\"attribute\">column-rule</span>: <span class=\"number\">5px</span> outset red;<span class=\"comment\">/*边界线*/</span></span><br><span class=\"line\">    <span class=\"attribute\">-webkit-column-count</span>: <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-column-gap</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-column-rule</span>: <span class=\"number\">5px</span> outset red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多列实现瀑布流-图片宽度一致\"><a href=\"#多列实现瀑布流-图片宽度一致\" class=\"headerlink\" title=\"多列实现瀑布流(图片宽度一致)\"></a>多列实现瀑布流(图片宽度一致)</h5><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">column-width</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">column-gap</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-column-width</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-column-gap</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JS调整元素样式\"><a href=\"#JS调整元素样式\" class=\"headerlink\" title=\"JS调整元素样式\"></a>JS调整元素样式</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;noResourceImg&quot;</span>).style.height = imgHeight + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&quot;noResourceImgs&quot;</span>)[<span class=\"number\">0</span>]style.height = imgHeight + <span class=\"string\">&quot;px&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n","categories":["web前端"]},{"title":"Vue基础","url":"/2020/10/07/web%E5%89%8D%E7%AB%AF/Vue/","content":"<p>官方文档<a href=\"https://cn.vuejs.org/\">https://cn.vuejs.org/</a></p>\n<a id=\"more\"></a>\n\n<p>注意：Vue-cli4.0之后不再适用</p>\n<p><strong>主流框架特点</strong></p>\n<ul>\n<li>React：虚拟DOM</li>\n<li>angular：将MVC理念引入前端-&gt;MVVM</li>\n</ul>\n<p><strong>MVVM：Model+View+ViewModel</strong></p>\n<h1 id=\"第一个Vue程序\"><a href=\"#第一个Vue程序\" class=\"headerlink\" title=\"第一个Vue程序\"></a>第一个Vue程序</h1><p><strong>引入Vue</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">开发环境版本</span><br><span class=\"line\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">生产环境版本</span><br><span class=\"line\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--插值表达式--&gt;</span></span><br><span class=\"line\">    &#123;&#123;message&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../lib/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//data中添加传输的数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">            message: <span class=\"string\">&quot;hello,vue!&quot;</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>插入文本三种方式：</p>\n<ul>\n<li><code>&#123;&#123;message&#125;&#125;</code>插值表达式</li>\n<li><code>v-text:&quot;message&quot;</code></li>\n<li><code>v-html:&quot;&lt;p&gt;message&lt;/p&gt;&quot;</code></li>\n</ul>\n<p><strong>vue的实现方式</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210709145544516.png\" alt=\"image-20210709145544516\"></p>\n<h1 id=\"Vue基础语法\"><a href=\"#Vue基础语法\" class=\"headerlink\" title=\"Vue基础语法\"></a>Vue基础语法</h1><h2 id=\"v-bind绑定元素特性\"><a href=\"#v-bind绑定元素特性\" class=\"headerlink\" title=\"v-bind绑定元素特性\"></a><code>v-bind</code>绑定元素特性</h2><p>基本格式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--&#x27;v-bind:title&#x27;可简写为&#x27;:title&#x27;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span>测试<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../lib/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            message: <span class=\"string\">&quot;hello,vue!&quot;</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>v-bind:title</code>：鼠标悬浮显示信息</li>\n</ul>\n<h2 id=\"条件-amp-循环\"><a href=\"#条件-amp-循环\" class=\"headerlink\" title=\"条件&amp;循环\"></a>条件&amp;循环</h2><ul>\n<li><p>布尔值判断<code>v-if</code>和<code>v-else</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;istrue&quot;</span>&gt;</span>Yes<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>No<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../lib/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            istrue: <span class=\"literal\">true</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>表达式，多重判断</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;type===&#x27;A&#x27;&quot;</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;type===&#x27;B&#x27;&quot;</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">&quot;type===&#x27;C&#x27;&quot;</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>error<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../lib/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            type: <span class=\"string\">&#x27;A&#x27;</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>循环</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in items&quot;</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123;item.message&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../lib/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            items: [</span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">message</span>:<span class=\"string\">&#x27;message01&#x27;</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">message</span>:<span class=\"string\">&#x27;message02&#x27;</span>&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">                &#123;<span class=\"attr\">message</span>:<span class=\"string\">&#x27;message03&#x27;</span>&#125;</span></span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p><strong>点击发生事件</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--通过v-on绑定方法,&#x27;v-on:click&#x27;可简写为&#x27;@click&#x27;--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;sayHi&quot;</span>&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../lib/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            message: <span class=\"string\">&quot;Hi!&quot;</span></span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">//在这里添加javascript方法</span></span></span><br><span class=\"line\"><span class=\"javascript\">            sayHi: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                alert(<span class=\"built_in\">this</span>.message)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"双向绑定\"><a href=\"#双向绑定\" class=\"headerlink\" title=\"双向绑定\"></a>双向绑定</h2><p>通过v-model将view数据绑定view-model</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--通过v-model绑定数据--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;choice&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>--请选择--<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--无需刷新实时更新页面--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>已选择：&#123;&#123;choice&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../lib/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            choice: <span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue组件\"><a href=\"#Vue组件\" class=\"headerlink\" title=\"Vue组件\"></a>Vue组件</h2><p>实现代码复用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--应用自定义组件，通过v-bind绑定组件中的info数据--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">my-component</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in items&quot;</span> <span class=\"attr\">v-bind:info</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../lib/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//自定义组件</span></span></span><br><span class=\"line\"><span class=\"javascript\">    Vue.component(<span class=\"string\">&quot;my-component&quot;</span>,&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//通过props接收view层传输的数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">        props: [<span class=\"string\">&#x27;info&#x27;</span>],</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">        template: &#x27;<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;<span class=\"name\">info</span>&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>&#x27;</span></span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            items: [<span class=\"string\">&#x27;Java&#x27;</span>, <span class=\"string\">&#x27;Linux&#x27;</span>, <span class=\"string\">&#x27;Spring&#x27;</span>]</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue闪烁问题\"><a href=\"#Vue闪烁问题\" class=\"headerlink\" title=\"Vue闪烁问题\"></a>Vue闪烁问题</h2><p>由于Vue先加载对象再进行渲染，在加载页面时最初会将原变量名显示出来，如下图所示</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210714113811552.png\" alt=\"image-20210714113811552\"></p>\n<p><strong>优化方式</strong></p>\n<p>添加样式</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">style</span>&gt;</span><br><span class=\"line\">    <span class=\"selector-attr\">[cloak]</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>view层</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-cloak</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;info.address.street&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Axios\"><a href=\"#Axios\" class=\"headerlink\" title=\"Axios\"></a>Axios</h2><p>需要传输的数据<code>data.json</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  name:狂神说java,</span><br><span class=\"line\">  url: http://baidu.com,</span><br><span class=\"line\">  page: 1,</span><br><span class=\"line\">  isNonProfit:true,</span><br><span class=\"line\">  address: &#123;</span><br><span class=\"line\">    street: 含光门,</span><br><span class=\"line\">    city:陕西西安,</span><br><span class=\"line\">    country: 中国</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  links: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: B站,</span><br><span class=\"line\">      url: https://www.bilibili.com/</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: 4399,</span><br><span class=\"line\">      url: https://www.4399.com/</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: 百度,</span><br><span class=\"line\">      url: https://www.baidu.com/</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-cloak</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vue&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;info.address.street&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../lib/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../lib/axios.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">&quot;#vue&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">//将参数改为方法防止污染数据池</span></span></span><br><span class=\"line\">        data()&#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">return</span>&#123;</span></span><br><span class=\"line\">                info: &#123;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"><span class=\"javascript\">        mounted()&#123;<span class=\"comment\">//链式编程</span></span></span><br><span class=\"line\"><span class=\"javascript\">            axios.get(<span class=\"string\">&#x27;./data.json&#x27;</span>).then(<span class=\"function\"><span class=\"params\">response</span>=&gt;</span>(<span class=\"built_in\">this</span>.info=response.data))</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计算属性computed\"><a href=\"#计算属性computed\" class=\"headerlink\" title=\"计算属性computed\"></a>计算属性computed</h2><p>将不经常变化的计算结果进行缓存，节省系统开销</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vue&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>currentTime1:&#123;&#123;currentTime1()&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>currentTime1:&#123;&#123;currentTime2&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../lib/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">&quot;#vue&quot;</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            message: <span class=\"string\">&quot;default message&quot;</span></span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            currentTime1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//每次调用方法都会完整的执行一遍代码</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">return</span> <span class=\"built_in\">Date</span>.now();</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"><span class=\"javascript\">        computed: &#123;<span class=\"comment\">//这里的方法如果重名则优先调用methods中的方法</span></span></span><br><span class=\"line\"><span class=\"javascript\">            currentTime2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//在调用过一次方法后，在运行计算属性会直接返回缓存中的结果，除非相关的数据更新</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">return</span> <span class=\"built_in\">Date</span>.now();</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插槽slot\"><a href=\"#插槽slot\" class=\"headerlink\" title=\"插槽slot\"></a>插槽slot</h2><p>插槽是组建的扩展，允许在使用组件时同时显示原本的html内容，同时允许递归调用</p>\n<p>如：</p>\n<p>定义组件<code>my-component</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;my-component&quot;</span>,&#123;</span><br><span class=\"line\">    template: <span class=\"string\">&#x27;&lt;p&gt;&#x27;</span>+</span><br><span class=\"line\">    \t\t\t<span class=\"string\">&#x27;这是组件&#x27;</span>+</span><br><span class=\"line\">    \t\t\t<span class=\"comment\">//插槽位置</span></span><br><span class=\"line\">  \t \t\t \t<span class=\"string\">&#x27;&lt;slot&gt;&lt;/slot&gt;&#x27;</span>+</span><br><span class=\"line\">\t\t\t <span class=\"string\">&#x27;&lt;/p&gt;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用组件情形</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span></span><br><span class=\"line\">\t其中的一些信息</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不使用插槽时父组件将会被直接替代为<code>my-component</code>中的内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    这是组件</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果使用slot时，父组件中的内容将会得到保留：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    这是组件</span><br><span class=\"line\">    其中的一些信息</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，插槽为父组件预留了保留信息的窗口</p>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><ul>\n<li>子组件使用props接收父组件的数据</li>\n<li>子组件使用$emit()触发父组件的自定义事件</li>\n</ul>\n<p><strong>我们首先需要理清关系，这非常重要</strong></p>\n<ul>\n<li>vm<ul>\n<li>元素：<code>items, item_in_vm, index_in_vm</code>，其中后两项是<code>items</code>的子元素</li>\n<li>方法：<code>removeInVM(index)</code>实际进行删除操作</li>\n</ul>\n</li>\n<li>组件<code>todo-items</code><ul>\n<li>元素：<code>item_in_component, index_in_component</code></li>\n<li>方法：<code>removeInComponent(index)</code>自定义事件</li>\n</ul>\n</li>\n<li>回传给视图层的函数映射：<code>remove_message</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vue&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">todo-items</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item_in_vm,index_in_vm) in items&quot;</span> <span class=\"attr\">:item_in_component</span>=<span class=\"string\">&quot;item_in_vm&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">:index_in_component</span>=<span class=\"string\">&quot;index_in_vm&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                @<span class=\"attr\">remove_message</span>=<span class=\"string\">&quot;removeInVM&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">todo-items</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;../lib/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    Vue.component(<span class=\"string\">&quot;todo-items&quot;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        props: [<span class=\"string\">&#x27;index_in_component&#x27;</span>, <span class=\"string\">&#x27;item_in_component&#x27;</span>],</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">        template: &#x27;<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;<span class=\"name\">index_in_component</span>&#125;&#125;</span><span class=\"xml\"> </span><span class=\"template-variable\">&#123;&#123;<span class=\"name\">item_in_component</span>&#125;&#125;</span><span class=\"xml\"> <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;removeInComponent&quot;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>&#x27;,</span></span></span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            removeInComponent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//自定义事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;remove_message&#x27;</span>, index);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        el: <span class=\"string\">&quot;#vue&quot;</span>,</span></span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            items: [<span class=\"string\">&quot;object01&quot;</span>, <span class=\"string\">&quot;object02&quot;</span>, <span class=\"string\">&quot;object03&quot;</span>]</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            removeInVM: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;删除了&quot;</span> + <span class=\"built_in\">this</span>.items[index]);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">//实际进行删除操作</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.items.splice(index, <span class=\"number\">1</span>);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>执行流程</strong></p>\n<ol>\n<li>通过<code>v-for=&quot;(item_in_vm,index_in_vm) in items&quot;</code>获取vm中的数据，并通过<code>:item_in_component=&quot;item_in_vm&quot;</code>和<code>:index_in_component=&quot;index_in_vm&quot;</code>传递给组件</li>\n<li>当点击删除按钮时，只能调用本作用域之内的方法，即<code>removeInComponent</code>，并通过<code>this.$emit(&#39;remove_message&#39;, index)</code>自定义事件，即<code>remove_message</code>作为自定义事件在父组件中直接调用</li>\n<li>父组件中由<code>@remove_message=&quot;removeInVM&quot;</code>绑定vm中的方法，完成vm中元素的删除</li>\n</ol>\n<p><strong>组件之间和vm之间的方法都不能互相调用，而视图层可以与这些对象进行双向绑定，从而达到传输信息的目的</strong></p>\n<h1 id=\"Vue-cli\"><a href=\"#Vue-cli\" class=\"headerlink\" title=\"Vue-cli\"></a>Vue-cli</h1><h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>需要Nodejs的支持，Nodejs自带npm包管理器，笔者使用npm安装失败，故使用cnpm安装Vue-cli包<code>cnpm install vue-cli -g</code></p>\n<ul>\n<li><code>vue init webpack vue_project</code>初始化vue项目（vueProject为自定义项目名称，不能包含大写）</li>\n<li><code>npm install vue-router --save-dev</code>安装vue-router</li>\n<li><code>npm i element-ui -S</code>安装ElementUI依赖</li>\n<li><code>npm install</code>安装<code>package.json</code>文件所指定的依赖包</li>\n<li><code>cnpm install sass-loader node-sass --save-dev</code>安装SASS加载器<strong>7.3.1版本</strong></li>\n<li><code>npm run dev</code>运行开发环境，之后即可在对应端口(默认8080)上看到前端工程项目</li>\n</ul>\n<p><strong>npm相关命令介绍</strong></p>\n<ul>\n<li><code>npm install moduleName -g</code>全局安装，位置为<code>npm config prefix</code>位置</li>\n<li><code>npm install moduleName --save</code> 将模块安装到项目目录下并在<code>package.json</code>文件中写入依赖，缩写为<code>-S</code></li>\n<li><code>npm install moduleName --save-dev</code> 将模块安装到项目目录下并在<code>package.json</code>文件中的devDependencies下写入依赖，缩写为<code>-D</code></li>\n</ul>\n<h2 id=\"Webpack入门\"><a href=\"#Webpack入门\" class=\"headerlink\" title=\"Webpack入门\"></a>Webpack入门</h2><p>安装</p>\n<ul>\n<li><code>npm install webpack -g</code></li>\n<li><code>npm install webpack-cli -g</code></li>\n</ul>\n<p>文件结构</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210715133119427.png\" alt=\"image-20210715133119427\"></p>\n<p><code>hello.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exports</span>.sayHi = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;h1&gt;Hello Webpack!&lt;/h1&gt;&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>main.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./hello&quot;</span>)</span><br><span class=\"line\">hello.sayHi()</span><br></pre></td></tr></table></figure>\n\n<p><code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">&quot;./module/main.js&quot;</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">&quot;./js/bundle.js&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mode: <span class=\"string\">&#x27;development&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>webpack</code>单次部署</li>\n<li><code>webpack --watch</code>热部署，每次更新js后自动重新打包</li>\n</ul>\n<p>部署之后得到集成的js文件，可以在静态代码中直接引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;dist/js/bundle.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue-Router\"><a href=\"#Vue-Router\" class=\"headerlink\" title=\"Vue-Router\"></a>Vue-Router</h2><p>安装（保存在生产配置文件中）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install vue-router --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>显式导入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./vue-router&#x27;</span></span><br><span class=\"line\">Vue.use(VueRouter);</span><br></pre></td></tr></table></figure>\n\n<p>src下新建router路径，并在其中新建Router配置文件<code>index.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../components/Content&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">&quot;../components/HelloWorld&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> NotFound <span class=\"keyword\">from</span> <span class=\"string\">&quot;../components/error/404&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"comment\">//路由模式hash带#号</span></span><br><span class=\"line\">  <span class=\"comment\">//history不带#号,默认为hash</span></span><br><span class=\"line\">  mode: <span class=\"string\">&#x27;hash&#x27;</span>,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">&#x27;/content&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">//name可以省略</span></span><br><span class=\"line\">      name: <span class=\"string\">&#x27;content&#x27;</span>,</span><br><span class=\"line\">      <span class=\"comment\">//实际应用中直接由路径找到组件，不需要name指引</span></span><br><span class=\"line\">      component: Component</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">&#x27;/main&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;main&#x27;</span>,</span><br><span class=\"line\">      component: HelloWorld</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//错误页面，与上面均不匹配的直接跳转错误页面</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">&#x27;*&#x27;</span>,</span><br><span class=\"line\">      component: NotFound</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>main.js</code>中导入router配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//自动扫描文件夹下的默认配置</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">//直接引入</span></span><br><span class=\"line\">  router,</span><br><span class=\"line\">  components: &#123; App &#125;,</span><br><span class=\"line\">  template: <span class=\"string\">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>template中引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;&lt;br&gt;</span><br><span class=\"line\">    &lt;!--跳转链接部分--&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;main&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">    &lt;router-link to&#x3D;&quot;&#x2F;content&quot;&gt;内容页&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">    &lt;!--视图展示部分--&gt;</span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#39;App&#39;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ElementUI\"><a href=\"#ElementUI\" class=\"headerlink\" title=\"ElementUI\"></a>ElementUI</h2><p>需要sass-loader7.3.1支持</p>\n<ul>\n<li><code>npm i element-ui -S</code></li>\n</ul>\n<p><code>main.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ElementUI <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-ui&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(router);</span><br><span class=\"line\">Vue.use(ElementUI);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* eslint-disable no-new */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)<span class=\"comment\">//ElementUI配置</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h2><p><code>index.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Component <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../components/Content&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../components/HelloWorld&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UserList <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../views/user/List&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UserProfile <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../views/user/Profile&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">&#x27;/content&#x27;</span>,</span><br><span class=\"line\">      component: Component</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">&#x27;/main&#x27;</span>,</span><br><span class=\"line\">      component: HelloWorld,</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/user/list&#x27;</span>, <span class=\"attr\">component</span>: UserList&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/user/profile&#x27;</span>, <span class=\"attr\">component</span>: UserProfile&#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>子路由只能在其对应的父组件下才能够正常跳转</p>\n<h2 id=\"vue-axios\"><a href=\"#vue-axios\" class=\"headerlink\" title=\"vue-axios\"></a>vue-axios</h2><ul>\n<li><code>npm install vue-axios -S</code></li>\n</ul>\n<p>导入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> VueAxios <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-axios&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueAxios,axios);</span><br></pre></td></tr></table></figure>\n\n","categories":["web前端"]},{"title":"JQuery基础","url":"/2020/10/05/web%E5%89%8D%E7%AB%AF/JQuery/","content":"<h2 id=\"JQuery基本语法\"><a href=\"#JQuery基本语法\" class=\"headerlink\" title=\"JQuery基本语法\"></a>JQuery基本语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(选择器).action(；</span><br></pre></td></tr></table></figure>\n\n<p>对选择器进行action操作</p>\n<p>选择器以”标签”或直接指定对象</p>\n<h2 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h2><p>绑定<code>bind(事件,函数);</code></p>\n<p>解绑所有函数<code>unbind(事件);</code></p>\n<p>解绑单一函数<code>unbind(事件,函数)</code></p>\n<a id=\"more\"></a>\n\n<h5 id=\"JQ1-7之后可用on-off代替bind-unbind\"><a href=\"#JQ1-7之后可用on-off代替bind-unbind\" class=\"headerlink\" title=\"JQ1.7之后可用on off代替bind unbind\"></a>JQ1.7之后可用<code>on off</code>代替<code>bind unbind</code></h5><h2 id=\"捕获\"><a href=\"#捕获\" class=\"headerlink\" title=\"捕获\"></a>捕获</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$().text()\t\t\t\t获得文本</span><br><span class=\"line\">$().html()\t\t\t\t获得html内容</span><br><span class=\"line\">$().val() \t\t\t\t获得值</span><br></pre></td></tr></table></figure>\n\n<p>第二个括号内可更改捕获</p>\n<h2 id=\"元素操作\"><a href=\"#元素操作\" class=\"headerlink\" title=\"元素操作\"></a>元素操作</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">append()\t\t\t\t后添加</span><br><span class=\"line\">prepend()\t\t\t\t前添加</span><br><span class=\"line\">before()\t\t\t\t前添加（换行）</span><br><span class=\"line\">after()\t\t\t\t\t后添加（换行）</span><br><span class=\"line\">remove()\t\t\t\t移除(全部)</span><br><span class=\"line\">empty()\t\t\t\t\t清空(子内容)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CSS方法\"><a href=\"#CSS方法\" class=\"headerlink\" title=\"CSS方法\"></a>CSS方法</h2><p><code>$(选择器).css(&quot;样式&quot;,&quot;值&quot;);</code>更改css样式（单属性）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(选择器).css(&#123;</span><br><span class=\"line\">\twidth:val1,height:val2,background:val3</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">addclass()\t\t\t\t添加css样式</span><br><span class=\"line\">removeclass()\t\t\t移除css样式</span><br><span class=\"line\">toggleclass()\t\t\t切换</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JQ扩展\"><a href=\"#JQ扩展\" class=\"headerlink\" title=\"JQ扩展\"></a>JQ扩展</h2><p>1.<code>$.name = function()&#123;&#125;</code>在其他js文件中引用<code>$.name</code>(不常用)</p>\n<p>2.<code>$.fn.name = function()&#123;&#125;</code>引用<code>$().name()</code></p>\n<h2 id=\"noConflict\"><a href=\"#noConflict\" class=\"headerlink\" title=\"noConflict\"></a>noConflict</h2><p>用来防止其他扩展$符号冲突</p>\n<p><code>var name = $.noConflict();</code>用name代替默认的jQuery</p>\n<p>之后可用name代替美元符号</p>\n<h2 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h2><p>异步请求</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">   url:<span class=\"string\">&quot;https://restapi.amap.com/v3/weather/weatherInfo?parameters&quot;</span>,</span><br><span class=\"line\">    type:<span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">    success:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data,status</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//具体内容</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(status);</span><br><span class=\"line\">        alert();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>或直接<code>$.get(&quot;url&quot;,data,fuction)</code>和<code>$.post(&quot;url&quot;,data,function)</code></p>\n","categories":["web前端"]},{"title":"HTML5总结","url":"/2020/09/03/web%E5%89%8D%E7%AB%AF/html5/","content":"<h2 id=\"HTML概念\"><a href=\"#HTML概念\" class=\"headerlink\" title=\"HTML概念\"></a>HTML概念</h2><p>静态网页</p>\n<a id=\"more\"></a>\n\n<h2 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接\"></a>超链接</h2><p>指向另一个地址<code>&lt;a href=&quot;地址&quot; traget=&quot;&quot;&gt;名称&lt;/a&gt;</code>地址<code>#</code>可以跳转自身</p>\n<table>\n<thead>\n<tr>\n<th>target</th>\n<th>内涵</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>_blank</code></td>\n<td>另开页面</td>\n</tr>\n<tr>\n<td><code>_self</code></td>\n<td>自身页面</td>\n</tr>\n<tr>\n<td><code>_parent</code></td>\n<td>上级页面</td>\n</tr>\n<tr>\n<td><code>_top</code></td>\n<td>顶级页面</td>\n</tr>\n</tbody></table>\n<p>创建文档内链接<code>&lt;a name=&quot;tips&quot;&gt;&lt;/a&gt;</code><br>另一个超链接可以跳转至该位置<br><code>&lt;a href=&quot;#tips&quot;&gt;跳转&lt;/a&gt;</code></p>\n<p>图片<code>&lt;img src=&quot;图片地址&quot;&gt;</code></p>\n<h2 id=\"三种样式表插入方法\"><a href=\"#三种样式表插入方法\" class=\"headerlink\" title=\"三种样式表插入方法\"></a>三种样式表插入方法</h2><p><strong>外部样式表</strong>:</p>\n<p>其他文件中插入</p>\n<p><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=“mystyle.css&quot;&gt;</code><br><strong>内部样式表</strong>:</p>\n<p>head中插入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">“text/css</span>&quot;&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">body</span> &#123;<span class=\"attribute\">background-color</span>: red&#125;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">p</span> &#123;<span class=\"attribute\">margin-left</span>: <span class=\"number\">20px</span>&#125;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>内联样式表</strong>:</p>\n<p>body中插入</p>\n<p><code>&lt;p style=&quot;color: red&gt;</code></p>\n<h2 id=\"表格-amp-列表\"><a href=\"#表格-amp-列表\" class=\"headerlink\" title=\"表格&amp;列表\"></a>表格&amp;列表</h2><table>\n<thead>\n<tr>\n<th>标签</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&lt;table&gt; </code></td>\n<td>定义表格</td>\n</tr>\n<tr>\n<td><code>&lt;caption&gt; </code></td>\n<td>定义表格标题</td>\n</tr>\n<tr>\n<td><code>&lt;th&gt;</code></td>\n<td>定义表格的表头</td>\n</tr>\n<tr>\n<td><code>&lt;tr&gt;</code></td>\n<td>定义表格的行</td>\n</tr>\n<tr>\n<td><code>&lt;td&gt;</code></td>\n<td>定义表格的单元</td>\n</tr>\n<tr>\n<td><code>&lt;thead&gt;</code></td>\n<td>定义表格的页眉</td>\n</tr>\n<tr>\n<td><code>&lt;tbody&gt;</code></td>\n<td>定义表格的主体</td>\n</tr>\n<tr>\n<td><code>&lt;tfoot&gt;</code></td>\n<td>定义表格的页脚</td>\n</tr>\n<tr>\n<td><code>&lt;Col&gt;</code></td>\n<td>定义表格的列属性</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&lt;ol&gt;</code></td>\n<td>有序列表</td>\n</tr>\n<tr>\n<td><code>&lt;ul&gt;</code></td>\n<td>无序列表</td>\n</tr>\n<tr>\n<td><code>&lt;li&gt;</code></td>\n<td>列表项</td>\n</tr>\n<tr>\n<td><code>&lt;dl&gt;</code></td>\n<td>列表</td>\n</tr>\n<tr>\n<td><code>&lt;dt&gt;</code></td>\n<td>列表项</td>\n</tr>\n<tr>\n<td><code>&lt;dd&gt;</code></td>\n<td>描述</td>\n</tr>\n</tbody></table>\n<h2 id=\"HTML块\"><a href=\"#HTML块\" class=\"headerlink\" title=\"HTML块\"></a>HTML块</h2><p>1、HTML块元素<br>块元素在显示时，通常会以新行开始<br>如: <code>&lt;h1&gt;、&lt;p&gt;、&lt;ul&gt;</code><br>2、HTML内联元素<br>内联元素通常不会以新行开始<br>如:<code>&lt;b&gt;、&lt;a&gt;、&lt;img&gt;</code><br>3、HTML<code>&lt;div&gt;</code>元素</p>\n<p><code>&lt;div&gt;</code>元素也被称为块元素，其主要是组合HTML元素的容器，内部元素自动换行</p>\n<p>4、HTML<code>&lt;span&gt;</code>元素<br><span>`元素是内联元素，可作为文本的容器，内部元素只在一行显示</p>\n<h2 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h2><p><strong>div布局</strong>(单元前<code>#div</code>可删除)</p>\n<p>在head中插入 实例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#div</span> <span class=\"selector-tag\">body</span>&#123;</span></span><br><span class=\"line\">        margin: 0px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #div container&#123;.</span><br><span class=\"line\">        width: 100%</span><br><span class=\"line\">        height: 950px;</span><br><span class=\"line\">        background-color: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#div</span> <span class=\"selector-tag\">heading</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:100</span>%;</span></span><br><span class=\"line\">        height: 10%;</span><br><span class=\"line\">        background-color: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#div</span> <span class=\"selector-tag\">menu</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:30</span>%;</span></span><br><span class=\"line\">        height: 90%;</span><br><span class=\"line\">        background-color: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#div</span> <span class=\"selector-tag\">body</span>&#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:70</span>%;</span></span><br><span class=\"line\">        height: 90%;</span><br><span class=\"line\">        background-color: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>table布局</strong></p>\n<p>在body中插入 实例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100%&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;950px&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color: darkgray&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">colspan</span>=<span class=\"string\">&quot;2&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100%&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;10%&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color: aqua&quot;</span>&gt;</span>头部<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;30%&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;90%&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color: blue&quot;</span>&gt;</span>左菜单<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;70%&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;90%&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color: blue&quot;</span>&gt;</span>主体<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h2><p>使用实例</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    用户名;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&quot;&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    密码;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    你喜欢的水果有?</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    苹果<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span></span><br><span class=\"line\">    西红柿<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span></span><br><span class=\"line\">    香蕉<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    请选择您的性别;</span><br><span class=\"line\">    男<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span>&gt;</span></span><br><span class=\"line\">    女<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sex&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>网址1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>网址1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>网址3<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;内容&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">cols</span>=<span class=\"string\">&quot;30&quot;</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;30&quot;</span>&gt;</span>默认信息<span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>按钮可直接在表单外用<code>&lt;button onclick=&quot;&quot;&gt;&lt;/button&gt;</code>引用</p>\n<h2 id=\"表单与PHP交互\"><a href=\"#表单与PHP交互\" class=\"headerlink\" title=\"表单与PHP交互\"></a>表单与PHP交互</h2><p>PHP环境搭建暂略</p>\n<h5 id=\"method\"><a href=\"#method\" class=\"headerlink\" title=\"method:\"></a><strong>method</strong>:</h5><p>get会将表单内容与地址结合</p>\n<p>post则不会且更安全</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;php地址&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">    表单</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"框架与背景\"><a href=\"#框架与背景\" class=\"headerlink\" title=\"框架与背景\"></a>框架与背景</h2><p>常用框架<code>&lt;iframe&gt;</code></p>\n<p>背景图片:<code>&lt;background&gt;</code></p>\n<p>背景颜色:<code>&lt;bgcolor&gt;</code></p>\n<h3 id=\"字符转实体\"><a href=\"#字符转实体\" class=\"headerlink\" title=\"字符转实体\"></a>字符转实体</h3><p>有些字符无法直接显示在网页上，如<code>&lt; &gt; &amp;</code>等</p>\n<p>当需要特定字符时上网搜索</p>\n<h2 id=\"XHTML书写规范\"><a href=\"#XHTML书写规范\" class=\"headerlink\" title=\"XHTML书写规范\"></a>XHTML书写规范</h2><ol>\n<li>元素语法<ul>\n<li>正确嵌套</li>\n<li>始终关闭</li>\n<li>必须小写</li>\n<li>文档必须有根元素</li>\n</ul>\n</li>\n<li>属性语法<ul>\n<li>必须小写</li>\n<li>必须引号包围</li>\n<li>禁止最小化</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"插入多媒体\"><a href=\"#插入多媒体\" class=\"headerlink\" title=\"插入多媒体\"></a>插入多媒体</h2><ol>\n<li><p>audio播放音频格式：mp3 ogg wav</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">src:文件路径</span><br><span class=\"line\">autoplay:自动播放</span><br><span class=\"line\">loop:循环</span><br><span class=\"line\">controls:控制条</span><br><span class=\"line\">muted:静音</span><br><span class=\"line\">preload:预加载（不能与autoplay共用）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>video播放视频格式：mpa ogg webm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">部分属性同音频</span><br><span class=\"line\">width&#x2F;height:宽高</span><br><span class=\"line\">poster:海报（播放之前）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>embed嵌入内容加载插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">部分属性同视频</span><br><span class=\"line\">type:类型</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"引入其他的Html\"><a href=\"#引入其他的Html\" class=\"headerlink\" title=\"引入其他的Html\"></a>引入其他的Html</h2><p>需要JQuery依赖</p>\n<ul>\n<li><p>如果是springboot项目，需要提前配好Controller映射，否则是不能直接访问到template下的html资源的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/html&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HtmlController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/head.html&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">head</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;html/particle/head&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/foot.html&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foot</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;html/particle/foot&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/layout.html&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">layout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;html/particle/layout&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/side.html&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">side</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;html/particle/side&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>html代码:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 头部 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;head&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 底部 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;foot&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 侧边导航 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;side&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引用公共资源 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"string\">&quot;#foot&quot;</span>).load(<span class=\"string\">&quot;/html/foot.html&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"string\">&quot;#head&quot;</span>).load(<span class=\"string\">&quot;/html/head.html&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"string\">&quot;#side&quot;</span>).load(<span class=\"string\">&quot;/html/side.html&quot;</span>);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n","categories":["web前端"]},{"title":"Javascript总结","url":"/2020/09/06/web%E5%89%8D%E7%AB%AF/javascript/","content":"<h2 id=\"JS基础s\"><a href=\"#JS基础s\" class=\"headerlink\" title=\"JS基础s\"></a>JS基础s</h2><p>引入js文件<code>&lt;script src=&quot;地址&quot;&gt;&lt;/script&gt;</code></p>\n<p>输出<code>document.write(&quot;&lt;h1&gt;内容&lt;/h1&gt;&quot;)</code></p>\n<p>改变html中内容<code>document.getElementById(&quot;ID&quot;).innerHTML=&quot;新内容&quot;</code></p>\n<a id=\"more\"></a>\n\n<h5 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h5><p>单行注释<code>//注释</code></p>\n<p>多行注释<code>/*注释*/</code></p>\n<h5 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h5><p>通过<code>var</code>声明各种类型</p>\n<p>数组声明<code>var arr=[1,2,3,4];</code></p>\n<p>动态数组<code>var arr=new Array();</code></p>\n<p>不加前缀直接声明全局变量<code>m = 1</code></p>\n<p>严格作用域用<code>let</code></p>\n<p>可以通过赋值为空的方法清除变量<code>a=null</code></p>\n<h5 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h5><p>字符串拼接可直接用<code>+</code></p>\n<p>任何类型与字符串作运算会被强制转换成字符串类型</p>\n<p>比较运算符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x3D;&#x3D;\t\t\t\t\t\t双等（其他类型与字符串比较会自动转换）</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;\t\t\t\t\t\t三等（完全判等）</span><br><span class=\"line\">!&#x3D;\t\t\t\t\t\t不等（同双等）</span><br><span class=\"line\">!&#x3D;&#x3D;\t\t\t\t\t\t不等（同三等）</span><br></pre></td></tr></table></figure>\n\n<p>另外还有&lt; &gt; &lt;= &gt;=比较运算符</p>\n<h5 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h5><p><code>if else,switch,for,while,do while</code>同C语言</p>\n<p><code>for(j in i)</code>结构将j遍历i[]中的所有元素</p>\n<p>跳转语句同C语言</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">常用函数</span><br><span class=\"line\">alert()\t\t\t\t\t弹出对话框</span><br><span class=\"line\">console.log()\t\t\t在html命令行显示</span><br></pre></td></tr></table></figure>\n\n<p><strong>定义函数</strong><code>function 函数名()&#123;函数体&#125;</code></p>\n<p>函数可以在<code>&lt;script&gt;</code>标签中使用或在HTML文件中使用</p>\n<p>函数加<code>this</code>指向本元素,如</p>\n<p><code>&lt;div onmouseout=&quot;function(this)&quot;&gt;&lt;/div&gt;</code>this指向本<code>div</code></p>\n<p>函数可用<code>arguments.calle(n-1)</code>递归调用自身函数</p>\n<h5 id=\"异常捕获\"><a href=\"#异常捕获\" class=\"headerlink\" title=\"异常捕获\"></a>异常捕获</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t异常代码块</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(err)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//错误信息处理</span></span><br><span class=\"line\">\talert(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">onClick\t\t\t\t    单击事件</span><br><span class=\"line\">onMouseOver\t\t\t\t鼠标经过事件</span><br><span class=\"line\">onMouseOut\t\t\t\t鼠标移出事件</span><br><span class=\"line\">onChange\t\t\t\t文本内容改变事件</span><br><span class=\"line\">onSelect\t\t\t\t文本框选中事件</span><br><span class=\"line\">onFocus\t\t\t\t\t光标聚集事件</span><br><span class=\"line\">onBlur\t\t\t\t\t移开光标事件</span><br><span class=\"line\">onLoad\t\t\t\t\t网页加载事件</span><br><span class=\"line\">onUnload\t\t\t\t关闭网页事件</span><br></pre></td></tr></table></figure>\n\n<p><code>onload onunload</code>在<code>body</code>中调用</p>\n<h2 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h2><h5 id=\"DOM操作HTML\"><a href=\"#DOM操作HTML\" class=\"headerlink\" title=\"DOM操作HTML\"></a>DOM操作HTML</h5><ol>\n<li><p>改变HTML输出流</p>\n<p>不要再文档加载完成后再使用<code>document.write()</code>会覆盖文档</p>\n</li>\n<li><p>寻找元素</p>\n<p>通过id(ById)或标签名(ByTagName)找到HTML元素</p>\n<p>ByTagName和ByName寻找到的多个元素会通过数组存储</p>\n</li>\n<li><p>改变HTML内容</p>\n<p>属性<code>innerHTML</code></p>\n</li>\n<li><p>得到HTML属性</p>\n<p><code>getAttribute(&quot;&quot;)</code></p>\n</li>\n<li><p>改变HTML属性</p>\n<p><code>setAttribute(&quot;属性&quot;,&quot;值&quot;)</code></p>\n</li>\n<li><p>其他方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">childNodes()\t\t\t\t访问子节点</span><br><span class=\"line\">parentNode()\t\t\t\t访问父节点</span><br><span class=\"line\">createElement()\t\t\t\t创建元素节点</span><br><span class=\"line\">createTextNode\t\t\t\t创建文本节点</span><br><span class=\"line\">insertBefore(,)\t\t\t\t插入节点（选择位置）</span><br><span class=\"line\">appendChild()\t\t\t\t添加节点（末尾）</span><br><span class=\"line\">removeChild()\t\t\t\t删除节点</span><br><span class=\"line\">offsetHeight\t\t\t\t网页尺寸（不包含滚动条）</span><br><span class=\"line\">scrollHeight\t\t\t\t网页尺寸（包含滚动条）</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h5 id=\"DOM-EventListener-句柄\"><a href=\"#DOM-EventListener-句柄\" class=\"headerlink\" title=\"DOM EventListener(句柄)\"></a>DOM EventListener(句柄)</h5><p><code>addEventListener(&quot;事件&quot;，函数)</code>: 添加句柄</p>\n<p><code>removeEventListener(&quot;事件&quot;，函数)</code>:移除句柄</p>\n<h2 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h2><p>描述页面中接受事件的顺序</p>\n<p>事件冒泡：由最具体的元素（最内层）接受，然后逐级向上传播至最不具体的结点（最外层）</p>\n<p>事件捕获：最不具体的结点（最外层）先接收事件，最具体的结点（最内层）最后接收事件</p>\n<h5 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h5><ol>\n<li><p>HTML事件处理：直接添加到HTML结构中</p>\n</li>\n<li><p>DOM0级事件处理：把一个函数赋值给一个事件处理程序</p>\n</li>\n<li><p>DOM2级事件处理</p>\n<p>addEventListener(“事件名”,事件处理函数，布尔值（可略）)；</p>\n<p>removeEventListener();</p>\n<p>true:事件捕获 false:事件冒泡</p>\n</li>\n<li><p>IE事件处理</p>\n<p>attachment(“事件名”,事件处理函数，布尔值（可略）)；</p>\n<p>detachment();</p>\n</li>\n</ol>\n<h5 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h5><p>在触发DOM事件时会产生一个对象</p>\n<p>DOM事件发生属于事件冒泡</p>\n<p>事件对象event:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">type\t\t\t\t\t获取事件类型</span><br><span class=\"line\">target\t\t\t\t\t获取事件目标</span><br><span class=\"line\">stopPropagation()\t\t 阻止事件冒泡</span><br><span class=\"line\">preventDefault()\t\t 组织事件默认行为</span><br></pre></td></tr></table></figure>\n\n<p>实例</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;btn1&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span> , showType)；\t\t\t\t\t\t\t\t\t\t\t                     <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;div&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>,showDiv);</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;aid&quot;</span> ).addEventListener(<span class=\"string\">&quot;click&quot;</span>,showA);</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showType</span>(<span class=\"params\">event</span>)</span>&#123;</span></span><br><span class=\"line\">\t\talert(event.type);</span><br><span class=\"line\">\t\talert(event.target);</span><br><span class=\"line\"><span class=\"javascript\">\t\tevent.stopPropagation();<span class=\"comment\">//阻止事件冒泡</span></span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showDiv</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\talert( <span class=\"string\">&quot;div&quot;</span> );</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showA</span>(<span class=\"params\">event</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\tevent.stopropaaation():<span class=\"comment\">//阻止事件冒泡</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\tevent.preventDefault();<span class=\"comment\">//阻止本事件发生</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JS内置对象\"><a href=\"#JS内置对象\" class=\"headerlink\" title=\"JS内置对象\"></a>JS内置对象</h2><h5 id=\"自定义对象\"><a href=\"#自定义对象\" class=\"headerlink\" title=\"自定义对象\"></a>自定义对象</h5><p>定义并创建对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">people = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">people.name = <span class=\"string\">&quot;&quot;</span>; people.age = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">或people = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;&quot;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&quot;&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>使用函数来定义对象，然后创建新的对象实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">people</span>(<span class=\"params\">name, age</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.name = ;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.age = ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">son = <span class=\"keyword\">new</span> people(<span class=\"string\">&quot;&quot;</span>,);</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"字符串对象\"><a href=\"#字符串对象\" class=\"headerlink\" title=\"字符串对象\"></a>字符串对象</h5><p>字符串位置：<code>indexOf(&quot;&quot;)</code>存在返回所在位置，不存在返回-1</p>\n<p>匹配字符串：<code>match(&quot;&quot;)</code>存在打印字符串，不存在返回null</p>\n<p>替换字符串：<code>replace(&quot;&quot;,&quot;新字符串&quot;)</code></p>\n<p>大小写转换：<code>toUpperCase()/toLowerCase()</code>全部转大/小写</p>\n<p>字符串转数组：<code>split(&quot;,&quot;)</code>通过<code>,</code>分割数组</p>\n<h5 id=\"Date日期对象\"><a href=\"#Date日期对象\" class=\"headerlink\" title=\"Date日期对象\"></a>Date日期对象</h5><p>当日日期<code>var date = new Date();</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">获取具体信息</span><br><span class=\"line\">getFullYear()\t\t\t\t获取年份</span><br><span class=\"line\">getTime()\t\t\t\t\t获取毫秒</span><br><span class=\"line\">setFullYear(y,m,d)\t\t\t 设置事件</span><br><span class=\"line\">getDay()\t\t\t\t\t获取星期</span><br><span class=\"line\">toLocaleDateString()\t\t获取标准日期格式</span><br><span class=\"line\">toLocaleTimeString()\t\t获取标准时间格式</span><br></pre></td></tr></table></figure>\n\n<p>时钟实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startTime</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> today = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> h = today.getHours();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m = today.getMinutes();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = today.getSeconds();</span><br><span class=\"line\">\tm= checkTime(m);<span class=\"comment\">//对齐格式</span></span><br><span class=\"line\">\ts = checkTime(s);</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;timetxt&quot;</span>).innerHTML = h+<span class=\"string\">&quot;:&quot;</span>+m+<span class=\"string\">&quot;:&quot;</span>+s;</span><br><span class=\"line\">\tt= <span class=\"built_in\">setTimeout</span>( <span class=\"function\"><span class=\"keyword\">function</span></span>&#123;</span><br><span class=\"line\">\t\tstartTime();</span><br><span class=\"line\">\t&#125;,<span class=\"number\">1000</span>);<span class=\"comment\">//setTimeout函数将startTime函数1000毫秒调用一次</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkTime</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">\t\ti = “<span class=\"number\">0</span><span class=\"string\">&quot;&quot;</span>+i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;timetxt&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数组对象\"><a href=\"#数组对象\" class=\"headerlink\" title=\"数组对象\"></a>数组对象</h5><p>两数组a,b</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">a.concat(b)\t\t\t\t\t合并数组</span><br><span class=\"line\">a.sort()\t\t\t\t\t排序</span><br><span class=\"line\">a.push(&quot;&quot;)\t\t\t\t\t末尾追加元素</span><br><span class=\"line\">a.reverse()\t\t\t\t\t数组元素反转</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Math对象\"><a href=\"#Math对象\" class=\"headerlink\" title=\"Math对象\"></a>Math对象</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">round()\t\t\t\t\t\t四舍五入</span><br><span class=\"line\">random()\t\t\t\t\t返回0~1之间随机数</span><br><span class=\"line\">max()\t\t\t\t\t\t返回最高值</span><br><span class=\"line\">min()\t\t\t\t\t\t返回最低值</span><br><span class=\"line\">abs()\t\t\t\t\t\t返回绝对值</span><br></pre></td></tr></table></figure>\n\n<p><code>parseInt()</code>可以将数据转为int类型</p>\n<h2 id=\"JS浏览器对象\"><a href=\"#JS浏览器对象\" class=\"headerlink\" title=\"JS浏览器对象\"></a>JS浏览器对象</h2><h5 id=\"window对象\"><a href=\"#window对象\" class=\"headerlink\" title=\"window对象\"></a>window对象</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">window.innerHeight\t\t\t\t\t窗口内部高度</span><br><span class=\"line\">window.innerWidth\t\t\t\t\t窗口内部宽度</span><br><span class=\"line\">window.open(&quot;地址&quot;,&quot;名称&quot;,其他属性)\t\t打开新窗口</span><br><span class=\"line\">window.close()\t\t\t\t\t\t关闭当前窗口</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"计时器\"><a href=\"#计时器\" class=\"headerlink\" title=\"计时器\"></a>计时器</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">setInterval()\t\t\t\t间隔指定毫秒数不停执行指定代码</span><br><span class=\"line\">clearInterval()\t\t\t\t清除上述代码</span><br><span class=\"line\">setTimeout()\t\t\t\t暂停指定毫秒数后执行指定代码</span><br><span class=\"line\">clearTimeout()\t\t\t\t停止上述代码</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"History对象\"><a href=\"#History对象\" class=\"headerlink\" title=\"History对象\"></a>History对象</h5><p><code>history.go()</code>括号里填1或-1等表示前进或后退页面</p>\n<h5 id=\"Screen对象\"><a href=\"#Screen对象\" class=\"headerlink\" title=\"Screen对象\"></a>Screen对象</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">screen.availWidth\t\t\t可用宽度（除边框）</span><br><span class=\"line\">screen.availHeight\t\t\t可用高度（除边框）</span><br><span class=\"line\">screen.height\t\t\t    屏幕高度</span><br><span class=\"line\">screen.width\t\t\t    屏幕宽度</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"暂时完结\"><a href=\"#暂时完结\" class=\"headerlink\" title=\"暂时完结\"></a>暂时完结</h3>","categories":["web前端"]},{"title":"Nginx基础","url":"/2021/09/27/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Nginx/","content":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p>Nginx(engine x)是一个高性能的HTTP和反向代理Web服务器，占有内存少，并发处理能力强</p>\n<p>Nginx默认端口号80，即Http协议默认的端口号，因此在访问nginx服务器时不需要再手动指定端口号</p>\n<h2 id=\"Nginx的用途\"><a href=\"#Nginx的用途\" class=\"headerlink\" title=\"Nginx的用途\"></a>Nginx的用途</h2><ul>\n<li><p><strong>反向代理</strong></p>\n<ul>\n<li>正向代理：代理服务器为客户端提供服务，代替客户端访问服务器，返回数据给客户端</li>\n<li>反向代理：代理服务器为服务器提供服务，客户端发送数据后由代理服务器选择目标服务器进行数据传输，暴露代理服务器地址，隐藏了真实的服务器地址</li>\n</ul>\n</li>\n<li><p><strong>负载均衡</strong></p>\n<p>在高并发的情景中，单个服务器可能不能满足处理业务的需要，这时通过增加服务器数量和配置反向代理服务器，用户直接访问反向代理服务器，由反向代理服务器根据实际情况将请求分发到多个服务器上，以减小服务器压力</p>\n</li>\n<li><p><strong>动静分离</strong></p>\n<p>为了加快网站的解析速度，将静态页面和动态页面分别由不同的服务器进行解析，降低单个服务器的压力</p>\n</li>\n</ul>\n<h2 id=\"负载均衡的策略\"><a href=\"#负载均衡的策略\" class=\"headerlink\" title=\"负载均衡的策略\"></a>负载均衡的策略</h2><ol>\n<li>轮询：每个请求按照时间顺序分配到不同的服务器</li>\n<li>权重：权重weight默认为1，根据权重产生不同比例的请求分配给各服务器</li>\n<li>ip_hash：用户之间采用分配模式，单用户一旦访问服务器成功之后就只能访问这一台确定的服务器。可以解决Session问题</li>\n<li>fair：根据后端服务器的响应时间来分配请求，响应时间短的优先分配</li>\n</ol>\n<h2 id=\"Nginx工作方式\"><a href=\"#Nginx工作方式\" class=\"headerlink\" title=\"Nginx工作方式\"></a>Nginx工作方式</h2><p>通过查看进程可以看到，除了第三个ps进程，nginx进程分为master和worker两类进程</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927172115657.png\" alt=\"image-20210927172115657\"></p>\n<p>工作结构：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927172231739.png\" alt=\"image-20210927172231739\"></p>\n<ul>\n<li>master负责管理和监控worker</li>\n<li>当新的请求来到，所有worker会争抢去处理请求</li>\n</ul>\n<p>一个master和多个worker的优点：</p>\n<ul>\n<li><p>可以使用<code>nginx -s reload</code>热部署</p>\n<p>热部署时正在处理请求的worker继续工作，空闲的worker开始适配新规则，当worker处理完请求后再适配新规则</p>\n</li>\n<li><p>每个worker是独立的进程，当某一worker出现问题，其他worker仍然可以继续工作</p>\n</li>\n</ul>\n<p>设置worker数量：一般worker数目和服务器的cpu核数相当最佳</p>\n<p><strong>worker工作占用的连接数</strong></p>\n<ul>\n<li><p>如果访问本地的静态资源</p>\n<p>接收用户请求和返回数据共2个连接</p>\n</li>\n<li><p>如果请求远程服务器</p>\n<p>接受用户请求和返回数据，给服务器发送请求和获取数据，共4个连接</p>\n</li>\n</ul>\n<p><strong>如果共有4个worker，每个worker最大连接数为1024，支持的最大/最小并发数为？</strong></p>\n<p>根据上面的结论，最大并发数为所有用户都访问静态资源，即1024*4/2=2048</p>\n<p>最小连接数为所有用户都访问远程服务器，nginx服务器作为反向代理，即1024*4/4=1024</p>\n<h1 id=\"开始Nginx\"><a href=\"#开始Nginx\" class=\"headerlink\" title=\"开始Nginx\"></a>开始Nginx</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>需要的依赖：</p>\n<ul>\n<li>pcre</li>\n<li>openssl</li>\n<li>zlib</li>\n</ul>\n<p>为了方便安装，这里使用docker进行示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --name nginx -p 80:80 -v /root/conf/nginxconf:/etc/nginx/outside-conf -d nginx:1.20.1</span><br></pre></td></tr></table></figure>\n\n<p><strong>这里我们在容器内部的配置文件同级目录下创建了一个挂载的目录，如果我们需要修改内部文件，就在这个挂载的目录中修改</strong></p>\n<p>这时访问服务器的80端口就能够看到nginx的欢迎页了</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p>不适用docker使用命令之前需要先进入<code>/usr/local/nginx/sbin</code>路径使用<code>./nginx</code>执行命令</p>\n<p>如果使用docker环境变量已经自动配好</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx -v <span class=\"comment\">#查看版本</span></span><br><span class=\"line\">nginx -s stop <span class=\"comment\">#快速停止nginx</span></span><br><span class=\"line\">nginx -s quit <span class=\"comment\">#正常停止</span></span><br><span class=\"line\">./nginx <span class=\"comment\">#启动nginx，因为关闭nginx之后指令就不能使用了，因此还是需要进入目录执行命令</span></span><br><span class=\"line\">nginx -s reload <span class=\"comment\">#重新加载</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>docker中的路径为<code>/etc/nginx</code></p>\n<p>这里的配置文件分为三部分</p>\n<ul>\n<li>全局块：配置整体运行的指令</li>\n<li>event块：配置nginx服务器与用户的访问配置</li>\n<li>http块</li>\n</ul>\n<p>新版server块已经被划分到<code>/etc/nginx/conf.d</code>路径下，可以在这里进行配置</p>\n<h1 id=\"配置实例\"><a href=\"#配置实例\" class=\"headerlink\" title=\"配置实例\"></a>配置实例</h1><h2 id=\"最简单的代理\"><a href=\"#最简单的代理\" class=\"headerlink\" title=\"最简单的代理\"></a>最简单的代理</h2><p><strong>安装Tomcat</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --name tomcat -p 8080:8080 -v /root/<span class=\"built_in\">test</span>:/usr/<span class=\"built_in\">local</span>/tomcat/webapps/<span class=\"built_in\">test</span> -d tomcat</span><br></pre></td></tr></table></figure>\n\n<p>我们直接运行的Tomcat容器的webapps目录下是没有内容的，为方便测试，可以将webapps.dist目录下的默认欢迎页复制到webapps目录</p>\n<p><strong>配置nginx</strong></p>\n<p>由于之前我们配置了挂载目录，因此可以在挂载目录中编辑容器内部的配置文件，在<code>/etc/nginx</code>将两个配置文件进行拷贝：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp nginx.conf outside-conf/</span><br><span class=\"line\">cp conf.d/default.conf outside-conf/</span><br></pre></td></tr></table></figure>\n\n<p>在外部使用vim就可以进行编辑了</p>\n<p>这里在default.conf修改两处</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927145310743.png\" alt=\"image-20210927145310743\"></p>\n<p>这里不使用127.0.0.1，因为在容器里面配置环回IP相当于容器自己的IP，当然不会与另一个容器的IP相连通</p>\n<p>配置完毕后，可以尝试访问服务器的80端口，看nginx服务器能不能给我们传回8080端口的tomcat默认页内容</p>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>新建一个tomcat容器配置端口<code>8081:8080</code></p>\n<p>在default.conf文件末尾追加一个新的虚拟服务器（需要更改默认服务器的监听端口，不然会冲突）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  reverse.proxy;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ /edu/ &#123;</span><br><span class=\"line\">        proxy_pass  http://47.113.225.244:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ /bus/ &#123;</span><br><span class=\"line\">        proxy_pass  http://47.113.225.244:8081;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>两个tomcat服务器分别放入对应端口号的html文件，实验结果如下</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927154055278.png\" alt=\"image-20210927154055278\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927154110328.png\" alt=\"image-20210927154110328\"></p>\n<p><strong>location匹配url指令说明</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927154340177.png\" alt=\"image-20210927154340177\"></p>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>实现效果：输入一个url后代理服务器根据负载情况分发请求到8080或者8081端口</p>\n<p>在nginx.conf文件的http块中添加负载均衡服务器配置，名为myserver</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">upstream myserver &#123;</span><br><span class=\"line\">    <span class=\"comment\">#ip_hash; 可以开启ip_hash模式</span></span><br><span class=\"line\">    server  47.113.225.244:8080 weight=1;</span><br><span class=\"line\">    server  47.113.225.244:8081 weight=1;</span><br><span class=\"line\">    <span class=\"comment\">#fair; 可以开启fair模式</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在default.conf文件，将我们的myserver服务器添加到代理配置中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  47.113.225.244;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">\t    proxy_pass   http://myserver; <span class=\"comment\">#这里的myserver是之前配置过的自定义服务器</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时访问一个页面不断刷新浏览器就可以发现端口号在8080和8081之间不断变动，说明配置成功</p>\n<h2 id=\"动静分离\"><a href=\"#动静分离\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927161844122.png\" alt=\"image-20210927161844122\"></p>\n<p><strong>配置静态资源</strong></p>\n<p>配置default.conf</p>\n<p>这里的/data/是在容器内部单独创建的静态资源目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  47.113.225.244;</span><br><span class=\"line\"></span><br><span class=\"line\">    location /www/ &#123;</span><br><span class=\"line\">\t    root   /data/; <span class=\"comment\">#root表示本地资源路径目录</span></span><br><span class=\"line\">\t    index  index.html index.htm; <span class=\"comment\">#index配置了访问目录路径时默认的页面名</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    location /image/ &#123;</span><br><span class=\"line\">\t    root   /data/;</span><br><span class=\"line\">\t    autoindex  on; <span class=\"comment\">#这个配置开启能够让浏览器取得资源路径的目录结构，</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Nginx集群\"><a href=\"#Nginx集群\" class=\"headerlink\" title=\"Nginx集群\"></a>Nginx集群</h1><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210927170203166.png\" alt=\"image-20210927170203166\"></p>\n<p>要点：</p>\n<ul>\n<li>需要多台nginx</li>\n<li>需要keepalived</li>\n<li>需要虚拟ip</li>\n</ul>\n<hr>\n<p>待补充</p>\n","categories":["微服务"]},{"title":"Sklearn学习","url":"/2020/12/15/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Sklearn/","content":"<p>简略的sklearn学习</p>\n<a id=\"more\"></a>\n\n<h4 id=\"数据集api\"><a href=\"#数据集api\" class=\"headerlink\" title=\"数据集api\"></a>数据集api</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sklearn.datasets.datasets.load_*()\t\t\t\t\t\t小规模数据集</span><br><span class=\"line\">sklearn.datasets.datasets.fetch_*(data_home&#x3D;None)\t\t 大规模数据集，需要下载</span><br></pre></td></tr></table></figure>\n\n<p>数据集返回值<code>datasets.base.Bunch</code>字典类型</p>\n<p>通过<code>dict[&quot;key&quot;]</code>或<code>bunch.key</code>来获得数据</p>\n<h4 id=\"数据集划分\"><a href=\"#数据集划分\" class=\"headerlink\" title=\"数据集划分\"></a>数据集划分</h4><p>训练数据：用于训练，构建模型</p>\n<p>测试数据：模型检验时使用，用于评估模型(20%~30%)</p>\n<!--more-->\n\n<h4 id=\"数据划分api\"><a href=\"#数据划分api\" class=\"headerlink\" title=\"数据划分api\"></a>数据划分api</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sklearn.model_selection.train_test_split(data,[target],*options)</span><br></pre></td></tr></table></figure>\n\n<p>参数：<code>test_size</code>测试集大小，float型，<code>random_state</code>随机数种子</p>\n<p>返回四个值：训练集特征值，测试集特征值，训练集目标值，测试集目标值</p>\n<h3 id=\"特征工程\"><a href=\"#特征工程\" class=\"headerlink\" title=\"特征工程\"></a>特征工程</h3><p>——决定机器学习上限</p>\n<h4 id=\"特征抽取-提取\"><a href=\"#特征抽取-提取\" class=\"headerlink\" title=\"特征抽取/提取\"></a>特征抽取/提取</h4><p>文本、类型-&gt;数值</p>\n<h5 id=\"特征提取api\"><a href=\"#特征提取api\" class=\"headerlink\" title=\"特征提取api\"></a>特征提取api</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sklearn.feature_extraction</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"字典特征提取\"><a href=\"#字典特征提取\" class=\"headerlink\" title=\"字典特征提取\"></a>字典特征提取</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sklearn.feature_extraction.DictVectorizer(sparse&#x3D;True,...)\t\t(sparse默认稀疏矩阵)</span><br><span class=\"line\">DictVectorizer.fit_transfer(data)\t\t\t\t\t\t\t  返回sparse矩阵</span><br><span class=\"line\">DictVectorizer.inverse_transform(marix)\t\t\t\t\t\t  返回原先数据</span><br><span class=\"line\">DictVectorizer.get_feature_names()\t\t\t\t\t\t\t  返回类别名称</span><br></pre></td></tr></table></figure>\n\n<p>one-hot编码：一个类占矩阵的一列</p>\n<h5 id=\"文本特征提取\"><a href=\"#文本特征提取\" class=\"headerlink\" title=\"文本特征提取\"></a>文本特征提取</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sklearn.feature_extraction.text.CountVectorizer(stop_words&#x3D;[])\t可设置停用词，即不统计文本</span><br><span class=\"line\">DictVectorizer.fit_transfer(data)                             \t返回sparse矩阵DictVectorizer.inverse_transform(marix)                       \t返回原先数据格DictVectorizer.get_feature_names()                            \t返回单词列表</span><br><span class=\"line\">sklearn.feature_extraction.text.TfidfVectorizer\t\t\t\t\t找出重要词</span><br></pre></td></tr></table></figure>\n\n<p>#中文需要手动分割词句或使用jieba库</p>\n<h6 id=\"jieba使用\"><a href=\"#jieba使用\" class=\"headerlink\" title=\"jieba使用\"></a>jieba使用</h6><p><code>jieba.cut(&quot;&quot;)</code>分割单个字符串，对多个字符串的列表进行分割时使用<code>for in</code>进行遍历</p>\n<h5 id=\"TF-IDF\"><a href=\"#TF-IDF\" class=\"headerlink\" title=\"TF-IDF\"></a>TF-IDF</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sklearn.feature_extraction.text.TfidfVectorizer(stop_words&#x3D;None,...)</span><br><span class=\"line\">TfidfVectorizer.fit_transform(X)\t\t\t\t\t\t\t\tX为文本或字符串，返回sparse矩阵</span><br></pre></td></tr></table></figure>\n\n<p>TF：词频：一个词出现次数/总词数</p>\n<p>IDF：逆向文档频率：lg(文章数/包含该词文章数)</p>\n<p>TF-IDF：重要程度：TF*IDF</p>\n<h3 id=\"特征预处理\"><a href=\"#特征预处理\" class=\"headerlink\" title=\"特征预处理\"></a>特征预处理</h3><p>特征预处理api</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sklearn.preprocessing</span><br></pre></td></tr></table></figure>\n\n<p>特征单位或大小相差的程度不同，某特征方差比其他特征大出几个数量级，容易影响目标结果，使一些算法无法学习到其他特征</p>\n<h4 id=\"归一化\"><a href=\"#归一化\" class=\"headerlink\" title=\"归一化\"></a>归一化</h4><p>对原始数据进行变换把数据映射到(默认[0,1])之间，适合精确小数据场景(受异常值影响较大，稳定性较差)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">X&#39;&#x3D;(x-min)&#x2F;(max-min)\t\t\t\t\t\t\tmaa,min为数据中的最大最小值</span><br><span class=\"line\">X&#39;&#39;&#x3D;X&#39;*(mx-mi)+mi\t\t\t\t\t\t\t\tmx,mi为指定区间范围的最大值最小值</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sklearn.preprocessing.MinMaxScaler(feature_range&#x3D;(0,1)...)</span><br><span class=\"line\">MinMaxScaler.fit_transform(X)\t\t\t\tX为numpy array数据[n_samples, n_features],返回同形状数组</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标准化\"><a href=\"#标准化\" class=\"headerlink\" title=\"标准化\"></a>标准化</h4><p>对原始数据进行变换把数据变换到均值为0，标准差为1的范围内,适合嘈杂的大数据场景</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">X&#39;&#x3D;(x-mean)&#x2F;std\t\t\t\t\t\t\t\t\tmean平均值，std标准差</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sklearn.preprocessing.StanderdScaler()</span><br><span class=\"line\">StanderdScaler.fit_transform(X)\t\t\t\tX为numpy array数据[n_samples, n_features],返回同形状数组</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"降维\"><a href=\"#降维\" class=\"headerlink\" title=\"降维\"></a>降维</h3><p>ndarray：维数：嵌套的层数</p>\n<p>降低特征个数，效果：特征之间不相关</p>\n<h4 id=\"特征选择\"><a href=\"#特征选择\" class=\"headerlink\" title=\"特征选择\"></a>特征选择</h4><h5 id=\"Filter过滤式\"><a href=\"#Filter过滤式\" class=\"headerlink\" title=\"Filter过滤式\"></a>Filter过滤式</h5><h6 id=\"方差选择法\"><a href=\"#方差选择法\" class=\"headerlink\" title=\"方差选择法\"></a>方差选择法</h6><p>低方差值特征过滤API</p>\n<p>删除小于设定方差的特征值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sklearn.feature_selection.VarianceThreshold(threshold &#x3D; 0.0)</span><br><span class=\"line\">VarianceThreshold.fit_transform(X)\t\t\tX为numpy array数据[n_samples, n_features],返回同形状数组</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"相关系数\"><a href=\"#相关系数\" class=\"headerlink\" title=\"相关系数\"></a>相关系数</h6><p>特征之间相关程度</p>\n<p>皮尔逊相关系数api</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from scipy.stats import pearsonr</span><br><span class=\"line\">pearsonr(data[&quot;var1&quot;], data[&quot;var2&quot;])\t\t计算相关系数,返回(r,p) r:相关系数;p:p越小表示相关系数月显著</span><br></pre></td></tr></table></figure>\n\n<p>相关性很高时：选取一个/加权求和</p>\n<h5 id=\"主成分分析\"><a href=\"#主成分分析\" class=\"headerlink\" title=\"主成分分析\"></a>主成分分析</h5><p>高维转低维特征，可能舍弃原有数据，创造新的变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sklearn.decomposition.PCA(n_components&#x3D;None)\tn-components:小数:表示保留%的信息;整数:减少到几个特征值</span><br><span class=\"line\">PCA.fit_transform(X)\t\t\t\t\tX为numpy array数据[n_samples, n_features],返回同指定维度array</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"决策树\"><a href=\"#决策树\" class=\"headerlink\" title=\"决策树\"></a>决策树</h6><h6 id=\"正则化\"><a href=\"#正则化\" class=\"headerlink\" title=\"正则化\"></a>正则化</h6><h6 id=\"深度学习\"><a href=\"#深度学习\" class=\"headerlink\" title=\"深度学习\"></a>深度学习</h6>","categories":["机器学习"]},{"title":"Python爬虫","url":"/2020/11/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/python%E7%88%AC%E8%99%AB/","content":"<p>爬虫概念：通过编写程序模拟浏览器上网，然后去互联网上抓取数据</p>\n<a id=\"more\"></a>\n\n<p>通用爬虫：抓取系统的组成部分，抓取一整张页面数据</p>\n<p>聚焦爬虫：建立在通用爬虫基础上，抓取页面中特定内容</p>\n<p>增量式爬虫：检测网站中数据更新情况，只抓取最新更新的数据</p>\n<p>反爬机制/反反爬策略</p>\n<p>robots.txt协议：”域名/robots.txt”口头约定是否允许爬取数据</p>\n<h2 id=\"http协议\"><a href=\"#http协议\" class=\"headerlink\" title=\"http协议\"></a>http协议</h2><p>超文本传输协议</p>\n<h3 id=\"常用请求头信息\"><a href=\"#常用请求头信息\" class=\"headerlink\" title=\"常用请求头信息\"></a>常用请求头信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">User-Agent\t\t\t\t\t\t\t\t\t\t请求载体的身份标识</span><br><span class=\"line\">Connection\t\t\t\t\t\t\t\t\t\t请求完毕后断开或保持连接</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用响应头信息\"><a href=\"#常用响应头信息\" class=\"headerlink\" title=\"常用响应头信息\"></a>常用响应头信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Content-Type\t\t\t\t\t\t\t\t\t服务器响应客户端数据类型</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"https协议\"><a href=\"#https协议\" class=\"headerlink\" title=\"https协议\"></a>https协议</h2><p>安全的超文本传输协议（数据加密），采用证书密钥加密</p>\n<h3 id=\"加密方式\"><a href=\"#加密方式\" class=\"headerlink\" title=\"加密方式\"></a>加密方式</h3><h4 id=\"对称密钥加密\"><a href=\"#对称密钥加密\" class=\"headerlink\" title=\"对称密钥加密\"></a>对称密钥加密</h4><p><img src=\"https://i.loli.net/2020/11/22/5Ic2VzUetnmqZGa.png\" alt=\"img\"></p>\n<p>存在安全隐患</p>\n<h4 id=\"非对称密钥加密\"><a href=\"#非对称密钥加密\" class=\"headerlink\" title=\"非对称密钥加密\"></a>非对称密钥加密</h4><p><img src=\"https://i.loli.net/2020/11/22/fLtRyiXJhq4ZPpl.png\"></p>\n<p>效率较低，存在安全隐患</p>\n<h4 id=\"证书密钥加密\"><a href=\"#证书密钥加密\" class=\"headerlink\" title=\"证书密钥加密\"></a>证书密钥加密</h4><p><img src=\"https://i.loli.net/2020/11/22/pFTqKX6LksEt15R.png\" alt=\"img\"></p>\n<h2 id=\"requests模块\"><a href=\"#requests模块\" class=\"headerlink\" title=\"requests模块\"></a>requests模块</h2><h3 id=\"urllib模块\"><a href=\"#urllib模块\" class=\"headerlink\" title=\"urllib模块\"></a>urllib模块</h3><h3 id=\"requests模块-1\"><a href=\"#requests模块-1\" class=\"headerlink\" title=\"requests模块\"></a>requests模块</h3><p>作用：模拟浏览器发请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">requests.get(url&#x3D;, params&#x3D;, headers&#x3D;)\t\t\t\t给params传入字典可以动态拼接成url参数</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t给headers传入字典可以伪装成某一浏览器</span><br><span class=\"line\">requests.post(url&#x3D;, params&#x3D;, headers&#x3D;)\t\t\t\tpost请求与之类似</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 指定url</span></span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://www.sogou.com/&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\"># 发起请求</span></span><br><span class=\"line\">    <span class=\"comment\"># get方法返回一个响应对象</span></span><br><span class=\"line\">    response = requests.get(url=url)</span><br><span class=\"line\">    <span class=\"comment\"># 获取响应数据.text返回字符串型数据</span></span><br><span class=\"line\">    content = response.text</span><br><span class=\"line\">    <span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;./dataset/sougou.html&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(content)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"UA检测：一种反爬机制\"><a href=\"#UA检测：一种反爬机制\" class=\"headerlink\" title=\"UA检测：一种反爬机制\"></a>UA检测：一种反爬机制</h4><p>门户网站服务器检测请求数据的UA标识，若为爬虫，服务器可能会拒绝该次请求。</p>\n<h4 id=\"UA伪装：对应的反反爬策略\"><a href=\"#UA伪装：对应的反反爬策略\" class=\"headerlink\" title=\"UA伪装：对应的反反爬策略\"></a>UA伪装：对应的反反爬策略</h4><p>伪装成为某一浏览器</p>\n<p>将headers字典传入requests的headers参数中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">headers &#x3D; &#123;</span><br><span class=\"line\">\t&#39;User-Agent&#39;:&#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.66 Safari&#x2F;537.36 Edg&#x2F;87.0.664.41&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例1：模拟搜索引擎</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://www.sogou.com/web&#x27;</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36 Edg/87.0.664.41&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    kw = input(<span class=\"string\">&#x27;Enter a word:&#x27;</span>)</span><br><span class=\"line\">    param = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;query&#x27;</span>: kw</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class=\"line\">    content = response.text</span><br><span class=\"line\">    <span class=\"comment\"># print(content)</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;./dataset/&#x27;</span>+kw+<span class=\"string\">&#x27;.html&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(content)</span><br></pre></td></tr></table></figure>\n\n<p>实例2：爬取豆瓣网电影列表</p>\n<p>通过ajax动态请求查看数据请求细节</p>\n<p><img src=\"https://i.loli.net/2020/11/22/usE12O95JZtYimV.png\" alt=\"img\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://movie.douban.com/j/chart/top_list&#x27;</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36 Edg/87.0.664.41&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    param = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;type&#x27;</span>: <span class=\"string\">&#x27;24&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;interval_id&#x27;</span>: <span class=\"string\">&#x27;100:90&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;action&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;start&#x27;</span>: <span class=\"string\">&#x27;0&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;limit&#x27;</span>: <span class=\"string\">&#x27;300&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class=\"line\">    data = response.json()</span><br><span class=\"line\">    <span class=\"comment\"># print(content)</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">&#x27;./dataset/douban.html&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        json.dump(data, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据解析\"><a href=\"#数据解析\" class=\"headerlink\" title=\"数据解析\"></a>数据解析</h2><p>聚焦爬虫</p>\n<p>流程：指定url；发起请求；获取响应数据；数据解析；持久化存储</p>\n<h3 id=\"正则\"><a href=\"#正则\" class=\"headerlink\" title=\"正则\"></a>正则</h3><p>多语言适用</p>\n<p>实例：爬取糗图网图片</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 通过os创建文件夹保存所有图片</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">&#x27;../dataset/pics&#x27;</span>):</span><br><span class=\"line\">        os.mkdir(<span class=\"string\">&#x27;../dataset/pics&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://www.qiushibaike.com/imgrank/&#x27;</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36 Edg/87.0.664.41&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 获取整张页面数据</span></span><br><span class=\"line\">    page_text = requests.get(url=url, headers=headers).text</span><br><span class=\"line\">    <span class=\"comment\"># 使用聚焦爬虫（正则）将页面所有图片进行提取</span></span><br><span class=\"line\">    ex = <span class=\"string\">&#x27;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&lt;/div&gt;&#x27;</span></span><br><span class=\"line\">    img_src_list = re.findall(ex, page_text, re.S)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> src <span class=\"keyword\">in</span> img_src_list:</span><br><span class=\"line\">        src = <span class=\"string\">&#x27;https:&#x27;</span> + src</span><br><span class=\"line\">        <span class=\"comment\"># 获取二进制数据</span></span><br><span class=\"line\">        img_data = requests.get(url=src, headers=headers).content</span><br><span class=\"line\">        img_name = src.split(<span class=\"string\">&#x27;/&#x27;</span>)[<span class=\"number\">-1</span>]</span><br><span class=\"line\">        img_path = <span class=\"string\">&#x27;../dataset/pics&#x27;</span>+img_name</span><br><span class=\"line\">        <span class=\"comment\"># 以二进制类型存储</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(img_path, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">            fp.write(img_data)</span><br><span class=\"line\">        print(img_name,<span class=\"string\">&#x27;下载成功！&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>关于re的补充内容</p>\n<p><img src=\"https://i.loli.net/2020/11/22/Y5blVtozsfCQknj.png\" alt=\"img\"></p>\n<h3 id=\"bs4\"><a href=\"#bs4\" class=\"headerlink\" title=\"bs4\"></a>bs4</h3><p>python独有的方法</p>\n<p>需要安装bs4,lxml</p>\n<ol>\n<li><p>实例化一个BeautifulSoup对象，并将页面源码数据加载到该对象中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">fp = open(<span class=\"string\">&#x27;../dataset/test.html&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">#使用lxml对本地文件进行解析</span></span><br><span class=\"line\">    BeautifulSoup.(fp, <span class=\"string\">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">page_text = response.text</span><br><span class=\"line\"><span class=\"comment\">#使用lxml直接对网络数据进行解析</span></span><br><span class=\"line\">soup = BeautifulSoup(page_text, <span class=\"string\">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过调用BeautifulSoup内置属性或方法进行标签定位和数据提取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">soup.标签名\t\t\t\t\t\t\t\t\t获取第一个该标签的内容</span><br><span class=\"line\">soup.find(&#39;标签名&#39;)\t\t\t\t\t\t\t 同上</span><br><span class=\"line\">soup.find(&#39;标签名&#39;, class_&#x2F;id&#x2F;attr&#x3D;&#39;&#39;)\t\t\t   指定属性查找</span><br><span class=\"line\">soup.find_all()\t\t\t\t\t\t\t\t   符合要求的所有标签</span><br><span class=\"line\">soup.select(&#39;&#39;)\t\t\t\t\t\t\t\t   可以使用某种选择器，返回列表</span><br><span class=\"line\">soup.select(&#39;.tang &gt; ul &gt; li &gt;a&#39;)\t\t\t\t层级选择器 &#39;&gt;&#39;表示一个层级</span><br><span class=\"line\">soup.select(&#39;.tang &gt; ul a&#39;)\t\t\t\t\t\t层级选择器 &#39; &#39;表示多个层级</span><br></pre></td></tr></table></figure>\n\n<p>获取标签之间的文本数据/属性值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sp &#x3D; soup.select(&#39;.tang &gt; ul &gt; li&#39;)</span><br><span class=\"line\">sp[0].a.text&#x2F;string&#x2F;get_text()\t\t\t\t\t获取a标签文本数据</span><br><span class=\"line\">text&#x2F;get_text()获取所有文本(可以跨越层级)\tstring仅获取该标签直系文本内容</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">soup.a[&#39;href&#39;]\t\t\t\t\t\t\t\t\t获取a标签中href属性值</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>实例：获取三国演义文本(已失效)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> _name_<span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">\t<span class=\"comment\"># 对首页的页面数据进行爬取</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">\t<span class=\"string\">&#x27;User-Agent&#x27;</span> : (...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\turl = <span class=\"string\">&#x27;http://www.shicimingju.com/book/sanguoyanyi.html&#x27;</span></span><br><span class=\"line\">    page_text = requests.get(url=url,headers=headers)</span><br><span class=\"line\">\t<span class=\"comment\"># 在首页史解析出意节的标题和详情页的ucl</span></span><br><span class=\"line\">\t<span class=\"comment\"># 实例化BeautifulS.oup对象..需要将页面源码数据加戴到该对象虫</span></span><br><span class=\"line\">\tsoup = BeautifulSoup(page_text, <span class=\"string\">&#x27;lxml &#x27;</span>)</span><br><span class=\"line\">\t<span class=\"comment\"># 解析章节标题和详情页的url</span></span><br><span class=\"line\">\tli_list = soup.select( <span class=\"string\">&#x27;.book-mulu &gt; ul &gt; li&#x27;</span>)</span><br><span class=\"line\">    fp = open( <span class=\"string\">&#x27;./sanguo.txt&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> li_list:</span><br><span class=\"line\">\t\ttitle = li.a.string</span><br><span class=\"line\">\t\tdetail_url = <span class=\"string\">&#x27;http://www.shicimingju. com&#x27;</span>+li.a[ <span class=\"string\">&#x27; href &#x27;</span>]</span><br><span class=\"line\">    \t<span class=\"comment\"># 对详情页发起请求..解析出竟节内容</span></span><br><span class=\"line\">\t\tdetail_page_text = requests.get(url=detail_url,headers=headers).text</span><br><span class=\"line\">    \t<span class=\"comment\"># 解析出详情页史相关的意节内容</span></span><br><span class=\"line\">\t\tdetail_soup = BeautifulSoup(detail_page_text, <span class=\"string\">&#x27;lxml &#x27;</span>)</span><br><span class=\"line\">\t\tdiv_tag = detail_soup.find( <span class=\"string\">&#x27;div&#x27;</span>, class_=<span class=\"string\">&#x27;chapter_content&#x27;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\"># 解析到了意节的内察</span></span><br><span class=\"line\">\t\tcontent = div_tag.text</span><br><span class=\"line\">\t\tfp.write(title+<span class=\"string\">&#x27;:&#x27;</span>+content+<span class=\"string\">&#x27;\\n&#x27;</span>)print(title <span class=\"string\">&#x27;爬取成功!!!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"xpath\"><a href=\"#xpath\" class=\"headerlink\" title=\"xpath\"></a>xpath</h3><p>便捷高效，多语言通用性</p>\n<p>只需要安装lxml</p>\n<ol>\n<li><p>实例化一个etree对象，并将页面源码数据加载到该对象中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">etree.parse(filePath)\t\t\t\t\t\t\t\t本地文件</span><br><span class=\"line\">etree.HTML(&#39;page_text&#39;)\t\t\t\t\t\t\t\t源码数据</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过调用etree对象xpath方法结合xpath表达式进行标签定位和数据提取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tree &#x3D; etree.parse(filePath)</span><br><span class=\"line\">   tree.xpath(&#39;&#x2F;html&#x2F;head&#x2F;title&#39;)\t\t\t\t\t\t从外向内定位，返回element对象的列表</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>xpath表达式详解</p>\n<p>下列表达式返回值都为列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;html&#x2F;div&#x2F;li&#x2F;a\t\t\t\t\t\t\t\t\t&#39;&#x2F;&#39;:一个层级</span><br><span class=\"line\">&#x2F;html&#x2F;&#x2F;a 或 &#x2F;&#x2F;a\t\t\t\t\t\t\t\t\t&#39;&#x2F;&#x2F;&#39;:多个层级</span><br><span class=\"line\">&#x2F;&#x2F;div[@class&#x3D;&quot;song&quot;]\t\t\t\t\t\t\t属性定位</span><br><span class=\"line\">&#x2F;&#x2F;div[@class&#x3D;&quot;song&quot;]&#x2F;p[3]\t\t\t\t\t\t对p标签进行索引(索引从1开始)</span><br><span class=\"line\">&#x2F;&#x2F;div&#x2F;text()\t\t\t\t\t\t\t\t\t获取文本内容(只能获取本层子内容)</span><br><span class=\"line\">&#x2F;&#x2F;div&#x2F;&#x2F;text()\t\t\t\t\t\t\t\t\t获取文本内容(全部内容，可传递)</span><br><span class=\"line\">&#x2F;&#x2F;div[@class&#x3D;&quot;song&quot;]&#x2F;img&#x2F;@attr\t\t\t\t\t 获取attr属性的内容</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>实例：获取58同城房产信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://bj.58.com/ershoufang/&#x27;</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36 Edg/87.0.664.41&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 获取整张页面数据</span></span><br><span class=\"line\">    page_text = requests.get(url=url, headers=headers).text</span><br><span class=\"line\">    tree = etree.HTML(page_text)</span><br><span class=\"line\">    li_list = tree.xpath(<span class=\"string\">&#x27;//ul[@class=&quot;house-list-wrap&quot;]/li&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">#数据解析</span></span><br><span class=\"line\">    fp = open(<span class=\"string\">&#x27;../dataset/58.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> li <span class=\"keyword\">in</span> li_list:</span><br><span class=\"line\">        <span class=\"comment\">#局部解析,&#x27;./&#x27;表示本级目录</span></span><br><span class=\"line\">        title = li.xpath(<span class=\"string\">&#x27;./div[2]/h2/a/text()&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        print(title)</span><br><span class=\"line\">        fp.write(title+<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反爬机制\"><a href=\"#反爬机制\" class=\"headerlink\" title=\"反爬机制\"></a>反爬机制</h2><h3 id=\"验证码\"><a href=\"#验证码\" class=\"headerlink\" title=\"验证码\"></a>验证码</h3><p>第三方自动识别</p>\n","categories":["机器学习"]},{"title":"数据分析","url":"/2020/11/15/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/","content":"<p>过程：提出问题-&gt;准备数据-&gt;分析数据-&gt;获得结论-&gt;(成果可视化)</p>\n<a id=\"more\"></a>\n\n<p>注：变量前带#表示可选项</p>\n<h2 id=\"matplotlib\"><a href=\"#matplotlib\" class=\"headerlink\" title=\"matplotlib\"></a>matplotlib</h2><h3 id=\"数据可视化\"><a href=\"#数据可视化\" class=\"headerlink\" title=\"数据可视化\"></a>数据可视化</h3><h4 id=\"折线图\"><a href=\"#折线图\" class=\"headerlink\" title=\"折线图\"></a>折线图</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from matplotlib import pyplot as plt\t\t  导入pyplot</span><br><span class=\"line\">plt.plot(x,y)\t\t\t\t\t\t\t\t绘制折线图</span><br><span class=\"line\">plt.show()\t\t\t\t\t\t\t\t\t展示图形</span><br><span class=\"line\">.plot()其他属性：label,color,linestyle,linewidth,alpha</span><br><span class=\"line\">plt.subplot(rows,clos,num)绘制多个子图，要求行数、列数、正在绘制第几张图参数</span><br></pre></td></tr></table></figure>\n\n<p>多次调用<code>.plot()</code>函数可以在一个图形上绘制多个图形</p>\n<h6 id=\"设置展示细节\"><a href=\"#设置展示细节\" class=\"headerlink\" title=\"设置展示细节\"></a>设置展示细节</h6><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">plt.figure(figsize&#x3D;(20,8),dpi&#x3D;80)\t\t\t  figsize传入宽高,dpi传入清晰度</span><br><span class=\"line\">plt.savefig(&quot;&quot;)\t\t\t\t\t\t\t\t传入地址保存图片</span><br><span class=\"line\">plt.xticks(x)\t\t\t\t\t\t\t\t将x全部标注在x轴上(y轴同理)</span><br><span class=\"line\">plt.xticks(x，x_list)\t\t\t\t\t\t以x_list一一对应替换x</span><br><span class=\"line\">plt.xticks(x，x_list,rotation&#x3D;90)\t\t\t rotation旋转角度</span><br><span class=\"line\">plt.xlabel(&quot;content&quot;)\t\t\t\t\t\tx轴标注(y轴同理)</span><br><span class=\"line\">plt.title(&quot;title&quot;)\t\t\t\t\t\t\t表格标题\t\t\t\t\t\t\t</span><br><span class=\"line\">plt.grid(#alpha&#x3D;0.4)\t\t\t\t\t\t绘制网格 alpha表示透明度</span><br><span class=\"line\">plt.legend()\t\t\t\t\t\t\t\t添加图例(需要在.plot(label&#x3D;&quot;lab1&quot;)设置标签)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他图形\"><a href=\"#其他图形\" class=\"headerlink\" title=\"其他图形\"></a>其他图形</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">plt.scatter(x,y)\t\t\t\t\t\t\t绘制散点图</span><br><span class=\"line\">plt.bar(x,y)\t\t\t\t\t\t\t\t绘制条形图</span><br><span class=\"line\">plt.barh(x,y)\t\t\t\t\t\t\t\t绘制横状条形图</span><br><span class=\"line\">plt.hist(a, num_bins)\t\t\t\t\t\t绘制直方图 num_bins:分成的组数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他绘图工具\"><a href=\"#其他绘图工具\" class=\"headerlink\" title=\"其他绘图工具\"></a>其他绘图工具</h3><p>ploty，百度echarts等</p>\n<h2 id=\"numpy\"><a href=\"#numpy\" class=\"headerlink\" title=\"numpy\"></a>numpy</h2><h3 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import numpy as np\t\t\t\t\t\t\t导入numpy</span><br><span class=\"line\">np.array(X，#dtype&#x3D;)\t\t\t\t\t\t\tX为列表，将其转换为数组，dtype指定类型</span><br><span class=\"line\">np.arrage(a,b)\t\t\t\t\t\t\t\t生成从a到b的整数数组</span><br><span class=\"line\">np.reshape(X）\t\t\t\t\t\t\t\t传入一个元组，重新定义矩阵形状，返回新矩阵</span><br><span class=\"line\">np.flatten()\t\t\t\t\t\t\t\t将矩阵转为一维数组</span><br><span class=\"line\">np.transpose() 或 np.T()\t\t\t\t\t\t矩阵转置</span><br><span class=\"line\">np.swapaxes(,)\t\t\t\t\t\t\t\t转换轴(可用于转置)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"读取数据\"><a href=\"#读取数据\" class=\"headerlink\" title=\"读取数据\"></a>读取数据</h3><p>csv：逗号分割型数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">np.loadtxt(frame, dtype&#x3D;np.float, delimiter&#x3D;None, skiprows&#x3D;0, usecols&#x3D;None, unpack&#x3D;False)</span><br><span class=\"line\">读取文本文件 frame:文件路径 delimiter:分割方法 unpack:转置</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">np.where(条件,操作1,操作2)\t\t\t\t\tnumpy的三元运算符</span><br><span class=\"line\">np.clip(10,8)\t\t\t\t\t\t\t\t裁剪(小于10替换为10，大于18替换为18)</span><br><span class=\"line\">np.vstack((t1,t2))\t\t\t\t\t\t\t竖直拼接矩阵</span><br><span class=\"line\">np.hstack((t1,t2))\t\t\t\t\t\t\t水平拼接矩阵</span><br><span class=\"line\">t[[1,2],:]\t\t\t\t\t\t\t\t\t交换1，2行</span><br><span class=\"line\">t[:,[1,2]]\t\t\t\t\t\t\t\t\t交换1，2列</span><br><span class=\"line\">np.ones((3,4))\t\t\t\t\t\t\t\t生成一个全1的3*4矩阵</span><br><span class=\"line\">np.zeros((3,4))\t\t\t\t\t\t\t\t生成一个全0的3*4矩阵</span><br><span class=\"line\">np.eye(10)\t\t\t\t\t\t\t\t\t生成一个宽高为10的对角矩阵</span><br><span class=\"line\">np.argmax(t,axis&#x3D;0)\t\t\t\t\t\t\t取0号坐标轴(x轴)每项最大值</span><br><span class=\"line\">np.argmax(t,axis&#x3D;1)\t\t\t\t\t\t\t取1号坐标轴(y轴)每项最小值</span><br></pre></td></tr></table></figure>\n\n<p>随机数</p>\n<img src=\"https://i.loli.net/2020/11/17/1DFgnzsaPCo6VRU.png\" alt=\"img\"  />\n\n<h3 id=\"常用统计函数\"><a href=\"#常用统计函数\" class=\"headerlink\" title=\"常用统计函数\"></a>常用统计函数</h3><p><img src=\"https://i.loli.net/2020/11/17/YjdXTt53G7akcuR.png\" alt=\"img\"></p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">a&#x3D;b\t\t\t\t\t\t\t\t\t\t浅拷贝</span><br><span class=\"line\">a&#x3D;b[:]\t\t\t\t\t\t\t\t\t切片方法(同浅拷贝)</span><br><span class=\"line\">a&#x3D;b.copy()\t\t\t\t\t\t\t\t深拷贝</span><br></pre></td></tr></table></figure>\n\n<p>特殊数据类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">np.nan\t\t\t\t\t\t\t\t\tnot a number(非数字，或计算错误)</span><br><span class=\"line\">np.inf\t\t\t\t\t\t\t\t\tinfinity(无穷，有正负)</span><br><span class=\"line\">np.isnan(t1)\t\t\t\t\t\t\t返回是否nan的布尔矩阵</span><br><span class=\"line\">注：np.nan!&#x3D;np.nan</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pandas\"><a href=\"#pandas\" class=\"headerlink\" title=\"pandas\"></a>pandas</h2><h3 id=\"Series\"><a href=\"#Series\" class=\"headerlink\" title=\"Series\"></a>Series</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import pandas as pd\t\t\t\t\t\t\t\t导入pandas</span><br><span class=\"line\">pd.Series([],#index&#x3D;)\t\t\t\t\t\t\t创建带标签数组(字典？),index指定索引</span><br><span class=\"line\">pd.Series(&#123;&#125;)\t\t\t\t\t\t\t\t\t直接传入字典创建</span><br><span class=\"line\">series.index&#x2F;series.value\t\t\t\t\t\t调用索引&#x2F;值</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"读取外部数据\"><a href=\"#读取外部数据\" class=\"headerlink\" title=\"读取外部数据\"></a>读取外部数据</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pd.read_csv(&quot;&quot;)\t\t\t\t\t\t\t\t\t读取文件</span><br><span class=\"line\">pd.read_sql(sql_sentence.connection)\t\t\t  读取数据库</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DatFrame\"><a href=\"#DatFrame\" class=\"headerlink\" title=\"DatFrame\"></a>DatFrame</h3><p>矩阵型series,有行索引和类索引</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pd.DataFrame([],#index&#x3D;,#columxs&#x3D;)\t\t\t\t\t创建DataFrame,index行索引，colums列索引</span><br><span class=\"line\">pd.DataFrame(&#123;&#125;,&#123;&#125;,&#123;&#125;)\t\t\t\t\t\t\t\t传入字典行索引自动从0排序</span><br><span class=\"line\">df.dead(2)\t\t\t\t\t\t\t\t\t\t\t显示前2行</span><br><span class=\"line\">df.tail(3)\t\t\t\t\t\t\t\t\t\t\t显示后3行</span><br><span class=\"line\">df.info()\t\t\t\t\t\t\t\t\t\t\t显示信息</span><br><span class=\"line\">df.describe()\t\t\t\t\t\t\t\t\t\t统计信息</span><br><span class=\"line\">df.sort_values(by&#x3D;&quot;&quot;,ascending&#x3D;True)\t\t\t\t  排序 by按某标签排序，scending正序排序</span><br><span class=\"line\">df.loc[]\t\t\t\t\t\t\t\t\t\t\t通过标签索引行数据</span><br><span class=\"line\">df.iloc[]\t\t\t\t\t\t\t\t\t\t\t通过位置获取行数据</span><br><span class=\"line\">df.set_index()\t\t\t\t\t\t\t\t\t\t设置索引</span><br><span class=\"line\">df.set_index([])\t\t\t\t\t\t\t\t\t设置复合索引</span><br><span class=\"line\">df.swaplevel()\t\t\t\t\t\t\t\t\t\t交换复合索引次序</span><br></pre></td></tr></table></figure>\n\n<p>数据合并</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">t1.join(t2, on&#x3D;&quot;a&quot;)\t\t\t\t\t\t\t\t\t按行索引将两个dataframe合并(以t1为准,通过a项)</span><br><span class=\"line\">t1.merge(t2， on&#x3D;&quot;a&quot;)\t\t\t\t\t\t\t\t按列索引将两个dataframe合并(以t1为准,通过a项)</span><br><span class=\"line\">df1.merge(df2, on&#x3D;&quot;&quot;, how&#x3D;&quot;inner&quot;)\t\t\t\t\tinner表示内连接(交集)outer表示外连接(并集)</span><br><span class=\"line\">df1.merge(df2, on&#x3D;&quot;&quot;, how&#x3D;&quot;left&quot;)\t\t\t\t\tleft表示左连接(以df1为准)right表示右连接(以df2为准)</span><br><span class=\"line\">不存在的值都补充为Nan,默认内连接</span><br></pre></td></tr></table></figure>\n\n<p>数据分组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">grouped&#x3D;df.groupby(by&#x3D;&quot;a&quot;)\t\t\t\t\t\t\t将数据按a分组，返回包含元组的Series类型</span><br><span class=\"line\">df[&quot;country&quot;].groupby(by&#x3D;[df[&quot;country&quot;],df[&quot;state&#x2F;province&quot;]])\t\t对几列数据进行分组</span><br><span class=\"line\">grouped.count()\t\t\t\t\t\t\t\t\t\t统计个数</span><br><span class=\"line\">遍历groupby:</span><br><span class=\"line\">#i为a的类型，j为具体数据</span><br><span class=\"line\">for i, j in grouped:</span><br><span class=\"line\">\t#TODO</span><br></pre></td></tr></table></figure>\n\n","categories":["机器学习"]},{"title":"机器学习流程","url":"/2021/01/28/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B5%81%E7%A8%8B/","content":"<h1 id=\"机器学习流程\"><a href=\"#机器学习流程\" class=\"headerlink\" title=\"机器学习流程\"></a>机器学习流程</h1><p><strong>深度学习笔记参考</strong></p>\n<p><a href=\"https://blog.csdn.net/zouxy09/article/details/8775360\">https://blog.csdn.net/zouxy09/article/details/8775360</a></p>\n<p><strong>四种基本神经网络参考</strong></p>\n<p><a href=\"https://blog.csdn.net/kwame211/article/details/110382931\">https://blog.csdn.net/kwame211/article/details/110382931</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><p>注：未特殊声明时*表示必填</p>\n<p>数据集：特征值+目标值</p>\n<h3 id=\"按目标值分类\"><a href=\"#按目标值分类\" class=\"headerlink\" title=\"按目标值分类\"></a>按目标值分类</h3><h4 id=\"监督学习\"><a href=\"#监督学习\" class=\"headerlink\" title=\"监督学习\"></a>监督学习</h4><p>有目标值类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">类别\t\t\t\t\t\t  分类问题</span><br><span class=\"line\">连续型数据\t\t\t\t\t回归问题</span><br></pre></td></tr></table></figure>\n\n<p>分类：k-近邻算法、贝叶斯分类、决策树与随机森林、逻辑回归、SVM</p>\n<p>​        回归：线性回归、岭回归</p>\n<h5 id=\"生成模型\"><a href=\"#生成模型\" class=\"headerlink\" title=\"生成模型\"></a>生成模型</h5><p>学习总体情况</p>\n<img src=\"https://i.loli.net/2020/11/29/ulyGPRHXhor4DWj.png\" alt=\"img\"/>\n\n<h5 id=\"判别模型\"><a href=\"#判别模型\" class=\"headerlink\" title=\"判别模型\"></a>判别模型</h5><p>学习类别之间的差异</p>\n<p><img src=\"https://i.loli.net/2020/11/29/5Qhi9yfJCnB6ezF.png\"></p>\n<p>没有目标值</p>\n<p>聚类：k-means，高斯混合模型</p>\n<h4 id=\"其他学习\"><a href=\"#其他学习\" class=\"headerlink\" title=\"其他学习\"></a>其他学习</h4><ul>\n<li>半监督学习：给少量数据和大量未标注数据</li>\n<li>增强学习：对于输出结果只给出评价信息而不给出正确答案</li>\n<li>多任务信息：多个相关任务一起学习</li>\n</ul>\n<h3 id=\"机器学习开发流程\"><a href=\"#机器学习开发流程\" class=\"headerlink\" title=\"机器学习开发流程\"></a>机器学习开发流程</h3><p>获取数据-&gt;数据处理-&gt;特征工程-&gt;机器学习算法训练模型-&gt;模型评估-&gt;应用</p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><h3 id=\"数据清洗\"><a href=\"#数据清洗\" class=\"headerlink\" title=\"数据清洗\"></a>数据清洗</h3><p>完整性、合法性、一致性、唯一性、权威性</p>\n<h3 id=\"数据采样\"><a href=\"#数据采样\" class=\"headerlink\" title=\"数据采样\"></a>数据采样</h3><p>避免数据不平衡，比如正类与负类样本数量差距过大</p>\n<p>解决方法：</p>\n<ul>\n<li>过采样：随机复制少数类样本数量</li>\n<li>欠采样：随机消除多数类样本数量</li>\n</ul>\n<h3 id=\"数据集拆分\"><a href=\"#数据集拆分\" class=\"headerlink\" title=\"数据集拆分\"></a>数据集拆分</h3><p>训练数据集：构建学习模型</p>\n<p>验证数据集：辅助或在构建过程中评估，用于调整参数</p>\n<p>测试数据集：最终评估</p>\n<p>拆分方法：</p>\n<ul>\n<li><p>留出法：直接对数据集进行划分，如70%/30%</p>\n</li>\n<li><p>k-折交叉验证法：将数据集划分为k个大小相似的互斥子集，进行k组训练和测试，k常取10</p>\n<p><img src=\"https://i.loli.net/2021/01/23/dVlY5aHCGQsEwet.png\" alt=\"image-20210123204645757\"></p>\n</li>\n</ul>\n<h2 id=\"特征工程\"><a href=\"#特征工程\" class=\"headerlink\" title=\"特征工程\"></a>特征工程</h2><h3 id=\"特征选择\"><a href=\"#特征选择\" class=\"headerlink\" title=\"特征选择\"></a>特征选择</h3><p>过滤法，包裹法，嵌入法</p>\n<h3 id=\"特征降维\"><a href=\"#特征降维\" class=\"headerlink\" title=\"特征降维\"></a>特征降维</h3><p>主成分分析（PCA）</p>\n<p>线性判别分析（LDA）</p>\n<h3 id=\"特征编码\"><a href=\"#特征编码\" class=\"headerlink\" title=\"特征编码\"></a>特征编码</h3><p>one-hot</p>\n<p>语义编码</p>\n<h3 id=\"规范化\"><a href=\"#规范化\" class=\"headerlink\" title=\"规范化\"></a>规范化</h3><h2 id=\"机器学习方法\"><a href=\"#机器学习方法\" class=\"headerlink\" title=\"机器学习方法\"></a>机器学习方法</h2><h3 id=\"分类问题\"><a href=\"#分类问题\" class=\"headerlink\" title=\"分类问题\"></a>分类问题</h3><h4 id=\"决策树\"><a href=\"#决策树\" class=\"headerlink\" title=\"决策树\"></a>决策树</h4><p>由不同的特征值构建分支</p>\n<p>过程：从根节点开始测试待分类项中相应的特征属性，并按照输入值输出分支，直到叶子节点作为决策结果</p>\n<p><img src=\"https://i.loli.net/2020/11/29/MZyBvlipXT9oqGU.png\" alt=\"img\"></p>\n<h5 id=\"决策树特征选择\"><a href=\"#决策树特征选择\" class=\"headerlink\" title=\"决策树特征选择\"></a>决策树特征选择</h5><ul>\n<li><p>信息熵</p>\n<p><img src=\"https://i.loli.net/2021/01/25/YyLvRtDpPXJFVGK.png\" alt=\"image-20210125203603626\"></p>\n<p>不等概率的信息熵</p>\n<p><img src=\"https://i.loli.net/2021/01/25/1La29GsDvxkIXOY.png\" alt=\"image-20210125211402128\"></p>\n</li>\n<li><p>信息增益=信息熵（前）-信息熵（后）</p>\n</li>\n<li><p>信息增益比=惩罚参数*信息增益；特征个数越多惩罚参数越小</p>\n</li>\n<li><p>信息增益率</p>\n<p><img src=\"https://i.loli.net/2021/01/25/EGfcTpqWHuZz2Bv.png\" alt=\"img\"></p>\n<p>其中Gain(D,a)为该分支的信息熵数值</p>\n</li>\n<li><p>基尼系数：表示集合不确定性，越大表示不平等程度越高；一个属性的基尼指数为该属性所有分支的加权和</p>\n<p><img src=\"https://i.loli.net/2021/01/26/yTbEzAIUutKa2G3.png\" alt=\"image-20210126132100247\"></p>\n</li>\n</ul>\n<p><strong>决策树构建算法</strong></p>\n<p><img src=\"https://i.loli.net/2020/11/29/aPRDCj5mM3AkWGz.png\" alt=\"img\"></p>\n<h5 id=\"ID3算法\"><a href=\"#ID3算法\" class=\"headerlink\" title=\"ID3算法\"></a>ID3算法</h5><p><img src=\"https://i.loli.net/2021/01/25/Clq72kMiUsb1Lex.png\" alt=\"image-20210125214254688\"></p>\n<p>在所有信息中选择获得该信息之后信息增益最大的信息作为根节点(如纹理信息获得信息增益最大，为0.381bits)，之后同理。</p>\n<h5 id=\"C4-5算法\"><a href=\"#C4-5算法\" class=\"headerlink\" title=\"C4.5算法\"></a>C4.5算法</h5><p>对于连续值得处理，将一个属性的数值从小到大排序，分别取不同的阈值进行分类，计算信息增益，选取信息增益最大得阈值作为所取阈值。</p>\n<p><strong>缺失值处理</strong></p>\n<p><img src=\"https://i.loli.net/2021/01/27/tsaoZDb2XA5ERhr.png\" alt=\"image-20210127142939815\"></p>\n<h5 id=\"CART算法\"><a href=\"#CART算法\" class=\"headerlink\" title=\"CART算法\"></a>CART算法</h5><p>计算每个属性的基尼指数，在所有属性中选择基尼指数最小的作为根节点，以此类推，当子节点的基尼指数不再降低(不变或升高)时中止分叉</p>\n<h5 id=\"决策树剪枝\"><a href=\"#决策树剪枝\" class=\"headerlink\" title=\"决策树剪枝\"></a>决策树剪枝</h5><p>理想的决策树：叶子节点最少，叶子节点深度最小，或两者的结合</p>\n<p><strong>修正方法</strong>：</p>\n<ul>\n<li><p>预剪枝(自上而下)</p>\n<p><img src=\"https://i.loli.net/2021/01/26/NXsgECheqoKtQPD.png\"></p>\n<p><img src=\"https://i.loli.net/2021/01/26/DRtL82nVUZgbMxO.png\" alt=\"image-20210126135721935\"></p>\n<p>当一个属性分支之后正确分类的样本数比之前少时取消该分支</p>\n<ul>\n<li>预先设置高度，当决策树到达该高度时停止生长</li>\n<li>到达某节点实例具有相同的特征向量</li>\n<li>定义一个阈值（实例个数、系统性能增益等）</li>\n</ul>\n</li>\n<li><p>后剪枝(自下而上)</p>\n<p>与预剪枝相反，从最底层叶子节点开始，判断剪枝之后正确分类的样本数是否比之前少，正确数减小则不剪</p>\n<p>先构建决策树，对置信度不够的结点字数用叶子节点代替，该叶子节点类标号用该结点子树中最频繁的类标记。这种方法相比于预剪枝更为常用</p>\n</li>\n</ul>\n<h4 id=\"贝叶斯分类\"><a href=\"#贝叶斯分类\" class=\"headerlink\" title=\"贝叶斯分类\"></a>贝叶斯分类</h4><p>优点：算法逻辑简单、易于实现；分类过程时空开销小</p>\n<p>缺点：贝叶斯模型假设各属性之间互相独立，实际应用中往往不成立，属性个数多或相关性大时效果不好</p>\n<p>贝叶斯公式</p>\n<p><img src=\"https://i.loli.net/2020/11/29/e2Kw6Obx7DargYz.png\"></p>\n<ol>\n<li>计算先验概率</li>\n<li>为每个属性计算条件概率</li>\n<li>计算后验概率</li>\n</ol>\n<p>使用极大似然法计算概率</p>\n<h5 id=\"朴素贝叶斯分类器\"><a href=\"#朴素贝叶斯分类器\" class=\"headerlink\" title=\"朴素贝叶斯分类器\"></a>朴素贝叶斯分类器</h5><p>分别计算处于当前属性各分类得概率判断属于某一分类</p>\n<p>避免”一票否决“：拉普拉斯修正</p>\n<p><img src=\"https://i.loli.net/2020/11/29/ky8ac65if2bEYhl.png\"></p>\n<p><strong>EM算法</strong></p>\n<p><img src=\"https://i.loli.net/2021/01/27/6C1kMfKdmDlNyTH.png\" alt=\"image-20210127172318696\"></p>\n<p><img src=\"https://i.loli.net/2021/01/27/qU9AEe3hbFKOsnX.png\" alt=\"image-20210127171514425\"></p>\n<h4 id=\"？SVM（支持向量机）\"><a href=\"#？SVM（支持向量机）\" class=\"headerlink\" title=\"？SVM（支持向量机）\"></a>？SVM（支持向量机）</h4><h5 id=\"SVM\"><a href=\"#SVM\" class=\"headerlink\" title=\"SVM\"></a>SVM</h5><p>对一些数据点进行分类，当超平面离数据点间隔越大，分离的确信度也越高</p>\n<p>SVM寻找一个最优决策边界，使距离两个类别最近的样本最远</p>\n<ul>\n<li>硬间隔支持向量机</li>\n<li>软间隔支持向量机（对异常点支持</li>\n<li>非线性支持向量机与核函数</li>\n</ul>\n<p>优点：不需要过多样本；结构风险最小；非线性</p>\n<h5 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h5><ul>\n<li><p>Maximal margin classifier</p>\n<p><img src=\"https://i.loli.net/2021/01/27/4YUm5lwPFKcZLNA.png\" alt=\"image-20210127144707782\"></p>\n<p>直接选取最大值最小值之间平均作为阈值</p>\n</li>\n<li><p>Support Vector Classifier<br><img src=\"https://i.loli.net/2021/01/27/MHSj3UXOnsAJokQ.png\" alt=\"image-20210127144836998\"></p>\n<p>中间作为缓冲区域，中间的向量称为支持向量(support vector)</p>\n</li>\n<li><p>使用核函数升维或降维</p>\n</li>\n</ul>\n<p>使用拉格朗日乘数法求极值</p>\n<h5 id=\"多分类SVM\"><a href=\"#多分类SVM\" class=\"headerlink\" title=\"多分类SVM\"></a>多分类SVM</h5><ul>\n<li><p>一对多法：把某个样本分为一类，剩余所有样本分为一类，k个样本构建出k个SVM</p>\n<p>分类时将未知样本分类为具有最大分类函数值的一类</p>\n</li>\n<li><p>一对一法：任意两个样本之间设计一个SVM，k个样本共设计k(k-1)/2个SVM</p>\n<p>分类时将位置样本分类为最后得票数最多的一类</p>\n</li>\n<li><p>层次支持向量机：将所有类别分成两个子类，再将子类进一步划分为两个次级子类，直到得到一个单独的类别</p>\n</li>\n</ul>\n<h4 id=\"？逻辑回归\"><a href=\"#？逻辑回归\" class=\"headerlink\" title=\"？逻辑回归\"></a>？逻辑回归</h4><h5 id=\"二项逻辑回归\"><a href=\"#二项逻辑回归\" class=\"headerlink\" title=\"二项逻辑回归\"></a>二项逻辑回归</h5><p><img src=\"https://i.loli.net/2020/11/29/RKDZI8SNrgvEUdY.png\" alt=\"img\"></p>\n<h5 id=\"多项逻辑回归\"><a href=\"#多项逻辑回归\" class=\"headerlink\" title=\"多项逻辑回归\"></a>多项逻辑回归</h5><p>学习多个w参数</p>\n<h4 id=\"集成学习\"><a href=\"#集成学习\" class=\"headerlink\" title=\"集成学习\"></a>集成学习</h4><p>将多个弱分类器集成在一起共同完成学习任务（严格来说不是一种机器学习算法，而是一种优化策略）</p>\n<h5 id=\"Bagging-bootstrap-aggregating\"><a href=\"#Bagging-bootstrap-aggregating\" class=\"headerlink\" title=\"Bagging(bootstrap aggregating)\"></a>Bagging(bootstrap aggregating)</h5><p>基于数据随机重抽样得分类器构建方法，统计多个模型对同一数据集的输出结果，输出投票最高者为最终结果</p>\n<h5 id=\"Boosting\"><a href=\"#Boosting\" class=\"headerlink\" title=\"Boosting\"></a>Boosting</h5><p>集中关注被已有分类器分类错误的样本，构建新的分类器，输出结果正确率高的模型得到权重更高</p>\n<p>优点：比单个模型预测的结果精确的多，被普遍使用</p>\n<p>缺点：需要大量维护</p>\n<h3 id=\"回归问题\"><a href=\"#回归问题\" class=\"headerlink\" title=\"回归问题\"></a>回归问题</h3><h4 id=\"线性回归\"><a href=\"#线性回归\" class=\"headerlink\" title=\"线性回归\"></a>线性回归</h4><p>一般流程：</p>\n<ol>\n<li>选择拟合函数形式</li>\n<li>确定损失函数性质</li>\n<li>训练算法如最小二乘、梯度下降等方法找到回归系数</li>\n<li>使用算法进行数据预测</li>\n</ol>\n<h4 id=\"线性回归扩展\"><a href=\"#线性回归扩展\" class=\"headerlink\" title=\"线性回归扩展\"></a>线性回归扩展</h4><h5 id=\"多项式拟合\"><a href=\"#多项式拟合\" class=\"headerlink\" title=\"多项式拟合\"></a>多项式拟合</h5><h4 id=\"？过拟合\"><a href=\"#？过拟合\" class=\"headerlink\" title=\"？过拟合\"></a>？过拟合</h4><p>所得回归表达式可以较为完美的描述训练集上的每一个点，但跟实际需要的模型相差很大</p>\n<p>方法：</p>\n<ul>\n<li><p>岭回归：规定参数β和λ约束方程</p>\n<p>岭回归为二次约束</p>\n</li>\n<li><p>Lasso回顾（套索回归）：</p>\n<p>Lasso回归为一次约束</p>\n</li>\n</ul>\n<h3 id=\"聚类问题\"><a href=\"#聚类问题\" class=\"headerlink\" title=\"聚类问题\"></a>聚类问题</h3><h4 id=\"K-means\"><a href=\"#K-means\" class=\"headerlink\" title=\"K-means\"></a>K-means</h4><p>属于硬聚类，一个点只能属于一个类别</p>\n<p><img src=\"https://i.loli.net/2020/11/29/6Pb5gs4N7icU9VR.png\"></p>\n<p><img src=\"https://i.loli.net/2020/11/29/RQ9JOhFu7GUnfmo.png\" alt=\"img\"></p>\n<p>优点：原理简单，实现容易，收敛速度快；聚类效果较优；只需调整参数k</p>\n<p>缺点：k值不好把握；不平衡数据集效果不佳；迭代方法结果局部最优；对异常点较敏感</p>\n<h4 id=\"高斯混合模型\"><a href=\"#高斯混合模型\" class=\"headerlink\" title=\"高斯混合模型\"></a>高斯混合模型</h4><h5 id=\"EM算法\"><a href=\"#EM算法\" class=\"headerlink\" title=\"EM算法\"></a>EM算法</h5><p>算法与k-means相似，属于软聚类，一个点可以有多个概率分别属于不同的分布</p>\n<h4 id=\"密度聚类算法\"><a href=\"#密度聚类算法\" class=\"headerlink\" title=\"密度聚类算法\"></a>密度聚类算法</h4><p><img src=\"https://i.loli.net/2020/11/29/RuBAkjpiInSOflX.png\" alt=\"img\"></p>\n<p><img src=\"https://i.loli.net/2020/11/29/acogRiFGdrIh671.png\"></p>\n<p>以距离任意点一定长度之内的点集作为分类标准</p>\n<p>缺点：有一些点因为规模不够而无法构成一个类，同时因为距离不够无法被归入其他类</p>\n<h4 id=\"层次聚类\"><a href=\"#层次聚类\" class=\"headerlink\" title=\"层次聚类\"></a>层次聚类</h4><p><img src=\"https://i.loli.net/2020/11/29/B1SfhFkpuHed9TM.png\" alt=\"img\"></p>\n<h3 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h3><h4 id=\"隐马尔可夫模型\"><a href=\"#隐马尔可夫模型\" class=\"headerlink\" title=\"隐马尔可夫模型\"></a>隐马尔可夫模型</h4><p>隐马尔可夫模型两个假设：</p>\n<p><img src=\"https://i.loli.net/2020/11/29/fhxJsm2cZP1IbCO.png\"></p>\n<p>隐马尔可夫模型三个基本问题：</p>\n<p><img src=\"https://i.loli.net/2020/11/29/5TiCewOq4ntrI61.png\"></p>\n<p>应用：词性标注、中文分词、天气预测等</p>\n<h4 id=\"LDA模型\"><a href=\"#LDA模型\" class=\"headerlink\" title=\"LDA模型\"></a>LDA模型</h4><p>文档生成器</p>\n<h2 id=\"机器学习模型评估\"><a href=\"#机器学习模型评估\" class=\"headerlink\" title=\"机器学习模型评估\"></a>机器学习模型评估</h2><h4 id=\"性能评价指标-分类\"><a href=\"#性能评价指标-分类\" class=\"headerlink\" title=\"性能评价指标-分类\"></a>性能评价指标-分类</h4><ul>\n<li>准确率：分类中正确记录个数占记录总数的比</li>\n<li>召回率（查全率）：分类样本正例多少被预测正确了</li>\n<li>AUC曲线</li>\n<li>PR曲线</li>\n<li>宏平均（全局）/微平均（细微）</li>\n<li>对数损失</li>\n</ul>\n<p>通常准确率越高召回率越低</p>\n<h4 id=\"性能评价指标-回归\"><a href=\"#性能评价指标-回归\" class=\"headerlink\" title=\"性能评价指标-回归\"></a>性能评价指标-回归</h4><ul>\n<li>平均绝对误差</li>\n<li>平均平方误差</li>\n<li>R Squared</li>\n</ul>\n<h4 id=\"性能评价指标-聚类\"><a href=\"#性能评价指标-聚类\" class=\"headerlink\" title=\"性能评价指标-聚类\"></a>性能评价指标-聚类</h4><ul>\n<li><p>外部指标</p>\n<p><img src=\"https://i.loli.net/2020/11/29/Ja5yPNGtK4mVls7.png\"></p>\n</li>\n<li><p>内部指标</p>\n<p><img src=\"https://i.loli.net/2020/11/29/pCFvxS2KdNDiQEf.png\"></p>\n</li>\n</ul>\n<h4 id=\"模型选择优化\"><a href=\"#模型选择优化\" class=\"headerlink\" title=\"模型选择优化\"></a>模型选择优化</h4><ul>\n<li>泛化误差：在“未来样本”上的误差</li>\n<li>经验误差：在训练集上的误差</li>\n</ul>\n<p>优化方法：</p>\n<ul>\n<li>AIC准则：对训练模型加以复杂度的约束</li>\n<li>BIC准则：增加训练集复杂度</li>\n</ul>\n<h2 id=\"图像识别技术\"><a href=\"#图像识别技术\" class=\"headerlink\" title=\"图像识别技术\"></a>图像识别技术</h2><p>步骤：</p>\n<ul>\n<li>特征提取</li>\n<li>索引技术</li>\n<li>相关反馈</li>\n<li>重排序</li>\n</ul>\n<h1 id=\"补充方法\"><a href=\"#补充方法\" class=\"headerlink\" title=\"补充方法\"></a>补充方法</h1><h2 id=\"特征选择与稀疏学习\"><a href=\"#特征选择与稀疏学习\" class=\"headerlink\" title=\"特征选择与稀疏学习\"></a>特征选择与稀疏学习</h2><p>信息增益越大，特征越重要</p>\n<ul>\n<li><p>过滤式特征选择</p>\n<p><img src=\"https://i.loli.net/2021/01/27/r2RMWSCn8P4Dmgk.png\" alt=\"image-20210127202611593\"></p>\n<p><img src=\"https://i.loli.net/2021/01/27/NcZ9EwGl5F1UWMC.png\" alt=\"image-20210127202738083\"></p>\n<p>该参数越大表示特征越重要，越小表示特征越不重要</p>\n</li>\n<li><p>L1正则化</p>\n<p><img src=\"https://i.loli.net/2021/01/27/uPYcLvMwd7iKaDy.png\" alt=\"image-20210127204240828\"></p>\n</li>\n<li><p>特征工程</p>\n</li>\n</ul>\n<h2 id=\"机器学习理论\"><a href=\"#机器学习理论\" class=\"headerlink\" title=\"机器学习理论\"></a>机器学习理论</h2><p><img src=\"https://i.loli.net/2021/01/27/VDQOYXtMNC1g3xT.png\" alt=\"image-20210127211804309\"></p>\n<p><img src=\"https://i.loli.net/2021/01/27/KhEWwsvbX1tnG5l.png\" alt=\"image-20210127212409103\"></p>\n<p><strong>PAC可学习</strong></p>\n<p><img src=\"https://i.loli.net/2021/01/27/OLuxSBMCDHXKQJq.png\" alt=\"image-20210127212722304\"></p>\n<p><img src=\"https://i.loli.net/2021/01/27/sdWf9zwIoKvCB43.png\" alt=\"image-20210127212822437\"></p>\n<p><img src=\"https://i.loli.net/2021/01/27/JwSr2uoqPviB93t.png\" alt=\"image-20210127213055514\"></p>\n<p><img src=\"https://i.loli.net/2021/01/27/Tv2Wnc7y4QHix1I.png\" alt=\"image-20210127213538209\"></p>\n<p><img src=\"https://i.loli.net/2021/01/27/8kucJ1FiatlebPZ.png\" alt=\"image-20210127213559899\"></p>\n<p>VC维越高，其特征保留能力越强</p>\n<h2 id=\"半监督学习\"><a href=\"#半监督学习\" class=\"headerlink\" title=\"半监督学习\"></a>半监督学习</h2><p><img src=\"https://i.loli.net/2021/01/27/zTHdGcgBZjI8Uon.png\" alt=\"image-20210127214139342\"></p>\n<p><img src=\"https://i.loli.net/2021/01/28/shVtvc3XjIwZST8.png\" alt=\"image-20210128144247051\"></p>\n<h3 id=\"高斯混合模型-1\"><a href=\"#高斯混合模型-1\" class=\"headerlink\" title=\"高斯混合模型\"></a>高斯混合模型</h3><p><img src=\"https://i.loli.net/2021/01/28/ly542zT7WMBrhPa.png\" alt=\"image-20210128144522496\"></p>\n<p><img src=\"https://i.loli.net/2021/01/28/Lk7fdwM9BOzyNcU.png\" alt=\"image-20210128144902506\"></p>\n<h3 id=\"半监督SVM\"><a href=\"#半监督SVM\" class=\"headerlink\" title=\"半监督SVM\"></a>半监督SVM</h3><p><img src=\"https://i.loli.net/2021/01/28/SCJmOyL8Vtg1Fka.png\" alt=\"image-20210128145040316\"></p>\n<p>应用：NER等</p>\n<h2 id=\"概率图\"><a href=\"#概率图\" class=\"headerlink\" title=\"概率图\"></a>概率图</h2><p>概率图模型：用图来表达变量关系的模型</p>\n<p><img src=\"https://i.loli.net/2021/01/28/hOSzliD6PCKkEfb.png\" alt=\"image-20210128145808089\"></p>\n<h3 id=\"马尔科夫假设\"><a href=\"#马尔科夫假设\" class=\"headerlink\" title=\"马尔科夫假设\"></a>马尔科夫假设</h3><p><img src=\"https://i.loli.net/2021/01/28/S2dIOqnDMcE6BLv.png\" alt=\"image-20210128145735976\"></p>\n<p>隐马尔科夫模型</p>\n<p><img src=\"https://i.loli.net/2021/01/28/QK3TiH5qLmA16DI.png\" alt=\"image-20210128150002611\"></p>\n<p><img src=\"https://i.loli.net/2021/01/28/7l8Xx4iojPHhR12.png\" alt=\"image-20210128150041948\"></p>\n<p><img src=\"https://i.loli.net/2021/01/28/UcViNRMS4HFO3jJ.png\" alt=\"image-20210128150338737\"></p>\n<ul>\n<li>π初始状态概率：yi=si得概率</li>\n<li>A状态转移概率：yi为si，yi+1为sj得概率，即从si变为sj得概率</li>\n<li>B输出观测概率：观察到的yi状态</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/01/28/dozpN2g4UfCVaQs.png\" alt=\"image-20210128151426878\"></p>\n<p>用最大似然估计法(或EM算法)来计算各词性得概率，取P最大得此行组合作为预测结果</p>\n<p>隐马尔科夫模型模型复杂度</p>\n<p><img src=\"https://i.loli.net/2021/01/28/vh8gZpAskwi2mtl.png\" alt=\"image-20210128161630134\"></p>\n<p>可用维特比算法减少复杂度，即及时除去不需要的路径</p>\n<h2 id=\"规则学习\"><a href=\"#规则学习\" class=\"headerlink\" title=\"规则学习\"></a>规则学习</h2><p><img src=\"https://i.loli.net/2021/01/28/kxqrz6sne35P4wt.png\" alt=\"image-20210128161745567\"></p>\n<p><img src=\"https://i.loli.net/2021/01/28/mv8XRYkE95rWdPc.png\" alt=\"image-20210128161854776\"></p>\n<p><img src=\"https://i.loli.net/2021/01/28/opwHzJT6C1rZBF9.png\" alt=\"image-20210128162757984\"></p>\n<ul>\n<li>自顶向下–生成测试方法</li>\n<li>自底向上–数据驱动方法</li>\n</ul>\n<h2 id=\"强化学习\"><a href=\"#强化学习\" class=\"headerlink\" title=\"强化学习\"></a>强化学习</h2><p><img src=\"https://i.loli.net/2021/01/28/hAB6w8kzmjRQSes.png\" alt=\"image-20210128200559290\"></p>\n<p>动态分割得思想进行算法分配</p>\n<p><img src=\"https://i.loli.net/2021/01/28/4jFYtWxk9lLPUTm.png\" alt=\"image-20210128205715359\"></p>\n<p>当算法效果稳定程度不同时选择不同的算法分配组合</p>\n<p><img src=\"https://i.loli.net/2021/01/28/B7hYfUV6j8FLtoZ.png\" alt=\"image-20210128205819388\"></p>\n<p><strong>单状态/多状态</strong></p>\n<p><img src=\"https://i.loli.net/2021/01/28/RDMmEPKeyu74gVq.png\" alt=\"image-20210128205901915\"></p>\n<p><strong>有模型学习/无模型学习</strong></p>\n<p><img src=\"https://i.loli.net/2021/01/28/8BQp7HNfrn2hvxK.png\" alt=\"image-20210128210010250\"></p>\n","categories":["机器学习"]},{"title":"树相关","url":"/2021/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/","content":"<h1 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h1><p>二叉查找树又名二叉搜索树（BST），与一般的二叉树最大的区别是：任何节点的键值一定大于其左子树中的每一个节点的键值，并小于其右子树的每一个节点的键值。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20211113184329.png\" alt=\"image-20211113184322807\"></p>\n<p>这种树最大的缺点就是极端情况数据结构退化到与链表相似，查找效率低下</p>\n<h1 id=\"AVL树\"><a href=\"#AVL树\" class=\"headerlink\" title=\"AVL树\"></a>AVL树</h1><p>二叉查找树最大的问题就是如果不手动进行平衡就有可能很快失衡，查找性能下降到与链表相近</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20211113184520.png\" alt=\"image-20211113184520708\"></p>\n<p>AVL树也称平衡二叉查找树，在插入和删除时会自动根据每个节点的左右结点数进行适当的左旋或右旋</p>\n<p>9结点不平衡，右旋：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20211113184857.png\" alt=\"image-20211113184857501\"></p>\n<p>优点：</p>\n<p>平衡度很高，查找性能好</p>\n<p>缺点：</p>\n<p>插入和删除结点时操作繁琐，需要经常进行左旋或右旋操作</p>\n<h1 id=\"B树\"><a href=\"#B树\" class=\"headerlink\" title=\"B树\"></a>B树</h1><p>B树(B-tree)即多路查找树上面的AVL树也是一种特殊的B树，查找效率为logn</p>\n<p>设计成多路是为了降低树的高度，但如果不限制路数的话，结构就会退化成有序数组了。</p>\n<p><strong>注意：B树没有要求一定是二叉树，B树的每一个结点都有可能有多于2个子结点</strong></p>\n<p>一般会将B树与B+树放在一起比较</p>\n<h2 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h2><ul>\n<li>有m个子树的中间节点包含有m个元素（B树中是k-1个元素），每个元素不保存数据，只用来索引；</li>\n<li>所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大的顺序链接，所有叶子结点之间维护了一条链表。 (而B 树的叶子节点并没有包括全部需要查找的信息)；</li>\n<li>所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键字，查找效率较为稳定，并且可以很大程度避免随机IO的问题。 (而B 树的非终节点也包含需要查找的有效信息)；</li>\n</ul>\n<h1 id=\"2-3-4树\"><a href=\"#2-3-4树\" class=\"headerlink\" title=\"2-3-4树\"></a>2-3-4树</h1><ul>\n<li>2结点：包含1个元素的结点，有2个子结点</li>\n<li>3结点：包含2个元素的结点，有3个子结点</li>\n<li>4结点：包含3个元素的结点，有4个子结点</li>\n</ul>\n<p>同时满足二叉搜索树的相关特性</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20211113191531.png\" alt=\"image-20211113191531109\"></p>\n<p>当进行插入时，会尝试合并当前结点，如果当前结点的元素个数等于3，不能继续合并，则中间结点上升，需要插入的结点再向下尝试合并插入</p>\n<h1 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h1><p>也称RBT(Red Black Tree)，红黑树是为了简化AVL树的平衡操作而设计出来的，维护效率更高</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2b1ffbfa5872e18b501b9a58e6bf5137.png\"></p>\n<p>红黑树要求：</p>\n<ul>\n<li>每个节点要么是黑色要么是红色</li>\n<li>根节点是黑色</li>\n<li>每个叶子结点（NIL）是黑色</li>\n<li>每个红色结点的子结点一定是黑色</li>\n<li>任意一个结点到每个叶子结点(NIL)的路径都包括数量相同的黑结点</li>\n</ul>\n<p>根据上面这些定义，我们可以先一步假设：红黑树与平衡二叉树相比只注重黑结点的平衡，因而效率较高</p>\n<p>由于定义5的存在，如果我们新插入结点时插入的是黑色结点，那么一定会打破之前已经平衡了的红黑树的平衡，因此推导出：<strong>新插入的结点必须以红结点进行尝试</strong></p>\n<p><strong>旋转和变色的情况考虑</strong></p>\n<p><a href=\"https://blog.csdn.net/zhaoyajie1011/article/details/107791743\">深入理解红黑树的演变、变色、旋转！从此告别背诵面试题！</a></p>\n<p><strong>一个红黑树结点模拟网站</strong></p>\n<p><a href=\"https://www.cs.usfca.edu/~galles/visualization/RedBlack.html\">Red/Black Tree Visualization (usfca.edu)</a></p>\n<p>需要变动的情况：</p>\n<ul>\n<li>父节点为红：如果父节点为黑，这时插入红色的子结点不会影响红黑树的平衡</li>\n<li>叔叔结点不存在或叔叔结点为黑色，不论是哪一种情况，必然会使得定义5不平衡</li>\n</ul>\n<p>变动的四种具体情景：</p>\n<ul>\n<li>LL型：父节点变黑，祖父节点变红，祖父节点右旋</li>\n<li>LR型：父节点左旋，变为LL型，然后执行LL型的操作</li>\n<li>RR型：父节点变黑，祖父节点变红，祖父节点左旋</li>\n<li>RL型：父节点右旋，变为RR型，然后执行RR型的操作</li>\n</ul>\n<p>红黑树与AVL树的比较：</p>\n<ol>\n<li>AVL更平衡，结构上更加直观，时间效能针对读取而言更高；维护稍慢，空间开销较大。</li>\n<li>红黑树，读取略逊于AVL，维护强于AVL，空间开销与AVL类似，内容极多时略优于AVL，维护优于AVL。</li>\n<li>基本上主要的几种平衡树看来，红黑树有着良好的稳定性和完整的功能，性能表现也很不错，综合实力强，在诸如STL的场景中需要稳定表现。</li>\n<li>红黑树的查询性能略微逊色于AVL树，因为其比AVL树会稍微不平衡最多一层，也就是说红黑树的查询性能只比相同内容的AVL树最多多一次比较，但是，红黑树在插入和删除上优于AVL树，AVL树每次插入删除会进行大量的平衡度计算，而红黑树为了维持红黑性质所做的红黑变换和旋转的开销，相较于AVL树为了维持平衡的开销要小得多</li>\n</ol>\n<p>综上，如果是查找远多于插入和删除的情境下可以选择AVL树；如果查找、插入和删除的发生频率近似，处于一种综合场景，选择红黑树会是更优的答案</p>\n","categories":["数据结构"]},{"title":"Markdown learning","url":"/2020/09/02/%E6%9D%82%E9%A1%B9/markdown/","content":"<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><p>行内式两头加上反引号`</p>\n<p>多行代码上下行加三重反引```</p>\n<p>段落前加大于号(可分级)<br><code>&gt;段落1</code> <code>&gt;&gt;段落2</code></p>\n<p>三种分割线<code>***或---或___</code></p>\n<p>换行可用<code>&lt;br\\&gt;</code></p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><p><strong>无序列表</strong> *-+(加号空格)<br><code>+ sad</code><br>多级列表(前面加tab)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">+ 一层</span><br><span class=\"line\">  + 二层</span><br><span class=\"line\">    + 三层</span><br></pre></td></tr></table></figure>\n<p><strong>有序列表</strong>(数字.空格)<br><code>1. first</code></p>\n<p><strong>表格</strong><br>加空格使对齐（非必要）冒号设置对其方向</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">|Tables       |Are          |Cool |</span><br><span class=\"line\">|------       |:----:       |----:|</span><br><span class=\"line\">|col 3 is     |right-aligned|$1600|</span><br><span class=\"line\">|col 2 is     |centered     |$12  |</span><br><span class=\"line\">|zebra stripes|are neat     |$1   |</span><br></pre></td></tr></table></figure>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>小标题前加#(space)<br>斜前后*<br>粗前后**<br>粗斜前后***<br>删除字前后~~<br>缩进<code>&amp;emsp;</code>（一个中文字符）<br>半个<code>&amp;ensp;</code><br>四分之一个<code>&amp;nbsp;</code><br>居中（html标签）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div align&#x3D;center&gt;(内容)</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p><strong>超链接</strong><br><code>[显示名称](http://www.bilibili.com &quot;注释名称&quot;)</code><br>直接显示<code>&lt;http://www.bilibili.com&gt;</code><br>后方注释<code>[名称1][wangzhi1]</code></p>\n<p><strong>图片链接</strong><br><code>![名称](..\\images\\test.png)</code><br>后方注释<code>![名称1][image1]</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[wangzhi1]:http:&#x2F;&#x2F;www.bilibili.com</span><br><span class=\"line\">[image1]:..\\images\\test.png</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>详细语法</strong>：<br><a href=\"https://blog.csdn.net/u014061630/article/details/81359144?biz_id=102&utm_term=markdown%E8%AF%AD%E6%B3%95&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-81359144&spm=1018.2118.3001.4187#25-%E4%BB%A3%E7%A0%81%E5%9D%97\">csdn教程</a></p>\n<p><strong>博客搭建参考</strong><br><a href=\"https://koorye.github.io/2020/07/11/%E5%88%A9%E7%94%A8GitHub+Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/\">koorye的博客</a></p>\n","categories":["杂项"]},{"title":"JavaWeb实战--Smbms项目","url":"/2021/02/25/JavaEE/JavaWeb%E5%AE%9E%E6%88%98--Smbms/","content":"<p>整体框架</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210225212626877.png\" alt=\"image-20210225212626877\"></p>\n<p>数据库表</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210225212812090.png\" alt=\"image-20210225212812090\"></p>\n<p><strong>项目如何搭建？</strong>通过Maven模板创建项目</p>\n<h2 id=\"项目搭建步骤\"><a href=\"#项目搭建步骤\" class=\"headerlink\" title=\"项目搭建步骤\"></a>项目搭建步骤</h2><ol>\n<li><p>通过Maven模板搭建项目</p>\n</li>\n<li><p>配置Tomcat</p>\n</li>\n<li><p>导包(测试项目是否顺利运行)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">servlet-api,jsp-api,jstl,standard,mysql-connector-java等</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建项目包结构</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210225231854758.png\" alt=\"image-20210225231854758\"></p>\n</li>\n<li><p>编写实体类(ORM映射)</p>\n<p>对应数据表中的所有变量，再加上get&amp;set方法</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210225225015070.png\" alt=\"image-20210225225015070\"></p>\n</li>\n<li><p>编写基础公共类</p>\n<ul>\n<li><p>数据库配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">driver</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">jdbc:mysql://localhost:3306?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"string\">123456</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写数据库公共类BaseDao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">package</span> com.lan5th.dao;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"> <span class=\"keyword\">import</span> java.sql.*;</span><br><span class=\"line\"> <span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseDao</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String driver;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String url;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String username;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String password;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">//静态代码块</span></span><br><span class=\"line\">     <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">         Properties properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\"> </span><br><span class=\"line\">         <span class=\"comment\">//用流加载配置文件</span></span><br><span class=\"line\">         InputStream in = BaseDao.class.getClassLoader().getResourceAsStream(&quot;db.properties&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             properties.load(in);</span><br><span class=\"line\">         &#125; <span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">             e.printStackTrace();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">         driver = properties.getProperty(<span class=\"string\">&quot;driver&quot;</span>);</span><br><span class=\"line\">         url = properties.getProperty(<span class=\"string\">&quot;url&quot;</span>);</span><br><span class=\"line\">         username = properties.getProperty(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">         password = properties.getProperty(<span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">//获取数据库链接</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">         Connection connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             Class.forName(driver);</span><br><span class=\"line\">             connection = DriverManager.getConnection(url, username, password);</span><br><span class=\"line\">         &#125; <span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">             e.printStackTrace();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> connection;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">//公共查询方法</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ResultSet <span class=\"title\">execute</span><span class=\"params\">(Connection connection, PreparedStatement preparedStatement, ResultSet resultSet, String sql, Object[] params)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">//预编译的sql执行时不需要传参</span></span><br><span class=\"line\">         preparedStatement = connection.prepareStatement(sql);</span><br><span class=\"line\"> </span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; params.length; i++)&#123;</span><br><span class=\"line\">             preparedStatement.setObject(i+<span class=\"number\">1</span>,params[i]);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">         resultSet = preparedStatement.executeQuery();</span><br><span class=\"line\">         <span class=\"comment\">//返回结果集resultSet</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> resultSet;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">//公共删改方法</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">execute</span><span class=\"params\">(Connection connection, PreparedStatement preparedStatement, String sql, Object[] params)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">         preparedStatement = connection.prepareStatement(sql);</span><br><span class=\"line\"> </span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; params.length; i++)&#123;</span><br><span class=\"line\">             preparedStatement.setObject(i+<span class=\"number\">1</span>,params[i]);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">         <span class=\"keyword\">int</span> updateRows = preparedStatement.executeUpdate();</span><br><span class=\"line\">         <span class=\"comment\">//返回受影响的行数</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> updateRows;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">//回收资源</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">closeResource</span><span class=\"params\">(Connection connection, PreparedStatement preparedStatement, ResultSet resultSet)</span></span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">         <span class=\"keyword\">if</span> (resultSet != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">             <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                 resultSet.close();</span><br><span class=\"line\">                 resultSet = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">             &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                 throwables.printStackTrace();</span><br><span class=\"line\">                 flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                 preparedStatement.close();</span><br><span class=\"line\">                 preparedStatement = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">             &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                 throwables.printStackTrace();</span><br><span class=\"line\">                 flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                 connection.close();</span><br><span class=\"line\">                 connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">             &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                 throwables.printStackTrace();</span><br><span class=\"line\">                 flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">         <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写字符编码过滤器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lan5th.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CharacterEncodingFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        servletRequest.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        servletResponse.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        servletResponse.setContentType(<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>导入静态资源</p>\n</li>\n</ol>\n<p><strong>创建数据表</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`smbms_address`</span> (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;主键&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`contact`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">15</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;联系人姓名&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`addressDesc`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;收货地址&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`postCode`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">15</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;邮编&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`tel`</span> <span class=\"built_in\">int</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;联系人电话&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`createdBy`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;创建者&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`creationDate`</span> datetime <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;创建时间&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`modifyBy`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;修改者&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`modifyDate`</span> datetime <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;修改时间&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`userId`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;用户ID&#x27;</span>,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`smbms_user`</span> (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;id&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`userCode`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">15</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;用户编码&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`userName`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">15</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;用户名字&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`userPassword`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;用户密码&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`gender`</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;性别&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`birthday`</span> <span class=\"built_in\">date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;出生日期&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`phone`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;电话&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`address`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;地址&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`userRole`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;用户角色&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`createdBy`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;创建者&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`creationDate`</span> datetime <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;创建时间&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`modifyBy`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;更新者&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`modifyDate`</span> datetime <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;更新时间&#x27;</span>,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`smbms_bill`</span> (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;id&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`billCode`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;账单编码&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`productName`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;商品名称&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`productDesc`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;商品描述&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`productUnit`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">60</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;商品数量&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`productCount`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">20</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;总金额&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`totalPrice`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">20</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;是否支付&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`isPayment`</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;供应商ID&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`createdBy`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;创建者&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`creationDate`</span> datetime <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;创建时间&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`modifyBy`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;更新者&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`modifyDate`</span> datetime <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;更新时间&#x27;</span>,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`smbms_role`</span> (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;id&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`roleCode`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;角色编码&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`roleName`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">15</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;角色名称&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`createdBy`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;创建者&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`creationDate`</span> datetime <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;创建时间&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`modifyBy`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;更新者&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`modifyDate`</span> datetime <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;更新时间&#x27;</span>,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`smbms_provider`</span> (</span><br><span class=\"line\">    <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;id&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`proCode`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">15</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;供应商编码&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`proName`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">15</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;供应商名称&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`proDesc`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;供应商描述&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`proContact`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">15</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;供应商联系人&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`proPhone`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;供应商电话&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`userAddress`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;供应商地址&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`userFax`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;供应商传真&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`createdBy`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;创建者&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`creationDate`</span> datetime <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;创建时间&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`modifyBy`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;更新者&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`modifyDate`</span> datetime <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;更新时间&#x27;</span>,</span><br><span class=\"line\">    PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"登录过程实现\"><a href=\"#登录过程实现\" class=\"headerlink\" title=\"登录过程实现\"></a>登录过程实现</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210226104128466.png\" alt=\"image-20210226104128466\"></p>\n<ol>\n<li><p>编写前端页面</p>\n</li>\n<li><p>设置首页</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--设置欢迎页--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>login.jsp<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写dao层用户登陆的接口UserDao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getLoginUser</span><span class=\"params\">(Connection connection,String userCode)</span></span>;</span><br><span class=\"line\">&#125;l</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写dao接口实现类UserDaoImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getLoginUser</span><span class=\"params\">(Connection connection, String userCode)</span> </span>&#123;</span><br><span class=\"line\">        PreparedStatement ppst = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        User user = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (connection!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//编写sql</span></span><br><span class=\"line\">            String sql = <span class=\"string\">&quot;select * from smbms_user where userCode=?&quot;</span>;</span><br><span class=\"line\">            Object[] params = &#123;userCode&#125;;</span><br><span class=\"line\">R</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//公共类BaseDao的execute方法返回ResultSet对象</span></span><br><span class=\"line\">                rs = BaseDao.execute(connection, ppst, rs, sql, params);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rs.next())&#123;</span><br><span class=\"line\">                    user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">                    user.setId(rs.getInt(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\">                    user.setUserCode(rs.getString(<span class=\"string\">&quot;userCode&quot;</span>));</span><br><span class=\"line\">                    user.setUserName(rs.getString(<span class=\"string\">&quot;userName&quot;</span>));</span><br><span class=\"line\">                    user.setUserPassword(rs.getString(<span class=\"string\">&quot;userPassword&quot;</span>));</span><br><span class=\"line\">                    user.setGender(rs.getInt(<span class=\"string\">&quot;gender&quot;</span>));</span><br><span class=\"line\">                    user.setBirthday(rs.getDate(<span class=\"string\">&quot;birthday&quot;</span>));</span><br><span class=\"line\">                    user.setPhone(rs.getString(<span class=\"string\">&quot;phone&quot;</span>));</span><br><span class=\"line\">                    user.setAddress(rs.getString(<span class=\"string\">&quot;address&quot;</span>));</span><br><span class=\"line\">                    user.setUserRole(rs.getInt(<span class=\"string\">&quot;userRole&quot;</span>));</span><br><span class=\"line\">                    user.setCreatedBy(rs.getInt(<span class=\"string\">&quot;createdBy&quot;</span>));</span><br><span class=\"line\">                    user.setCreationDate(rs.getDate(<span class=\"string\">&quot;creationDate&quot;</span>));</span><br><span class=\"line\">                    user.setModifyBy(rs.getInt(<span class=\"string\">&quot;modifyBy&quot;</span>));</span><br><span class=\"line\">                    user.setModifyDate(rs.getTimestamp(<span class=\"string\">&quot;modifyDate&quot;</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                BaseDao.closeResource(<span class=\"keyword\">null</span>,ppst,rs);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">                throwables.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>业务层接口UserService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">login</span><span class=\"params\">(String userCode, String password)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>业务层实现类UserServiceImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//在构造方法中实例化UserDao对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserServiceImpl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        userDao = <span class=\"keyword\">new</span> UserDaoImpl();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">login</span><span class=\"params\">(String userCode, String password)</span> </span>&#123;</span><br><span class=\"line\">        Connection connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        User user = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = BaseDao.getConnection();</span><br><span class=\"line\">            <span class=\"comment\">//由用户码查询用户记录对象</span></span><br><span class=\"line\">            user = userDao.getLoginUser(connection, userCode);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            BaseDao.closeResource(connection, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//若不为空，则检查用户码和密码是否相匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (user.getUserCode().equals(userCode)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (user.getUserPassword().equals(password)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//为空则直接返回null</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写servlet层LoginServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String userCode = req.getParameter(<span class=\"string\">&quot;userCode&quot;</span>);</span><br><span class=\"line\">        String userPassword = req.getParameter(<span class=\"string\">&quot;userPassword&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//由业务层进行用户名和密码比对</span></span><br><span class=\"line\">        UserServiceImpl userService = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">        User user = userService.login(userCode, userPassword);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//跳转主页，生成session</span></span><br><span class=\"line\">            req.getSession().setAttribute(Constants.USER_SESSION,user);</span><br><span class=\"line\">            req.getRequestDispatcher(<span class=\"string\">&quot;jsp/userPage.jsp&quot;</span>).forward(req, resp);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//跳转回登陆页面，并展示提示信息</span></span><br><span class=\"line\">            req.setAttribute(<span class=\"string\">&quot;error&quot;</span>,<span class=\"string\">&quot;用户名或密码不正确&quot;</span>);</span><br><span class=\"line\">            req.getRequestDispatcher(<span class=\"string\">&quot;login.jsp&quot;</span>).forward(req,resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        doGet(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册servlet</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>LoginServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.lan5th.servlet.LoginServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>LoginServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/login.do<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试访问，确保以上功能成功</p>\n</li>\n</ol>\n<h3 id=\"登录功能优化\"><a href=\"#登录功能优化\" class=\"headerlink\" title=\"登录功能优化\"></a>登录功能优化</h3><ul>\n<li><p>注销功能：编写LogoutServlet移除Session</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">req.getSession().removeAttribute(Constants.USER_SESSION);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>登录拦截器：过滤器</p>\n<ul>\n<li><p>编写过滤器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SysFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class=\"line\">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\">        User user = (User) request.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(user == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            response.sendRedirect(request.getContextPath()+<span class=\"string\">&quot;/login.jsp&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            filterChain.doFilter(request,response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册过滤器</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"修改密码功能实现\"><a href=\"#修改密码功能实现\" class=\"headerlink\" title=\"修改密码功能实现\"></a>修改密码功能实现</h2><ol>\n<li><p>编写页面</p>\n</li>\n<li><p>扩充UserDao接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pwdModify</span><span class=\"params\">(Connection connection, <span class=\"keyword\">int</span> userCode, String pwd)</span></span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>扩充UserDao实现类UserDaoImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pwdModify</span><span class=\"params\">(Connection connection, <span class=\"keyword\">int</span> id, String pwd)</span> </span>&#123;</span><br><span class=\"line\">    PreparedStatement ppst = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    User user = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (connection!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        String sql = <span class=\"string\">&quot;update smbms_user set userPassword=? where id=?&quot;</span>;</span><br><span class=\"line\">        Object[] params = &#123;pwd,id&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            flag = BaseDao.execute(connection, ppst, sql, params);</span><br><span class=\"line\">            BaseDao.closeResource(<span class=\"keyword\">null</span>,ppst,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">            throwables.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>扩充UserService接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">pwdModify</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String password)</span></span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>扩充UserService实现类UserServiceImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">pwdModify</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String password)</span> </span>&#123;</span><br><span class=\"line\">    Connection connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改密码</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        connection = BaseDao.getConnection();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userDao.pwdModify(connection, id, password) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        BaseDao.closeResource(connection, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实现Userservlet复用</p>\n<p>通过前端传入method属性值来判断执行的方法</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;form method=<span class=\"string\">&quot;post&quot;</span> action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/user.do&quot;</span>&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;hidden&quot;</span> name=<span class=\"string\">&quot;method&quot;</span> value=<span class=\"string\">&quot;modifyPwd&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String method = req.getParameter(<span class=\"string\">&quot;method&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">&quot;modifyPwd&quot;</span>)&amp;&amp;method!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.modifyPwd(req,resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        doGet(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">modifyPwd</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        Object o = req.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class=\"line\">        String newPassword = req.getParameter(<span class=\"string\">&quot;newPassword&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o!=<span class=\"keyword\">null</span>&amp;&amp; !StringUtils.isNullOrEmpty(newPassword))&#123;</span><br><span class=\"line\">            UserServiceImpl userService = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">            flag = userService.pwdModify(((User) o).getId(), newPassword);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag)&#123;</span><br><span class=\"line\">                req.setAttribute(<span class=\"string\">&quot;message&quot;</span>, <span class=\"string\">&quot;密码修改成功&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//密码修改成功，移除Session</span></span><br><span class=\"line\">                req.getSession().removeAttribute(Constants.USER_SESSION);</span><br><span class=\"line\">                req.getRequestDispatcher(<span class=\"string\">&quot;/error.jsp&quot;</span>).forward(req,resp);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        req.setAttribute(<span class=\"string\">&quot;message&quot;</span>, <span class=\"string\">&quot;密码修改失败，请检查输入&quot;</span>);</span><br><span class=\"line\">        req.getRequestDispatcher(<span class=\"string\">&quot;/jsp/pwdModify.jsp&quot;</span>).forward(req,resp);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用ajax实现动态请求</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210227223504709.png\" alt=\"image-20210227223504709\"></p>\n</li>\n<li><p>在UserServlet中实现动态请求的响应</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210227223715327.png\" alt=\"image-20210227223715327\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210227223814004.png\" alt=\"image-20210227223814004\"></p>\n</li>\n</ol>\n<h2 id=\"用户管理功能\"><a href=\"#用户管理功能\" class=\"headerlink\" title=\"用户管理功能\"></a>用户管理功能</h2><p>因完成该功能需要前端js支持，暂时不给予实现，只给出关键代码</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210228094054117.png\" alt=\"image-20210228094054117\"></p>\n<ol>\n<li><p>添加分页支持PageSupport</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PageSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> currentPageNo = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> totalCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> pageSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> totalPageCount = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCurrentPageNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> currentPageNo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCurrentPageNo</span><span class=\"params\">(<span class=\"keyword\">int</span> currentPageNo)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentPageNo &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.currentPageNo = currentPageNo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getTotalCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTotalCount</span><span class=\"params\">(<span class=\"keyword\">int</span> totalCount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(totalCount &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.totalCount = totalCount;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.setTotalPageCountByRs();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPageSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pageSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPageSize</span><span class=\"params\">(<span class=\"keyword\">int</span> pageSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pageSize &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.pageSize = pageSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getTotalPageCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalPageCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTotalPageCount</span><span class=\"params\">(<span class=\"keyword\">int</span> totalPageCount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.totalPageCount = totalPageCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTotalPageCountByRs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.totalCount % <span class=\"keyword\">this</span>.pageSize == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.totalPageCount = <span class=\"keyword\">this</span>.totalCount / <span class=\"keyword\">this</span>.pageSize;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.totalCount % <span class=\"keyword\">this</span>.pageSize &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.totalPageCount = <span class=\"keyword\">this</span>.totalCount % <span class=\"keyword\">this</span>.pageSize + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.totalPageCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>扩充UserDaoImpl层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取展示的数据条数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getUserCount</span><span class=\"params\">(Connection connection, String username, <span class=\"keyword\">int</span> userRole)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    PreparedStatement ppst = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (connection!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        StringBuffer sql = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        sql.append(<span class=\"string\">&quot;select count(1) from smbms_user u,smbms_role r where u.userRole = r.id&quot;</span>);</span><br><span class=\"line\">        ArrayList list = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        <span class=\"comment\">//选择用户名添加限制条件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isNullOrEmpty(username))&#123;</span><br><span class=\"line\">            sql.append(<span class=\"string\">&quot; and u.username like ?&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//模糊查询前后加百分号</span></span><br><span class=\"line\">            list.add(<span class=\"string\">&quot;%&quot;</span>+username+<span class=\"string\">&quot;%&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//选择用户角色添加限制条件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userRole&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            sql.append(<span class=\"string\">&quot; and u.userRole = ?&quot;</span>);</span><br><span class=\"line\">            list.add(userRole);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将list转换为数组</span></span><br><span class=\"line\">        Object[] params = list.toArray();</span><br><span class=\"line\">        BaseDao.execute(connection,ppst,sql.toString(),params);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rs.next())&#123;</span><br><span class=\"line\">            count = rs.getInt(<span class=\"string\">&quot;count&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取用户列表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getUserList</span><span class=\"params\">(Connection connection, String username, <span class=\"keyword\">int</span> userRole, <span class=\"keyword\">int</span> currentPageNo, <span class=\"keyword\">int</span> pageSize)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    PreparedStatement ppst = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;User&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (connection!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        StringBuffer sql = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        sql.append(<span class=\"string\">&quot;select count(1) from smbms_user u,smbms_role r where u.userRole = r.id&quot;</span>);</span><br><span class=\"line\">        ArrayList list = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        <span class=\"comment\">//选择用户名添加限制条件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isNullOrEmpty(username))&#123;</span><br><span class=\"line\">            sql.append(<span class=\"string\">&quot; and u.username like ?&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//模糊查询前后加百分号</span></span><br><span class=\"line\">            list.add(<span class=\"string\">&quot;%&quot;</span>+username+<span class=\"string\">&quot;%&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//选择用户角色添加限制条件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userRole&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            sql.append(<span class=\"string\">&quot; and u.userRole = ?&quot;</span>);</span><br><span class=\"line\">            list.add(userRole);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//利用SQL查询的limit实现分页</span></span><br><span class=\"line\">        sql.append(<span class=\"string\">&quot; order by creationDate DESC limit ?,?&quot;</span>);</span><br><span class=\"line\">        currentPageNo = (currentPageNo-<span class=\"number\">1</span>)*pageSize;</span><br><span class=\"line\">        list.add(currentPageNo);</span><br><span class=\"line\">        list.add(pageSize);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将list转换为数组</span></span><br><span class=\"line\">        Object[] params = list.toArray();</span><br><span class=\"line\">        rs = BaseDao.execute(connection,ppst,rs,sql.toString(),params);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (rs.next())&#123;</span><br><span class=\"line\">            User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">            user.setId(rs.getInt(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\">            user.setUserCode(rs.getString(<span class=\"string\">&quot;userCode&quot;</span>));</span><br><span class=\"line\">            user.setUserName(rs.getString(<span class=\"string\">&quot;userName&quot;</span>));</span><br><span class=\"line\">            user.setGender(rs.getInt(<span class=\"string\">&quot;gender&quot;</span>));</span><br><span class=\"line\">            user.setBirthday(rs.getDate(<span class=\"string\">&quot;birthday&quot;</span>));</span><br><span class=\"line\">            user.setPhone(rs.getString(<span class=\"string\">&quot;phone&quot;</span>));</span><br><span class=\"line\">            user.setUserRole(rs.getInt(<span class=\"string\">&quot;userRole&quot;</span>));</span><br><span class=\"line\">            userList.add(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        BaseDao.closeResource(<span class=\"keyword\">null</span>,ppst,rs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>扩充UserServiceImpl层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getUserCount</span><span class=\"params\">(String username, <span class=\"keyword\">int</span> userRole)</span> </span>&#123;</span><br><span class=\"line\">    Connection connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        connection = BaseDao.getConnection();</span><br><span class=\"line\">        count = userDao.getUserCount(connection, username, userRole);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">        throwables.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        BaseDao.closeResource(connection,<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getUserList</span><span class=\"params\">(String username, <span class=\"keyword\">int</span> userRole, <span class=\"keyword\">int</span> currentPageNo, <span class=\"keyword\">int</span> pageSize)</span> </span>&#123;</span><br><span class=\"line\">    Connection connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    List&lt;User&gt; userList = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        connection = BaseDao.getConnection();</span><br><span class=\"line\">        userList = userDao.getUserList(connection, username, userRole, currentPageNo,pageSize);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">        throwables.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        BaseDao.closeResource(connection,<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> userList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写RoleDaoImpl层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoleDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">RoleDao</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Role&gt; <span class=\"title\">getRoleList</span><span class=\"params\">(Connection connection)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        PreparedStatement ppst = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ArrayList&lt;Role&gt; roleList = <span class=\"keyword\">new</span> ArrayList&lt;Role&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(connection!= <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            String sql = <span class=\"string\">&quot;select * from smbms_role&quot;</span>;</span><br><span class=\"line\">            Object[] params = &#123;&#125;;</span><br><span class=\"line\">            rs = BaseDao.execute(connection,ppst,rs,sql,params);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (rs.next())&#123;</span><br><span class=\"line\">                Role role = <span class=\"keyword\">new</span> Role();</span><br><span class=\"line\">                role.setId(rs.getInt(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\">                role.setRoleCode(rs.getString(<span class=\"string\">&quot;roleCode&quot;</span>));</span><br><span class=\"line\">                role.setRoleName(rs.getString(<span class=\"string\">&quot;roleName&quot;</span>));</span><br><span class=\"line\">                roleList.add(role);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            BaseDao.closeResource(<span class=\"keyword\">null</span>,ppst,rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> roleList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写RoleServiceImpl层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoleServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">RoleService</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RoleDao roleDao;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RoleServiceImpl</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        roleDao = <span class=\"keyword\">new</span> RoleDaoImpl();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Role&gt; <span class=\"title\">getRoleList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Connection connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        List&lt;Role&gt; roleList = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = BaseDao.getConnection();</span><br><span class=\"line\">            roleList = roleDao.getRoleList(connection);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException throwables) &#123;</span><br><span class=\"line\">            throwables.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            BaseDao.closeResource(connection,<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> roleList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>扩充UserServlet(重点)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">query</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取前端数据</span></span><br><span class=\"line\">    String queryUserName = req.getParameter(<span class=\"string\">&quot;queryName&quot;</span>);</span><br><span class=\"line\">    String temp = req.getParameter(<span class=\"string\">&quot;queryUserRole&quot;</span>);</span><br><span class=\"line\">    String pageIndex = req.getParameter(<span class=\"string\">&quot;pageIndex&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> queryUserRole = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取用户列表</span></span><br><span class=\"line\">    UserServiceImpl userService = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pageSize = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> currentPageNo = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queryUserName == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        queryUserName=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (temp != <span class=\"keyword\">null</span>&amp;&amp;!temp.equals(<span class=\"string\">&quot;&quot;</span>))&#123;</span><br><span class=\"line\">        <span class=\"comment\">//字符串转int</span></span><br><span class=\"line\">        queryUserRole = Integer.parseInt(temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queryUserName == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        currentPageNo = Integer.parseInt(pageIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> totalCount = userService.getUserCount(queryUserName, queryUserRole);</span><br><span class=\"line\"></span><br><span class=\"line\">    PageSupport pageSupport = <span class=\"keyword\">new</span> PageSupport();</span><br><span class=\"line\">    pageSupport.setCurrentPageNo(currentPageNo);</span><br><span class=\"line\">    pageSupport.setPageSize(pageSize);</span><br><span class=\"line\">    pageSupport.setTotalCount(totalCount);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> totalPageCount = pageSupport.getTotalCount();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentPageNo&lt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        currentPageNo = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentPageNo&gt;totalPageCount)&#123;</span><br><span class=\"line\">        currentPageNo=totalPageCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;User&gt; userList = userService.getUserList(queryUserName, queryUserRole, currentPageNo, pageSize);</span><br><span class=\"line\">    req.setAttribute(<span class=\"string\">&quot;userList&quot;</span>,userList);</span><br><span class=\"line\"></span><br><span class=\"line\">    RoleServiceImpl roleService = <span class=\"keyword\">new</span> RoleServiceImpl();</span><br><span class=\"line\">    List&lt;Role&gt; roleList = roleService.getRoleList();</span><br><span class=\"line\">    req.setAttribute(<span class=\"string\">&quot;roleList&quot;</span>,roleList);</span><br><span class=\"line\">    req.setAttribute(<span class=\"string\">&quot;totalCount&quot;</span>,totalCount);</span><br><span class=\"line\">    req.setAttribute(<span class=\"string\">&quot;currentPageNo&quot;</span>,currentPageNo);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        req.getRequestDispatcher(<span class=\"string\">&quot;userList.jsp&quot;</span>).forward(req,resp);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ServletException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<p>供应商管理，订单管理等功能实现与用户管理类似，不再重复给出类似代码，读者可自己增加相应练习，巩固基础。</p>\n<p><strong>本篇JavaWeb实战到此完结</strong></p>\n","categories":["JavaEE"]},{"title":"SSM整合搭建","url":"/2021/05/27/JavaEE/SSM%E6%95%B4%E5%90%88%E6%90%AD%E5%BB%BA/","content":"<h1 id=\"预备条件\"><a href=\"#预备条件\" class=\"headerlink\" title=\"预备条件\"></a>预备条件</h1><p>项目结构</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210528182518627.png\" alt=\"image-20210528182518627\"></p>\n<h2 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> <span class=\"string\">`BookSale`</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span>  <span class=\"string\">`BookSale`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"string\">`books`</span>(</span><br><span class=\"line\">    bookID <span class=\"built_in\">int</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT primary <span class=\"keyword\">key</span> ,</span><br><span class=\"line\">    bookName <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">    bookCounts <span class=\"built_in\">int</span>,</span><br><span class=\"line\">    detail <span class=\"built_in\">text</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">)<span class=\"keyword\">engine</span> <span class=\"keyword\">innodb</span> <span class=\"keyword\">default</span> <span class=\"keyword\">charset</span>=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> books (bookName, bookCounts, detail)</span><br><span class=\"line\"><span class=\"keyword\">values</span> (<span class=\"string\">&#x27;Java&#x27;</span>,<span class=\"number\">1</span>,<span class=\"string\">&#x27;从入门到放弃&#x27;</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;MySQL&#x27;</span>,<span class=\"number\">10</span>,<span class=\"string\">&#x27;从删库到跑路&#x27;</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;Linux&#x27;</span>,<span class=\"number\">5</span>,<span class=\"string\">&#x27;从进门到进牢&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导包\"><a href=\"#导包\" class=\"headerlink\" title=\"导包\"></a>导包</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--junit--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--数据库驱动--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.31<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--数据库连接池：c3p0--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.mchange<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>c3p0<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--servlet，jsp，jstl--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Mybatis--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Spring--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.12.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.19.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--lombok--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>静态资源过滤</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Mybatis层\"><a href=\"#Mybatis层\" class=\"headerlink\" title=\"Mybatis层\"></a>Mybatis层</h1><p><code>database.properties</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">driver</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\"># MySQL8.0以上需要添加时区配置：&amp;serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/booksale?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"string\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p>实体类<code>Books.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Books</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> bookID;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String bookName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> bookCounts;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><code>BookMapper.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">addBook</span><span class=\"params\">(Books books)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">deleteBookById</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;bookId&quot;)</span> <span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">updateBook</span><span class=\"params\">(Books books)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Books <span class=\"title\">queryBookById</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;bookId&quot;)</span> <span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">List&lt;Books&gt; <span class=\"title\">queryAllBook</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">List&lt;Books&gt; <span class=\"title\">queryBookByName</span><span class=\"params\">(String bookName)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>BookMapper.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.lan5th.dao.BookMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;addBook&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;Books&quot;</span>&gt;</span></span><br><span class=\"line\">        insert into `books` (bookName,bookCounts,detail)</span><br><span class=\"line\">        values (#&#123;bookName&#125;,#&#123;bookCounts&#125;,#&#123;detail&#125;);</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;deleteBookById&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;int&quot;</span>&gt;</span></span><br><span class=\"line\">        delete from `books` where bookID = #&#123;bookId&#125;;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;updateBook&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;Books&quot;</span>&gt;</span></span><br><span class=\"line\">        update `books`</span><br><span class=\"line\">        set bookName=#&#123;bookName&#125;,bookCounts=#&#123;bookCounts&#125;,detail=#&#123;detail&#125;</span><br><span class=\"line\">        where bookID=#&#123;bookID&#125;;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;queryBookById&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;Books&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from `books` where bookID=#&#123;bookId&#125;;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;queryAllBook&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;Books&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from `books`;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;queryBookByName&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;Books&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from `books` where bookName like #&#123;bookName&#125;;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>BookService.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addBook</span><span class=\"params\">(Books books)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">deleteBookById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">updateBook</span><span class=\"params\">(Books books)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Books <span class=\"title\">queryBookById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Books&gt; <span class=\"title\">queryAllBook</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Books&gt; <span class=\"title\">queryBookByName</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>BookServiceImpl.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service(&quot;BookServiceImpl&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BookService</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookMapper bookMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBookMapper</span><span class=\"params\">(BookMapper bookMapper)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bookMapper = bookMapper;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">addBook</span><span class=\"params\">(Books books)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookMapper.addBook(books);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">deleteBookById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookMapper.deleteBookById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">updateBook</span><span class=\"params\">(Books books)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookMapper.updateBook(books);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Books <span class=\"title\">queryBookById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookMapper.queryBookById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Books&gt; <span class=\"title\">queryAllBook</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookMapper.queryAllBook();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Books&gt; <span class=\"title\">queryBookByName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//添加模糊查询标志</span></span><br><span class=\"line\">        name = <span class=\"string\">&quot;%&quot;</span> + name + <span class=\"string\">&quot;%&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bookMapper.queryBookByName(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mybatis配置文件<code>mybatis-config.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--日志--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;logImpl&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--别名--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.lan5th.pojo&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.dao.BookMapper&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Spring层\"><a href=\"#Spring层\" class=\"headerlink\" title=\"Spring层\"></a>Spring层</h1><p><code>spring-dao.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--数据库配置文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--连接池</span></span><br><span class=\"line\"><span class=\"comment\">        dbcp:半自动化，不能自动连接</span></span><br><span class=\"line\"><span class=\"comment\">        c3p0:自动化的加载配置文件，可以自动设置到对象中</span></span><br><span class=\"line\"><span class=\"comment\">        druid:整合Springboot使用</span></span><br><span class=\"line\"><span class=\"comment\">        hikari:Springboot默认使用</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClass&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUrl&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--c3p0私有属性--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxPoolSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;30&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;minPoolSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--关闭链结构不自动commit--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;autoCommitOnClose&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--获取链接超时时间--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;checkoutTimeout&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10000&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--获取链接失败重试次数--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;acquireRetryAttempts&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;2&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--sqlSessionFactory--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;configLocation&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--配置dao接口扫描包，动态实现dao接口注入--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--注意ByName是value而不是ref--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sqlSessionFactoryBeanName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;basePackage&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.lan5th.dao&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>spring-service.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--扫描包--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.lan5th.service&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--业务类注入，可以使用配置或注解实现，这里使用配置--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookServiceImpl&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;bookMapper&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--声明式事务配置--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;transactionManager&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--aop事务支持--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SpringMVC层\"><a href=\"#SpringMVC层\" class=\"headerlink\" title=\"SpringMVC层\"></a>SpringMVC层</h1><p><code>web.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">&quot;4.0&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>\\</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--需要绑定spring配置文件--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springmvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t/:匹配所有请求，不包括jsp</span></span><br><span class=\"line\"><span class=\"comment\">\t/*:匹配所有请求，包括jsp--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--乱码过滤--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>encodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>utf-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>encodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--session--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">session-config</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">session-timeout</span>&gt;</span>155<span class=\"tag\">&lt;/<span class=\"name\">session-timeout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">session-config</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>springmvc.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/mvc</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--1.注解驱动--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--2.静态资源过滤--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--3.扫描包：controller--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.lan5th.controller&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--4.视图解析器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;prefix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;suffix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>applicationContext.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;classpath:spring-dao.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;classpath:spring-service.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;springmvc.xml&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"业务实现\"><a href=\"#业务实现\" class=\"headerlink\" title=\"业务实现\"></a>业务实现</h1><p><code>BookController.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/book&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier(&quot;bookServiceImpl&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookService bookService;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">//...业务方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查询功能\"><a href=\"#查询功能\" class=\"headerlink\" title=\"查询功能\"></a>查询功能</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查询全部书籍</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/allBookP&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">allBook</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">    List&lt;Books&gt; books = bookService.queryAllBook();</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;books&quot;</span>,books);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;allBook&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>全部书籍页面<code>allBook.jsp</code></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;全部书籍&lt;/title&gt;</span><br><span class=\"line\">    &lt;!--BootStrap美化界面--&gt;</span><br><span class=\"line\">    &lt;link href=<span class=\"string\">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;row clearfix&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class=\"line\">            &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;page-header&quot;</span>&gt;</span><br><span class=\"line\">                &lt;h1&gt;</span><br><span class=\"line\">                    &lt;small&gt;书籍列表&lt;/small&gt;</span><br><span class=\"line\">                &lt;/h1&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;col-md-4 column&quot;</span>&gt;</span><br><span class=\"line\">            &lt;!--新增书籍--&gt;</span><br><span class=\"line\">            &lt;a class=&quot;btn btn-primary&quot; href=&quot;$&#123;pageContext.request.contextPath&#125;/book/addBookP&quot;&gt;新增书籍&lt;/a&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;col-md-4 column&quot;</span>&gt;</span><br><span class=\"line\">            &lt;span style=&quot;color: red&quot;&gt;$&#123;error&#125;&lt;/span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;col-md-4 column form-inline&quot;</span>&gt;</span><br><span class=\"line\">            &lt;!--查询书籍--&gt;</span><br><span class=\"line\">            &lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/book/queryBookName&quot;</span> method=<span class=\"string\">&quot;post&quot;</span> style=<span class=\"string\">&quot;float: right&quot;</span>&gt;</span><br><span class=\"line\">                &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;bookName&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-control&quot;</span> placeholder=<span class=\"string\">&quot;请输入查询的书籍名称&quot;</span>&gt;</span><br><span class=\"line\">                &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;查询&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span><br><span class=\"line\">            &lt;/form&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;row clearfix&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class=\"line\">            &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;table table-hover table-striped&quot;</span>&gt;</span><br><span class=\"line\">                &lt;thead&gt;</span><br><span class=\"line\">                    &lt;tr&gt;</span><br><span class=\"line\">                        &lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class=\"line\">                        &lt;th&gt;书籍名称&lt;/th&gt;</span><br><span class=\"line\">                        &lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class=\"line\">                        &lt;th&gt;书记详情&lt;/th&gt;</span><br><span class=\"line\">                        &lt;th&gt;操作&lt;/th&gt;</span><br><span class=\"line\">                    &lt;/tr&gt;</span><br><span class=\"line\">                &lt;/thead&gt;</span><br><span class=\"line\">                &lt;tbody&gt;</span><br><span class=\"line\">                    &lt;c:forEach <span class=\"keyword\">var</span>=<span class=\"string\">&quot;book&quot;</span> items=<span class=\"string\">&quot;$&#123;books&#125;&quot;</span>&gt;</span><br><span class=\"line\">                        &lt;tr&gt;</span><br><span class=\"line\">                            &lt;td&gt;$&#123;book.bookID&#125;&lt;/td&gt;</span><br><span class=\"line\">                            &lt;td&gt;$&#123;book.bookName&#125;&lt;/td&gt;</span><br><span class=\"line\">                            &lt;td&gt;$&#123;book.bookCounts&#125;&lt;/td&gt;</span><br><span class=\"line\">                            &lt;td&gt;$&#123;book.detail&#125;&lt;/td&gt;</span><br><span class=\"line\">                            &lt;td&gt;</span><br><span class=\"line\">                                &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBookP?id=$&#123;book.bookID&#125;&quot; &gt;修改&lt;/a&gt;</span><br><span class=\"line\">                                &amp;nbsp; | &amp;nbsp;</span><br><span class=\"line\">                                &lt;!--delete方法以RestFul风格编写--&gt;</span><br><span class=\"line\">                                &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/deleteBook/$&#123;book.bookID&#125;&quot;&gt;删除&lt;/a&gt;</span><br><span class=\"line\">                            &lt;/td&gt;</span><br><span class=\"line\">                        &lt;/tr&gt;</span><br><span class=\"line\">                    &lt;/c:forEach&gt;</span><br><span class=\"line\">                &lt;/tbody&gt;</span><br><span class=\"line\">            &lt;/table&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加功能\"><a href=\"#添加功能\" class=\"headerlink\" title=\"添加功能\"></a>添加功能</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//跳转添加书籍页面</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/addBookP&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addBookPage</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;addBook&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加书籍业务</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/addBook&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addBook</span><span class=\"params\">(Books books)</span></span>&#123;</span><br><span class=\"line\">    bookService.addBook(books);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/book/allBookP&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加书籍页面<code>addBook.jsp</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;修改书籍&lt;/title&gt;</span><br><span class=\"line\">    &lt;!--BootStrap美化界面--&gt;</span><br><span class=\"line\">    &lt;link href=<span class=\"string\">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;row clearfix&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class=\"line\">            &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;page-header&quot;</span>&gt;</span><br><span class=\"line\">                &lt;h1&gt;</span><br><span class=\"line\">                    &lt;small&gt;修改书籍&lt;/small&gt;</span><br><span class=\"line\">                &lt;/h1&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> method=<span class=\"string\">&quot;post&quot;</span>&gt;</span><br><span class=\"line\">        &lt;!--前端需要隐式传递id，否则Controller无法执行updateBook方法--&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">&quot;hidden&quot;</span> name=<span class=\"string\">&quot;bookID&quot;</span> value=<span class=\"string\">&quot;$&#123;book.bookID&#125;&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span><br><span class=\"line\">            &lt;label for=&quot;bkname&quot;&gt;书籍名称：&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;bookName&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-control&quot;</span> id=<span class=\"string\">&quot;bkname&quot;</span> value=<span class=\"string\">&quot;$&#123;book.bookName&#125;&quot;</span> required&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span><br><span class=\"line\">            &lt;label for=&quot;bkcount&quot;&gt;书籍数量：&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;bookCounts&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-control&quot;</span> id=<span class=\"string\">&quot;bkcount&quot;</span> value=<span class=\"string\">&quot;$&#123;book.bookCounts&#125;&quot;</span> required&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span><br><span class=\"line\">            &lt;label for=&quot;bkdetail&quot;&gt;书籍描述：&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;detail&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-control&quot;</span> id=<span class=\"string\">&quot;bkdetail&quot;</span> value=<span class=\"string\">&quot;$&#123;book.detail&#125;&quot;</span> required&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;submit&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-control&quot;</span> value=<span class=\"string\">&quot;修改&quot;</span>&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改-删除功能\"><a href=\"#修改-删除功能\" class=\"headerlink\" title=\"修改/删除功能\"></a>修改/删除功能</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//跳转更新书籍页面</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/updateBookP&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">updateBookPage</span><span class=\"params\">(<span class=\"keyword\">int</span> id, Model model)</span></span>&#123;</span><br><span class=\"line\">    Books books = bookService.queryBookById(id);</span><br><span class=\"line\">    <span class=\"comment\">//给前端传递书原本的属性，以方便修改</span></span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;book&quot;</span>,books);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;updateBook&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//更新书籍业务</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/updateBook&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">updateBook</span><span class=\"params\">(Books books, Model model)</span></span>&#123;</span><br><span class=\"line\">    bookService.updateBook(books);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/book/allBookP&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//delete方法以RestFul风格编写</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/deleteBook/&#123;bookId&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deleteBook</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;bookId&quot;)</span> <span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">    bookService.deleteBookById(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/book/allBookP&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更新书籍页面<code>updateBook.jsp</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ taglib prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;修改书籍&lt;/title&gt;</span><br><span class=\"line\">    &lt;!--BootStrap美化界面--&gt;</span><br><span class=\"line\">    &lt;link href=<span class=\"string\">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;row clearfix&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class=\"line\">            &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;page-header&quot;</span>&gt;</span><br><span class=\"line\">                &lt;h1&gt;</span><br><span class=\"line\">                    &lt;small&gt;修改书籍&lt;/small&gt;</span><br><span class=\"line\">                &lt;/h1&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> method=<span class=\"string\">&quot;post&quot;</span>&gt;</span><br><span class=\"line\">        &lt;!--前端需要隐式传递id，否则Controller无法执行updateBook方法--&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">&quot;hidden&quot;</span> name=<span class=\"string\">&quot;bookID&quot;</span> value=<span class=\"string\">&quot;$&#123;book.bookID&#125;&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span><br><span class=\"line\">            &lt;label for=&quot;bkname&quot;&gt;书籍名称：&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;bookName&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-control&quot;</span> id=<span class=\"string\">&quot;bkname&quot;</span> value=<span class=\"string\">&quot;$&#123;book.bookName&#125;&quot;</span> required&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span><br><span class=\"line\">            &lt;label for=&quot;bkcount&quot;&gt;书籍数量：&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;bookCounts&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-control&quot;</span> id=<span class=\"string\">&quot;bkcount&quot;</span> value=<span class=\"string\">&quot;$&#123;book.bookCounts&#125;&quot;</span> required&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span><br><span class=\"line\">            &lt;label for=&quot;bkdetail&quot;&gt;书籍描述：&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;detail&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-control&quot;</span> id=<span class=\"string\">&quot;bkdetail&quot;</span> value=<span class=\"string\">&quot;$&#123;book.detail&#125;&quot;</span> required&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;submit&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;form-control&quot;</span> value=<span class=\"string\">&quot;修改&quot;</span>&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"搜索查询功能实现\"><a href=\"#搜索查询功能实现\" class=\"headerlink\" title=\"搜索查询功能实现\"></a>搜索查询功能实现</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//按名搜索查询功能实现</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/queryBookName&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">queryBookName</span><span class=\"params\">(String bookName, Model model)</span></span>&#123;</span><br><span class=\"line\">    List&lt;Books&gt; books = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//模糊查询，空字符串查询全部内容</span></span><br><span class=\"line\">    books = bookService.queryBookByName(bookName);</span><br><span class=\"line\">    <span class=\"comment\">//判断列表是否为空，给前端传递错误信息</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (books.isEmpty())&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;error&quot;</span>,<span class=\"string\">&quot;未查到指定书名!&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;books&quot;</span>,books);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;allBook&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"页面效果展示\"><a href=\"#页面效果展示\" class=\"headerlink\" title=\"页面效果展示\"></a>页面效果展示</h1><p>首页</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210529202905441.png\" alt=\"image-20210529202905441\"></p>\n<p>全部书籍页面</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210529202939763.png\" alt=\"image-20210529202939763\"></p>\n<p>新增书籍页面</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210529203006891.png\" alt=\"image-20210529203006891\"></p>\n<p>修改书籍页面</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210529203043369.png\" alt=\"image-20210529203043369\"></p>\n<p>查询失败页面</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210529203118477.png\" alt=\"image-20210529203118477\"></p>\n<h1 id=\"实际排错思路\"><a href=\"#实际排错思路\" class=\"headerlink\" title=\"实际排错思路\"></a>实际排错思路</h1><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210529103625931.png\" alt=\"image-20210529103625931\"></p>\n","categories":["JavaEE"]},{"title":"SpringMVC","url":"/2021/05/25/JavaEE/SpringMVC/","content":"<p>ssm：mybatis+Spring+SpringMVC</p>\n<p><strong>SpringMVC特点</strong></p>\n<ol>\n<li>轻量级，简单易学</li>\n<li>高效，基于响应请求的MVC框架</li>\n<li>与Spring兼容性高，无缝结合</li>\n<li>约定大于配置</li>\n<li>功能强大：Restful，数据验证，格式化，本地化，主题</li>\n</ol>\n<p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--junit--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!----&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.12.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--servlet--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--jsp--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--jstl--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HelloSpringMVC\"><a href=\"#HelloSpringMVC\" class=\"headerlink\" title=\"HelloSpringMVC\"></a>HelloSpringMVC</h1><p>遇到404问题时可能是Tomcat没有成功导入jar包，需要在在Project Structure里手动添加</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210525180525304.png\" alt=\"image-20210525180525304\"></p>\n<blockquote>\n<p>通过配置文件实现(不推荐，为了了解原理而学习)</p>\n</blockquote>\n<p>缺点：</p>\n<ul>\n<li>一个Controller实现类只能编写一个方法，多个方法则需要定义多个Controller，较为麻烦</li>\n</ul>\n<p>web配置文件<code>web.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">&quot;4.0&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--注册springmvc核心：DispatcherServlet--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span>\\</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--需要绑定spring配置文件--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t/:匹配所有请求，不包括jsp</span></span><br><span class=\"line\"><span class=\"comment\">\t/*:匹配所有请求，包括jsp--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>控制器<code>HelloController.java</code>代替之前的servlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> <span class=\"keyword\">implements</span> <span class=\"title\">Controller</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">handleRequest</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//对视图进行操作，跳转，或者业务逻辑代码</span></span><br><span class=\"line\">        ModelAndView mv = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        mv.addObject(<span class=\"string\">&quot;msg&quot;</span>,<span class=\"string\">&quot;HelloSpringMVC&quot;</span>);</span><br><span class=\"line\">        mv.setViewName(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Spring配置文件<code>springmvc-servlet.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--实际开发中不需要注册这两个bean，这里只是了解原理</span></span><br><span class=\"line\"><span class=\"comment\">    处理器映射器</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    处理器适配器</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--视图解析器</span></span><br><span class=\"line\"><span class=\"comment\">\t1.获取ModelAndView数据</span></span><br><span class=\"line\"><span class=\"comment\">\t2.解析ModelAndView视图名字</span></span><br><span class=\"line\"><span class=\"comment\">\t3.拼接视图名字，找到相应视图</span></span><br><span class=\"line\"><span class=\"comment\">\t4.将数据渲染到这个视图上</span></span><br><span class=\"line\"><span class=\"comment\">\t--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--前缀--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;prefix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--后缀--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;suffix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--注册Controller--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.controller.HelloController&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;/hello&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试页面<code>hello.jsp</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;hello&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">$&#123;msg&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>通过注解实现</p>\n</blockquote>\n<p><code>web.xml</code>和<code>hello.jsp</code>文件与之前一样</p>\n<p><code>HelloController.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//表示Controller以被Spring接管，里面方法所有方法如果返回值为String就会被视图解析器解析</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//@RequestMapping注解标志url访问路径，可以在类和方法上标注</span></span><br><span class=\"line\">    <span class=\"comment\">//如本例中hello方法可以由http:8080/项目路径/hello/h1访问</span></span><br><span class=\"line\">    <span class=\"comment\">//可以只给方法上标注@RequestMapping</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/h1&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//封装数据</span></span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;msg&quot;</span>,<span class=\"string\">&quot;Hello,SpringMVC-annotation&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//返回结果被视图解析器处理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>springmvc-servlet.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/mvc</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--自动扫描包，不再需要手动注册Controller--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.lan5th.controller&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--默认配置，springmvc不扫描静态资源，如css,js,mp3,mp4等--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--mvc注解驱动，帮助我们自动完成DefaultAnnotationHandlerMapping</span></span><br><span class=\"line\"><span class=\"comment\">    和AnnotationMethodHandlerAdapter的注入，并以方法级别处理</span></span><br><span class=\"line\"><span class=\"comment\">\t可以不写</span></span><br><span class=\"line\"><span class=\"comment\">\t--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--视图解析器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;prefix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;suffix&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SpringMVC执行原理\"><a href=\"#SpringMVC执行原理\" class=\"headerlink\" title=\"SpringMVC执行原理\"></a>SpringMVC执行原理</h1><p>Spring的web框架围绕DispatcherServlet设计，这个类可以将请求分发到不同的处理器，Spring2.5之后可以采用基于注解的Controller声明方式</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210525171232707.png\" alt=\"image-20210525171232707\"></p>\n<p>实线由SpringMVC自动实现的部分，虚线是我们需要手动编写代码实现的部分</p>\n<ol>\n<li>DispatcherServlet表示前置控制器，是SpringMVC的控制中心，用户发出请求，DispatcherServlet接收并拦截请求</li>\n<li>HandlerMapping处理器映射，由DispatcherServlet自动调用，HandlerMapping根据请求url查找Handler</li>\n<li>HandlerExecution表示具体的Handler，主要作用是根据url查找控制器</li>\n<li>HandlerExecution将解析后的信息传递给DispatcherServlet，如解析控制器映射等</li>\n<li>HandlerAdapter表示处理器适配器，按照特定的规则去执行Handler</li>\n<li>Handler让具体的Controller执行</li>\n<li>Controller将具体的执行信息返回给HandlerAdapter，如ModelAndView</li>\n<li>HandlerAdapter将ModelAndView传给DispatcherServlet</li>\n<li>DispatcherServlet调用ViewResolver(视图解析器)来解析逻辑视图名</li>\n<li>ViewResolver将逻辑视图名传给DispatcherServlet</li>\n<li>DispatcherServlet根据ViewResolver解析结果调用具体视图</li>\n<li>将视图呈现给用户</li>\n</ol>\n<h1 id=\"RestFul风格\"><a href=\"#RestFul风格\" class=\"headerlink\" title=\"RestFul风格\"></a>RestFul风格</h1><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210526143121341.png\" alt=\"image-20210526143121341\"></p>\n<p>通过一个地址可以实现多个方法，且用不同的请求方法请求这个地址会有不同的效果</p>\n<p>特点：</p>\n<ul>\n<li>简洁(url地址)</li>\n<li>高效</li>\n<li>安全(不会暴露服务器中的参数名)</li>\n</ul>\n<p><code>RestFulController.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RestFulController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//一般风格，请求url:http://localhost:8080/SpringMVC/add?a=1&amp;b=2</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/add&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">Origin</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, Model model)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = a + b;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;结果1为&quot;</span> + res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//RestFul风格，按照特定、分割来传递参数</span></span><br><span class=\"line\">    <span class=\"comment\">//请求url:http://localhost:8080/SpringMVC/add/1/2</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">RestFulGet</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> <span class=\"keyword\">int</span> a, <span class=\"meta\">@PathVariable</span> <span class=\"keyword\">int</span> b, Model model)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = a + b;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;结果2为&quot;</span> + res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//绑定请求方法，请求url:http://localhost:8080/SpringMVC/add</span></span><br><span class=\"line\">    <span class=\"comment\">//可以用@RequestMapping设置参数，也可以直接使用@PostMapping</span></span><br><span class=\"line\">    <span class=\"comment\">//@RequestMapping(value = &quot;/add&quot;,method = RequestMethod.POST)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/add&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">Post</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;输出结果3&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"转发与重定向\"><a href=\"#转发与重定向\" class=\"headerlink\" title=\"转发与重定向\"></a>转发与重定向</h1><blockquote>\n<p>传给视图解析器默认转发</p>\n</blockquote>\n<p>在我们之前使用model向视图解析器传参时默认是通过转发实现的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/h1&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello1</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;hello1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用Controller注解时，可以给函数传入参数请求和响应</p>\n</blockquote>\n<p>使用这种方式时我们写函数就可以像最开始写Servlet那样进行不同操作，如<code>rsp.getWriter().println()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/h2&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hello2</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//重定向</span></span><br><span class=\"line\">    rsp.sendRedirect(<span class=\"string\">&quot;/SpringMVC/index.jsp&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/h3&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hello3</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//转发</span></span><br><span class=\"line\">    req.getRequestDispatcher(<span class=\"string\">&quot;/index.jsp&quot;</span>).forward(req,rsp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>直接回传url地址</p>\n</blockquote>\n<p>这种方式在没有视图解析器时仍然能够正常工作(手动添加前后缀)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/h4&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello4</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//转发</span></span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;msg&quot;</span>,<span class=\"string\">&quot;hello4&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;forward:/WEB-INF/jsp/hello.jsp&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/h5&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello5</span><span class=\"params\">(Model model)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//重定向</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h1><ol>\n<li><p>提交的参数名与方法的参数名一致</p>\n<p>与之前相同，会自动接收参数名相匹配的参数</p>\n</li>\n<li><p>提交的参数名与方法的参数名不一致</p>\n<p>如请求url<code>http://localhost:8080/SpringMVC/hello?username=lan5th</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">这里通过@RequestParam注解直接收前端username字段的参数</span></span><br><span class=\"line\"><span class=\"comment\">一般来说前端传递的参数都要添加这个注解，以方便阅读程序，直接看到从前端传递的参数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;username&quot;)</span> name, Model model)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提交一个类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//所有相匹配的参数会被自动注入进一个实例中传给函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(User user, Model model)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(user);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>当url参数名与实体类参数名相匹配时，如<code>http://localhost:8080/SpringMVC/hello?id=101&amp;name=Bob&amp;age=18</code></p>\n<p>所有值都被正常注入，输出结果<code>User(id=101, name=Bob, age=18)</code></p>\n</li>\n<li><p>当有url参数名与实体类参数名不匹配时，如<code>http://localhost:8080/SpringMVC/hello?id=101&amp;username=Bob&amp;age=18</code></p>\n<p>所有参数名匹配的值正常注入，不匹配的值无法注入为null，输出结果<code>User(id=101, name=null, age=18)</code></p>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>Model&amp;ModelMap&amp;ModelAndView初见</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210526172605517.png\" alt=\"image-20210526172605517\"></p>\n<h1 id=\"乱码问题\"><a href=\"#乱码问题\" class=\"headerlink\" title=\"乱码问题\"></a>乱码问题</h1><p>在<code>web.xml</code>中配置SpringMVC自带过滤器</p>\n<p>但是在有些情况下这个过滤器对get的支持不好</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--可以每次配置web.xml时习惯性的写上--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--注意是/*处理所有文件，/不处理jsp--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Json\"><a href=\"#Json\" class=\"headerlink\" title=\"Json\"></a>Json</h1><p>Json:JavaScript Object Notation用于前后端对象数据的传递，json相当于是javascript对象的字符串表示法</p>\n<h2 id=\"js中json用法\"><a href=\"#js中json用法\" class=\"headerlink\" title=\"js中json用法\"></a>js中json用法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">a</span>:<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"attr\">b</span>:<span class=\"string\">&#x27;world&#x27;</span>&#125;;<span class=\"comment\">//这是一个javascript对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> json = <span class=\"string\">&#x27;&#123;&quot;a&quot;:&quot;Hello&quot;, &quot;b&quot;:&quot;world&quot;&#125;&#x27;</span>;<span class=\"comment\">//这是一个json字符串</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>json字符串转javascript对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">JSON</span>.parse(<span class=\"string\">&#x27;&#123;&quot;a&quot;:&quot;Hello&quot;, &quot;b&quot;:&quot;world&quot;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>javascript对象转json字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> json = <span class=\"built_in\">JSON</span>.stringify(&#123;<span class=\"attr\">a</span>:<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"attr\">b</span>:<span class=\"string\">&#x27;world&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"java程序解析json\"><a href=\"#java程序解析json\" class=\"headerlink\" title=\"java程序解析json\"></a>java程序解析json</h2><blockquote>\n<p>Jackson</p>\n</blockquote>\n<p>导包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.11.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>UserController.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//传统方式</span></span><br><span class=\"line\">    <span class=\"comment\">//@responseBody注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区</span></span><br><span class=\"line\">    <span class=\"comment\">//注意：在使用此注解之后不会再走视图处理器，而是直接将数据写入到输入流中，他的效果等同于通过response对象输出指定格式的数据。</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/j1&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">json1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">3</span>,<span class=\"string\">&quot;男&quot;</span>).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Jackson方式</span></span><br><span class=\"line\">    <span class=\"comment\">//ObjectMapper是Jackson中的对象,可以将对象，列表等转为json格式</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/j2&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">json2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JsonProcessingException </span>&#123;</span><br><span class=\"line\">        ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        String str = mapper.writeValueAsString(<span class=\"keyword\">new</span> User(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;男&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//列表转json</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/j3&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">json3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JsonProcessingException </span>&#123;</span><br><span class=\"line\">        ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        ArrayList&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;User&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        User user1 = <span class=\"keyword\">new</span> User(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;男&quot;</span>);</span><br><span class=\"line\">        User user2 = <span class=\"keyword\">new</span> User(<span class=\"string\">&quot;李四&quot;</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;男&quot;</span>);</span><br><span class=\"line\">        User user3 = <span class=\"keyword\">new</span> User(<span class=\"string\">&quot;王五&quot;</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;男&quot;</span>);</span><br><span class=\"line\">        User user4 = <span class=\"keyword\">new</span> User(<span class=\"string\">&quot;王麻子&quot;</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;男&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        userList.add(user1);</span><br><span class=\"line\">        userList.add(user2);</span><br><span class=\"line\">        userList.add(user3);</span><br><span class=\"line\">        userList.add(user4);</span><br><span class=\"line\">        String str = mapper.writeValueAsString(userList);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//日期转json(java实现)</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/j4&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">json4</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JsonProcessingException </span>&#123;</span><br><span class=\"line\">        ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        <span class=\"comment\">//自定义日期格式，不添加的话默认时间戳</span></span><br><span class=\"line\">        SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mapper.writeValueAsString(sdf.format(date));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//日期转json(更改ObjectMapper配置)</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/j5&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">json5</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JsonProcessingException </span>&#123;</span><br><span class=\"line\">        ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        <span class=\"comment\">//不使用时间戳格式</span></span><br><span class=\"line\">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">//自定义日期格式，不添加的话默认时间戳</span></span><br><span class=\"line\">        SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        mapper.setDateFormat(sdf);</span><br><span class=\"line\">        Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mapper.writeValueAsString(date);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Fastjson</p>\n</blockquote>\n<p>导包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.76<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>主要函数</p>\n<p><code>JSON.toJSONString()</code>将java对象转为json字符串</p>\n<p><code>JSON.parseObject()</code>json字符串转java对象，参数：<code>(json字符串,java类名)</code></p>\n<p><code>JSON.toJSON()</code>java对象转json对象</p>\n<p><code>JSON.toJavaObject()</code>json字符串转java对象，参数：<code>(json对象,java类名)</code></p>\n<h2 id=\"Json处理乱码\"><a href=\"#Json处理乱码\" class=\"headerlink\" title=\"Json处理乱码\"></a>Json处理乱码</h2><p>在<code>springmvc-servlet.xml</code>中处理json乱码</p>\n<p>一般直接在配置文件中设置，但也可以在注解中实现<code>@RequestMapping(value = &quot;/json&quot;, produces = &quot;application/json;charset=utf-8&quot;)</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:message-converters</span> <span class=\"attr\">register-defaults</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;failOnEmptyBeans&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h1><p>Asynchronous JavaScript and XML(异步的JavaScript和xml)</p>\n<p>即在无需重新加载整个网页得情况下，更新部分网页的请求。</p>\n<p>JQuery Ajax本质解释XMLHttpRequest，封装后便于调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">jQuery.ajax(...)</span><br><span class=\"line\">部分参数：</span><br><span class=\"line\">url:请求地址</span><br><span class=\"line\">data:携带参数</span><br><span class=\"line\">type:请求方法</span><br><span class=\"line\">success:请求成功回调函数</span><br><span class=\"line\">error:请求失败回调函数</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ajax初见\"><a href=\"#ajax初见\" class=\"headerlink\" title=\"ajax初见\"></a>ajax初见</h2><p>需要提前导入jquery文件</p>\n<p><code>FrontController.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//添加@RestController注解表示仅返回一个字符串，不改变视图</span></span><br><span class=\"line\"><span class=\"comment\">//相当于@Controller和@ResponseBody的结合</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrontController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/ajax1&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ajax1</span><span class=\"params\">(String name, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;username=&gt;&quot;</span>+name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">&quot;lan5th&quot;</span>))&#123;</span><br><span class=\"line\">            response.getWriter().print(<span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            response.getWriter().print(<span class=\"string\">&quot;false&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ajaxTest.jsp</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.6.0.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"function\">function <span class=\"title\">a</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            $.post(&#123;</span><br><span class=\"line\">                url:<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/ajax1&quot;</span>,</span><br><span class=\"line\">                <span class=\"comment\">//前端传入username,后端接收name，data起到衔接的作用</span></span><br><span class=\"line\">                data:&#123;<span class=\"string\">&quot;name&quot;</span>:$(<span class=\"string\">&quot;#username&quot;</span>).val()&#125;,</span><br><span class=\"line\">                success:function (data) &#123;</span><br><span class=\"line\">                    alert(data);</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                error:function (data) &#123;</span><br><span class=\"line\">                    alert(data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    &lt;title&gt;AjaxTest&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    username:</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;text&quot;</span> id=<span class=\"string\">&quot;username&quot;</span> onblur=<span class=\"string\">&quot;a()&quot;</span>&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ajax异步加载数据\"><a href=\"#ajax异步加载数据\" class=\"headerlink\" title=\"ajax异步加载数据\"></a>ajax异步加载数据</h2><p><strong>需要提前导入Jackson包以将返回的对象等转化为json字符串</strong></p>\n<p><code>FrontController.java</code>新增方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ajax2&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Books&gt; <span class=\"title\">ajax2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//bookService是实现具体业务的业务类</span></span><br><span class=\"line\">    List&lt;Books&gt; booksList = bookService.queryAllBook();</span><br><span class=\"line\">    System.out.println(booksList);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> booksList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ajaxTest.jsp</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.6.0.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        $(function () &#123;</span><br><span class=\"line\">            $(<span class=\"string\">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class=\"line\">                $.post(<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/ajax2&quot;</span>, function (data) &#123;</span><br><span class=\"line\">                    let html = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (let i = <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">                        html += <span class=\"string\">&quot;&lt;tr&gt;&quot;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&quot;&lt;td&gt;&quot;</span> + data[i].bookID + <span class=\"string\">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&quot;&lt;td&gt;&quot;</span> + data[i].bookName + <span class=\"string\">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&quot;&lt;td&gt;&quot;</span> + data[i].bookCounts + <span class=\"string\">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&quot;&lt;td&gt;&quot;</span> + data[i].detail + <span class=\"string\">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&quot;&lt;/tr&gt;&quot;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//将字符串插入到html页面中</span></span><br><span class=\"line\">                    $(<span class=\"string\">&quot;#content&quot;</span>).html(html);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    &lt;title&gt;AjaxTest&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;button&quot;</span> value=<span class=\"string\">&quot;加载数据&quot;</span> id=<span class=\"string\">&quot;btn&quot;</span>&gt;</span><br><span class=\"line\">    &lt;table&gt;</span><br><span class=\"line\">        &lt;tr&gt;</span><br><span class=\"line\">            &lt;th&gt;id&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;书名&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;数量&lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;详情&lt;/th&gt;</span><br><span class=\"line\">        &lt;/tr&gt;</span><br><span class=\"line\">        &lt;tbody id=<span class=\"string\">&quot;content&quot;</span>&gt;</span><br><span class=\"line\">        &lt;!--ajax填充数据--&gt;</span><br><span class=\"line\">        &lt;/tbody&gt;</span><br><span class=\"line\">    &lt;/table&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ajax异步验证表单\"><a href=\"#ajax异步验证表单\" class=\"headerlink\" title=\"ajax异步验证表单\"></a>ajax异步验证表单</h2><p><code>FrontController.java</code>新增方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ajax3&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">ajax3</span><span class=\"params\">(String name, String pwd)</span></span>&#123;</span><br><span class=\"line\">    String msg = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">&quot;lan5th&quot;</span>))&#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;ok&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;用户名错误&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pwd != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pwd.equals(<span class=\"string\">&quot;123456&quot;</span>))&#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;ok&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;密码错误&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ajaxTest.jsp</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.6.0.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"function\">function <span class=\"title\">a1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            $.get(&#123;</span><br><span class=\"line\">                url:<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/ajax3&quot;</span>,</span><br><span class=\"line\">                data:&#123;<span class=\"string\">&quot;name&quot;</span>:$(<span class=\"string\">&quot;#username&quot;</span>).val()&#125;,</span><br><span class=\"line\">                success:function (data) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (data.toString()===<span class=\"string\">&#x27;ok&#x27;</span>)&#123;</span><br><span class=\"line\">                        $(<span class=\"string\">&quot;#userInfo&quot;</span>).css(<span class=\"string\">&quot;color&quot;</span>,<span class=\"string\">&quot;green&quot;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        $(<span class=\"string\">&quot;#userInfo&quot;</span>).css(<span class=\"string\">&quot;color&quot;</span>,<span class=\"string\">&quot;red&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    $(<span class=\"string\">&quot;#userInfo&quot;</span>).html(data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\">function <span class=\"title\">a2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            $.post(&#123;</span><br><span class=\"line\">                url:<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/ajax3&quot;</span>,</span><br><span class=\"line\">                data:&#123;<span class=\"string\">&quot;pwd&quot;</span>:$(<span class=\"string\">&quot;#pwd&quot;</span>).val()&#125;,</span><br><span class=\"line\">                success:function (data) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (data.toString()===<span class=\"string\">&#x27;ok&#x27;</span>)&#123;</span><br><span class=\"line\">                        $(<span class=\"string\">&quot;#pwdInfo&quot;</span>).css(<span class=\"string\">&quot;color&quot;</span>,<span class=\"string\">&quot;green&quot;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        $(<span class=\"string\">&quot;#pwdInfo&quot;</span>).css(<span class=\"string\">&quot;color&quot;</span>,<span class=\"string\">&quot;red&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    $(<span class=\"string\">&quot;#pwdInfo&quot;</span>).html(data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">    &lt;title&gt;AjaxTest&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">        用户名：&lt;input type=<span class=\"string\">&quot;text&quot;</span> id=<span class=\"string\">&quot;username&quot;</span> onblur=<span class=\"string\">&quot;a1()&quot;</span>&gt;</span><br><span class=\"line\">        &lt;span id=&quot;userInfo&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">        用户名：&lt;input type=<span class=\"string\">&quot;text&quot;</span> id=<span class=\"string\">&quot;pwd&quot;</span> onblur=<span class=\"string\">&quot;a2()&quot;</span>&gt;</span><br><span class=\"line\">        &lt;span id=&quot;pwdInfo&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h1><p>拦截器和过滤器的区别：</p>\n<ul>\n<li>过滤器<ul>\n<li>是servlet规范中的一部分，任何java web工程都能使用</li>\n<li>url-pattern中配置了/*后，会对任何要访问的资源作拦截</li>\n</ul>\n</li>\n<li>拦截器<ul>\n<li>是框架本身自带的，只有使用了SpringMVC或同类型框架才能使用</li>\n<li>拦截器只会拦截访问的控制器方法，对jsp/html/css/image/js等静态资源不会进行拦截</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"自定义拦截器\"><a href=\"#自定义拦截器\" class=\"headerlink\" title=\"自定义拦截器\"></a>自定义拦截器</h2><p><code>springmvc-servlet.xml</code>配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--在这里配置多个拦截器，按顺序执行--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--*表示拦截本级目录下所有请求，**表示拦截所有子目录的请求--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;/**&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>MyInterceptor.java</code>实现<code>HandlerInterceptor</code>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//可以只重写需要用到的方法</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//return true放行给下一个Interceptor/Controller</span></span><br><span class=\"line\">    <span class=\"comment\">//return false不给予放行</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;================处理前==============&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class=\"meta\">@Nullable</span> ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;================处理后==============&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class=\"meta\">@Nullable</span> Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;================执行后==============&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"文件上传-下载\"><a href=\"#文件上传-下载\" class=\"headerlink\" title=\"文件上传/下载\"></a>文件上传/下载</h1><h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><p>导包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;multipartResolver&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--请求的编码，应该和jsp的pageEncoding一致，默认为ISO-8859-1--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultEncoding&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--最大上传大小，10485760=10M--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxUploadSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10485760&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxInMemorySize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;40960&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>upload.jsp</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;文件上传&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;!--上传和下载文件必须使用enctype=<span class=\"string\">&quot;multipart/form-data&quot;</span>二进制编码--&gt;</span><br><span class=\"line\">    &lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/upload2&quot;</span> enctype=<span class=\"string\">&quot;multipart/form-data&quot;</span> method=<span class=\"string\">&quot;post&quot;</span>&gt;</span><br><span class=\"line\">        &lt;input  type=<span class=\"string\">&quot;file&quot;</span> name=<span class=\"string\">&quot;file&quot;</span>/&gt;</span><br><span class=\"line\">        &lt;input  type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;upload&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>FileController.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//传统输入输出流</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">upload</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        String uploadFilename = file.getOriginalFilename();</span><br><span class=\"line\">        <span class=\"comment\">//文件名为空则返回首页</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (uploadFilename.equals(<span class=\"string\">&quot;&quot;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;redrect:/upload.jsp&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;上传文件名：&quot;</span> + uploadFilename);</span><br><span class=\"line\">        <span class=\"comment\">//上传路径保存位置</span></span><br><span class=\"line\">        String path = request.getSession().getServletContext().getRealPath(<span class=\"string\">&quot;/upload&quot;</span>);</span><br><span class=\"line\">        File realPath = <span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!realPath.exists()) &#123;</span><br><span class=\"line\">            realPath.mkdir();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;上传路径保存位置：&quot;</span> + realPath);</span><br><span class=\"line\"></span><br><span class=\"line\">        InputStream inputStream = file.getInputStream();<span class=\"comment\">//输入流</span></span><br><span class=\"line\">        FileOutputStream outputStream = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(realPath, uploadFilename));<span class=\"comment\">//输出流</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((len = inputStream.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            outputStream.write(buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">            outputStream.flush();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;函数执行末尾====================&quot;</span>);</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;redrect:/upload.jsp&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用CommonsMultipartFile封装好的方法</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/upload2&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">upload2</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        String path = request.getSession().getServletContext().getRealPath(<span class=\"string\">&quot;/upload&quot;</span>);</span><br><span class=\"line\">        File realPath = <span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!realPath.exists()) &#123;</span><br><span class=\"line\">            realPath.mkdir();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;上传文件路径：&quot;</span> + realPath);</span><br><span class=\"line\">        file.transferTo(<span class=\"keyword\">new</span> File(realPath + <span class=\"string\">&quot;/&quot;</span> + file.getOriginalFilename()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/upload.jsp&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h2><p><code>upload.jsp</code>新增标签</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/download&quot;&gt;下载图片&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>FileController.java</code>新增方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/download&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">download</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    String path = request.getSession().getServletContext().getRealPath(<span class=\"string\">&quot;/WEB-INF/static&quot;</span>);</span><br><span class=\"line\">    String fileName = <span class=\"string\">&quot;1.jpg&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//设置response响应头</span></span><br><span class=\"line\">    response.reset();<span class=\"comment\">//设置本界面不缓存，清空buffer</span></span><br><span class=\"line\">    response.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);<span class=\"comment\">//字符编码</span></span><br><span class=\"line\">    response.setContentType(<span class=\"string\">&quot;multipart/form-data&quot;</span>);<span class=\"comment\">//二进制传输数据</span></span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>,<span class=\"string\">&quot;attachment;fileName=&quot;</span>+ URLEncoder.encode(fileName,<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    File file = <span class=\"keyword\">new</span> File(path, fileName);</span><br><span class=\"line\">    FileInputStream inputStream = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">    ServletOutputStream outputStream = response.getOutputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((len = inputStream.read(buffer))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        outputStream.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">        outputStream.flush();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    outputStream.close();</span><br><span class=\"line\">    inputStream.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;redirect:/upload.jsp&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["JavaEE"]},{"title":"Spring源码分析","url":"/2021/10/07/JavaEE/Spring%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","content":"<p>思路参考：<a href=\"https://segmentfault.com/a/1190000022694615\">spring源码导读 SegmentFault 思否</a></p>\n<p>核心上下文依赖包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.12.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Spring内容的实现依赖于底层大量的PostProcess来对Bean的实例进行一定的修饰</p>\n<h1 id=\"IOC容器\"><a href=\"#IOC容器\" class=\"headerlink\" title=\"IOC容器\"></a>IOC容器</h1><h2 id=\"Bean的生命周期\"><a href=\"#Bean的生命周期\" class=\"headerlink\" title=\"Bean的生命周期\"></a>Bean的生命周期</h2><p>创建–&gt;初始化–&gt;销毁</p>\n<p><strong>创建</strong></p>\n<ol>\n<li><p>Bean 容器找到配置文件中 Spring Bean 的定义。</p>\n</li>\n<li><p>Bean 容器利用 Java Reflection API 创建一个 Bean 的实例。</p>\n</li>\n<li><p>如果涉及到一些属性值 利用 <code>set()</code>方法设置一些属性值。</p>\n</li>\n<li><p>如果 Bean 实现了 <code>BeanNameAware</code> 接口，调用 <code>setBeanName()</code>方法，传入 Bean 的名字。</p>\n<p>如果 Bean 实现了 <code>BeanClassLoaderAware</code> 接口，调用 <code>setBeanClassLoader()</code>方法，传入 <code>ClassLoader</code>对象的实例。</p>\n<p>如果 Bean 实现了 <code>BeanFactoryAware</code> 接口，调用 <code>setBeanFactory()</code>方法，传入 <code>BeanFactory</code>对象的实例。</p>\n<p>与上面的类似，如果实现了其他 <code>*.Aware</code>接口，就调用相应的方法。</p>\n</li>\n<li><p>如果有和加载这个 Bean 的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象，执行<code>postProcessBeforeInitialization()</code> 方法</p>\n</li>\n<li><p>如果 Bean 实现了<code>InitializingBean</code>接口，执行<code>afterPropertiesSet()</code>方法。</p>\n</li>\n<li><p>如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。</p>\n</li>\n<li><p>如果有和加载这个 Bean 的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象，执行<code>postProcessAfterInitialization()</code> 方法</p>\n</li>\n</ol>\n<p><strong>销毁</strong></p>\n<ol>\n<li>当要销毁 Bean 的时候，如果 Bean 实现了 <code>DisposableBean</code> 接口，执行 <code>destroy()</code> 方法。</li>\n<li>当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。</li>\n</ol>\n<h2 id=\"获取IOC容器底层组件\"><a href=\"#获取IOC容器底层组件\" class=\"headerlink\" title=\"获取IOC容器底层组件\"></a>获取IOC容器底层组件</h2><p>比如说容器本身</p>\n<p>实现XXXAware接口和对应方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext applicationContext;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.applicationContext = applicationContext;</span><br><span class=\"line\">        System.out.println(applicationContext);</span><br><span class=\"line\">        System.out.println(applicationContext.getEnvironment().getProperty(<span class=\"string\">&quot;os.name&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>XXXAware接口会由XXXAwareProcessor进行处理，这些Processor都是实现了BeanPostProcessor的后置处理器</p>\n<p>如ApplicationContextAwareProcessor通过调用invokeAwareInterfaces方法来匹配Aware的对应类型并传入上下文</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeAwareInterfaces</span><span class=\"params\">(Object bean)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> EnvironmentAware) &#123;</span><br><span class=\"line\">        ((EnvironmentAware)bean).setEnvironment(<span class=\"keyword\">this</span>.applicationContext.getEnvironment());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> EmbeddedValueResolverAware) &#123;</span><br><span class=\"line\">        ((EmbeddedValueResolverAware)bean).setEmbeddedValueResolver(<span class=\"keyword\">this</span>.embeddedValueResolver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ResourceLoaderAware) &#123;</span><br><span class=\"line\">        ((ResourceLoaderAware)bean).setResourceLoader(<span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ApplicationEventPublisherAware) &#123;</span><br><span class=\"line\">        ((ApplicationEventPublisherAware)bean).setApplicationEventPublisher(<span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> MessageSourceAware) &#123;</span><br><span class=\"line\">        ((MessageSourceAware)bean).setMessageSource(<span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ApplicationContextAware) &#123;</span><br><span class=\"line\">        ((ApplicationContextAware)bean).setApplicationContext(<span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"IOC容器创建过程\"><a href=\"#IOC容器创建过程\" class=\"headerlink\" title=\"IOC容器创建过程\"></a>IOC容器创建过程</h2><p>进入<code>refresh()</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.prepareRefresh();<span class=\"comment\">// 1</span></span><br><span class=\"line\">        ConfigurableListableBeanFactory beanFactory = <span class=\"keyword\">this</span>.obtainFreshBeanFactory();<span class=\"comment\">// 2</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.prepareBeanFactory(beanFactory);<span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.postProcessBeanFactory(beanFactory);<span class=\"comment\">// 4</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.invokeBeanFactoryPostProcessors(beanFactory);<span class=\"comment\">// 5</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.registerBeanPostProcessors(beanFactory);<span class=\"comment\">// 6</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.initMessageSource();<span class=\"comment\">// 7</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.initApplicationEventMulticaster();<span class=\"comment\">// 8</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.onRefresh();<span class=\"comment\">// 9</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.registerListeners();<span class=\"comment\">// 10</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.finishBeanFactoryInitialization(beanFactory);<span class=\"comment\">// 11</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.finishRefresh();<span class=\"comment\">// 12</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BeansException var9) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.logger.warn(<span class=\"string\">&quot;Exception encountered during context initialization - cancelling refresh attempt: &quot;</span> + var9);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.destroyBeans();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.cancelRefresh(var9);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var9;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.resetCommonCaches();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>prepareRefresh()</p>\n<ol>\n<li>记录启动时间，设置容器的active和close状态。 </li>\n<li>initPropertySources():提供给子容器类，子容器类可覆盖该方法进行一些自定义的属性设置。</li>\n<li>getEnvironment().validateRequiredProperties()：检验属性的合法性</li>\n<li>this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>() ：保存容器中的一些早期的事件，待事件多播器创建后执行。</li>\n</ol>\n</li>\n<li><p>obtainFreshBeanFactory()</p>\n<p>将Bean的配置信息添加到注册中心</p>\n<ol>\n<li>refreshBeanFactory：如果当前容器已经有了BeanFactory就销毁原来的BeanFactory。然后创建一个DefaultListableBeanFactory();<ul>\n<li>对BeanFactory并进行配置，主要配置是否允许BeanDefinition覆盖，是否允许Bean间的循环引用。</li>\n<li>加载BeanDefinition，解析XML文件和配置文件，将其转换为BeanDefinition，然后保存到DefaultListableBeanFactory的beanDefinitionMap字段中。</li>\n</ul>\n</li>\n<li>getBeanFactory() 简单的返回beanFactory，即DefaultListableBeanFactory。</li>\n</ol>\n</li>\n<li><p>prepareBeanFactory()</p>\n<ol>\n<li>设置BeanFactory的类加载器、设置支持SPEL表达式的解析器。</li>\n<li>添加ApplicationContextAwareProcessor用于处理XXXAware接口的回调。 </li>\n<li>设置忽略一些接口。并注册一些类，这些类可以在bean里直接进行自动装配。</li>\n<li>添加ApplicationListenerDetector用于识别并保存ApplicationListener的子类。</li>\n</ol>\n</li>\n<li><p>postProcessBeanFactory()</p>\n<p>提供给子容器类，子容器类可以覆盖该方法在BeanFactory准备工作完成后处理一些工作。</p>\n</li>\n<li><p>invokeBeanFactoryPostProcessors()</p>\n<p>执行BeanFactoryPostProcessors类型的后置处理器的监听方法</p>\n<ul>\n<li>BeanFactoryPostProcessor是beanFactory后置处理器，在整个BeanFactory标准初始化完成后进行拦截调用， </li>\n<li>BeanDefinitionRegistryPostProcessor继承了BeanFactoryPostProcessor，在beanFactory解析完所有的BeanDefinition后拦截调用。</li>\n<li>BeanFactoryPostProcessor来源<ul>\n<li>通过ApplicationContent的addBeanFactoryPostProcessor()方法手动添加自己的拦截器</li>\n<li>系统默认了一些BeanFactoryPostProcessor。例如：ConfigurationClassPostProcessor用来处理@Configuration标注的Spring配置类。</li>\n</ul>\n</li>\n<li>调用顺序 <ol>\n<li>先调用BeanDefinitionRegistryPostProcessor类型的拦截器，</li>\n<li>然后再依次调用实现了PriorityOrdered,Ordered接口的BeanFactoryPostProcessor</li>\n<li>最后调用普通的BeanFactoryPostProcessor</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>registerBeanPostProcessors()</p>\n<p>注册Bean的后置处理器</p>\n<ol>\n<li>从beanFactory里获取所有BeanPostProcessor类型的Bean的名称。</li>\n<li>调用beanFactory的getBean方法并传入每一个BeanPostProcesso类型的Bean名称，从容器中获取该Bean的实例。</li>\n<li><ol>\n<li>第一步向beanFactory注册实现了PriorityOrdered的BeanPostProcessor类型的Bean实例。</li>\n<li>第二步向beanFactory注册实现了Ordered的BeanPostProcessor类型的Bean实例。</li>\n<li>第三步向beanFactory注册普通的BeanPostProcessor类型的Bean实例。</li>\n<li>最后一步向beanFactory重新注册实现了MergedBeanDefinitionPostProcessor的BeanPostProcessor类型的Bean实例</li>\n</ol>\n</li>\n<li>向beanFactory注册BeanPostProcessor的过程就是简单的将实例保存到beanFactory的beanPostProcessors属性中。</li>\n</ol>\n</li>\n<li><p>initMessageSource()</p>\n<p>初始化国际化相关功能</p>\n<ol>\n<li>看容器中是否有id为messageSource的，类型是MessageSource的Bean实例。如果有赋值给messageSource，如果没有自己创建一个DelegatingMessageSource。</li>\n<li>把创建好的MessageSource注册在容器中，以后获取国际化配置文件的值的时候，可以自动注入MessageSource。</li>\n</ol>\n</li>\n<li><p>initApplicationEventMulticaster()</p>\n<p>初始化事件派发器，用于给监听器传递消息</p>\n<ol>\n<li>看容中是否有名称为applicationEventMulticaster的，类型是ApplicationEventMulticaster的Bean实例。如果没有就创建一个SimpleApplicationEventMulticaster。</li>\n<li>把创建好的ApplicationEventMulticaster添加到BeanFactory中。</li>\n</ol>\n</li>\n<li><p>onRefresh()</p>\n<p>提供给子容器类，供子容器去实例化其他的特殊的Bean</p>\n</li>\n<li><p>registerListeners()</p>\n<p>处理容器中已有的ApplicationListener</p>\n<ol>\n<li>从容器中获得所有的ApplicationListener</li>\n<li>将每个监听器添加到事件派发器（ApplicationEventMulticaster）中；</li>\n<li>处理之前步骤产生的事件；</li>\n</ol>\n</li>\n<li><p>finishBeanFactoryInitialization()</p>\n<p>初始化容器中剩余的单实例bean：拿到剩余的所有的BeanDefinition，依次调用getBean方法</p>\n</li>\n<li><p>finishRefresh()</p>\n<ol>\n<li>初始化和生命周期有关的后置处理器；LifecycleProcessor，如果容器中没有指定处理就创建一个DefaultLifecycleProcessor加入到容器。</li>\n<li>获取容器中所有的LifecycleProcessor回调onRefresh()方法。</li>\n<li>发布容器刷新完成事件ContextRefreshedEvent。</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h1><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aspects<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.12.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在程序运行期间，动态的将某段代码切入到指定位置的编程方式</p>\n<p>底层：动态代理</p>\n<h2 id=\"EnableAspectJAutoProxy的作用\"><a href=\"#EnableAspectJAutoProxy的作用\" class=\"headerlink\" title=\"@EnableAspectJAutoProxy的作用\"></a>@EnableAspectJAutoProxy的作用</h2><p>@EnableAspectJAutoProxy</p>\n<ul>\n<li>@EnableAspectJAutoProxy 通过@Import(AspectJAutoProxyRegistrar.class)给spring容器中导入了一个AnnotationAwareAspectJAutoProxyCreator。</li>\n<li>AnnotationAwareAspectJAutoProxyCreator实现了InstantiationAwareBeanPostProcessor,InstantiationAwareBeanPostProcessor是一个BeanPostProcessor。它可以拦截spring的Bean初始化(Initialization)前后和实例化(Initialization)前后。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li><p>@EnableAspectJAutoProxy</p>\n<p>向容器中注册组件AnnotationAwareAspectJAutoProxyCreator后置处理器</p>\n</li>\n<li><p>容器创建流程：</p>\n<ol>\n<li><p>registerBeanPostProcessors()注册后置处理器，创建AnnotationAwareAspectJAutoProxyCreator对象</p>\n</li>\n<li><p>finishBeanFactoryInitialization()初始化剩下的单实例Bean</p>\n<ol>\n<li><p>创建业务逻辑组件和切面组件</p>\n</li>\n<li><p>AnnotationAwareAspectJAutoProxyCreator会拦截组建的创建过程</p>\n</li>\n<li><p>组件创建完后，判断组件是否需要增强</p>\n<p>如果是，将切面的通知方法包装秤增强器，给业务逻辑组件创建一个代理对象</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>执行目标方法：</p>\n<ol>\n<li><p>代理对象执行目标方法</p>\n</li>\n<li><p>CglibAopProxy.intercept()</p>\n<ol>\n<li><p>得到目标方法的拦截器链(将增强器包装成MethodInterceptor)</p>\n</li>\n<li><p>利用拦截器的链式机制，依次进入每个拦截器进行执行</p>\n<p>由于每个拦截器会先放行执行它的下一个拦截器，因此排在最后的前置通知拦截器会最先执行</p>\n</li>\n<li><p>执行顺序：</p>\n<ul>\n<li>正常执行：前置通知-目标方法-&gt;后置通知-&gt;返回通知</li>\n<li>出现异常：前置通知-目标方法-&gt;后置通知-&gt;异常通知</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"声明式事务原理\"><a href=\"#声明式事务原理\" class=\"headerlink\" title=\"声明式事务原理\"></a>声明式事务原理</h1><p>注解使用方式</p>\n<ul>\n<li><p>配置数据源DataSource</p>\n</li>\n<li><p>主类上添加<code>@EnableTransactionManagement</code></p>\n</li>\n<li><p>需要转为事务操作的方法上添加<code>@Transactional</code></p>\n</li>\n<li><p>配置事务管理器来管理事务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">transactionManager</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里传入配置好的数据源</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(datasource());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>运行过程：</p>\n<ol>\n<li>@EnableTransactionManagement利用TransactionManagementConfigurationSelector给spring容器中导入两个组件：AutoProxyRegistrar和ProxyTransactionManagementConfiguration</li>\n<li>AutoProxyRegistrar给spring容器中注册一个InfrastructureAdvisorAutoProxyCreator，InfrastructureAdvisorAutoProxyCreator实现了InstantiationAwareBeanPostProcessor,InstantiationAwareBeanPostProcessor是一个BeanPostProcessor。它可以拦截spring的Bean初始化(Initialization)前后和实例化(Initialization)前后。利用后置处理器机制在被拦截的bean创建以后包装该bean并返回一个代理对象代理对象执行方法利用拦截器链进行调用（同<strong>springAop</strong>的原理）</li>\n<li>ProxyTransactionManagementConfiguration：是一个spring的配置类,它为spring容器注册了一个BeanFactoryTransactionAttributeSourceAdvisor,是一个事务事务增强器。它有两个重要的字段：AnnotationTransactionAttributeSource和TransactionInterceptor。<ol>\n<li>AnnotationTransactionAttributeSource：用于解析事务注解的相关信息</li>\n<li>TransactionInterceptor：事务拦截器，在事务方法执行时，都会调用TransactionInterceptor的invoke-&gt;invokeWithinTransaction方法，这里面通过配置的PlatformTransactionManager控制着事务的提交和回滚。</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"扩展原理\"><a href=\"#扩展原理\" class=\"headerlink\" title=\"扩展原理\"></a>扩展原理</h1><ol>\n<li>BeanFactoryPostProcessor：beanFactory后置处理器，的拦截时机：所有Bean的定义信息已经加载到容器，但还没有被实例化。可以对beanFactory进行一些操作。</li>\n<li>BeanPostProcessor：bean后置处理器，拦截时机：bean创建对象初始化前后进行拦截工作。可以对每一个Bean进行一些操作。</li>\n<li>BeanDefinitionRegistryPostProcessor：是BeanFactoryPostProcessor的子接口，拦截时机：所有Bean的定义信息已经加载到容器，但还没有被实例化，可以对每一个Bean的BeanDefinition进行一些操作。</li>\n<li>监听器原理：EventListenerMethodProcessor是一个SmartInitializingSingleton，当所有的单例bean都初始化完以后， 容器会回调该接口的方法afterSingletonsInstantiated(),该方法里会遍历容器中所有的bean，并判断每一个bean里是否带有@EventListener注解的Method，然后创建ApplicationListenerMethodAdapter存储并包装该Method，最后将ApplicationListenerMethodAdapter添加到spring容器中。</li>\n<li>事件派发器ApplicationEventMulticaster给EventListener传递消息</li>\n</ol>\n<h2 id=\"使用监听器\"><a href=\"#使用监听器\" class=\"headerlink\" title=\"使用监听器\"></a>使用监听器</h2><ol>\n<li><p>监听对象</p>\n<ul>\n<li><p>实现并注册ApplicationListener接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">ApplicationEvent</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(ApplicationEvent applicationEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;监听到了事件：&quot;</span> + applicationEvent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>或者直接使用<code>@EventListener()</code>接口来为普通的方法指定监听对象</p>\n</li>\n</ul>\n</li>\n<li><p>可以自己发布事件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">applicationContext.publishEvent(<span class=\"keyword\">new</span> ApplicationEvent(<span class=\"keyword\">new</span> String(<span class=\"string\">&quot;我发布的事件&quot;</span>))&#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"bean的循环依赖问题\"><a href=\"#bean的循环依赖问题\" class=\"headerlink\" title=\"bean的循环依赖问题\"></a>bean的循环依赖问题</h1><p>A 依赖 B B 依赖 A 产生闭环，称为循环依赖</p>\n<p>·Spring 默认允许单例对象的属性注入 所产生的循环依赖</p>\n<p>单例对象的循环依赖 Spring通过3级缓存来解决</p>\n<p>比如一个类A中有一个属性是B类，B类中有一个属性是A类，这时看Spring是怎么解决他们的相互依赖的。Spring注入一个类的大体步骤分为两部分，一是先完成对类的构造工作，二是会对类的属性进行设置和填充。首先Spring构造A类，通过AbstractAutowireCapableBeanFactory的doCreateBean方法中调用addSingletonFactory方法将A类曝光到singletonFactories中。这时完成A的构造后，需要填充B属性，继续第二步，发现B还没有构造，于是开始B流程的构造过程，构造的时候发现需要填充A，从第三层缓存singletonFactories中找到A(此时的A还没有完全构造完成，但是可以拿到A的一个引用)，B拿到A的引用后，完成B自己的填充属性工作，完成初始化工作，把自己放到第一层缓存singletonObjects中。这时回到A的这边，在拿到B对象后，完成自己的填充属性工作。</p>\n<table>\n<thead>\n<tr>\n<th>源码</th>\n<th>级别</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>singletonObjects</td>\n<td>一级缓存</td>\n<td>用于存放完全初始化好的 bean，从该缓存中取出的 bean 可以直接使用</td>\n</tr>\n<tr>\n<td>earlySingletonObjects</td>\n<td>二级缓存</td>\n<td>存放原始的 bean 对象（尚未填充属性），用于解决循环依赖</td>\n</tr>\n<tr>\n<td>singletonFactories</td>\n<td>三级缓存</td>\n<td>存放 bean 工厂对象，用于解决循环依赖</td>\n</tr>\n</tbody></table>\n<p>二级缓存就能解决缓存依赖，三级缓存解决的是AOP代理问题</p>\n","categories":["JavaEE"]},{"title":"JUC","url":"/2021/03/20/JavaSE/JUC/","content":"<p>并发编程的目的：充分利用CPU资源</p>\n<p>JUC：java.util.concurrent</p>\n<h1 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h1><p>Java代码无权直接创建线程，需要调用原生的C++方法<code>start0()</code>才能创建线程</p>\n<p>线程状态</p>\n<ul>\n<li>创建</li>\n<li>就绪</li>\n<li>运行</li>\n<li>阻塞</li>\n<li>死亡</li>\n</ul>\n<p>实现多线程的两个接口：Callable和Runnable，一般来说Callable性能更高</p>\n<p>Java中Thread类中的枚举类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> State &#123;</span><br><span class=\"line\">    NEW, <span class=\"comment\">//初始</span></span><br><span class=\"line\">    RUNNABLE, <span class=\"comment\">//运行</span></span><br><span class=\"line\">    BLOCKED, <span class=\"comment\">//阻塞</span></span><br><span class=\"line\">    WAITING, <span class=\"comment\">//等待</span></span><br><span class=\"line\">    TIMED_WAITING, <span class=\"comment\">//超时等待</span></span><br><span class=\"line\">    TERMINATED; <span class=\"comment\">//终止</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>wait/sleep的区别</p>\n<ul>\n<li>wait是Object的方法，sleep是Thread类的方法</li>\n<li>wait会释放锁，sleep不会释放锁</li>\n<li>wait必须在同步代码块中使用，而sleep可以在任何地方使用</li>\n</ul>\n<h1 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h1><h2 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h2><p>synchronized的本质：锁+队列</p>\n<p>给方法添加synchronized锁的对象为方法的调用者，即方法所在的类</p>\n<p>在使用synchronized的时候，有些情况下会出现虚假唤醒，为了防止这个问题，应该使用while来代替if判断，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(number != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.wait();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>在定义接口方法时不能使用synchronized关键字</p>\n<ul>\n<li><p>修饰方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">sendSms</span><span class=\"params\">()</span></span>&#123;...&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendSms</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;...&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修饰static方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">sendSms</span><span class=\"params\">()</span></span>&#123;...&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修饰类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendSms</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">synchronized</span> (Phone.class) &#123;...&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"static锁与方法锁的区别\"><a href=\"#static锁与方法锁的区别\" class=\"headerlink\" title=\"static锁与方法锁的区别\"></a>static锁与方法锁的区别</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">sendSms</span><span class=\"params\">()</span></span>&#123;...&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">sendSms</span><span class=\"params\">()</span></span>&#123;...&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的synchronized锁的是phone的实例对象，同一个对象调用不同方法会被锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">sendSms</span><span class=\"params\">()</span></span>&#123;...&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">sendSms</span><span class=\"params\">()</span></span>&#123;...&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的synchronized锁的是phone的静态模板phone.class，调用同时带有static的和synchronized的方法会被锁</p>\n<h2 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h2><ul>\n<li><p>公平锁：必须按先来后到顺序执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ReentrantLock reentrantLock = <span class=\"keyword\">new</span> ReentrantLock(<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>非公平锁：可以插队</p>\n<p>lock锁默认非公平锁</p>\n</li>\n</ul>\n<h3 id=\"lock锁\"><a href=\"#lock锁\" class=\"headerlink\" title=\"lock锁\"></a>lock锁</h3><p>常用实现类ReentrantLock</p>\n<p>使用流程：</p>\n<ol>\n<li>创建锁<code>ReentrantLock lock = new ReentrantLock();</code></li>\n<li>加锁<code>lock.lock();</code>或<code>lock.tryLock();</code></li>\n<li>编写业务代码</li>\n<li>解锁<code>lock.unlock();</code></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TicketClass ticket = <span class=\"keyword\">new</span> TicketClass();</span><br><span class=\"line\">        <span class=\"comment\">//使用函数式编程的方式多线程调用方法</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">                ticket.getTicket();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;消费者A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">                ticket.getTicket();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;消费者B&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(()-&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">                ticket.getTicket();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;消费者C&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">50</span>;</span><br><span class=\"line\">    <span class=\"comment\">//声明并使用Lock锁</span></span><br><span class=\"line\">    ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getTicket</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;买到了第&quot;</span>+ (<span class=\"number\">50</span>- --i) +<span class=\"string\">&quot;张票，剩余&quot;</span> + i + <span class=\"string\">&quot;张票&quot;</span>);</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>synchronized与Lock的区别</strong></p>\n<ul>\n<li>synchronized是内置的java关键字，Lock是一个java类</li>\n<li>synchronized无法判断锁的状态，Lock可以判断是否获得到了锁</li>\n<li>synchronized会自动释放，Lock必须手动释放</li>\n<li>如果使用synchronized，正在运行的线程阻塞了，正在等待的线程会持续等待，而Lock不一定(使用tryLock方法)</li>\n<li>synchronized可重入，不能中断，非公平；lock可重入，可以判断锁，可以自己设置是否公平锁</li>\n<li>synchronized适合锁少量同步代码，lock适合锁大量同步代码</li>\n</ul>\n<h3 id=\"Condition\"><a href=\"#Condition\" class=\"headerlink\" title=\"Condition\"></a>Condition</h3><p><code>lock.newCondition()</code>创建信号量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">lock.await(); <span class=\"comment\">//信号量--</span></span><br><span class=\"line\">lock.signal() <span class=\"comment\">//信号量++</span></span><br></pre></td></tr></table></figure>\n\n<p>可以通过信号量来指定线程执行顺序</p>\n<h2 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h2><ul>\n<li>独占锁：写锁，只允许一个线程操作</li>\n<li>共享锁：读锁，只允许读不允许写</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo06</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ReadWriteTest readWriteTest = <span class=\"keyword\">new</span> ReadWriteTest();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> temp = i;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                readWriteTest.put(temp+<span class=\"string\">&quot;&quot;</span>,temp+<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            &#125;, String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> temp = i;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                readWriteTest.get(temp+<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            &#125;, String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReadWriteTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Map&lt;String, String&gt; map =  <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//读写锁</span></span><br><span class=\"line\">    ReentrantReadWriteLock lock = <span class=\"keyword\">new</span> ReentrantReadWriteLock();</span><br><span class=\"line\">    <span class=\"comment\">//写锁，同时只允许一个线程操作</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String key, String value)</span></span>&#123;</span><br><span class=\"line\">        lock.writeLock().lock();</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;正在准备写入&quot;</span>);</span><br><span class=\"line\">        map.put(key, value);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;正在准备写入&quot;</span>);</span><br><span class=\"line\">        lock.writeLock().unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//读锁，只允许读不允许写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(String key)</span></span>&#123;</span><br><span class=\"line\">        lock.readLock().lock();</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;正在准备读出&quot;</span>);</span><br><span class=\"line\">        String s = map.get(key);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;读出&quot;</span>+ s);</span><br><span class=\"line\">        lock.readLock().unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可重入锁\"><a href=\"#可重入锁\" class=\"headerlink\" title=\"可重入锁\"></a>可重入锁</h2><p>某个线程已经获取锁了，仍然可以获取锁而不死锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo15</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; PhoneService.sms()).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; PhoneService.call()).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhoneService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">sms</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            call();<span class=\"comment\">//再次获取锁</span></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; is sending sms...&quot;</span>);</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; is calling...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的测试中，在0号线程保持sms方法锁的时间内，1号线程不能获取到call方法的锁</p>\n<p>lock锁同理，可以对同一个lock多次加锁，但必须释放同样多次数的锁才能完全释放锁</p>\n<h2 id=\"自旋锁\"><a href=\"#自旋锁\" class=\"headerlink\" title=\"自旋锁\"></a>自旋锁</h2><p>以Unsafe类中的getAndSetInt为例，不断进行CAS循环直到成功的代码块即为自旋锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getAndSetInt</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">int</span> var4)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> var5;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        var5 = <span class=\"keyword\">this</span>.getIntVolatile(var1, var2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(!<span class=\"keyword\">this</span>.compareAndSwapInt(var1, var2, var5, var4));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> var5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"死锁排查\"><a href=\"#死锁排查\" class=\"headerlink\" title=\"死锁排查\"></a>死锁排查</h2><ol>\n<li><p>使用<code>jps -l</code>查看进程号</p>\n</li>\n<li><p>使用<code>jstack 进程号</code>查看详细信息</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211005194044091.png\" alt=\"image-20211005194044091\"></p>\n</li>\n</ol>\n<h1 id=\"集合类不安全\"><a href=\"#集合类不安全\" class=\"headerlink\" title=\"集合类不安全\"></a>集合类不安全</h1><p>在使用ArrayList,HashSet或HashMap进行多线程操作时是不安全的，报错ConcurrentModificationException，如何解决？</p>\n<ul>\n<li><p>使用Vector代替ArrayList，本质synchronized修饰</p>\n</li>\n<li><p>使用Collections集合类中的方法添加synchronized关键词</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Object&gt; list = Collections.synchronizedList(<span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>底层使用的是Lock锁的实现类</p>\n<ul>\n<li>CopyOnWriteArrayList</li>\n<li>CopyOnWriteArraySet</li>\n</ul>\n</li>\n<li><p>底层使用synchronized锁node结点的实现类ConcurrentHashMap</p>\n</li>\n</ul>\n<h1 id=\"Callable\"><a href=\"#Callable\" class=\"headerlink\" title=\"Callable\"></a>Callable</h1><p>相较于Runnable：</p>\n<ul>\n<li>可以有返回值</li>\n<li>可以抛出异常</li>\n<li>多次调用有缓存，比如下面这个例子call方法只会执行一次</li>\n</ul>\n<p>使用方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo02</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//实例化Callable实现类</span></span><br><span class=\"line\">        TestCallable testThread = <span class=\"keyword\">new</span> TestCallable();</span><br><span class=\"line\">        <span class=\"comment\">//交由FutureTask处理</span></span><br><span class=\"line\">        FutureTask&lt;String&gt; task = <span class=\"keyword\">new</span> FutureTask&lt;&gt;(testThread);</span><br><span class=\"line\">        <span class=\"comment\">//FutureTask是Runnable的一个实现类，可以直接start()</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(task, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(task, <span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"comment\">//可以捕捉异常</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//通过get()方法获取call()方法的返回值</span></span><br><span class=\"line\">            System.out.println(task.get());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestCallable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Thread.currentThread().getName() + <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"常用辅助类（AQS）\"><a href=\"#常用辅助类（AQS）\" class=\"headerlink\" title=\"常用辅助类（AQS）\"></a>常用辅助类（AQS）</h1><p>AQS即AbstractQueuedSynchronizer，是一个常用的同步锁模板框架，常见的ReentrantLock、ReadWriteLock、CountDownLatch、CyclicBarrier、Semaphore都是AQS的实现类</p>\n<ul>\n<li>维护一个state变量，只有state=0时其他线程才能成功获取到这个锁，并根据具体情况将state更改为不同的值</li>\n<li>条件队列+同步队列：当前线程获取同步失败，会将当前线程作为Node结点添加到队列尾部并阻塞、当state可用时，从同步队列的头部获取线程并进行同步</li>\n</ul>\n<p>资源共享的方式：</p>\n<ul>\n<li>独占型：ReentrantLock、ReadWriteLock</li>\n<li>共享型：CountDownLatch、CyclicBarrier、Semaphore</li>\n</ul>\n<h2 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h2><p>减法计数器，一般用于控制线程等待</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo03</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化值为6</span></span><br><span class=\"line\">        CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">6</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; =&gt; gou out&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//数值--</span></span><br><span class=\"line\">                countDownLatch.countDown();</span><br><span class=\"line\">            &#125;, String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//等待所有线程执行完毕再向下放行</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            countDownLatch.await();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Close door&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h2><p>与CountDownLatch类似的功能，但更为强大，一般用于同步一组线程，设置一个屏障点，当一组线程中的最后一个线程到达屏障点时所有线程才能够继续执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo04</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//线程计数器达到7才会执行</span></span><br><span class=\"line\">        CyclicBarrier cyclicBarrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">7</span>, () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;7777777777777！&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">7</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//计数器++</span></span><br><span class=\"line\">                    cyclicBarrier.await();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (BrokenBarrierException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h2><p>java中的信号量，一般在限流中使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo05</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//p操作,获得资源</span></span><br><span class=\"line\">                    semaphore.acquire();</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;停入车位&quot;</span>);</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;离开车位&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//v操作，释放资源</span></span><br><span class=\"line\">                    semaphore.release();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"阻塞队列\"><a href=\"#阻塞队列\" class=\"headerlink\" title=\"阻塞队列\"></a>阻塞队列</h1><p>BlockingQueue接口：和List和Set同级，实现Collection接口</p>\n<p>BlockingQueue为FIFO类型的队列，先进先出</p>\n<p>常用类结构</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211003235128371.png\" alt=\"image-20211003235128371\"></p>\n<h2 id=\"ArrayBlockingQueue\"><a href=\"#ArrayBlockingQueue\" class=\"headerlink\" title=\"ArrayBlockingQueue\"></a>ArrayBlockingQueue</h2><p>数组阻塞队列，常用api：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211004104730429.png\" alt=\"image-20211004104730429\"></p>\n<p>使用实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ArrayBlockingQueue blockingQueue = <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\">    blockingQueue.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    System.out.println(blockingQueue.element());</span><br><span class=\"line\">    System.out.println(blockingQueue.remove());</span><br><span class=\"line\"></span><br><span class=\"line\">    blockingQueue.offer(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    System.out.println(blockingQueue.peek());</span><br><span class=\"line\">    System.out.println(blockingQueue.poll());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        blockingQueue.put(<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">        System.out.println(blockingQueue.take());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里指定时间单位和时间长度，超过指定时间返回false，poll()同理</span></span><br><span class=\"line\">        blockingQueue.offer(<span class=\"string\">&quot;4&quot;</span>,<span class=\"number\">2</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">        System.out.println(blockingQueue.poll(<span class=\"number\">2</span>, TimeUnit.SECONDS));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SynchronousQueue\"><a href=\"#SynchronousQueue\" class=\"headerlink\" title=\"SynchronousQueue\"></a>SynchronousQueue</h2><p>同步队列：没有容量，进入一个元素必须等待取出之后才能在此存放，类似于容量为1的阻塞队列</p>\n<h1 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h1><h2 id=\"三大方法\"><a href=\"#三大方法\" class=\"headerlink\" title=\"三大方法\"></a>三大方法</h2><p>创建线程池的三个api</p>\n<ul>\n<li><code>Executors.newSingleThreadExecutor()</code> 单线程实例</li>\n<li><code>Executors.newFixedThreadPool(n) </code> 最大线程数量为n</li>\n<li><code>Executors.newCachedThreadPool()</code> 伸缩缓存线程池</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo08</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ExecutorService threadPool = Executors.newSingleThreadExecutor();</span><br><span class=\"line\"><span class=\"comment\">//        ExecutorService threadPool = Executors.newFixedThreadPool(5);</span></span><br><span class=\"line\"><span class=\"comment\">//        ExecutorService threadPool = Executors.newCachedThreadPool();</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> temp = i;</span><br><span class=\"line\">            <span class=\"comment\">//开启线程</span></span><br><span class=\"line\">            threadPool.execute(() -&gt; &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; =&gt; &quot;</span> + temp);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//关闭线程池</span></span><br><span class=\"line\">        threadPool.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"七大参数\"><a href=\"#七大参数\" class=\"headerlink\" title=\"七大参数\"></a>七大参数</h2><p>上面的三个api方法都是同过创建ThreadPoolExecutor对象来实现的，包括调用一些他们的重载方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize, //核心线程池大小</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">int</span> maximumPoolSize, //最大线程池大小</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          <span class=\"keyword\">long</span> keepAliveTime, //超时时间</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          TimeUnit unit, //超时单位</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue, //阻塞队列</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          ThreadFactory threadFactory, //线程工厂</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                          RejectedExecutionHandler handler)</span> </span>&#123; <span class=\"comment\">//拒绝策略 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\">        keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workQueue == <span class=\"keyword\">null</span> || threadFactory == <span class=\"keyword\">null</span> || handler == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.acc = System.getSecurityManager() == <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">            <span class=\"keyword\">null</span> :</span><br><span class=\"line\">            AccessController.getContext();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.corePoolSize = corePoolSize;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.workQueue = workQueue;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handler = handler;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>线程池的线程运行过程</p>\n</blockquote>\n<ul>\n<li>可运行的线程数量最初只有corePoolSize个，先进入的线程开始运行</li>\n<li>当corePoolSize的线程都正在运行，不能添加新的线程时，这时进入的线程进入到阻塞队列workQueue中进行等待</li>\n<li>当workQueue的空间也被占满，仍有新的线程进入时，线程池会开放可同时运行的线程数量上限，最大为maximumPoolSize</li>\n<li>当同时运行maximumPoolSize个线程，而workQueue的所有空间也都被占满时，线程池会遵循拒绝策略RejectedExecutionHandler，拒绝新线程的进入</li>\n</ul>\n<h3 id=\"拒绝策略的实现类\"><a href=\"#拒绝策略的实现类\" class=\"headerlink\" title=\"拒绝策略的实现类\"></a>拒绝策略的实现类</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211004151143390.png\" alt=\"image-20211004151143390\"></p>\n<ul>\n<li>AbortPolicy：直接拒绝并抛出异常</li>\n<li>CallerRunsPolicy：让调用线程的线程来运行(比如main线程新建的线程超过了上限，就会使用main线程来运行新线程的内容)</li>\n<li>DiscardOldestPolicy：尝试让新线程来替代线程池中最老的线程，不会抛出异常</li>\n<li>DiscardPolicy：直接拒绝但不抛出异常</li>\n</ul>\n<h3 id=\"设置maximumPoolSize的策略\"><a href=\"#设置maximumPoolSize的策略\" class=\"headerlink\" title=\"设置maximumPoolSize的策略\"></a>设置maximumPoolSize的策略</h3><ul>\n<li><p>CPU密集型：maximumPoolSize=CPU核数，效率最高</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Runtime.getRuntime().availableProcessors() <span class=\"comment\">//获取CPU核数</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>IO密集型：判断程序中有几个十分消耗IO资源的线程，只要maximumPoolSize大于这个数即可</p>\n<p>一般可以设置为2倍</p>\n</li>\n</ul>\n<h2 id=\"自定义线程池\"><a href=\"#自定义线程池\" class=\"headerlink\" title=\"自定义线程池\"></a>自定义线程池</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo09</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ArrayBlockingQueue blockingQueue = <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;&gt;(<span class=\"number\">3</span>);</span><br><span class=\"line\">        ThreadPoolExecutor poolExecutor = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">2</span>, <span class=\"comment\">//核心线程池大小</span></span><br><span class=\"line\">                <span class=\"number\">5</span>, <span class=\"comment\">//最大线程池大小</span></span><br><span class=\"line\">                <span class=\"number\">2</span>, <span class=\"comment\">//超时时间</span></span><br><span class=\"line\">                TimeUnit.SECONDS, <span class=\"comment\">//超时单位</span></span><br><span class=\"line\">                blockingQueue, <span class=\"comment\">//阻塞队列</span></span><br><span class=\"line\">                Executors.defaultThreadFactory(), <span class=\"comment\">//线程工厂</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> ThreadPoolExecutor.AbortPolicy());<span class=\"comment\">//拒绝策略</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123;</span><br><span class=\"line\">            poolExecutor.execute(()-&gt;&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot; 正在运行&quot;</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        poolExecutor.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h1><p>只有一个方法的接口，如Runnable接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>作用：简化编程模型，新版框架底层大量应用</p>\n<h2 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h2><p>函数型接口：指定一个输入和一个输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Function</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">apply</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Predicate\"><a href=\"#Predicate\" class=\"headerlink\" title=\"Predicate\"></a>Predicate</h2><p>断定性接口：指定一个输入，返回布尔值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Predicate</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Consumer\"><a href=\"#Consumer\" class=\"headerlink\" title=\"Consumer\"></a>Consumer</h2><p>消费型接口：只有输入，没有返回值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Consumer</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Supplier\"><a href=\"#Supplier\" class=\"headerlink\" title=\"Supplier\"></a>Supplier</h2><p>供给型接口：没有输入，只有输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Supplier</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Stream流式计算\"><a href=\"#Stream流式计算\" class=\"headerlink\" title=\"Stream流式计算\"></a>Stream流式计算</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo10</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        User user1 = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>, <span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">        User user2 = <span class=\"keyword\">new</span> User(<span class=\"number\">2</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">        User user3 = <span class=\"keyword\">new</span> User(<span class=\"number\">3</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"number\">23</span>);</span><br><span class=\"line\">        User user4 = <span class=\"keyword\">new</span> User(<span class=\"number\">4</span>, <span class=\"string\">&quot;d&quot;</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\">        User user5 = <span class=\"keyword\">new</span> User(<span class=\"number\">5</span>, <span class=\"string\">&quot;e&quot;</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;User&gt; list = Arrays.asList(user1, user2, user3, user4, user5);</span><br><span class=\"line\"></span><br><span class=\"line\">        list.stream()</span><br><span class=\"line\">                .filter(u-&gt;u.getId()%<span class=\"number\">2</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\">                .filter(u-&gt;u.getAge()&gt;<span class=\"number\">23</span>)</span><br><span class=\"line\">                .map(u-&gt;u.getName().toUpperCase())</span><br><span class=\"line\">                .sorted((u1,u2)-&gt;u2.compareTo(u1))</span><br><span class=\"line\">                .limit(<span class=\"number\">1</span>)</span><br><span class=\"line\">                .forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ForkJoin\"><a href=\"#ForkJoin\" class=\"headerlink\" title=\"ForkJoin\"></a>ForkJoin</h1><p>大数据量的情境下并行执行任务，提高效率</p>\n<p>特点：工作窃取</p>\n<p>假设两个线程：A处理速度较慢，B处理速度较快，当B处理完他自己队列中的所有任务之后，会尝试“窃取”A未完成队列中的任务进行工作</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211004183447161.png\" alt=\"image-20211004183447161\"></p>\n<p>用法示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo11</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里可以调整临界值的大小，方便调优</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer MAX = <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyForkJoinTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 子任务开始计算的值</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Integer startValue;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 子任务结束计算的值</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Integer endValue;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyForkJoinTask</span><span class=\"params\">(Integer startValue , Integer endValue)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.startValue = startValue;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.endValue = endValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 递归调用计算方法，知道两侧的值之差小于MAX</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Integer <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果条件成立，说明这个任务所需要计算的数值分为足够小了</span></span><br><span class=\"line\">            <span class=\"comment\">// 可以正式进行累加计算了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(endValue - startValue &lt; MAX) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;开始计算的部分：startValue = &quot;</span> + startValue + <span class=\"string\">&quot;;endValue = &quot;</span> + endValue);</span><br><span class=\"line\">                Integer totalValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> index = <span class=\"keyword\">this</span>.startValue ; index &lt;= <span class=\"keyword\">this</span>.endValue  ; index++) &#123;</span><br><span class=\"line\">                    totalValue += index;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> totalValue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 否则再进行任务拆分，拆分成两个任务</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                MyForkJoinTask subTask1 = <span class=\"keyword\">new</span> MyForkJoinTask(startValue, (startValue + endValue) / <span class=\"number\">2</span>);</span><br><span class=\"line\">                subTask1.fork();</span><br><span class=\"line\">                MyForkJoinTask subTask2 = <span class=\"keyword\">new</span> MyForkJoinTask((startValue + endValue) / <span class=\"number\">2</span> + <span class=\"number\">1</span> , endValue);</span><br><span class=\"line\">                subTask2.fork();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> subTask1.join() + subTask2.join();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这是Fork/Join框架的线程池</span></span><br><span class=\"line\">        ForkJoinPool pool = <span class=\"keyword\">new</span> ForkJoinPool();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\">        ForkJoinTask&lt;Integer&gt; taskFuture =  pool.submit(<span class=\"keyword\">new</span> MyForkJoinTask(<span class=\"number\">1</span>,<span class=\"number\">100_0000</span>));</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Integer result = taskFuture.get();</span><br><span class=\"line\">            <span class=\"keyword\">long</span> endTime = System.currentTimeMillis();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;执行花费时间：&quot;</span> + (<span class=\"keyword\">float</span>)(endTime-startTime)/<span class=\"number\">1000</span> + <span class=\"string\">&quot;s&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;result = &quot;</span> + result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class=\"line\">            e.printStackTrace(System.out);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CompletableFuture\"><a href=\"#CompletableFuture\" class=\"headerlink\" title=\"CompletableFuture\"></a>CompletableFuture</h1><p>针对Future接口做了改进，可以传入回调对象，当异步任务完成或者发生异常时，自动调用回调对象的回调方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo12</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建异步执行任务:</span></span><br><span class=\"line\">        CompletableFuture&lt;Double&gt; cf = CompletableFuture.supplyAsync(Demo12::fetchPrice);</span><br><span class=\"line\">        <span class=\"comment\">// 如果执行完成的回调函数:</span></span><br><span class=\"line\">        <span class=\"comment\">// 传入BiConsumer类型(可以传入两个参数)</span></span><br><span class=\"line\">        cf.whenComplete((t,u)-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;执行结果：&quot;</span> + t);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;异常信息：&quot;</span> + u);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 传入Consumer类型</span></span><br><span class=\"line\">        cf.thenAccept((result) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;price: &quot;</span> + result);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 传入异常:</span></span><br><span class=\"line\">        cf.exceptionally((e) -&gt; &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Double <span class=\"title\">fetchPrice</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Math.random() &lt; <span class=\"number\">0.3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;fetch price failed!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">5</span> + Math.random() * <span class=\"number\">20</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"JMM\"><a href=\"#JMM\" class=\"headerlink\" title=\"JMM\"></a>JMM</h1><p>Java内存模型，是一种抽象概念</p>\n<p>一些JMM同步约定：</p>\n<ul>\n<li>线程解锁前，必须把共享变量立即写回主存中</li>\n<li>线程加锁前，必须读取主存中最新的值保存在自身的工作内存中</li>\n</ul>\n<p><strong>八种内存间的交互操作</strong></p>\n<p>下图中除了6个操作，还有lock和unlock两个关于锁的操作</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211004203751132.png\" alt=\"image-20211004203751132\"></p>\n<ul>\n<li>lock(锁定):作用于主内存的变量；它把这一个变量标识为一个线程独占的状态</li>\n<li>unlock(解锁):作用域主内存的变量，把一个变量释放</li>\n<li>read(读取):作用于主内存的变量，把一个变量的值从主内存传输到工作内存中，以便随后的load动作使用</li>\n<li>load(载入):作用于工作内存变量，它把read曹祖从主内存中得到的变量值放入工作内存的变量副本中</li>\n<li>use(适应):作用于工作内存的变量，把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作</li>\n<li>assign(赋值):作用于工作内存的变量，把一个执行引擎接收到值赋给工作的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作</li>\n<li>store(存储):作用域工作内存的变量，它把工作内存中一个变量的值传递到主内存，以便随后的write操作</li>\n<li>write(写入):作用于主内存的变量，它把store操作从工作内存得到的变量的值放入主内存的变量中</li>\n</ul>\n<p>这八种操作中，read和load，store和write需要成对出现</p>\n<h1 id=\"Volatile\"><a href=\"#Volatile\" class=\"headerlink\" title=\"Volatile\"></a>Volatile</h1><p>是JVM提供的轻量级的同步机制</p>\n<ul>\n<li><p>保证可见性</p>\n<p>添加Volatile关键字的属性对所有线程可见</p>\n</li>\n<li><p>不保证原子性</p>\n</li>\n<li><p>保证有序性(禁止指令重排)</p>\n</li>\n</ul>\n<h2 id=\"如何保证原子性\"><a href=\"#如何保证原子性\" class=\"headerlink\" title=\"如何保证原子性\"></a>如何保证原子性</h2><p>使用原子性的类来替代原本的类，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> AtomicInteger num = <span class=\"keyword\">new</span> AtomicInteger();</span><br></pre></td></tr></table></figure>\n\n<p>原子类的方法都是调用native方法的CAS</p>\n<h2 id=\"指令重排\"><a href=\"#指令重排\" class=\"headerlink\" title=\"指令重排\"></a>指令重排</h2><p>计算机在执行指令时可能会对程序代码的执行顺序作一定的修改，提高运行效率。</p>\n<p>下面这种情况中，线程A和线程B自身的两行代码的执行顺序对于自身线程的结果来说没有任何影响，然而多线程的情况下可能会造成解决过的错误：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211005150251656.png\" alt=\"image-20211005150251656\"></p>\n<h2 id=\"Volatile实现有序性的原理\"><a href=\"#Volatile实现有序性的原理\" class=\"headerlink\" title=\"Volatile实现有序性的原理\"></a>Volatile实现有序性的原理</h2><p>Volatile关键字会添加一个lock锁的前缀指令</p>\n<p>lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），内存屏障会提供3个功能：</p>\n<ol>\n<li>它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成</li>\n<li>它会强制将对缓存的修改操作立即写入主存</li>\n<li>如果是写操作，它会导致其他CPU中对应的缓存行无效</li>\n</ol>\n<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><p>最大的特点：构造器私有</p>\n<h2 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h2><p>提前实例化对象，可能会浪费空间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hungry</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//加载类的时候就进行实例化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Hungry HUNGRY = <span class=\"keyword\">new</span> Hungry();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Hungry</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Hungry <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HUNGRY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h2><p>在获取实例时，对象不存在再实例化对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lazy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Lazy lazy;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Lazy</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Lazy <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//实例不存在则实例化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lazy == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            lazy = <span class=\"keyword\">new</span> Lazy();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内部类模式\"><a href=\"#内部类模式\" class=\"headerlink\" title=\"内部类模式\"></a>内部类模式</h2><p>能达到双检锁方式一样的功效，但实现更简单</p>\n<p>这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Holder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Holder</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Holder <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> InnerClass.HOLDER;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//内部类内实例化对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Holder HOLDER = <span class=\"keyword\">new</span> Holder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DCL懒汉式\"><a href=\"#DCL懒汉式\" class=\"headerlink\" title=\"DCL懒汉式\"></a>DCL懒汉式</h2><p>采用双锁机制，安全且在多线程情况下能保持高性能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyDCL</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LazyDCL lazyDCL;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazyDCL</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazyDCL <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//实例不存在则实例化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lazyDCL == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//对类加锁，使其获得原子性</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (LazyDCL.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (lazyDCL == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    lazyDCL = <span class=\"keyword\">new</span> LazyDCL();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazyDCL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>简洁，自动支持序列化机制，绝对防止多次实例化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span>  EnumSingle &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EnumSingle <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class=\"line\">    Constructor&lt;EnumSingle&gt; constructor = EnumSingle.class.getDeclaredConstructor(String.class, <span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">    constructor.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    EnumSingle instance = constructor.newInstance();</span><br><span class=\"line\">    System.out.println(instance);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：不允许利用反射获取实例：<code>java.lang.IllegalArgumentException: Cannot reflectively create enum objects</code></p>\n<h1 id=\"原子性操作相关问题\"><a href=\"#原子性操作相关问题\" class=\"headerlink\" title=\"原子性操作相关问题\"></a>原子性操作相关问题</h1><h2 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h2><p>原子类的方法compareAndSet，底层是使用Unsafe类的操作内存单元中的内容，具有原子性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果值为expect，就更新为update</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">AtomicInteger atomicInteger = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">2021</span>);</span><br><span class=\"line\">atomicInteger.compareAndSet(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ABA问题\"><a href=\"#ABA问题\" class=\"headerlink\" title=\"ABA问题\"></a>ABA问题</h2><p>设<code>int num = 0</code></p>\n<ol>\n<li>假设A线程最初读取num为0，</li>\n<li>这时B线程读取并修改num修为1，然后经过一些操作后又将num修改为0</li>\n<li>这时A线程读取num仍然为0，但是这时的num已经不是当初未作任何修改的num了，A线程对于num经历的修改毫不知情</li>\n</ol>\n<p>解决方法：使用带版本号的原子操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo14</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里注意atomicInteger值必须在-127~128之间才能成功</span></span><br><span class=\"line\">        <span class=\"comment\">//日常使用会直接传入对象，不会使用Integer</span></span><br><span class=\"line\">        AtomicStampedReference&lt;Integer&gt; atomicStampedReference = <span class=\"keyword\">new</span> AtomicStampedReference&lt;&gt;(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取版本号</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> stamp = atomicStampedReference.getStamp();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;初始版本号：&quot;</span> + stamp);</span><br><span class=\"line\">        atomicStampedReference.compareAndSet(<span class=\"number\">1</span>,<span class=\"number\">2</span>,</span><br><span class=\"line\">                stamp,atomicStampedReference.getStamp() + <span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;修改后的版本号：&quot;</span> + atomicStampedReference.getStamp());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["JavaSE"]},{"title":"ElasticSearch","url":"/2021/09/28/%E5%B7%A5%E5%85%B7%E7%BB%84%E4%BB%B6/ElasticSearch/","content":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><h2 id=\"基本概述\"><a href=\"#基本概述\" class=\"headerlink\" title=\"基本概述\"></a>基本概述</h2><p>ELK：Elasticsearch+Logstash+Kibana</p>\n<p>基本特征</p>\n<ul>\n<li>Elasticsearch基于Lucene，java开发的，而Lucene是一套信息检索工具包(jar)，不包含搜索引擎</li>\n<li>开源高扩展的分布式搜索引擎，近乎实时的存储和检索数据，可以处理PB级别的数据</li>\n<li>主要功能：全文搜索、结构化搜索、分析</li>\n</ul>\n<p>最低要求jdk1.8</p>\n<p>默认端口9200，集群通信端口9300</p>\n<h2 id=\"ES数据结构\"><a href=\"#ES数据结构\" class=\"headerlink\" title=\"ES数据结构\"></a>ES数据结构</h2><ul>\n<li>索引indices</li>\n<li>types(逐渐弃用)</li>\n<li>documents</li>\n<li>fields</li>\n</ul>\n<h2 id=\"倒排索引\"><a href=\"#倒排索引\" class=\"headerlink\" title=\"倒排索引\"></a>倒排索引</h2><ul>\n<li><p>正排索引</p>\n<p>以文档ID为key建立索引表，用户搜索时查询所有索引的content(包括大部分与输入的关键词无关的word)，速度很慢</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210928233250409.png\" alt=\"image-20210928233250409\"></p>\n</li>\n<li><p>倒排索引</p>\n<p>预先以word为key建立索引表，只有出现过某个词语的文档才会添加到索引队列，用户搜索时只需要遍历所有索引(这些索引的表项都是与输入的关键词直接相关的)，只需要对比各个文档中关键词出现的次数就可以很快查出并排序</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210928233316851.png\" alt=\"image-20210928233316851\"></p>\n</li>\n</ul>\n<h1 id=\"开始ES\"><a href=\"#开始ES\" class=\"headerlink\" title=\"开始ES\"></a>开始ES</h1><h2 id=\"安装ES\"><a href=\"#安装ES\" class=\"headerlink\" title=\"安装ES\"></a>安装ES</h2><p>这里使用docker安装</p>\n<p>限制系统进程的虚拟内存区域大小，否则可能无法运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sysctl -w vm.max_map_count=262144</span><br><span class=\"line\">cat /proc/sys/vm/max_map_count</span><br></pre></td></tr></table></figure>\n\n<p>服务器运存小，因此设置虚拟机最大内存Xms为256m</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#拉取镜像</span></span><br><span class=\"line\">docker pull elasticsearch:7.14.1</span><br><span class=\"line\"><span class=\"comment\">#运行镜像</span></span><br><span class=\"line\">docker run --name elasticsearch -d -e ES_JAVA_OPTS=<span class=\"string\">&quot;-Xms256m -Xmx256m&quot;</span> -e <span class=\"string\">&quot;discovery.type=single-node&quot;</span> -p 9200:9200 -p 9300:9300 elasticsearch:7.14.1</span><br></pre></td></tr></table></figure>\n\n<p>访问9200端口，能够返回提示信息json即运行成功</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210928203305132.png\" alt=\"image-20210928203305132\"></p>\n<h2 id=\"安装ES-header\"><a href=\"#安装ES-header\" class=\"headerlink\" title=\"安装ES-header\"></a>安装ES-header</h2><p>elasticsearch-head是一个简单的的es可视化界面，可以用来查看数据，默认端口9100</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#拉取镜像</span></span><br><span class=\"line\">docker pull mobz/elasticsearch-head:5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#启动镜像</span></span><br><span class=\"line\">docker run --name elasticsearch-head -p 9100:9100 -d mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure>\n\n<p>这时访问9100端口就可以看到可视化界面了</p>\n<p>这时9100端口的ES-header是无法访问到9200端口的ES，存在跨域问题</p>\n<p>需要修改ES的配置文件，默认在<code>/config</code>下的elasticsearch.yml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi config/elasticsearch.yml</span><br></pre></td></tr></table></figure>\n\n<p>如果不能用vi，就在外部编写配置文件然后cp进容器</p>\n<p>在末尾添加配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">http.cors.enabled: <span class=\"literal\">true</span> </span><br><span class=\"line\">http.cors.allow-origin: <span class=\"string\">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>因为docker容器的ip是内部ip，因此我们需要手动连接，将上方连接栏的<code>http://localhost:9200/</code>改为我们自己的ip</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210928211015608.png\" alt=\"image-20210928211015608\"></p>\n<blockquote>\n<p> ES-header无法查询数据问题</p>\n</blockquote>\n<p>修改/usr/src/app/_site下的vendor.js文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker cp elasticsearch-head:/usr/src/app/_site/vendor.js vendor.js</span><br><span class=\"line\">vim vendor.js</span><br></pre></td></tr></table></figure>\n\n<p>vim快捷键<code>:行号</code>跳到指定行</p>\n<p>修改</p>\n<p>1、6886行<br><code>contentType: &quot;application/x-www-form-urlencoded&quot;</code><br>改成<br><code>contentType: “application/json;charset=UTF-8”</code></p>\n<p>2、7573行<br><code>var inspectData = s.contentType === “application/x-www-form-urlencoded” &amp;&amp;</code><br>改成<br><code>var inspectData = s.contentType === “application/json;charset=UTF-8” &amp;&amp;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker cp vendor.js elasticsearch-head:/usr/src/app/_site/vendor.js</span><br></pre></td></tr></table></figure>\n\n<p>无需重启，刷新页面就可以显示索引数据了</p>\n<h2 id=\"安装kibana\"><a href=\"#安装kibana\" class=\"headerlink\" title=\"安装kibana\"></a>安装kibana</h2><p>kibana是一个好用的es可视化界面，可以用来发送请求，默认端口5601</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#注意kibana版本需要与ES版本相对应</span></span><br><span class=\"line\">docker pull kibana:7.14.1</span><br><span class=\"line\"><span class=\"comment\"># 需要绑定ES的ip</span></span><br><span class=\"line\">docker run --name kibana -e ELASTICSEARCH_URL=http://47.113.225.244:9200 -p 5601:5601 -d kibana:7.14.1</span><br></pre></td></tr></table></figure>\n\n<p>这时访问5601端口，显示Kibana server is not ready yet，我们需要进一步的配置</p>\n<p>进入kibana容器修改文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it kibana bash</span><br><span class=\"line\">vi /opt/kibana/config/kibana.yml</span><br></pre></td></tr></table></figure>\n\n<p>将<code>elasticsearch.hosts</code>修改为自己ES的IP</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">elasticsearch.hosts: [ <span class=\"string\">&quot;http://47.113.225.244:9200&quot;</span> ]</span><br></pre></td></tr></table></figure>\n\n<p>再次访问，发现可以正常访问了</p>\n<p><strong>启用汉化</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it kibana bash</span><br><span class=\"line\">vi /usr/share/kibana/config/kibana.yml</span><br></pre></td></tr></table></figure>\n\n<p>在文件末尾追加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">i18n.locale: <span class=\"string\">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这时我们重启kibana就能看到中文界面了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210928221955266.png\" alt=\"image-20210928221955266\"></p>\n<h2 id=\"IK分词器\"><a href=\"#IK分词器\" class=\"headerlink\" title=\"IK分词器\"></a>IK分词器</h2><p>IK分词器可以帮助我们分解中文词句</p>\n<p>因为是需要在ES内部安装的插件，因此需要我们手动下载，github地址：</p>\n<p><a href=\"https://github.com/medcl/elasticsearch-analysis-ik/releases\">Releases · medcl/elasticsearch-analysis-ik (github.com)</a>，下载完成后传输到服务器</p>\n<p>==这里也需要注意版本对应，否则会报错==</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cp文件到ES容器内部</span></span><br><span class=\"line\">docker cp elasticsearch-analysis-ik-7.14.1.zip elasticsearch:/usr/share/elasticsearch/plugins</span><br><span class=\"line\"></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it elasticsearch bash</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir /usr/share/elasticsearch/plugins/ik</span><br><span class=\"line\"></span><br><span class=\"line\">mv /usr/share/elasticsearch/plugins/elasticsearch-analysis-ik-7.14.1.zip /usr/share/elasticsearch/plugins/ik</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/share/elasticsearch/plugins/ik/</span><br><span class=\"line\"></span><br><span class=\"line\">unzip elasticsearch-analysis-ik-7.14.1.zip</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf elasticsearch-analysis-ik-7.14.1.zip</span><br></pre></td></tr></table></figure>\n\n<p>然后重启ES容器</p>\n<p>可以在容器中使用命令来查看是否启用成功，路径<code>/usr/share/elasticsearch/bin</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210929134825982.png\" alt=\"image-20210929134825982\"></p>\n<p><strong>简单使用</strong></p>\n<ul>\n<li><p><code>ik_smart</code>：最粗粒度划分</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET _analyze</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;analyzer&quot;</span>: <span class=\"string\">&quot;ik_smart&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;text&quot;</span>: <span class=\"string\">&quot;中国共产党&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回结果只有<code>中国共产党</code></p>\n</li>\n<li><p><code>ik_max_word</code>：最细粒度划分</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET _analyze</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;analyzer&quot;</span>: <span class=\"string\">&quot;ik_max_word&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;text&quot;</span>: <span class=\"string\">&quot;中国共产党&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回结果有<code>中国共产党、中国、国共、共产党、共产、党</code></p>\n</li>\n</ul>\n<p>ik分词器是从它的字典中进行词句匹配的，如果想让分词结果中能够包含我们自己的词语就需要向字典中添加</p>\n<p>在容器内<code>/usr/share/elasticsearch/plugins/ik/config</code>路径下先编写自己的.dic文件，然后将其添加到配置文件IKAnalyzer.cfg.xml中</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210929140317605.png\" alt=\"image-20210929140317605\"></p>\n<h1 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h1><h2 id=\"索引操作\"><a href=\"#索引操作\" class=\"headerlink\" title=\"索引操作\"></a>索引操作</h2><p>基本方法表</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210929152227468.png\" alt=\"image-20210929152227468\"></p>\n<ul>\n<li><p>PUT创建索引</p>\n<p>注意以后类型名type会逐渐弃用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT /索引名/类型名/文档id</span><br></pre></td></tr></table></figure>\n\n<p>存入或覆盖数据(如果没有索引则会自动创建，并自动指定字段类型)</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT /test_index/test_id</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;lan5th&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;age&quot;</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建索引并定义规则</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">PUT /test01</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;mappings&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;properties&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;text&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">&quot;age&quot;</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;long&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">&quot;birthday&quot;</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;date&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>GET获取信息(索引、type或文档id)</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET test01</span><br></pre></td></tr></table></figure>\n\n<p>查看所有索引</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET _cat/indices?v</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210929150503941.png\" alt=\"image-20210929150503941\"></p>\n</li>\n<li><p>修改信息</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE /test01/1</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;age&quot;</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;birthday&quot;</span>: <span class=\"string\">&quot;2021-9-29&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用UPDATE或PUT方式实际上是覆盖原有数据，如果有字段漏填会造成数据丢失</p>\n<p>可以使用POST指定方法的方式进行更新，仅修改指定了的字段</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST /test01/1/_update</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;张三&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>无论使用怎样的方式，修改信息后默认version字段都会自增</p>\n</li>\n<li><p>DELETE删除信息(索引、type或文档id)</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE test01</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /test01/_search?q=name:lan5th</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210929193234642.png\" alt=\"image-20210929193234642\"></p>\n<p>查询结果中的score代表匹配度</p>\n<p>标准的查询</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /test01/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;match&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;lan5th&quot;</span> <span class=\"comment\">//匹配方式</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;_source&quot;</span>: [ <span class=\"comment\">//指定获取的结果字段</span></span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;birthday&quot;</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">&quot;sort&quot;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;age&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;order&quot;</span>: <span class=\"string\">&quot;desc&quot;</span> <span class=\"comment\">//按age降序排序，升序为asc</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">&quot;from&quot;</span>: <span class=\"number\">0</span>, <span class=\"comment\">//分页：从第几条开始</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;size&quot;</span>: <span class=\"number\">1</span> <span class=\"comment\">//分页：返回几条数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>bool查询</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /test01/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;bool&quot;</span>: &#123; <span class=\"comment\">//精确多条件查找</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;must&quot;</span>: [ <span class=\"comment\">//相当于交集集，并集为should，非为must_not</span></span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">          <span class=\"attr\">&quot;match&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;lan5th&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;match&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;age&quot;</span>: <span class=\"number\">3</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>过滤器</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /test01/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;bool&quot;</span>: &#123; </span><br><span class=\"line\">      <span class=\"attr\">&quot;must&quot;</span>: [</span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">          <span class=\"attr\">&quot;match&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;lan5th&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">&quot;filter&quot;</span>: &#123; <span class=\"comment\">//使用filter进行过滤</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;range&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;age&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;gt&quot;</span>: <span class=\"number\">13</span>, <span class=\"comment\">//这里过滤出age大于13，小于等于33的文档</span></span><br><span class=\"line\">            ”lte“: 33 //可以使用多个条件进行过滤</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多标签匹配</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /test01/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;match&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;tags&quot;</span>: <span class=\"string\">&quot;测试 吃瓜&quot;</span> <span class=\"comment\">//多关键词通过空格分隔</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>高亮查询：将查询结果高亮</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /test01/_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;match&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;lan5th&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;highlight&quot;</span>: &#123; <span class=\"comment\">//如果未配置自定义高亮，查询结果自动添加&lt;em&gt;标签，显示高亮</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;pre_tags&quot;</span>: <span class=\"string\">&quot;&lt;p class=&#x27;key&#x27; style=&#x27;color:red&#x27;&gt;&quot;</span>, <span class=\"comment\">//添加前缀</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;post_tags&quot;</span>: <span class=\"string\">&quot;&lt;/p&gt;&quot;</span>, <span class=\"comment\">//添加后缀，通过添加前后缀来自定义高亮</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;fields&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查询方法：</p>\n<ul>\n<li>match：查询条件通过分词器解析</li>\n<li>term：通过倒排索引查询，查询条件不被分词</li>\n</ul>\n<p>数据类型：</p>\n<ul>\n<li>text：查询结果可以被分词解析</li>\n<li>key-word：查询结果不能被分词解析</li>\n</ul>\n<h1 id=\"ES集成SpringBoot\"><a href=\"#ES集成SpringBoot\" class=\"headerlink\" title=\"ES集成SpringBoot\"></a>ES集成SpringBoot</h1><p>SpringBoot支持两种交互技术：</p>\n<ul>\n<li>Jest(默认不生效，需要导入工具包)</li>\n<li>SpringData Elasticsearch</li>\n</ul>\n<h2 id=\"依赖与配置\"><a href=\"#依赖与配置\" class=\"headerlink\" title=\"依赖与配置\"></a>依赖与配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--ES相关启动器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--转换json字符串依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.76<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一定要保证导入的依赖与ES版本一致，如果不一致需要自定义ES依赖版本</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">elasticsearch.version</span>&gt;</span>7.14.1<span class=\"tag\">&lt;/<span class=\"name\">elasticsearch.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>编写配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ElasticSearchConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RestHighLevelClient <span class=\"title\">restHighLevelClient</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        RestHighLevelClient client = <span class=\"keyword\">new</span> RestHighLevelClient(</span><br><span class=\"line\">                RestClient.builder(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> HttpHost(<span class=\"string\">&quot;47.113.225.244&quot;</span>, <span class=\"number\">9200</span>, <span class=\"string\">&quot;http&quot;</span>)</span><br><span class=\"line\">                )</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> client;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"索引api\"><a href=\"#索引api\" class=\"headerlink\" title=\"索引api\"></a>索引api</h2><p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ElasticsearchApplicationTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建索引</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testCreateIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建请求</span></span><br><span class=\"line\">        CreateIndexRequest request = <span class=\"keyword\">new</span> CreateIndexRequest(<span class=\"string\">&quot;index01&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//客户端发起索引请求</span></span><br><span class=\"line\">        CreateIndexResponse response = restHighLevelClient.indices().create(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(response.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查看索引是否存在</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testExistIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        GetIndexRequest request = <span class=\"keyword\">new</span> GetIndexRequest(<span class=\"string\">&quot;index01&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> exists = restHighLevelClient.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(exists);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除索引</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testDeleteIndex</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        DeleteIndexRequest request = <span class=\"keyword\">new</span> DeleteIndexRequest(<span class=\"string\">&quot;index01&quot;</span>);</span><br><span class=\"line\">        AcknowledgedResponse response = restHighLevelClient.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文档api\"><a href=\"#文档api\" class=\"headerlink\" title=\"文档api\"></a>文档api</h2><p>实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DocTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RestHighLevelClient restHighLevelClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加文档</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testAddDoc</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        IndexRequest request = <span class=\"keyword\">new</span> IndexRequest(<span class=\"string\">&quot;index01&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//链式编程，设置过期时间，向请求中添加对象并转为json格式</span></span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User(<span class=\"string\">&quot;lan5th&quot;</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"comment\">//也可以不设置id，这样ES服务器会为我们生成一个随机的ID，一般在大数据量时我们会选择自动生成</span></span><br><span class=\"line\">        request.id(<span class=\"string\">&quot;1&quot;</span>).timeout(TimeValue.timeValueSeconds(<span class=\"number\">1</span>)).timeout(<span class=\"string\">&quot;1s&quot;</span>)</span><br><span class=\"line\">                .source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class=\"line\">        IndexResponse response = restHighLevelClient.index(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(response.toString());</span><br><span class=\"line\">        System.out.println(response.status());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断文档是否存在</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testExistsDoc</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        GetRequest request = <span class=\"keyword\">new</span> GetRequest(<span class=\"string\">&quot;index01&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        request.fetchSourceContext(<span class=\"keyword\">new</span> FetchSourceContext(<span class=\"keyword\">false</span>))</span><br><span class=\"line\">                .storedFields(<span class=\"string\">&quot;_none_&quot;</span>); <span class=\"comment\">//不获取_source的上下文，加快解析速度</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> exists = restHighLevelClient.exists(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(exists);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取文档信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testGetDoc</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        GetRequest request = <span class=\"keyword\">new</span> GetRequest(<span class=\"string\">&quot;index01&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        GetResponse response = restHighLevelClient.get(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        String source = response.getSourceAsString();</span><br><span class=\"line\">        System.out.println(response);<span class=\"comment\">//输出详细信息</span></span><br><span class=\"line\">        System.out.println(source);<span class=\"comment\">//只输出文档内容</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//更新文档信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testUpdateDoc</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        UpdateRequest request = <span class=\"keyword\">new</span> UpdateRequest(<span class=\"string\">&quot;index01&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        request.timeout(<span class=\"string\">&quot;1s&quot;</span>);</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User(<span class=\"string\">&quot;lanstanger&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        request.doc(JSON.toJSONString(user),XContentType.JSON);</span><br><span class=\"line\">        UpdateResponse response = restHighLevelClient.update(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(response.status());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除文档</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testDeleteDoc</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        DeleteRequest request = <span class=\"keyword\">new</span> DeleteRequest(<span class=\"string\">&quot;index01&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">        request.timeout(<span class=\"string\">&quot;1s&quot;</span>);</span><br><span class=\"line\">        DeleteResponse response = restHighLevelClient.delete(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(response.status());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//批量操作，不仅仅是插入</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testBulkDoc</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        BulkRequest request = <span class=\"keyword\">new</span> BulkRequest();</span><br><span class=\"line\">        request.timeout(<span class=\"string\">&quot;1s&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayList&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        userList.add(<span class=\"keyword\">new</span> User(<span class=\"string\">&quot;user2&quot;</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">        userList.add(<span class=\"keyword\">new</span> User(<span class=\"string\">&quot;user3&quot;</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\">        userList.add(<span class=\"keyword\">new</span> User(<span class=\"string\">&quot;user4&quot;</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\">        userList.add(<span class=\"keyword\">new</span> User(<span class=\"string\">&quot;user5&quot;</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\">        userList.add(<span class=\"keyword\">new</span> User(<span class=\"string\">&quot;user6&quot;</span>, <span class=\"number\">6</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//在for循环中我们可以发送任何想要的请求</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里为插入请求</span></span><br><span class=\"line\">            request.add(<span class=\"keyword\">new</span> IndexRequest(<span class=\"string\">&quot;index01&quot;</span>).id(<span class=\"string\">&quot;&quot;</span>+(i+<span class=\"number\">2</span>))</span><br><span class=\"line\">                    .source(JSON.toJSONString(userList.get(i)),XContentType.JSON));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        BulkResponse response = restHighLevelClient.bulk(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(response.hasFailures());<span class=\"comment\">//是否失败</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//搜索</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testSearch</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        SearchRequest request = <span class=\"keyword\">new</span> SearchRequest(<span class=\"string\">&quot;index01&quot;</span>);</span><br><span class=\"line\">        SearchSourceBuilder sourceBuilder = <span class=\"keyword\">new</span> SearchSourceBuilder();</span><br><span class=\"line\">        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;lan5th&quot;</span>);</span><br><span class=\"line\">        sourceBuilder.query(termQueryBuilder);</span><br><span class=\"line\">        sourceBuilder.timeout(<span class=\"keyword\">new</span> TimeValue(<span class=\"number\">60</span>, TimeUnit.SECONDS));</span><br><span class=\"line\">        request.source(sourceBuilder);</span><br><span class=\"line\"></span><br><span class=\"line\">        SearchResponse response = restHighLevelClient.search(request, RequestOptions.DEFAULT);</span><br><span class=\"line\">        System.out.println(JSON.toJSONString(response.getHits()));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=================================&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (SearchHit documentFields : response.getHits().getHits()) &#123;</span><br><span class=\"line\">            System.out.println(documentFields.getSourceAsMap());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["工具组件"]},{"title":"RabbitMQ","url":"/2021/09/25/%E5%B7%A5%E5%85%B7%E7%BB%84%E4%BB%B6/RabbitMQ/","content":"<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"中间件技术\"><a href=\"#中间件技术\" class=\"headerlink\" title=\"中间件技术\"></a>中间件技术</h2><p><strong>一些常用的中间件技术</strong></p>\n<ul>\n<li>分布式消息中间件<ul>\n<li>ActiveMQ</li>\n<li>RabbitMQ</li>\n<li>Kafka</li>\n<li>RocketMQ</li>\n</ul>\n</li>\n<li>负载均衡中间件<ul>\n<li>Nginx</li>\n<li>LVS负载均衡</li>\n<li>KeepAlive</li>\n<li>CDN</li>\n</ul>\n</li>\n<li>缓存中间件<ul>\n<li>MemCache</li>\n<li>Redis</li>\n</ul>\n</li>\n<li>数据库中间件<ul>\n<li>Mycat</li>\n<li>ShardingJdbc</li>\n</ul>\n</li>\n</ul>\n<p><strong>MQ解决的问题</strong></p>\n<ul>\n<li>流量消峰</li>\n<li>应用解耦</li>\n<li>异步处理</li>\n</ul>\n<h2 id=\"MQ协议\"><a href=\"#MQ协议\" class=\"headerlink\" title=\"MQ协议\"></a>MQ协议</h2><ul>\n<li><p>AMQP协议</p>\n<p>特性：</p>\n<ul>\n<li>分布式事务</li>\n<li>消息持久化</li>\n<li>高性能和高可靠的消息处理</li>\n</ul>\n<p>支持RabbitMQ,ActiveMQ</p>\n</li>\n<li><p>MQTT协议</p>\n<p>特性：</p>\n<ul>\n<li><p>轻量级</p>\n</li>\n<li><p>结构简单</p>\n</li>\n<li><p>传输快</p>\n</li>\n<li><p>不支持持久化</p>\n</li>\n</ul>\n<p>支持RabbitMQ,ActiveMQ</p>\n</li>\n<li><p>OpenMessage协议</p>\n<p>特性： </p>\n<ul>\n<li>结构简单</li>\n<li>解析速度快</li>\n<li>支持事务和持久化</li>\n</ul>\n<p>支持RocketMQ</p>\n</li>\n<li><p>Kafka协议</p>\n<p>特性：</p>\n<ul>\n<li>结构简单</li>\n<li>解析速度快</li>\n<li>不支持事务</li>\n<li>可以持久化</li>\n</ul>\n<p>支持Kafka</p>\n</li>\n</ul>\n<h2 id=\"MQ相关概念\"><a href=\"#MQ相关概念\" class=\"headerlink\" title=\"MQ相关概念\"></a>MQ相关概念</h2><p><strong>MQ中的角色</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925131710544.png\" alt=\"image-20210925131710544\"></p>\n<p>生产者、交换机、队列、消费者</p>\n<p><strong>RabbitMQ工作原理</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925132032224.png\" alt=\"image-20210925132032224\"></p>\n<h1 id=\"开始RabbitMQ\"><a href=\"#开始RabbitMQ\" class=\"headerlink\" title=\"开始RabbitMQ\"></a>开始RabbitMQ</h1><h2 id=\"安装和配置\"><a href=\"#安装和配置\" class=\"headerlink\" title=\"安装和配置\"></a>安装和配置</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>官方下载文档<a href=\"https://www.rabbitmq.com/download.html\">Downloading and Installing RabbitMQ — RabbitMQ</a></p>\n<p>手动安装还需要Erlang语言环境的支持，安装较为繁琐，因此这里使用docker安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># for RabbitMQ 3.8,</span></span><br><span class=\"line\"><span class=\"comment\"># 3.8.x support timeline: https://www.rabbitmq.com/versions.html</span></span><br><span class=\"line\">docker run -it --name rabbitmq --restart=always -p 5672:5672 -p 15672:15672 rabbitmq:3.8-management</span><br></pre></td></tr></table></figure>\n\n<p>我们安装的RabbitMQ是带有RabbitManagement的，不需要额外开启功能，如果是手动安装的RabbitMQ需要先停止server再开启服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure>\n\n<p>进入15672端口，如果没有配置过，则默认用户名和密码都是<code>guest</code></p>\n<h3 id=\"RabbitMQ用户管理\"><a href=\"#RabbitMQ用户管理\" class=\"headerlink\" title=\"RabbitMQ用户管理\"></a>RabbitMQ用户管理</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rabbitmqctl list_users <span class=\"comment\">#查看所有用户</span></span><br><span class=\"line\">rabbitmqctl add_user 用户名 密码 <span class=\"comment\">#添加新用户</span></span><br><span class=\"line\"><span class=\"comment\">#授权格式：</span></span><br><span class=\"line\"><span class=\"comment\">#rabbitmqctl set_permissions [-p &lt;vhostpath&gt;] &lt;user&gt; &lt;conf&gt; &lt;write&gt; &lt;read&gt;</span></span><br><span class=\"line\">rabbitmqctl set_permisssions -p <span class=\"string\">&quot;/&quot;</span> 用户名 <span class=\"string\">&quot;.*&quot;</span> <span class=\"string\">&quot;.*&quot;</span> <span class=\"string\">&quot;.*&quot;</span> <span class=\"comment\">#给这个用户这个virtualhost中所有资源的配置和读写权限</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一些常用命令\"><a href=\"#一些常用命令\" class=\"headerlink\" title=\"一些常用命令\"></a>一些常用命令</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926181830650.png\" alt=\"image-20210926181830650\"></p>\n<h2 id=\"HelloRabbitMQ\"><a href=\"#HelloRabbitMQ\" class=\"headerlink\" title=\"HelloRabbitMQ\"></a>HelloRabbitMQ</h2><p>注意提前开放5672端口</p>\n<p>配置依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--RabbitMQ客户端--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.rabbitmq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>amqp-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.13.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--操作文件流--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--添加插件指定SDK版本--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>生产者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//队列名</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String QUEUE_NAME = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建连接工厂</span></span><br><span class=\"line\">        ConnectionFactory factory = <span class=\"keyword\">new</span> ConnectionFactory();</span><br><span class=\"line\">        <span class=\"comment\">//配置连接工厂</span></span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;x.x.x.x&quot;</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;guest&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建连接</span></span><br><span class=\"line\">        Connection connection = factory.newConnection();</span><br><span class=\"line\">        <span class=\"comment\">//获取信道</span></span><br><span class=\"line\">        Channel channel = connection.createChannel();</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 生成队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.队列名</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.消息是否持久化，默认保存在内存</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.是否允许多个消费者消费</span></span><br><span class=\"line\"><span class=\"comment\">         * 4.最后一个消费者断开连接后是否自动删除</span></span><br><span class=\"line\"><span class=\"comment\">         * 5.其他参数</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.queueDeclare(QUEUE_NAME,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">//发消息</span></span><br><span class=\"line\">        String message = <span class=\"string\">&quot;Hello,RabbitMQ!&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 发送消息</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.发送到哪个交换机</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.路由的key是什么(这里使用队列名)</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.其他参数信息</span></span><br><span class=\"line\"><span class=\"comment\">         * 4.发送消息我的消息体</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        channel.basicPublish(<span class=\"string\">&quot;&quot;</span>,QUEUE_NAME,<span class=\"keyword\">null</span>,message.getBytes());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;==============&gt;发送完成&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//释放资源</span></span><br><span class=\"line\">        channel.close();</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>消费者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String QUEUE_NAME = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建连接工厂</span></span><br><span class=\"line\">        ConnectionFactory factory = <span class=\"keyword\">new</span> ConnectionFactory();</span><br><span class=\"line\">        <span class=\"comment\">//配置连接工厂</span></span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;x.x.x.x&quot;</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;guest&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建连接</span></span><br><span class=\"line\">        Connection connection = factory.newConnection();</span><br><span class=\"line\">        <span class=\"comment\">//获取信道</span></span><br><span class=\"line\">        Channel channel = connection.createChannel();</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 消费信息</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.消费哪个队列</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.消费成功后是否自动应答</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.消费成功消费的回调</span></span><br><span class=\"line\"><span class=\"comment\">         * 4.消费者取消消费的回调</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        DeliverCallback deliverCallback = (consumeTag, message) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"keyword\">new</span> String(message.getBody()));</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        CancelCallback cancelCallback = consumeTag -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;消费被中断&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        channel.basicConsume(QUEUE_NAME,<span class=\"keyword\">true</span>,deliverCallback,cancelCallback);</span><br><span class=\"line\">        <span class=\"comment\">//消费者不要释放资源</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上消费者的两个失败的回调函数在正常执行过程中并不会触发，而是在不断监听，一旦有新的消息来到就会立即接收</p>\n<h1 id=\"工作模式\"><a href=\"#工作模式\" class=\"headerlink\" title=\"工作模式\"></a>工作模式</h1><h2 id=\"简单模式\"><a href=\"#简单模式\" class=\"headerlink\" title=\"简单模式\"></a>简单模式</h2><p>我们上面做的例子就是简单模式的一个实现，并且是RabbitMQ的默认工作模式</p>\n<p>提取工具类<code>RabbitMqUtil.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitMqUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection connection = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Channel channel =<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Channel <span class=\"title\">getChannel</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ConnectionFactory factory = <span class=\"keyword\">new</span> ConnectionFactory();</span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;47.113.225.244&quot;</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;guest&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;Zyh20010605&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();</span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> channel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            channel.close();</span><br><span class=\"line\">            connection.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>交换机的类型</strong></p>\n<ul>\n<li>Fanout：广播</li>\n<li>Direct：定向</li>\n<li>Topics：通配符</li>\n</ul>\n<h2 id=\"WokerQueues\"><a href=\"#WokerQueues\" class=\"headerlink\" title=\"WokerQueues\"></a>WokerQueues</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925155336736.png\" alt=\"image-20210925155336736\"></p>\n<p>工作队列模式：采用轮训的方式，只有一个消费者能够取得队列中的消息，消费者轮流取得消息信道中的信息</p>\n<h2 id=\"Pub-Sub\"><a href=\"#Pub-Sub\" class=\"headerlink\" title=\"Pub/Sub\"></a>Pub/Sub</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925155400376.png\" alt=\"image-20210925155400376\"></p>\n<p>订阅模式：</p>\n<p>X：交换机</p>\n<p>生产者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exchange</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    Channel channel = RabbitMqUtil.getChannel();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建交换机</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.交换机名称</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.交换机类型，通过BuiltinExchangeType对象枚举</span></span><br><span class=\"line\"><span class=\"comment\">     *      DIRECT：定向</span></span><br><span class=\"line\"><span class=\"comment\">     *      FANOUT：扇形（广播）</span></span><br><span class=\"line\"><span class=\"comment\">     *      TOPIC：通配符</span></span><br><span class=\"line\"><span class=\"comment\">     *      HEADERS：参数匹配</span></span><br><span class=\"line\"><span class=\"comment\">     * 3.是否持久化</span></span><br><span class=\"line\"><span class=\"comment\">     * 4.是否自动删除</span></span><br><span class=\"line\"><span class=\"comment\">     * 5.仅内部使用</span></span><br><span class=\"line\"><span class=\"comment\">     * 6.其他参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    String exchangeName = <span class=\"string\">&quot;test_fanout&quot;</span>;</span><br><span class=\"line\">    channel.exchangeDeclare(exchangeName, BuiltinExchangeType.FANOUT,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">//创建队列</span></span><br><span class=\"line\">    String queue1Name = <span class=\"string\">&quot;que1&quot;</span>;</span><br><span class=\"line\">    String queue2Name = <span class=\"string\">&quot;que2&quot;</span>;</span><br><span class=\"line\">    channel.queueDeclare(<span class=\"string\">&quot;que1&quot;</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    channel.queueDeclare(<span class=\"string\">&quot;que2&quot;</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 绑定队列和交换机</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.队列名称</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.交换机名称</span></span><br><span class=\"line\"><span class=\"comment\">     * 3.路由key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    channel.queueBind(queue1Name,exchangeName,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    channel.queueBind(queue2Name,exchangeName,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//发布消息</span></span><br><span class=\"line\">    String message = <span class=\"string\">&quot;exchange方法发布的消息&quot;</span>;</span><br><span class=\"line\">    channel.basicPublish(exchangeName,<span class=\"string\">&quot;&quot;</span>, <span class=\"keyword\">null</span>, message.getBytes());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;============&gt;发送完成&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//关闭连接</span></span><br><span class=\"line\">    RabbitMqUtil.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>消费者代码与之前类似</p>\n<h2 id=\"Routing\"><a href=\"#Routing\" class=\"headerlink\" title=\"Routing\"></a>Routing</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925161959160.png\" alt=\"image-20210925161959160\"></p>\n<p>路由模式：生产者携带的RountingKey与指定类型匹配时才会发送到相应信道</p>\n<p>这里仅给出特有的代码实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建交换机更改枚举类型</span></span><br><span class=\"line\">channel.exchangeDeclare(exchangeName, BuiltinExchangeType.DIRECT,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绑定队列1与key：error</span></span><br><span class=\"line\">channel.queueBind(queue1Name,exchangeName,<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//绑定队列2与key：info、error、warning</span></span><br><span class=\"line\">channel.queueBind(queue2Name,exchangeName,<span class=\"string\">&quot;info&quot;</span>);</span><br><span class=\"line\">channel.queueBind(queue2Name,exchangeName,<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">channel.queueBind(queue2Name,exchangeName,<span class=\"string\">&quot;warning&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//发布消息指定routingKey，这里是error，两个信道都能收到消息</span></span><br><span class=\"line\">channel.basicPublish(exchangeName,<span class=\"string\">&quot;error&quot;</span>, <span class=\"keyword\">null</span>, message.getBytes());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Topics\"><a href=\"#Topics\" class=\"headerlink\" title=\"Topics\"></a>Topics</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925163321559.png\" alt=\"image-20210925163321559\"></p>\n<p>通配符模式：将routingkey指定为通配符，不需要完全匹配</p>\n<p>这里仅给出特有的代码实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建交换机更改枚举类型</span></span><br><span class=\"line\">channel.exchangeDeclare(exchangeName, BuiltinExchangeType.TOPIC,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>路由键和绑定键的字符串会切分成单侧，单词之间用<code>.</code>分开</li>\n<li><code>#</code>表示匹配0个或多个单词</li>\n<li><code>*</code>表示匹配一个单词</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绑定队列1与key：&#x27;*.error&#x27;</span></span><br><span class=\"line\">channel.queueBind(queue1Name,exchangeName,<span class=\"string\">&quot;#.error&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//绑定队列2与key：&#x27;user.*&#x27;、&#x27;*.*&#x27;</span></span><br><span class=\"line\">channel.queueBind(queue2Name,exchangeName,<span class=\"string\">&quot;user.*&quot;</span>);</span><br><span class=\"line\">channel.queueBind(queue2Name,exchangeName,<span class=\"string\">&quot;*.*&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//发布消息指定routingKey，这里是&#x27;user.error&#x27;，两个信道都能收到消息</span></span><br><span class=\"line\">channel.basicPublish(exchangeName,<span class=\"string\">&quot;user.error&quot;</span>, <span class=\"keyword\">null</span>, message.getBytes());</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"整合SpringBoot\"><a href=\"#整合SpringBoot\" class=\"headerlink\" title=\"整合SpringBoot\"></a>整合SpringBoot</h1><h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><p>包依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入amqp协议，即RabbitMQ的依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">x.x.x.x</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RabbitTemplate\"><a href=\"#RabbitTemplate\" class=\"headerlink\" title=\"RabbitTemplate\"></a>RabbitTemplate</h2><p>使用RabbitTemplate发送和接收消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Springboot02ApplicationTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//方式一：rabbitTemplate.send(交换机,key,message)</span></span><br><span class=\"line\">        <span class=\"comment\">//这种方式需要我们自定义消息体内容和消息头</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//方式二：rabbitTemplate.convertAndSend(交换机,key,object)</span></span><br><span class=\"line\">        <span class=\"comment\">//只要传入需要发送的对象，就会被自动序列化并发送给RabbitMQ服务器</span></span><br><span class=\"line\">        HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;this is a msg from client&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;list&quot;</span>, Arrays.asList(<span class=\"keyword\">true</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;object3&quot;</span>));</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(<span class=\"string\">&quot;springboot.mq&quot;</span>,<span class=\"string\">&quot;user.warning&quot;</span>,map);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=========&gt;消息发送完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从que1接收消息，对应key：user.*</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getTest1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//接收消息并自动反序列化</span></span><br><span class=\"line\">        Object que1 = rabbitTemplate.receiveAndConvert(<span class=\"string\">&quot;que1&quot;</span>);</span><br><span class=\"line\">        System.out.println(que1.getClass());</span><br><span class=\"line\">        System.out.println(que1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从que2接收消息，对应key：*.info</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getTest2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Object que2 = rabbitTemplate.receiveAndConvert(<span class=\"string\">&quot;que2&quot;</span>);</span><br><span class=\"line\">        System.out.println(que2.getClass());</span><br><span class=\"line\">        System.out.println(que2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于默认使用的是jdk序列化，如果我们需要可以注入我们自己的MessageConverter，使其转换为json序列化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MQConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Jackson2JsonMessageConverter <span class=\"title\">messageConverter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Jackson2JsonMessageConverter();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：在使用Json序列化之后我们如果需要手动在网页端发送消息也需要使用Json的序列化格式发送</strong></p>\n<h2 id=\"注解开发RabbitMQ\"><a href=\"#注解开发RabbitMQ\" class=\"headerlink\" title=\"注解开发RabbitMQ\"></a>注解开发RabbitMQ</h2><p>主类上添加<code>@EnableRabbit</code>以开启注解功能</p>\n<p>使用注解监听队列</p>\n<p><code>RabbitListener</code></p>\n<ul>\n<li><p>方法上使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//转换器会将消息内容自动转换为实体类</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &quot;que1&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listenQue1</span><span class=\"params\">(User user)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(user.getClass());</span><br><span class=\"line\">        System.out.println(user.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用Message接收消息能够拿到消息的完整信息</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &quot;que2&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listenQue2</span><span class=\"params\">(Message message)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(message.getClass());</span><br><span class=\"line\">        System.out.println(message.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925195337485.png\" alt=\"image-20210925195337485\"></p>\n</li>\n<li><p>类上使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过queuesToDeclare来声明队列</span></span><br><span class=\"line\"><span class=\"comment\"> * ,<span class=\"doctag\">@Queue</span>注解创建临时队列</span></span><br><span class=\"line\"><span class=\"comment\"> * 还可以进行一些que的详细配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@RabbitListener(queuesToDeclare = @Queue(&quot;hello&quot;))</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">customer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//标注这个方法是收到消息后的回调方法</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">receive</span><span class=\"params\">(String message)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"AmqpAdmin\"><a href=\"#AmqpAdmin\" class=\"headerlink\" title=\"AmqpAdmin\"></a>AmqpAdmin</h2><p>通过AmqpAdmin就可以进行消息队列的一系列操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Springboot02ApplicationTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    AmqpAdmin amqpAdmin;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建交换器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">createExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        amqpAdmin.declareExchange(<span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">&quot;amqpadmin.exchange&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建队列</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">createQue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        amqpAdmin.declareQueue(<span class=\"keyword\">new</span> Queue(<span class=\"string\">&quot;amqpadmin.que&quot;</span>,<span class=\"keyword\">true</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建绑定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">createBinding</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        amqpAdmin.declareBinding(<span class=\"keyword\">new</span> Binding(<span class=\"string\">&quot;amqpadmin.que&quot;</span>, Binding.DestinationType.QUEUE, <span class=\"string\">&quot;amqpadmin.exchange&quot;</span>,<span class=\"string\">&quot;amqp.info&quot;</span>,<span class=\"keyword\">null</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用临时队列\"><a href=\"#使用临时队列\" class=\"headerlink\" title=\"使用临时队列\"></a>使用临时队列</h2><p><strong>下面两段代码并没有直接关联，只是展示了生产者和消费者不同的实现方式</strong></p>\n<ul>\n<li><p>生产者实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 向容器中注入交换机、队列、Binding组件就会自动临时创建</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">priQueue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String EXCHANGE = <span class=\"string\">&quot;springboot.mq&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String QUEUE = <span class=\"string\">&quot;que1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ROUTING_KEY = <span class=\"string\">&quot;user.info&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//注入交换机</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\">DirectExchange <span class=\"title\">exchange1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(EXCHANGE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//注入队列</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\">Queue <span class=\"title\">queue1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt;map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;x-max-priority&quot;</span>,<span class=\"number\">10</span>);<span class=\"comment\">//设置最大的优先级数量</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(QUEUE,<span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>,<span class=\"keyword\">false</span>,map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//注入Binding</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">binding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(queue1()).to(exchange1()).with(ROUTING_KEY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>消费者实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过queuesToDeclare来声明队列</span></span><br><span class=\"line\"><span class=\"comment\"> * ,<span class=\"doctag\">@Queue</span>注解中还可以进行一些详细配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">customer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//标注这个方法是收到消息后的回调方法</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">            @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">                    value = @Queue, //创建临时队列</span></span><br><span class=\"line\"><span class=\"meta\">                    exchange = @Exchange(value = &quot;springboot.mq&quot;, type = &quot;direct&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">                    key = &quot;user.info&quot;</span></span><br><span class=\"line\"><span class=\"meta\">            )</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">receive</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"高级特性\"><a href=\"#高级特性\" class=\"headerlink\" title=\"高级特性\"></a>高级特性</h1><p>以下的代码都基于SpringBoot实现</p>\n<h2 id=\"消息可靠投递\"><a href=\"#消息可靠投递\" class=\"headerlink\" title=\"消息可靠投递\"></a>消息可靠投递</h2><ul>\n<li>confirm确认模式</li>\n<li>return退回模式</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925202405082.png\" alt=\"image-20210925202405082\"></p>\n<h3 id=\"confirm模式\"><a href=\"#confirm模式\" class=\"headerlink\" title=\"confirm模式\"></a>confirm模式</h3><p>修改配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.rabbitmq.publisher-confirm-type</span>: <span class=\"string\">correlated</span></span><br></pre></td></tr></table></figure>\n\n<p>测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testConfirm</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置ConfirmCallBack</span></span><br><span class=\"line\">    rabbitTemplate.setConfirmCallback(<span class=\"keyword\">new</span> RabbitTemplate.ConfirmCallback()&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * confirm回调函数</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> correlationData 相关配置信息</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> ack exchange交换机是否成功接收到了消息</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> cause 失败原因</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">confirm</span><span class=\"params\">(CorrelationData correlationData, <span class=\"keyword\">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;confirm方法被执行了&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ack)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;发送成功！&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;发送失败，失败原因：&quot;</span> + cause);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//发送到不存在的交换机</span></span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;inexist.exchange&quot;</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;test information&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"return模式\"><a href=\"#return模式\" class=\"headerlink\" title=\"return模式\"></a>return模式</h3><p>如果消息没有路由到Queue的处理方式：</p>\n<ul>\n<li>丢弃消息（默认）</li>\n<li>返回给发送方ReturnCallBack</li>\n</ul>\n<p>修改配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.rabbitmq.publisher-returns</span>: <span class=\"string\">true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testReturn</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置交换机处理失败消息的模式</span></span><br><span class=\"line\">    rabbitTemplate.setMandatory(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置ReturnCallBack</span></span><br><span class=\"line\">    rabbitTemplate.setReturnsCallback(<span class=\"keyword\">new</span> RabbitTemplate.ReturnsCallback() &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * return回调函数</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> returned 这个参数已经封装了返回消息的所有信息，通过get方法获取</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">returnedMessage</span><span class=\"params\">(ReturnedMessage returned)</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;执行了return方法&quot;</span>);</span><br><span class=\"line\">            System.out.println(returned.getMessage());</span><br><span class=\"line\">            System.out.println(returned.getReplyCode());</span><br><span class=\"line\">            System.out.println(returned.getReplyText());</span><br><span class=\"line\">            System.out.println(returned.getExchange());</span><br><span class=\"line\">            System.out.println(returned.getRoutingKey());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//发送key不匹配任何队列</span></span><br><span class=\"line\">    rabbitTemplate.convertAndSend(<span class=\"string\">&quot;springboot.mq&quot;</span>,<span class=\"string\">&quot;null.null&quot;</span>,<span class=\"string\">&quot;test information&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Consumer-Ack\"><a href=\"#Consumer-Ack\" class=\"headerlink\" title=\"Consumer Ack\"></a>Consumer Ack</h2><p>消费端收到消息之后的确认方式</p>\n<p>三种确认方式：</p>\n<ul>\n<li>自动确认：acknowledge=”none”</li>\n<li>手动确认：acknowledge=”manual”</li>\n<li>根据异常类型确认：acknowledge=”auto”</li>\n</ul>\n<p><strong>注意只有simple和direct模式可以设置手动确认，需要指定相应的交换器为simple或direct类型</strong></p>\n<p>修改配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">listener:</span></span><br><span class=\"line\">      <span class=\"attr\">simple:</span></span><br><span class=\"line\">        <span class=\"attr\">acknowledge-mode:</span> <span class=\"string\">manual</span> <span class=\"comment\">#这里实际起作用的是simple的配置</span></span><br><span class=\"line\">      <span class=\"attr\">direct:</span></span><br><span class=\"line\">        <span class=\"attr\">acknowledge-mode:</span> <span class=\"string\">manual</span></span><br></pre></td></tr></table></figure>\n\n<p>向容器中注入ChannelAwareMessageListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MessageListener <span class=\"title\">ackListener</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ChannelAwareMessageListener() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定监听队列</span></span><br><span class=\"line\">        <span class=\"meta\">@RabbitListener(queues = &quot;que1&quot;)</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(Message message, Channel channel)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> tag = message.getMessageProperties().getDeliveryTag();</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"keyword\">new</span> String(message.getBody()));</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;que1==========&gt;处理业务逻辑&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//第二个参数为是否支持多消息同时接收</span></span><br><span class=\"line\">                channel.basicAck(tag, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;发生异常，拒绝接收&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//第二个参数同上，第三个参数为是否返回Queue重新发送</span></span><br><span class=\"line\">                channel.basicNack(tag,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消费端限流\"><a href=\"#消费端限流\" class=\"headerlink\" title=\"消费端限流\"></a>消费端限流</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">listener:</span></span><br><span class=\"line\">      <span class=\"attr\">simple:</span></span><br><span class=\"line\">        <span class=\"attr\">prefetch:</span> <span class=\"number\">1</span> <span class=\"comment\">#设置同时接收的最大消息条数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TTL\"><a href=\"#TTL\" class=\"headerlink\" title=\"TTL\"></a>TTL</h2><p>存活时间：指定时间后未被消费的消息会被自动清除</p>\n<p>可以对单个消息进行设置，也可以对整个队列进行设置</p>\n<ul>\n<li><p>队列设置</p>\n<p>创建队列时添加参数，时间单位为毫秒</p>\n<ul>\n<li><p>网页实现</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926144508826.png\" alt=\"image-20210926144508826\"></p>\n</li>\n<li><p>代码实现</p>\n<ul>\n<li><p>自定义Que</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">//通过map设置参数，参数名必须为指定的参数名，可以在网页端查看</span></span><br><span class=\"line\">map.put(<span class=\"string\">&quot;x-message-ttl&quot;</span>,<span class=\"number\">10000</span>);</span><br><span class=\"line\">amqpAdmin.declareQueue(<span class=\"keyword\">new</span> Queue(<span class=\"string\">&quot;custom.que&quot;</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, map));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用QueBuilder</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Queue queue = QueueBuilder.nonDurable(<span class=\"string\">&quot;my.que&quot;</span>).ttl(<span class=\"number\">10000</span>).build();</span><br><span class=\"line\">amqpAdmin.declareQueue(queue);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>单消息设置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">rabbitTemplate.convertAndSend(<span class=\"string\">&quot;springboot.mq&quot;</span>, <span class=\"string\">&quot;user.info&quot;</span>, <span class=\"string\">&quot;test message&quot;</span>, message -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置TTL</span></span><br><span class=\"line\">    message.getMessageProperties().setExpiration(<span class=\"string\">&quot;10000&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>如果设置了队列过期时间的同时设置了单个消息的过期时间</strong></p>\n<ul>\n<li>队列过期时，会将队列所有消息全部移除</li>\n<li>消息一入队列就会判断这个消息的过期条件，但只有当这个消息在消息队列的顶部时才会决定是否移除</li>\n</ul>\n<h2 id=\"死信队列DLX\"><a href=\"#死信队列DLX\" class=\"headerlink\" title=\"死信队列DLX\"></a>死信队列DLX</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926153958945.png\" alt=\"image-20210926153958945\"></p>\n<p>Dead Letter Exchange：当消息成为Dead message之后，可以被重新发送到另一个交换机，这个交换机就是DLX</p>\n<p>DLX实际上与一般的交换机没有什么区别，只是因为我们使用的功能不同，将其划分为DLX</p>\n<p>消息成为死信的三种情况：</p>\n<ul>\n<li>队列消息长度达到上限</li>\n<li>消费者拒接消费消息：basicNack/basicReject，并且不把消息重新放回原消息队列：requeue=false</li>\n<li>原消息队列存在消过期设置，消息超时未被消费</li>\n</ul>\n<p><strong>具体实现</strong></p>\n<ul>\n<li><p>normal.exchange绑定normal.que</p>\n</li>\n<li><p>normal.que需要配置四个参数：<code>x-message-ttl, x-max-length, x-dead-letter-exchange, x-dead-letter-routing-key</code></p>\n<p>对应最大ttl，队列最大长度，DLX交换机，DLX交换key</p>\n</li>\n<li><p>dead.exchange绑定dead.que</p>\n</li>\n</ul>\n<p><strong>备份交换机</strong></p>\n<p>原理与死信队列类似，目的是防止主交换机在使用过程中宕机</p>\n<p>使用方法，创建交换机时添加参数<code>alternate-exchange</code></p>\n<h2 id=\"延迟队列\"><a href=\"#延迟队列\" class=\"headerlink\" title=\"延迟队列\"></a>延迟队列</h2><p>消息进入队列后不会立即被消费，而是到达指定时间后才会被消费</p>\n<p>RabbitMQ并没有提供延迟队列的功能，不过我们可以使用TTL+DLX的组合实现延迟队列我的效果，如下图为检查用户是否支付的流程图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926164313081.png\" alt=\"image-20210926164313081\"></p>\n<p>这里就因为与上面死信队列的例子类似，具体实现省略</p>\n<h2 id=\"幂等性问题\"><a href=\"#幂等性问题\" class=\"headerlink\" title=\"幂等性问题\"></a>幂等性问题</h2><p>如果用户在支付业务中由于网络延迟在同一业务中发送了多条支付信息，如何保证最终仅执行一次业务？</p>\n<p>一般使用全局ID，每次消费消息时判断是否已经消费过</p>\n<ul>\n<li><p>唯一ID+指纹码</p>\n<p>利用一些手段生成唯一信息码，判断id是否存在数据库中，但在高并发场景可能会有性能问题</p>\n</li>\n<li><p>Redis原子性（推荐）</p>\n<p>利用Redis执行setnx操作，天然具有幂等性，实现不重复消费</p>\n</li>\n</ul>\n<h2 id=\"优先级队列\"><a href=\"#优先级队列\" class=\"headerlink\" title=\"优先级队列\"></a>优先级队列</h2><p>优先级队列0~255，优先级越大越优先执行</p>\n<ul>\n<li><p>添加/声明队列时添加参数<code>x-max-priority</code>：表示允许设置的最大优先级</p>\n</li>\n<li><p>发送方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">rabbitTemplate.convertAndSend(<span class=\"string\">&quot;springboot.mq&quot;</span>, <span class=\"string\">&quot;user.info&quot;</span>, <span class=\"string\">&quot;test message&quot;</span>, message -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置优先级</span></span><br><span class=\"line\">    message.getMessageProperties().setPriority(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"惰性队列\"><a href=\"#惰性队列\" class=\"headerlink\" title=\"惰性队列\"></a>惰性队列</h2><p>消息保存在内存中还是磁盘中？</p>\n<p>惰性队列的消息是保存在磁盘中的</p>\n<p>使用场景：消费者下线，宕机等原因长时间不能消费造成堆积时</p>\n<p>在发送100W消息，每条消息大概占1KB时，不同队列占用内存1.2GB，惰性队列仅占用内存够1.5MB，性能提升很高</p>\n<ul>\n<li>正常情况：消息保存在内存中</li>\n<li>惰性队列：消息保存在外存中</li>\n</ul>\n<p>创建队列时携带参数<code>x-queue-mode = lazy</code>即可开启</p>\n<h1 id=\"系统操作\"><a href=\"#系统操作\" class=\"headerlink\" title=\"系统操作\"></a>系统操作</h1><h2 id=\"日志与监控\"><a href=\"#日志与监控\" class=\"headerlink\" title=\"日志与监控\"></a>日志与监控</h2><h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><p>默认存放位置<code>/var/log/rabbitmq/rabbit@主机名.log</code></p>\n<p>使用docker在容器内路径<code>/var/log/rabbitmq/log</code></p>\n<h3 id=\"消息追踪\"><a href=\"#消息追踪\" class=\"headerlink\" title=\"消息追踪\"></a>消息追踪</h3><p>消息追踪会降低性能，一般只在生产和测试环境开启</p>\n<p>打开trace相关配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rabbitmqctl trace_on</span><br><span class=\"line\">rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_tracing</span><br></pre></td></tr></table></figure>\n\n<p>这时在网页控制台的Admin界面的右侧出现新的选项：Tracing</p>\n<p>在这里我们可以添加自己的消息追踪文件</p>\n<p><strong>需要注意的是，只有用户名和密码都为guest用户才能添加trace，否则会报错，具体原因未知</strong></p>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><p>rabbitmq默认内存为总内存的40%</p>\n<p><strong>修改可用内存大小</strong></p>\n<p>当发现内存爆满，连接全部挂起的情景时，选择其中一种方式即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rabbitmqctl set_vm_memory_high_watermark 百分比 <span class=\"comment\">#设置百分比，一般取值为0.4~0.7</span></span><br><span class=\"line\">rabbitmqctl set_vm_memory_high_watermark absolute 100MB <span class=\"comment\">#设置绝对大小</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>修改预警外存大小</strong></p>\n<p>当可用的外存大小小于指定值时开始预警</p>\n<h1 id=\"集群搭建\"><a href=\"#集群搭建\" class=\"headerlink\" title=\"集群搭建\"></a>集群搭建</h1><h2 id=\"集群模式\"><a href=\"#集群模式\" class=\"headerlink\" title=\"集群模式\"></a>集群模式</h2><ul>\n<li><p><strong>主备模式</strong></p>\n<p>正常情况下备用节点不提供服务</p>\n<p>也就是一个主/备方案，主节点提供读写，备用节点不提供读写。如果主节点挂了，就切换到备用节点，原来的备用节点升级为主节点提供读写服务，当原来的主节点恢复运行后，原来的主节点就变成备用节点，和 activeMQ 利用 zookeeper 做主/备一样，也可以一主多备。</p>\n</li>\n<li><p><strong>远程模式</strong></p>\n<p>早期模式，目前使用较少</p>\n<p>主机作负载均衡，超过阈值的数据交由副机处理</p>\n</li>\n<li><p><strong>镜像模式</strong></p>\n<p>节点之间的数据可以进行同步</p>\n</li>\n<li><p><strong>多活模式</strong></p>\n<p>多个负载均衡的数据节点集群</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/9167995-4e9be592613ebdbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/838/format/webp\"></p>\n</li>\n</ul>\n<h2 id=\"搭建集群\"><a href=\"#搭建集群\" class=\"headerlink\" title=\"搭建集群\"></a>搭建集群</h2><p>注意点（无论是不是使用docker）：</p>\n<ul>\n<li>主机名的设置</li>\n<li>使用相同的Cookie文件</li>\n</ul>\n<p>创建三个RabbitMq容器</p>\n<p>官方推荐使用<code>--erlang-cookie</code>来代替<code>RABBITMQ_ERLANG_COOKIE</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --hostname rabbitmq --name rabbitmq -p 15672:15672 -p 5672:5672 -e RABBITMQ_ERLANG_COOKIE=<span class=\"string\">&#x27;rabbitcookie&#x27;</span> rabbitmq:3.8-management</span><br><span class=\"line\">docker run -d --hostname rabbitmq-s1 --name rabbitmq-s1 -p 5673:5673 --link rabbitmq:rabbitmq -e RABBITMQ_ERLANG_COOKIE=<span class=\"string\">&#x27;rabbitcookie&#x27;</span> rabbitmq:3.8-management</span><br><span class=\"line\">docker run -d --hostname rabbitmq-s2 --name rabbitmq-s2 -p 5674:5674 --link rabbitmq:rabbitmq --link rabbitmq-s1:rabbitmq-s1 -e RABBITMQ_ERLANG_COOKIE=<span class=\"string\">&#x27;rabbitcookie&#x27;</span> rabbitmq:3.8-management</span><br></pre></td></tr></table></figure>\n\n<p>配置三个容器</p>\n<ul>\n<li><p>rabbitmq</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it rabbitmq bash</span><br><span class=\"line\">rabbitmqctl stop_app</span><br><span class=\"line\">rabbitmqctl reset</span><br><span class=\"line\">rabbitmqctl start_app</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>rabbitmq-s1</p>\n<p>–ram表示设置为内存节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it rabbitmq-s1 bash</span><br><span class=\"line\">rabbitmqctl stop_app</span><br><span class=\"line\">rabbitmqctl reset</span><br><span class=\"line\">rabbitmqctl join_cluster --ram rabbit@rabbitmq</span><br><span class=\"line\">rabbitmqctl start_app</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>rabbitmq-s2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it rabbitmq-s2 bash</span><br><span class=\"line\">rabbitmqctl stop_app</span><br><span class=\"line\">rabbitmqctl reset</span><br><span class=\"line\">rabbitmqctl join_cluster --ram rabbit@rabbitmq</span><br><span class=\"line\">rabbitmqctl start_app</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>如果内存不足可以使用命令来设置最大内存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rabbitmqctl set_vm_memory_high_watermark absolute 400MB</span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926223249017.png\" alt=\"image-20210926223249017\"></p>\n<p>解除集群的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it rabbitmq-s1 bash</span><br><span class=\"line\">rabbitmqctl stop_app</span><br><span class=\"line\">rabbitmqctl reset</span><br><span class=\"line\">rabbitmqctl start_app</span><br><span class=\"line\">rabbitmqctl cluster_status</span><br><span class=\"line\">rabbitmqctl forget_cluster_node rabbit@rabbitmq</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置镜像集群\"><a href=\"#配置镜像集群\" class=\"headerlink\" title=\"配置镜像集群\"></a>配置镜像集群</h2><p>现在我们搭建的集群是主备模式，不具备同步队列的功能的，如果主节点宕机，其中的消息会全部丢失</p>\n<p>开启方法：</p>\n<p>在网页管理面板点击上方Admin，再选择右边Polices，添加策略，这里给出一个示例</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926225341867.png\" alt=\"image-20210926225341867\"></p>\n<p>这些配置表示：匹配前缀为mirror的所有交换机和队列，将他们备份2份(主机+从机一共2份)，使用自动选择模式，即系统为我们选择在哪一台从机上备份</p>\n<p>查看效果：</p>\n<p>手动创建一个新的队列，已经备份成功的队列会有显示</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926225600267.png\" alt=\"image-20210926225600267\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926225655853.png\" alt=\"image-20210926225655853\"></p>\n<h2 id=\"联邦模式\"><a href=\"#联邦模式\" class=\"headerlink\" title=\"联邦模式\"></a>联邦模式</h2><h3 id=\"联邦交换机\"><a href=\"#联邦交换机\" class=\"headerlink\" title=\"联邦交换机\"></a>联邦交换机</h3><p>两个不同地区的服务器A，B：A地的用户想要查看B服务器中的数据，B地的用户想要查看A服务器中的数据</p>\n<p>开启方式：在每台机器上进行配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_federation</span><br><span class=\"line\">rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_federation_management</span><br></pre></td></tr></table></figure>\n\n<p>数据由上游同步给下游，联邦交换机时交换机之间的通讯</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926230927648.png\" alt=\"image-20210926230927648\"></p>\n<ol>\n<li><p>先创建上游交换机：上游<code>up.exchange</code></p>\n</li>\n<li><p>打开右侧的Federation Upstreams，配置上游的节点信息</p>\n<p>url格式：<code>amqp://用户名:密码@上游节点名</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926233401956.png\" alt=\"image-20210926233401956\"></p>\n</li>\n<li><p>打开右侧的Polices，为下游交换机配置上游节点</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926233544997.png\" alt=\"image-20210926233544997\"></p>\n</li>\n<li><p>配置成功之后可以在右侧Federation Status查看到联邦运行信息</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926233819454.png\" alt=\"image-20210926233819454\"></p>\n</li>\n</ol>\n<h3 id=\"联邦队列\"><a href=\"#联邦队列\" class=\"headerlink\" title=\"联邦队列\"></a>联邦队列</h3><p>创建步骤与联邦交换机类似：</p>\n<ol>\n<li><p>创建上游队列<code>up.que</code></p>\n</li>\n<li><p>配置上游节点信息（如果已经配置则跳过）</p>\n</li>\n<li><p>添加Polices（把Apply to改为Queues）</p>\n</li>\n<li><p>查看节点信息</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926234530718.png\" alt=\"image-20210926234530718\"></p>\n</li>\n</ol>\n<h2 id=\"Shovel\"><a href=\"#Shovel\" class=\"headerlink\" title=\"Shovel\"></a>Shovel</h2><p>也是一种同步数据的实现方式</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926234710535.png\" alt=\"image-20210926234710535\"></p>\n<p>开启方式：在每台机器上进行配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_shovel</span><br><span class=\"line\">rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_shovel_management</span><br></pre></td></tr></table></figure>\n\n<p>Source端创建队列<code>Q1</code>，Destination端创建队列<code>Q2</code>，配置shovel：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926235606901.png\" alt=\"image-20210926235606901\"></p>\n<p>查看状态信息</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210926235733416.png\" alt=\"image-20210926235733416\"></p>\n","categories":["工具组件"]},{"title":"Docker基础","url":"/2021/09/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Docker%E5%9F%BA%E7%A1%80/","content":"<h1 id=\"Docker基础\"><a href=\"#Docker基础\" class=\"headerlink\" title=\"Docker基础\"></a>Docker基础</h1><h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>核心思想：打包装箱，每个箱子相互隔离</p>\n<p>docker是基于Go语言开发的</p>\n<p><strong>虚拟机和容器的区别</strong></p>\n<ul>\n<li><p>虚拟机的缺点</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210922213015004.png\" alt=\"image-20210922213015004\"></p>\n<ul>\n<li>资源占用多</li>\n<li>冗余步骤多</li>\n<li>启动很慢</li>\n</ul>\n</li>\n<li><p>容器化技术</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210922212953106.png\" alt=\"image-20210922212953106\"></p>\n<p>docker特点：</p>\n<ul>\n<li>容器内应用直接运行在宿主机的内核，容器没有自己的内核，也没有虚拟硬件，较为轻便</li>\n<li>每个容器之间相互隔离，每个容器都有一个独立的文件系统，互不影响</li>\n<li>更简单的运维：<ul>\n<li>打包镜像发布测试，一键运行</li>\n<li>更便捷的升级和扩容，测试环境高度一致</li>\n<li>更高效的计算资源利用：内核级的虚拟化</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>docker的组成</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210922214947781.png\" alt=\"image-20210922214947781\"></p>\n<h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><p>环境是阿里云ESC的CentOS7，操作系统不同可能指令略有差别</p>\n<p>检测系统版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /etc/redhat-release <span class=\"comment\">#检测CentOS系统版本</span></span><br></pre></td></tr></table></figure>\n\n<p>安装准备环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -y表示所有的询问都默认选yes</span></span><br><span class=\"line\">yum -y install gcc</span><br><span class=\"line\">yum -y install gcc-c++</span><br></pre></td></tr></table></figure>\n\n<p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#卸载之前环境（如果存在）</span></span><br><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                docker-client \\</span><br><span class=\"line\">                docker-client-latest \\</span><br><span class=\"line\">                docker-common \\</span><br><span class=\"line\">                docker-latest \\</span><br><span class=\"line\">                docker-latest-logrotate \\</span><br><span class=\"line\">                docker-logrotate \\</span><br><span class=\"line\">                docker-engine</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#安装依赖包</span></span><br><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"><span class=\"comment\">#配置阿里云镜像</span></span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"comment\">#更新软件包索引</span></span><br><span class=\"line\">sudo yum makecache fast</span><br><span class=\"line\"><span class=\"comment\">#安装Docker CE(社区版)</span></span><br><span class=\"line\">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<p>启动docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#启动</span></span><br><span class=\"line\">systemctl start  docker.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#测试</span></span><br><span class=\"line\">docker version</span><br><span class=\"line\">docker run hello-world</span><br><span class=\"line\">docker images</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#结束</span></span><br><span class=\"line\">systemctl stop docker.service</span><br></pre></td></tr></table></figure>\n\n<p>docker默认工作路径<code>/var/lib/docker</code></p>\n<h2 id=\"阿里云镜像加速\"><a href=\"#阿里云镜像加速\" class=\"headerlink\" title=\"阿里云镜像加速\"></a>阿里云镜像加速</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://lmdeal9c.mirror.aliyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker运行原理\"><a href=\"#Docker运行原理\" class=\"headerlink\" title=\"Docker运行原理\"></a>Docker运行原理</h2><p><strong>docker run的运行流程</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210922221803263.png\" alt=\"image-20210922221803263\"></p>\n<p>Docker是一个CS结构的系统，docker的守护进程运行在主机上，通过socket从客户端访问</p>\n<p>DockerServer接收Docker Client的命令并执行</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210922222202319.png\" alt=\"image-20210922222202319\"></p>\n<p><strong>Docker为什么比虚拟机快？</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210922222402341.png\" alt=\"image-20210922222402341\"></p>\n<ul>\n<li>Docker比VM抽象层更少</li>\n<li>新建容器时，docker不需要像VM那样重新加载一个操作系统，避免引导，而docker是基于宿主机，资源占用更少</li>\n</ul>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><h2 id=\"系统命令\"><a href=\"#系统命令\" class=\"headerlink\" title=\"系统命令\"></a>系统命令</h2><p>帮助文档地址<a href=\"https://docs.docker.com/reference/\">Reference documentation | Docker Documentation</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker version <span class=\"comment\">#版本</span></span><br><span class=\"line\">docker info <span class=\"comment\">#系统信息，包括镜像和容器的数量</span></span><br><span class=\"line\">docker 命令 --<span class=\"built_in\">help</span> <span class=\"comment\">#获取帮助</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>设置开机自启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置docker开机自启</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\"><span class=\"comment\">#运行容器时设置开机自启</span></span><br><span class=\"line\">docker run --restart=always 容器名称或容器ID</span><br><span class=\"line\"><span class=\"comment\">#未运行容器时设置开机自启</span></span><br><span class=\"line\">docker update --restart=always 容器名称或容器ID</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a>镜像命令</h2><ul>\n<li><p>查看镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker images <span class=\"comment\">#查看所有镜像</span></span><br><span class=\"line\">-a <span class=\"comment\">#显示所有镜像</span></span><br><span class=\"line\">-q <span class=\"comment\">#只显示镜像id</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>搜索镜像（也可以手动在dockerhub上搜索）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker search 镜像名 <span class=\"comment\">#在dockerhub上搜索镜像名</span></span><br><span class=\"line\">--filter=STARS=3000 <span class=\"comment\">#搜索stars大于3k的镜像</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull 镜像名 <span class=\"comment\">#下载镜像</span></span><br><span class=\"line\"><span class=\"comment\">#例</span></span><br><span class=\"line\">docker pull mysql:latest <span class=\"comment\">#可以通过[:tag]来指定版本</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rmi 镜像id <span class=\"comment\">#删除指定id的镜像</span></span><br><span class=\"line\">docker rmi -f <span class=\"variable\">$&#123;docker images -aq&#125;</span> <span class=\"comment\">#删除所有镜像</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义新建镜像</p>\n<p>类似于VM的快照机制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#原理与Git类似，注意只能提交有运行记录的容器</span></span><br><span class=\"line\">dockerc commit -m=<span class=\"string\">&quot;描述信息&quot;</span> -a=<span class=\"string\">&quot;作者&quot;</span> 容器id 目标镜像名 ：[TAG]</span><br></pre></td></tr></table></figure>\n\n<p>我们commit过的容器将成为新的镜像保存在本地</p>\n</li>\n</ul>\n<h2 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h2><ul>\n<li><p>运行容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run 镜像名或id <span class=\"comment\">#启动指定镜像</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#一些常用参数</span></span><br><span class=\"line\">--name=<span class=\"string\">&quot;&quot;</span> <span class=\"comment\">#指定容器名称，用于区分容器</span></span><br><span class=\"line\">-d <span class=\"comment\">#后台方式运行</span></span><br><span class=\"line\">-it <span class=\"comment\">#交互式运行，进入容器查看内容</span></span><br><span class=\"line\">-p <span class=\"comment\">#指定端口</span></span><br><span class=\"line\">\t-p ip:主机端口:容器端口 <span class=\"comment\">#绑定主机ip，端口与容器端口</span></span><br><span class=\"line\">\t-p 主机端口:容器端口 <span class=\"comment\">#绑定主机端口与容器端口，如8080:8080</span></span><br><span class=\"line\">\t-p 容器端口 <span class=\"comment\">#仅设定容器端口（外部无法连接）</span></span><br><span class=\"line\">-P <span class=\"comment\">#随机指定端口</span></span><br><span class=\"line\">--rm <span class=\"comment\">#测试运行，用完即删</span></span><br><span class=\"line\">--net <span class=\"comment\">#指定运行网路（一般用于自定义网络）</span></span><br><span class=\"line\">--restart=always <span class=\"comment\">#开机自启</span></span><br><span class=\"line\">-e <span class=\"comment\">#一些额外参数</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker ps <span class=\"comment\">#查看正在运行的容器</span></span><br><span class=\"line\">-a <span class=\"comment\">#查看运行记录</span></span><br><span class=\"line\">-n=num <span class=\"comment\">#显示num个最近创建的容器</span></span><br><span class=\"line\">-q <span class=\"comment\">#仅显示容器编号</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#退出交互式容器</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> <span class=\"comment\">#容器停止</span></span><br><span class=\"line\">[ctrl] + [P] +[Q] <span class=\"comment\">#退出交互式，但容器不停止</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进入交互式容器并开启新的终端</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it 容器id /bin/bash</span><br><span class=\"line\"><span class=\"comment\">#进入容器正在执行的终端，不会启动新的进程</span></span><br><span class=\"line\">docker attach 容器id </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rm <span class=\"comment\">#删除容器</span></span><br><span class=\"line\">docker rm -f <span class=\"variable\">$&#123;docker ps -aq&#125;</span> <span class=\"comment\">#删除所有容器</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动和重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker start 容器id <span class=\"comment\">#启动容器(需要能在运行记录中找到id)</span></span><br><span class=\"line\">docker restart 容器id <span class=\"comment\">#重启容器</span></span><br><span class=\"line\">docker stop 容器id <span class=\"comment\">#停止</span></span><br><span class=\"line\">docker <span class=\"built_in\">kill</span> 容器id <span class=\"comment\">#强制停止</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker top 容器id <span class=\"comment\">#查看容器内部的进程信息</span></span><br><span class=\"line\">docker inspect 容器id <span class=\"comment\">#查看容器的详细信息</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210923134445856.png\" alt=\"image-20210923134445856\"></p>\n<p>可以看到，docker容器id只是全部id前缀的部分截取</p>\n</li>\n<li><p>文件拷贝</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将容器内的文件拷贝到容器外</span></span><br><span class=\"line\">docker cp 容器id:/home/Test.java /home</span><br><span class=\"line\"><span class=\"comment\">#将容器外的文件拷贝到容器内一般使用挂载盘符的方法实现</span></span><br><span class=\"line\"><span class=\"comment\">#只是简单修改的话还是可以直接拷贝，或者直接</span></span><br><span class=\"line\">docker cp /home/Test.java 容器id:/home</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>常用命令图解：</p>\n<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.mscto.com%2Fwp-content%2Fuploads%2F2020%2F02%2F20200216170310480.png&refer=http%3A%2F%2Fwww.mscto.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1634968755&t=fe923a747f73693437381a0db0ac9da3\" alt=\"image\"></p>\n<h2 id=\"常见问题解决\"><a href=\"#常见问题解决\" class=\"headerlink\" title=\"常见问题解决\"></a>常见问题解决</h2><ul>\n<li><p>后台启动自动停止</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d centOS</span><br><span class=\"line\"><span class=\"comment\">#后台运行后发现容器自动停止了</span></span><br></pre></td></tr></table></figure>\n\n<p>原因：</p>\n<p>后台运行docker容器必须指定前台进程，否则docker发现自己没有提供服务就会自动停止</p>\n</li>\n<li><p>查看日志</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker logs -f -t --tail 100 容器名或id</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h1><h2 id=\"portainer\"><a href=\"#portainer\" class=\"headerlink\" title=\"portainer\"></a>portainer</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock --restart=always --name portainer --privileged=<span class=\"literal\">true</span> portainer/portainer</span><br></pre></td></tr></table></figure>\n\n<p>在开放对应的端口号之后就可以通过外部访问</p>\n<h1 id=\"自定义镜像\"><a href=\"#自定义镜像\" class=\"headerlink\" title=\"自定义镜像\"></a>自定义镜像</h1><h2 id=\"容器数据卷\"><a href=\"#容器数据卷\" class=\"headerlink\" title=\"容器数据卷\"></a>容器数据卷</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker volume ls <span class=\"comment\">#查看本地所有卷</span></span><br></pre></td></tr></table></figure>\n\n<p>如果数据保存在容器中，如果删除容器，数据也就会丢失，容器之间可以有一种数据共享的技术，Docker容器中产生的数据会同步到本地</p>\n<p>卷技术：将容器内部的目录挂载到外部linux目录上，进行数据同步</p>\n<p>目的：容器的持久化和同步操作，容器之间可以进行数据共享</p>\n<h3 id=\"直接使用命令挂载\"><a href=\"#直接使用命令挂载\" class=\"headerlink\" title=\"直接使用命令挂载\"></a>直接使用命令挂载</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -v 主机目录:容器内目录 镜像名</span><br></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -v ~/<span class=\"built_in\">test</span>:/home centos</span><br></pre></td></tr></table></figure>\n\n<p>使用inspect命令查看详细信息</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210923212031628.png\" alt=\"image-20210923212031628\"></p>\n<p>可以看到已经成功进行挂载，并且两边的文件夹已进行双向绑定，实际上是类似于硬链接的映射关系</p>\n<p><strong>具名和匿名挂载</strong></p>\n<p>其实就是挂载路径的体现方式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-v 容器内路径 <span class=\"comment\">#匿名挂载</span></span><br><span class=\"line\">-v 卷名:容器内路径 <span class=\"comment\">#具名挂载</span></span><br><span class=\"line\">-v /主机目录:容器内部目录 <span class=\"comment\">#指定路径挂载</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>docker volume ls</code>查看所有卷</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210923215551997.png\" alt=\"image-20210923215551997\"></p>\n<ul>\n<li>匿名挂载和指定路径挂在的卷名会自动生成</li>\n<li>匿名挂载和具名挂载的默认主机挂载点为<code>/var/lib/docker/volumes/xxx/_data</code></li>\n</ul>\n<p><strong>读写权限</strong></p>\n<p>通过给<code>-v</code>属性最后添加:ro或:rw来限制容器内部的读写权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -v 主机目录:容器内目录:ro 镜像名 <span class=\"comment\">#容器内部目录只读权限</span></span><br><span class=\"line\">docker run -it -v 主机目录:容器内目录:rw 镜像名 <span class=\"comment\">#容器内部目录读写权限</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过DockerFile挂载\"><a href=\"#通过DockerFile挂载\" class=\"headerlink\" title=\"通过DockerFile挂载\"></a>通过DockerFile挂载</h3><p>编写用来构建docker镜像的脚本文件</p>\n<p>注意左侧的命令大写，右侧的属性可以大小写</p>\n<p><code>dockerfile01</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">RROM centos</span><br><span class=\"line\">VOLUME [<span class=\"string\">&quot;volume01&quot;</span>,<span class=\"string\">&quot;volume02&quot;</span>]</span><br><span class=\"line\">CMD /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>利用Dockerfile构建容器并挂载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -f ~dockerFile01 -t newVolumeCentos:1.0 . <span class=\"comment\">#注意最后有&#x27;.&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据卷容器\"><a href=\"#数据卷容器\" class=\"headerlink\" title=\"数据卷容器\"></a>数据卷容器</h3><p>多个容器同步数据</p>\n<ul>\n<li><p>先创建docker01容器，这里的<code>newVolumeCentos:1.0</code>是之前创建的自定义镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --name docker02 newVolumeCentos:1.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>--volumes-from</code>属性指定挂载的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --name docker02 --volume-from docker01 <span class=\"comment\">#之后docker01与docker02两个容器中的指定文件夹就进行了绑定</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p>构建自定义镜像的指令集合文件，默认名<code>Dockerfile</code>，如果在当前目录中编写了这个文件，构建镜像时就不需要<code>-f</code>指定Dockerfile文件</p>\n<h3 id=\"Dockerfile指令功能\"><a href=\"#Dockerfile指令功能\" class=\"headerlink\" title=\"Dockerfile指令功能\"></a>Dockerfile指令功能</h3><p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Ftva1.sinaimg.cn%2Flarge%2F00831rSTly1gdcgftwmk2j30xk0j0kbt.jpg&refer=http%3A%2F%2Ftva1.sinaimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1635042690&t=e12155fc4c207eb78705b86c247d80b3\"></p>\n<p>指令必须大写，参数可以大小写</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210924105115681.png\" alt=\"image-20210924105115681\"></p>\n<p>我们还可以使用<code>docker history 镜像名</code>命令来查看镜像构建历史</p>\n<p><strong>CMD和ENTRYPOINT的区别</strong></p>\n<ul>\n<li><p>CMD：不能追加命令，如：</p>\n<p>DockFile中编写<code>CMD [&quot;ls&quot;,&quot;-a&quot;]</code></p>\n<p>执行时<code>docker run mycentos -l</code>会报错</p>\n</li>\n<li><p>ENTRYPOINT：可以追加命令</p>\n<p>与CMD不同，上面例子中的<code>docker run mycentos -l</code>可以正确执行</p>\n</li>\n</ul>\n<h3 id=\"Dockerfile示例\"><a href=\"#Dockerfile示例\" class=\"headerlink\" title=\"Dockerfile示例\"></a>Dockerfile示例</h3><p>docker原生的centos镜像删减了许多功能，例如：</p>\n<ul>\n<li>没有设定工作目录，进入后默认在<code>\\</code>路径</li>\n<li>ifconfig不能使用</li>\n<li>vim不能使用</li>\n</ul>\n<p>我们可以对原生的centos镜像进行增强，使得上面这些功能可以使用</p>\n<ul>\n<li><p>先编写自己的Dockerfile</p>\n<p><code>myDockerfile</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">MAINTAINER lan5th&lt;lan5th@foxmail.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">ENV MYPATH /usr/<span class=\"built_in\">local</span></span><br><span class=\"line\">WORKDIR <span class=\"variable\">$MYPATH</span></span><br><span class=\"line\"></span><br><span class=\"line\">RUN yum -y install vim</span><br><span class=\"line\">RUN yum -y install net-tools</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\"></span><br><span class=\"line\">CMD <span class=\"built_in\">echo</span> <span class=\"variable\">$MYPATH</span></span><br><span class=\"line\">CMD <span class=\"built_in\">echo</span> <span class=\"string\">&quot;---finish build---&quot;</span></span><br><span class=\"line\">CMD <span class=\"string\">&quot;/bin/bash&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构建镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -f myDockerfile -t mycentos:0.1 .</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it mycentos:0.1</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"发布镜像\"><a href=\"#发布镜像\" class=\"headerlink\" title=\"发布镜像\"></a>发布镜像</h2><h3 id=\"发布镜像到DockerHub\"><a href=\"#发布镜像到DockerHub\" class=\"headerlink\" title=\"发布镜像到DockerHub\"></a>发布镜像到DockerHub</h3><p>登录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker login -u 用户名 <span class=\"comment\">#推荐执行之后再输入密码</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker push lan5th/mycentos:0.1 <span class=\"comment\">#发布镜像</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：镜像名一般需要改为<code>用户名/镜像名</code>的格式</strong></p>\n<p>更改镜像名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker tag mycentos:0.1 lan5th&#x2F;mycentos:0.1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发布镜像到阿里云镜像仓库\"><a href=\"#发布镜像到阿里云镜像仓库\" class=\"headerlink\" title=\"发布镜像到阿里云镜像仓库\"></a>发布镜像到阿里云镜像仓库</h3><ol>\n<li>进入阿里云容器镜像产品</li>\n<li>创建个人实例并进入</li>\n<li>创建命名空间</li>\n<li>创建容器镜像</li>\n<li>根据官方文档的操作进行镜像操作</li>\n</ol>\n<p><img src=\"https://img2.baidu.com/it/u=2518245647,3522207224&fm=26&fmt=auto\"></p>\n<h1 id=\"Docker网络\"><a href=\"#Docker网络\" class=\"headerlink\" title=\"Docker网络\"></a>Docker网络</h1><h2 id=\"veth-pair\"><a href=\"#veth-pair\" class=\"headerlink\" title=\"veth-pair\"></a>veth-pair</h2><p>成对的虚拟设备接口，充当着桥梁的身份，连接各种虚拟网络设备</p>\n<p>当我们启动docker容器时，docker会为容器自动分配ip地址，并且每次启动分配到的ip地址可能不同</p>\n<p>当我们启动两个centos容器时(使用<code>ip addr</code>查看网卡)</p>\n<ul>\n<li><p>主机所有网卡</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210924143943084.png\" alt=\"image-20210924143943084\"></p>\n<p>1：本机网卡</p>\n<p>2：阿里云网卡</p>\n<p>3：docker默认网卡</p>\n<p>41：centos-01网卡的主机接口</p>\n<p>43：centos-02网卡的主机接口</p>\n</li>\n<li><p>centos-01所有网卡</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210924144251480.png\" alt=\"image-20210924144251480\"></p>\n<p>1：主机网卡</p>\n<p>40：centos-01网卡的容器接口</p>\n</li>\n<li><p>centos-02所有网卡</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210924144500082.png\" alt=\"image-20210924144500082\"></p>\n<p>1：主机网卡</p>\n<p>42：centos-02网卡的容器接口</p>\n</li>\n</ul>\n<p>veth-pair桥接网卡图解：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210924142936692.png\" alt=\"image-20210924142936692\"></p>\n<h2 id=\"无需配置ip地址的网络交互\"><a href=\"#无需配置ip地址的网络交互\" class=\"headerlink\" title=\"无需配置ip地址的网络交互\"></a>无需配置ip地址的网络交互</h2><p>由于ip地址是docker自动分配的，当我们操作具体业务时不可能每次部署都要手动配置ip地址</p>\n<p>解决方法：</p>\n<ul>\n<li><p>方式一：运行镜像时添加<code>--link</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -P --name centos-02 --link centos-01 centos</span><br></pre></td></tr></table></figure>\n\n<p>这种方式只能从centos-02连通centos-01，反之则不行</p>\n</li>\n<li><p>方式二：自定义网络</p>\n<p><strong>网络模式</strong></p>\n<ul>\n<li>bridge：桥接模式，一般自定义网络也使用桥接模式</li>\n<li>none：不配置网络</li>\n<li>host：和主机共享网络</li>\n<li>container：容器网络连通（局限大，使用少）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>docker network ls</code>查看，发现我们的自定义网络已经创建成功</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210924154021079.png\" alt=\"image-20210924154021079\"></p>\n<p>以自定义网络创建新镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -P --name centos-01 --net mynet centos</span><br><span class=\"line\">docker run -it -P --name centos-02 --net mynet centos</span><br></pre></td></tr></table></figure>\n\n<p>从centos-01使用ping命令测试与centos-02的连接</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210924154846899.png\" alt=\"image-20210924154846899\"></p>\n<p>说明我们的自定义网络已经能够实现我们的目标</p>\n</li>\n</ul>\n<p>之前的配置能够实现同一网段中使用容器name互联，那么如何使网段之间也能实现相同的功能？</p>\n<h2 id=\"网络连通\"><a href=\"#网络连通\" class=\"headerlink\" title=\"网络连通\"></a>网络连通</h2><p>网段之间直接连通是不现实的，但我们可以将容器与其他网段的网络进行连通</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker network connect 网络名 容器名 <span class=\"comment\">#连通指定网络和容器</span></span><br></pre></td></tr></table></figure>\n\n<p>相当于在指定网络和容器之间有新添加了一个网卡，之后就可以跨网段使用容器name进行互联</p>\n<h1 id=\"实战：部署SpringBoot项目\"><a href=\"#实战：部署SpringBoot项目\" class=\"headerlink\" title=\"实战：部署SpringBoot项目\"></a>实战：部署SpringBoot项目</h1><ol>\n<li><p>maven package打包成jar包</p>\n</li>\n<li><p>编写Dockerfile文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM java:8</span><br><span class=\"line\"></span><br><span class=\"line\">COPY *.jar /app.jar</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [<span class=\"string\">&quot;--server.port=8080&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/app.jar&quot;</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把这两个文件发送到服务器上</p>\n</li>\n<li><p>构建镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t myspringboot .</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -P --name lan5th-springboot-web myspringboot</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看容器运行端口<code>docker ps</code></p>\n</li>\n<li><p>进行测试<code>curl localhost:49155/hello</code></p>\n</li>\n</ol>\n","categories":["微服务"]},{"title":"机器学习原理","url":"/2021/01/28/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8E%9F%E7%90%86/","content":"<h2 id=\"监督学习\"><a href=\"#监督学习\" class=\"headerlink\" title=\"监督学习\"></a>监督学习</h2><p>由带标签的数据集∑(x_i,y)进行模型训练</p>\n<a id=\"more\"></a>\n\n<h3 id=\"线性回归\"><a href=\"#线性回归\" class=\"headerlink\" title=\"线性回归\"></a>线性回归</h3><p>假设函数：<img src=\"https://i.loli.net/2020/12/01/OzqdH14BwN9bSCK.png\" alt=\"image\"></p>\n<p>代价函数（损失函数）：<img src=\"https://i.loli.net/2020/12/01/PqOX4TvauC6f8d2.png\"></p>\n<p>线性回归问题即求解代价函数的最小值</p>\n<h4 id=\"梯度下降法\"><a href=\"#梯度下降法\" class=\"headerlink\" title=\"梯度下降法\"></a>梯度下降法</h4><p><img src=\"https://i.loli.net/2020/12/08/r1GYykZCziQbap4.png\" alt=\"img\"></p>\n<p>α为步长，控制更新速率，参数同时更新</p>\n<p>确定步长：网格搜索或梯度限制</p>\n<h6 id=\"Batch梯度下降\"><a href=\"#Batch梯度下降\" class=\"headerlink\" title=\"Batch梯度下降\"></a>Batch梯度下降</h6><p>批量梯度下降</p>\n<p>每一步更新都遍历整个·训练集，与随机梯度下降相对应</p>\n<h5 id=\"多元梯度下降法\"><a href=\"#多元梯度下降法\" class=\"headerlink\" title=\"多元梯度下降法\"></a>多元梯度下降法</h5><p><img src=\"https://i.loli.net/2020/12/08/NyDLzEm8J2oBSxP.png\" alt=\"img\"></p>\n<p><img src=\"https://i.loli.net/2020/12/08/A1yhMgtGU28WVpd.png\" alt=\"img\"></p>\n<p>x0=1,两边公式本质相同</p>\n<h4 id=\"特征缩放\"><a href=\"#特征缩放\" class=\"headerlink\" title=\"特征缩放\"></a>特征缩放</h4><p>将所有特征的取值范围缩放至[-1,1]范围中（通常），加速找到偏导数为0点的进程</p>\n<p>均值归一化：用xi-μi代替xi使均值为0</p>\n<h5 id=\"多项式回归\"><a href=\"#多项式回归\" class=\"headerlink\" title=\"多项式回归\"></a>多项式回归</h5><p>用单一变量的不同次方作为不同的特征值(仅适用于线性回归)</p>\n<p><img src=\"https://i.loli.net/2020/12/08/1JFnrsd5LyjiG6P.png\" alt=\"img\"></p>\n<h4 id=\"正规方程\"><a href=\"#正规方程\" class=\"headerlink\" title=\"正规方程\"></a>正规方程</h4><p>参数少时(n&lt;10000)适用，不需要迭代计算</p>\n<p><img src=\"https://i.loli.net/2020/12/08/i8UpISmEcnZ17jR.png\"></p>\n<p>X第一列始终置1</p>\n<h5 id=\"设计矩阵\"><a href=\"#设计矩阵\" class=\"headerlink\" title=\"设计矩阵\"></a>设计矩阵</h5><p>正规矩阵方法证明：<a href=\"https://blog.csdn.net/chenlin41204050/article/details/78220280\">https://blog.csdn.net/chenlin41204050/article/details/78220280</a></p>\n<p>若X不可逆，可以使用伪逆矩阵代替，一般不可逆的原因为特征变量过多</p>\n<p><img src=\"https://i.loli.net/2020/12/08/gyecx73Un5LQ1zR.png\" alt=\"img\"></p>\n<p>需要考虑XTX是否可逆的问题</p>\n<h4 id=\"线性回归的正则化\"><a href=\"#线性回归的正则化\" class=\"headerlink\" title=\"线性回归的正则化\"></a>线性回归的正则化</h4><p><img src=\"https://i.loli.net/2020/12/10/nJO9s3bfX8L2prQ.png\" alt=\"image-20201210200832545\"></p>\n<p>梯度下降</p>\n<p><img src=\"https://i.loli.net/2020/12/10/BHa5AUuZsWNeQOc.png\" alt=\"image-20201210203219234\"></p>\n<p>正规方程</p>\n<p><img src=\"https://i.loli.net/2020/12/10/SeXtVc2YiMdzJRF.png\" alt=\"image-20201210203942596\"></p>\n<p>XTX+λ[1]必可逆</p>\n<h3 id=\"逻辑回归\"><a href=\"#逻辑回归\" class=\"headerlink\" title=\"逻辑回归\"></a>逻辑回归</h3><h4 id=\"二分类\"><a href=\"#二分类\" class=\"headerlink\" title=\"二分类\"></a>二分类</h4><p><img src=\"https://i.loli.net/2020/12/09/fv4RQVGgbMJzt6c.png\"><img src=\"https://i.loli.net/2020/12/09/imL8sw3KuDzOjqF.png\"></p>\n<p>x与ln(y/1-y)之间具有线性关系，y可视为时间的概率，1-y视为反例得概率。</p>\n<p>h_θ(x)表示在给定x和θ情况下预测y=1的概率</p>\n<p><img src=\"https://i.loli.net/2020/12/10/tvkg6YSFLZrjVhW.png\" alt=\"img\"></p>\n<h5 id=\"决策边界\"><a href=\"#决策边界\" class=\"headerlink\" title=\"决策边界\"></a>决策边界</h5><p>即θTx所构成的边界，（在二分类中）用于区分h_θ(x)是取1还是0</p>\n<h5 id=\"逻辑回归的代价函数\"><a href=\"#逻辑回归的代价函数\" class=\"headerlink\" title=\"逻辑回归的代价函数\"></a>逻辑回归的代价函数<img src=\"https://i.loli.net/2020/12/10/8uwr1OAx6YnP2z3.png\"></h5><p><img src=\"https://i.loli.net/2020/12/10/7ZO18mhckHTKUPd.png\"><img src=\"https://i.loli.net/2020/12/10/6xeJXoSYFwIOygK.png\" alt=\"img\"></p>\n<p>如y=1的cost函数表示，当h(x)-&gt;0预测得到y=0的结果时若y=1需要无穷大的代价来修正假设函数；当h(x)-&gt;1预测得到y=0的结果时若y=1需要极小的代价来修正假设函数</p>\n<p>结论（由最大似然法得到）：<img src=\"https://i.loli.net/2020/12/10/UpM7ZykBDTFbjrH.png\" alt=\"image-20201210151452334\"></p>\n<p>得到代价函数后再使用梯度下降的方法（包括特征缩放等）来推算假设函数</p>\n<p>其他可选的回归方法（除了第一条梯度下降，其他方法都具有右边的优点）</p>\n<p><img src=\"https://i.loli.net/2020/12/10/xapo8fQLq4DTGjR.png\" alt=\"image-20201210154839479\"></p>\n<h5 id=\"多分类问题\"><a href=\"#多分类问题\" class=\"headerlink\" title=\"多分类问题\"></a>多分类问题</h5><p>一对多思想</p>\n<p><img src=\"https://i.loli.net/2020/12/10/JbYTUKzx8s24yI7.png\" alt=\"image-20201210174846099\"></p>\n<p>将多分类问题转化为多个二分类问题（分类器）的集合，一一求解</p>\n<p>ps:然而多分类问题一般采用深度学习方法解决</p>\n<h5 id=\"线性判别分析-LDA\"><a href=\"#线性判别分析-LDA\" class=\"headerlink\" title=\"线性判别分析(LDA)\"></a>线性判别分析(LDA)</h5><p><img src=\"https://i.loli.net/2021/01/25/kAN8REP9KuIWMl1.png\" alt=\"image-20210125195311118\"></p>\n<h4 id=\"减少过拟合的方法\"><a href=\"#减少过拟合的方法\" class=\"headerlink\" title=\"减少过拟合的方法\"></a>减少过拟合的方法</h4><p>1.减少特征数量</p>\n<p>2.正则化</p>\n<p><img src=\"https://i.loli.net/2020/12/10/nJO9s3bfX8L2prQ.png\" alt=\"image-20201210200832545\"></p>\n<p>右边整项为正则化项，λ为正则化参数</p>\n<p>第一项越低表示拟合程度越高；第二项越低，参数越小，模型越简单，避免过拟合的可能越高</p>\n<p>若λ过大，可能会将所有参数全都消去，转变成欠拟合</p>\n<h4 id=\"逻辑回归的正则化\"><a href=\"#逻辑回归的正则化\" class=\"headerlink\" title=\"逻辑回归的正则化\"></a>逻辑回归的正则化</h4><p>添加后一项以减少变量数量</p>\n<p><img src=\"https://i.loli.net/2020/12/10/oZlYOpLwizBFy6t.png\" alt=\"image-20201210210317379\"></p>\n<h3 id=\"非线性假设\"><a href=\"#非线性假设\" class=\"headerlink\" title=\"非线性假设\"></a>非线性假设</h3><h4 id=\"神经网络\"><a href=\"#神经网络\" class=\"headerlink\" title=\"神经网络\"></a>神经网络</h4><p>MP模型</p>\n<p><img src=\"https://i.loli.net/2020/12/21/Vk4GTCJDZmURoit.png\" alt=\"image-20201221102012721\"></p>\n<p>每一层添加偏置项x0</p>\n<p><img src=\"https://i.loli.net/2020/12/10/BdvMNVJFC7QOe64.png\" alt=\"image-20201210215010914\"></p>\n<p>第一层为输入层，第二层之上为隐藏层</p>\n<p><img src=\"https://i.loli.net/2020/12/10/F9kUwT15nHD7qIB.png\" alt=\"image-20201210215556818\"></p>\n<p>设z=前一层的拟合函数，如<img src=\"https://i.loli.net/2020/12/10/NSMOmBvLat8FQkK.png\" alt=\"image-20201210223649313\"></p>\n<p>则下一层的拟合函数可表示为<img src=\"https://i.loli.net/2020/12/10/LbEyPISg2BAJWal.png\" alt=\"image-20201210223737857\"></p>\n<p>可以用神经网络实现与、或、非、与非等逻辑判别：</p>\n<p><img src=\"https://i.loli.net/2020/12/10/dB36cNfU1RAPshI.png\" alt=\"image-20201210231351345\"></p>\n<h4 id=\"代价函数\"><a href=\"#代价函数\" class=\"headerlink\" title=\"代价函数\"></a>代价函数</h4><p>逻辑回归代价函数</p>\n<p><img src=\"https://i.loli.net/2020/12/14/WnOBQ12TGS3sNjX.png\" alt=\"image-20201214160809963\"></p>\n<p>均方误差</p>\n<p><img src=\"https://i.loli.net/2020/12/21/WKUkbtaxj581uhp.png\" alt=\"image-20201221102433489\"></p>\n<h4 id=\"反向传播-BP-算法\"><a href=\"#反向传播-BP-算法\" class=\"headerlink\" title=\"反向传播(BP)算法\"></a>反向传播(BP)算法</h4><p>从前向后计算误差，从后向前对参数求导</p>\n<p>前向传播：</p>\n<p><img src=\"https://i.loli.net/2020/12/14/buR4zJsAOBXlGcd.png\" alt=\"image-20201214171814412\"></p>\n<p>反向传播：</p>\n<p><img src=\"https://i.loli.net/2020/12/14/oJwrbnNKDdS8OXM.png\" alt=\"image-20201214172833844\"></p>\n<p>算法参照<a href=\"https://blog.csdn.net/ft_sunshine/article/details/90221691\">https://blog.csdn.net/ft_sunshine/article/details/90221691</a></p>\n<h4 id=\"梯度检测\"><a href=\"#梯度检测\" class=\"headerlink\" title=\"梯度检测\"></a>梯度检测</h4><p>对每一个θ使用双侧差分来近似获得偏导</p>\n<p><img src=\"https://i.loli.net/2020/12/14/agdf6VXCkADcZru.png\" alt=\"image-20201214230104478\"></p>\n<p>缺点：比反向传播慢得多</p>\n<h4 id=\"随机初始化\"><a href=\"#随机初始化\" class=\"headerlink\" title=\"随机初始化\"></a>随机初始化</h4><p>若一层layer中的每个θ都被设置成同一值（如0），那么每次经过梯度下降更新θ时J(θ)和θ都会取得相同的结果，造成隐藏层的冗余。</p>\n<p>随机初始化能够较好的解决这一问题</p>\n<p><img src=\"https://i.loli.net/2020/12/14/s4EDmjw8xOg6STf.png\" alt=\"image-20201214231752712\"></p>\n<p>INIT_EPSILON为[-ε,ε]之间的一个随机值</p>\n<h4 id=\"神经网络实现流程\"><a href=\"#神经网络实现流程\" class=\"headerlink\" title=\"神经网络实现流程\"></a>神经网络实现流程</h4><ul>\n<li>选择网络结构：通常只有一个隐藏层，隐藏层元的数量需要一致</li>\n<li>随机初始化</li>\n<li>前向算法计算假设函数h_θ(x)</li>\n<li>实现算法计算代价函数J(θ)</li>\n<li>后向算法计算偏导数</li>\n<li>用梯度检测计算检验后向算法是否正常运行，若正常则取消梯度检测</li>\n<li>使用梯度下降或其他高级算法减小代价函数</li>\n</ul>\n<h2 id=\"无监督学习\"><a href=\"#无监督学习\" class=\"headerlink\" title=\"无监督学习\"></a>无监督学习</h2><p>由无标签数据集∑(x_i)进行模型训练</p>\n<h3 id=\"聚类\"><a href=\"#聚类\" class=\"headerlink\" title=\"聚类\"></a>聚类</h3><h4 id=\"k-means\"><a href=\"#k-means\" class=\"headerlink\" title=\"k-means\"></a>k-means</h4><p>簇分配策略</p>\n<p>m表示数据数量，K表示聚类中心个数</p>\n<p><img src=\"https://i.loli.net/2020/12/16/G4T6sPbDo8eUFRB.png\" alt=\"image-20201216211849397\"></p>\n<p>若出现无点聚类中心，一般会直接移除这个中心，若确实需要K个中心，则可以将这个中心重新随机初始化</p>\n<p><strong>代价函数</strong></p>\n<p>失真函数</p>\n<p><img src=\"https://i.loli.net/2020/12/16/QkzcM7VNa2ADrZ3.png\" alt=\"image-20201216220511562\"></p>\n<p>c_i为xi距离最近的簇中心的距离，μi为各个簇心位置</p>\n<p><img src=\"https://i.loli.net/2020/12/16/lOJi451aCI7R6cq.png\" alt=\"image-20201216221225896\"></p>\n<p>先固定μi计算c_i的代价函数，在计算μi的代价函数</p>\n<p><strong>多次随机初始化来防止局部最优解(K较小时比较有效)</strong></p>\n<h4 id=\"K的选择\"><a href=\"#K的选择\" class=\"headerlink\" title=\"K的选择\"></a>K的选择</h4><p>肘部原则</p>\n<p>从1逐渐增大k的个数直到m,对于每一个k值计算失真函数,选择如图的”肘部”作为聚类的个数</p>\n<p><img src=\"https://i.loli.net/2020/12/16/uKyIx2HjeQXUnWd.png\" alt=\"image-20201216232149551\"></p>\n<p>缺点:得到的图像不一定都有”肘部”,难以确定聚类个数</p>\n<p>下游目的决定K值:根据聚类的目的决定</p>\n<h3 id=\"降维\"><a href=\"#降维\" class=\"headerlink\" title=\"降维\"></a>降维</h3><p>二维降一维</p>\n<p>将二维特征投影到一维直线上</p>\n<p><img src=\"https://i.loli.net/2020/12/17/aFdmyvZJNbAO7lt.png\" alt=\"image-20201217152951803\"></p>\n<p>三位降二维</p>\n<p>将三位特征投影到二维平面上</p>\n<p><img src=\"https://i.loli.net/2020/12/17/1no3ughH8jxIEMt.png\" alt=\"image-20201217153135338\"></p>\n<h4 id=\"主成分分析-PCA\"><a href=\"#主成分分析-PCA\" class=\"headerlink\" title=\"主成分分析(PCA)\"></a>主成分分析(PCA)</h4><p>将所有特征投影到低维平面,本质：舍弃掉一些信息来降低维度</p>\n<p>与线性回归差异：线性回归为y与预测值之间的差，而PCA为与该方向距离的差，即每个特征具有同等地位</p>\n<p>最近重构性：样本点到该支线距离足够近</p>\n<p>最大可分性：样本点在这个直线的投影尽量分散</p>\n<p><img src=\"https://i.loli.net/2020/12/17/OtuEPpVKn5bf7h2.png\" alt=\"image-20201217155914810\"></p>\n<p>svg/eig函数输出结果</p>\n<p><img src=\"https://i.loli.net/2020/12/17/rel7mOtnJMI5uKq.png\" alt=\"image-20201217161825209\"></p>\n<p>输出U为n乘n矩阵，选取前k列进行转置后乘x矩阵，得到一个输出n乘k矩阵即为降维结果</p>\n<p><img src=\"https://i.loli.net/2020/12/17/jJxRUqDAQdZ46O3.png\" alt=\"image-20201217162516657\"></p>\n<h4 id=\"选择压缩维度K\"><a href=\"#选择压缩维度K\" class=\"headerlink\" title=\"选择压缩维度K\"></a>选择压缩维度K</h4><p>选择&lt;=0.01表示保留99%的方差</p>\n<p><img src=\"https://i.loli.net/2020/12/17/qvFfcJi9DIaSozm.png\" alt=\"image-20201217170202391\"></p>\n<p><img src=\"https://i.loli.net/2020/12/17/NEqMz1sWJduwb6h.png\" alt=\"image-20201217171115111\"></p>\n<p>从K=1开始不断增大K值，直到满足check式，使用svd函数一次返回的s矩阵可以满足K=1到K=n的要求</p>\n<p><img src=\"https://i.loli.net/2020/12/17/Y38WtITEwo2qxl4.png\" alt=\"image-20201217171416462\"></p>\n<h4 id=\"压缩重现\"><a href=\"#压缩重现\" class=\"headerlink\" title=\"压缩重现\"></a>压缩重现</h4><p>有损失x=Uz</p>\n<p><img src=\"https://i.loli.net/2020/12/17/KtoGVSNOj6FlcbQ.png\" alt=\"image-20201217163517574\"></p>\n<h4 id=\"运用PCA\"><a href=\"#运用PCA\" class=\"headerlink\" title=\"运用PCA\"></a>运用PCA</h4><p>PCA运用在训练集上，当建立了从x到z的映射后再将映射应用在交叉验证集和测试集上</p>\n<p><img src=\"https://i.loli.net/2020/12/17/8VY3fsLokMjFgwZ.png\" alt=\"image-20201217172423895\"></p>\n<p>PCA不推荐应用于过拟合问题的处理上，因为PCA不顾y值，仅依靠x值来判断舍弃一些信息</p>\n<p>当模型的运行过于缓慢，计算量过大时推荐使用PCA，以减少对内存和硬盘空间的需求，或用来可视化数据（需要较低的维度）</p>\n<h3 id=\"异常检测\"><a href=\"#异常检测\" class=\"headerlink\" title=\"异常检测\"></a>异常检测</h3><p>当p&lt;设定值ε时判断为异常</p>\n<p><img src=\"https://i.loli.net/2020/12/17/OrhBIjMUKyN5Q8w.png\" alt=\"image-20201217195831567\"></p>\n<p>高斯分布（正态分布）</p>\n<p>使用独立概率的高斯分布作为p函数</p>\n<p><img src=\"https://i.loli.net/2020/12/17/fIW9yP5hGjxTvlw.png\" alt=\"image-20201217203231304\"></p>\n<h4 id=\"带标签数据\"><a href=\"#带标签数据\" class=\"headerlink\" title=\"带标签数据\"></a>带标签数据</h4><p>一个数据集中有数个已知异常样本，将这些样本仅放于交叉验证集和测试集中</p>\n<p>用训练集来拟合p函数</p>\n<p><img src=\"https://i.loli.net/2020/12/17/TfXwPlE8hxjG4ZC.png\" alt=\"image-20201217210852029\"></p>\n<h4 id=\"评估异常检测模型\"><a href=\"#评估异常检测模型\" class=\"headerlink\" title=\"评估异常检测模型\"></a>评估异常检测模型</h4><p><img src=\"https://i.loli.net/2020/12/17/nobdXJ6PNKmD1fZ.png\" alt=\"image-20201217211700590\"></p>\n<h4 id=\"异常检测vs监督学习\"><a href=\"#异常检测vs监督学习\" class=\"headerlink\" title=\"异常检测vs监督学习\"></a>异常检测vs监督学习</h4><p><img src=\"https://i.loli.net/2020/12/17/grlP3tnMKbo6YcS.png\" alt=\"image-20201217213041022\"></p>\n<p>若负样本远多于正样本使用异常检测，若正样本较多则使用监督学习</p>\n<h4 id=\"选择异常检测的特征\"><a href=\"#选择异常检测的特征\" class=\"headerlink\" title=\"选择异常检测的特征\"></a>选择异常检测的特征</h4><p>对于非高斯特征，调用对数或幂函数使其满足高斯分布的特征</p>\n<p>也可以根据实际情况根据已有特征创造出新的特征，如</p>\n<p><img src=\"https://i.loli.net/2020/12/17/HdqSJDGRxoa4ljz.png\" alt=\"image-20201217215556364\"></p>\n<h4 id=\"多元高斯分布\"><a href=\"#多元高斯分布\" class=\"headerlink\" title=\"多元高斯分布\"></a>多元高斯分布</h4><p><img src=\"https://i.loli.net/2020/12/17/OjCn5Y7QEoq6bu2.png\" alt=\"image-20201217222317108\"></p>\n<p>多个单独的高斯分布无法正确的判别异常时，选择P~N(μ,Σ)作为检测函数，其中，μ为n1矩阵，Σ为nn协方差矩阵(Σ元值可设为负值)</p>\n<p><img src=\"https://i.loli.net/2020/12/17/lr83zxmIeTthOaP.png\" alt=\"image-20201217222107036\"></p>\n<h6 id=\"原始模型-多元模型\"><a href=\"#原始模型-多元模型\" class=\"headerlink\" title=\"原始模型/多元模型\"></a>原始模型/多元模型</h6><p><img src=\"https://i.loli.net/2020/12/17/C1ZJGmv3exV49kO.png\" alt=\"image-20201217223332100\"></p>\n<p>原始模型需要人工选择特征之间的关系，多元模型能够自动分配关系；由于多元计算的复杂性一般仅当m&gt;&gt;n(m&gt;=10n)时才选择多元高斯分布</p>\n<h3 id=\"推荐系统\"><a href=\"#推荐系统\" class=\"headerlink\" title=\"推荐系统\"></a>推荐系统</h3><p>案例：电影推荐</p>\n<p>将每一部电影的特征分别表示维xi，将每个用户的偏好表示为θ，用户的接受程度就是θTx</p>\n<p>根据电影特征估计用户评分x-&gt;θ</p>\n<p><img src=\"https://i.loli.net/2020/12/18/TPDEYaMVvnsj2lu.png\" alt=\"image-20201218104501666\"></p>\n<p><img src=\"https://i.loli.net/2020/12/18/n5Txq8zcKC7btr3.png\" alt=\"image-20201218110107467\"></p>\n<p>优化函数，1/m不影响函数本身，因此省略</p>\n<p><img src=\"https://i.loli.net/2020/12/18/WIZsgcCvBpAutJF.png\" alt=\"image-20201218110427300\"></p>\n<h4 id=\"协同过滤\"><a href=\"#协同过滤\" class=\"headerlink\" title=\"协同过滤\"></a>协同过滤</h4><p>特征过滤</p>\n<p>通过用户的评分可以反向判断出电影特征θ-&gt;x</p>\n<p><img src=\"https://i.loli.net/2020/12/18/tZ4gSjX9LiDoIJW.png\" alt=\"image-20201218223104264\"></p>\n<p><img src=\"https://i.loli.net/2020/12/18/UNtwMhxJajfkcXV.png\" alt=\"image-20201218215241513\"></p>\n<p>经过不断过滤可以最终收敛到合理的θ和x值</p>\n<p><img src=\"https://i.loli.net/2020/12/18/adycIs8KqzHeFxW.png\" alt=\"image-20201218215440598\"></p>\n<h4 id=\"协同过滤算法\"><a href=\"#协同过滤算法\" class=\"headerlink\" title=\"协同过滤算法\"></a>协同过滤算法</h4><p><img src=\"https://i.loli.net/2020/12/18/Gl1nsNLOEMDYi78.png\" alt=\"image-20201218224736370\"></p>\n<p>不需要设置x0=1，算法会由其需求自动修改</p>\n<p><img src=\"https://i.loli.net/2020/12/18/t1oc3NOPrLf6S8D.png\" alt=\"image-20201218225056897\"></p>\n<h4 id=\"向量化实现\"><a href=\"#向量化实现\" class=\"headerlink\" title=\"向量化实现\"></a>向量化实现</h4><p><img src=\"https://i.loli.net/2020/12/18/KSzTjPu8Cc5y1mB.png\" alt=\"image-20201218231005778\"></p>\n<p>将评分数据转换为矩阵</p>\n<p>低秩矩阵分解</p>\n<p><img src=\"https://i.loli.net/2020/12/18/V2me6jWApNQvwdC.png\" alt=\"image-20201218231341779\"></p>\n<p>推送最相关的内容</p>\n<p><img src=\"https://i.loli.net/2020/12/18/BvWxfitoPRrbq3m.png\" alt=\"image-20201218231820338\"></p>\n<h4 id=\"均值归一化\"><a href=\"#均值归一化\" class=\"headerlink\" title=\"均值归一化\"></a>均值归一化</h4><p>添加新用户时，θi=0，θTx恒为0</p>\n<p><img src=\"https://i.loli.net/2020/12/18/ud8pTx34WzD9qgb.png\" alt=\"image-20201218234345939\"></p>\n<p>令Y矩阵=X矩阵，Y的每一项减去这一行的均值</p>\n<h3 id=\"大规模机器学习\"><a href=\"#大规模机器学习\" class=\"headerlink\" title=\"大规模机器学习\"></a>大规模机器学习</h3><p>进行大数据集的学习</p>\n<h4 id=\"随机梯度下降\"><a href=\"#随机梯度下降\" class=\"headerlink\" title=\"随机梯度下降\"></a>随机梯度下降</h4><p><strong>Stochastic梯度下降</strong></p>\n<p><img src=\"https://i.loli.net/2020/12/19/UP27uvKbc9SgjfJ.png\" alt=\"image-20201219152530144\"></p>\n<p>Stochastic梯度下降对于每一个数据xi都进行一次θ的更新，拟合的过程也与批量梯度下降不同，最终会落在全局最小值附近，需要自己选择重复次数来使模型可用</p>\n<p><strong>Min-batch梯度下降</strong></p>\n<p>使用较小的批量大小，一般在有合适的向量化表示时选择这种算法</p>\n<p>1&lt;b&lt;100</p>\n<p><img src=\"https://i.loli.net/2020/12/19/itXBJMdpZD2gso5.png\" alt=\"image-20201219152820521\"></p>\n<p><strong>检验梯度下降</strong></p>\n<p>每隔(如1000)次迭代后画出代价函数的图像，当增大每次间隔的迭代次数时曲线会变得更加平滑，更容易看出总体趋势</p>\n<p><img src=\"https://i.loli.net/2020/12/19/dvanDbTZGVlerku.png\" alt=\"image-20201219154751851\"></p>\n<p>为了让随机梯度下降更好的收敛，可以设置α随迭代次数的增大慢慢减小</p>\n<p><img src=\"https://i.loli.net/2020/12/19/tyu4Lg9xGdOrwUW.png\" alt=\"image-20201219155037539\"></p>\n<p><strong>动量梯度下降</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190616114719294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTMzODUwMTg=,size_16,color_FFFFFF,t_70\" alt=\"image\"></p>\n<p>动量可以理解为每次迭代具有前一次迭代的惯性</p>\n<h4 id=\"在线学习\"><a href=\"#在线学习\" class=\"headerlink\" title=\"在线学习\"></a>在线学习</h4><p>通过持续不断输入的数据进行学习，类似Stochastic梯度下降，并舍弃已使用的数据</p>\n<h4 id=\"MapReduce\"><a href=\"#MapReduce\" class=\"headerlink\" title=\"MapReduce\"></a>MapReduce</h4><p><img src=\"https://i.loli.net/2020/12/19/9f6wgKXUktMOoDI.png\" alt=\"image-20201219171308772\"></p>\n<p>用来处理一台电脑无法处理的大规模数据问题，每个机器计算数据集的一部分，并将结果送至中央服务器结合更新θ</p>\n<p><img src=\"https://i.loli.net/2020/12/19/BnFwWzI3vmTVlfs.png\" alt=\"image-20201219165731957\"></p>\n<p>在一个计算机中应用(多核)</p>\n<p><img src=\"https://i.loli.net/2020/12/19/ewZ4zI5WbJS3FAr.png\" alt=\"image-20201219171048147\"></p>\n<h2 id=\"案例分析\"><a href=\"#案例分析\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h2><h3 id=\"OCR图像识别\"><a href=\"#OCR图像识别\" class=\"headerlink\" title=\"OCR图像识别\"></a>OCR图像识别</h3><p><img src=\"https://i.loli.net/2020/12/19/5hR4GnSUtMYlzBN.png\" alt=\"image-20201219172916138\"></p>\n<p>识别出图像中的文字信息</p>\n<ul>\n<li>定位文字位置区域</li>\n<li>对文字进行标记和分割</li>\n<li>进行文字识别</li>\n<li>(识别纠正)</li>\n</ul>\n<h4 id=\"流水线工作流程\"><a href=\"#流水线工作流程\" class=\"headerlink\" title=\"流水线工作流程\"></a>流水线工作流程</h4><p><img src=\"https://i.loli.net/2020/12/19/f6Bd1PWvXuNrsR7.png\" alt=\"image-20201219172938391\"></p>\n<h3 id=\"行人检测系统\"><a href=\"#行人检测系统\" class=\"headerlink\" title=\"行人检测系统\"></a>行人检测系统</h3><p>将图像分割成同一大小的正样本和负样本</p>\n<h4 id=\"识别对象\"><a href=\"#识别对象\" class=\"headerlink\" title=\"识别对象\"></a>识别对象</h4><p><img src=\"https://i.loli.net/2020/12/19/UQKZ8kA1yRsxbJS.png\" alt=\"image-20201219173105736\"></p>\n<p>滑动窗口</p>\n<ul>\n<li>对一个小的图像区域进行检测，然后将图像区域向右移动一个参数值，行末移至下一行进行遍历</li>\n<li>增大图像区域大小，将截得到的图像进行缩放至原有大小再次遍历，重复这一过程</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/12/19/uHdCDFoah1gb3E4.png\" alt=\"image-20201219173617142\"></p>\n<p>这一识别方法可以同样应用于文字识别的定位步骤</p>\n<p><strong>放大算子</strong></p>\n<p><img src=\"https://i.loli.net/2020/12/19/EiXj6RF45Z83M1q.png\" alt=\"image-20201219174239462\"></p>\n<p>识别识别到的区域周围是否有其他识别到的区域，缩小其间距来进行区域链接，舍弃不合理的区域之后在周围添加矩形边框。</p>\n<h4 id=\"分割字符\"><a href=\"#分割字符\" class=\"headerlink\" title=\"分割字符\"></a>分割字符</h4><p><img src=\"https://i.loli.net/2020/12/19/ktQjRXOamCixoug.png\" alt=\"image-20201219175310861\"></p>\n<p>一维：训练模型后从左到右进行识别</p>\n<h3 id=\"人工数据合成\"><a href=\"#人工数据合成\" class=\"headerlink\" title=\"人工数据合成\"></a>人工数据合成</h3><p><strong>先确定增加训练样本数量能够提升算法效率再进行样本数据的扩充</strong></p>\n<ul>\n<li><p>从零生成新数据，如将一种字体转换成一种新的字体</p>\n</li>\n<li><p>转换已有数据(失真合成数据)，如</p>\n<p><img src=\"https://i.loli.net/2020/12/19/hiaYkzP38o1LyRH.png\" alt=\"image-20201219211145222\"></p>\n</li>\n</ul>\n<h3 id=\"上下限分析\"><a href=\"#上下限分析\" class=\"headerlink\" title=\"上下限分析\"></a>上下限分析</h3><p>对算法进行优化时预测每一步的优化对于准确率的影响，据此决定优化方向流水线的哪一部分</p>\n<p><img src=\"https://i.loli.net/2020/12/19/blz9wP4enAdtMSW.png\" alt=\"image-20201219214150609\"></p>\n<h2 id=\"卷积神经网络\"><a href=\"#卷积神经网络\" class=\"headerlink\" title=\"卷积神经网络\"></a>卷积神经网络</h2><p>边缘检测示例</p>\n<p><img src=\"https://i.loli.net/2021/01/29/Vmnp2IUAOeBgvl4.png\" alt=\"image-20210129171616418\"></p>\n<h3 id=\"Padding\"><a href=\"#Padding\" class=\"headerlink\" title=\"Padding\"></a>Padding</h3><p>用0像素点来填充边缘</p>\n<p><img src=\"https://i.loli.net/2021/01/29/W5VKpDfBMINe1Eb.png\" alt=\"image-20210129121230172\"></p>\n<ul>\n<li>不使用Padding时图像会持续缩小，下一层的图像边长为n-f+1;使用Padding填充边缘使得下一层图像边长变为n=2p-f+1，当填充的像素点边长p=(f-1)/2时下一层的图像边长将于上一层相等。(f大多数都是奇数)</li>\n<li>不使用Padding时图像边缘得像素点信息无法得到有效利用，而使用Padding能够减轻这一后果</li>\n</ul>\n<p><strong>Valid卷积</strong>：不填充</p>\n<p><strong>Same卷积</strong>：输出大小等同输出大小</p>\n<h3 id=\"步长Stride\"><a href=\"#步长Stride\" class=\"headerlink\" title=\"步长Stride\"></a>步长Stride</h3><p>卷积核向右或向下移动的步长s，则输出的图像大小为[(n+2p-f)/s+1]，若不为整数则向下取整</p>\n<h3 id=\"三维卷积\"><a href=\"#三维卷积\" class=\"headerlink\" title=\"三维卷积\"></a>三维卷积</h3><p><img src=\"https://i.loli.net/2021/01/29/O5dsU9taAjn7qS6.png\" alt=\"image-20210129144710712\"></p>\n<p>通过设计不同通道得卷积样式来获得不同的输出效果，通道数与输入通道数必须相同</p>\n<p><img src=\"https://i.loli.net/2021/01/29/RbyHD1OZLQWfYFh.png\" alt=\"image-20210129145812574\"></p>\n<p>添加多个过滤器来提取不同的特征，然后将各过滤器输出结果作为不同维度合成为一个立体输出层</p>\n<p>输出层的维度(通道数)等于过滤器的个数(提取的特征量)</p>\n<p>一般来说，随着卷积神经网络层数的增加，输出层边长不断减小，维度不断增大</p>\n<h3 id=\"池化\"><a href=\"#池化\" class=\"headerlink\" title=\"池化\"></a>池化</h3><p>最大池化/平均池化：在一个过滤层大小的位置上选取最大值或平均值直接输出</p>\n<p>池化层没有权重和参数，只有超参数，因此在计算卷积神经网络层数时经常把池化层和卷积层合并算为一层</p>\n<p>超参数：</p>\n<ul>\n<li>f:卷积核大小</li>\n<li>s:步长</li>\n</ul>\n<p><strong>卷积神经网络示例</strong></p>\n<p><img src=\"https://i.loli.net/2021/01/29/5HQTRoDh4G3m2wj.png\" alt=\"image-20210129162830655\"></p>\n","categories":["机器学习"]},{"title":"Mybatis","url":"/2021/03/28/JavaEE/Mybatis/","content":"<p>maven仓库</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>持久层</strong>：持久化就是将程序的数据在瞬时状态和持久状态转化的过程，一般是数据库，而持久层就是完成持久化的代码块</p>\n<p>特点：层界限十分明显</p>\n<p>为什么需要Mybatis？</p>\n<ul>\n<li>方便，帮助程序将数据存入数据库中</li>\n<li>JDBC代码太复杂，简化，框架，自动化</li>\n<li>sql与代码分离，提高可维护性</li>\n<li>提供映射标签，支持对象与数据库orm字段关系映射</li>\n<li>提供对象关系映射标签，支持对象关系组件维护</li>\n<li>提供xml标签，支持动态编写sql</li>\n</ul>\n<h1 id=\"开始Mybatis\"><a href=\"#开始Mybatis\" class=\"headerlink\" title=\"开始Mybatis\"></a>开始Mybatis</h1><ol>\n<li><p>在resources目录下创建<code>mybatis-config.xml</code>文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123456&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;com/lan5th/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>mappers</code>标签用于注册实现类的mapper.xml</strong></p>\n</li>\n<li><p>编写工具类<code>MybatisUtils</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MybatisUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取sqlSessionFactory对象</span></span><br><span class=\"line\">            String resource = <span class=\"string\">&quot;mybatis-config.xml&quot;</span>;</span><br><span class=\"line\">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">            sqlSessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SqlSession <span class=\"title\">getSqlSession</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sqlSessionFactory.openSession();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在调用sqlSessionFactory.openSession()时若添加boolean参数为true则可以设置事务自动提交</strong></p>\n</li>\n<li><p>编写实体类<code>User</code></p>\n</li>\n<li><p>编写接口<code>UserMapper</code>(代替Dao接口)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">getUserList</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写<code>UserMapper.xml</code>配置文件(代替DaoImpl实现类)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.lan5th.dao.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUserList&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.lan5th.pojo.User&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from `user`;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写测试类<code>UserMapperTest.java</code>(使用junit)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserMapperTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第一步，获取SqlSession对象</span></span><br><span class=\"line\">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//方法一：getMapper</span></span><br><span class=\"line\">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getUserList();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//方法二(已过时)：</span></span><br><span class=\"line\">        <span class=\"comment\">//List&lt;User&gt; userList = sqlSession.selectList(&quot;com.lan5th.dao.UserMapper.getUserList&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user : userList) &#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        sqlSession.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>无法找到Mapper.xml解决办法：在<code>pom.xml</code>中添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CRUD\"><a href=\"#CRUD\" class=\"headerlink\" title=\"CRUD\"></a>CRUD</h1><h2 id=\"namespace\"><a href=\"#namespace\" class=\"headerlink\" title=\"namespace\"></a>namespace</h2><p>namespace中的包名要和Dao/mapper中的包名一致</p>\n<ul>\n<li>id：对应的namespace中的方法名</li>\n<li>resultType：Sql语句执行的返回值</li>\n<li>parameterType：函数传入的参数类型(可以通过<code>#&#123;&#125;</code>直接拿到对象中的属性)</li>\n</ul>\n<h2 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h2><p>增加接口函数<code>UserMapper.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">getUserList</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">getUser</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">addUser</span><span class=\"params\">(User u)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">updateUser</span><span class=\"params\">(User u)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">deleteUser</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件<code>UserMapper.xml</code></p>\n<p><strong>引用参数时可选${}或#{}，但前者是基本的字符串拼接，无法防止sql注入，后者类似于预编译，可以防止大部分的sql注入，因此能使用#{}时尽量使用#{}来引用参数</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.lan5th.dao.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUserList&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.lan5th.pojo.User&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from mybatis.user;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUser&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.lan5th.pojo.User&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from mybatis.user where id = #&#123;id&#125;;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;addUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;com.lan5th.pojo.User&quot;</span>&gt;</span></span><br><span class=\"line\">        insert into mybatis.user values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;updateUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;com.lan5th.pojo.User&quot;</span>&gt;</span></span><br><span class=\"line\">        update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;deleteUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;int&quot;</span>&gt;</span></span><br><span class=\"line\">        delete from mybatis.user where id=#&#123;id&#125;;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试类<code>UserMapperTest.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lan5th.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lan5th.pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lan5th.utils.MybatisUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserMapperTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第一步，获取SqlSession对象</span></span><br><span class=\"line\">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//方法一：getMapper</span></span><br><span class=\"line\">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.getUserList();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//方法二(已过时)：</span></span><br><span class=\"line\">        <span class=\"comment\">//List&lt;User&gt; userList = sqlSession.selectList(&quot;com.lan5th.dao.UserMapper.getUserList&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user : userList) &#123;</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        sqlSession.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selectTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class=\"line\">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        User user = mapper.getUser(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\"></span><br><span class=\"line\">        sqlSession.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class=\"line\">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = mapper.addUser(<span class=\"keyword\">new</span> User(<span class=\"number\">4</span>, <span class=\"string\">&quot;User4&quot;</span>, <span class=\"string\">&quot;4444&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;插入成功&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        sqlSession.commit();</span><br><span class=\"line\">        sqlSession.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class=\"line\">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = mapper.updateUser(<span class=\"keyword\">new</span> User(<span class=\"number\">3</span>, <span class=\"string\">&quot;updatedUser3&quot;</span>, <span class=\"string\">&quot;3333&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;更新成功&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            sqlSession.commit();</span><br><span class=\"line\">        sqlSession.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class=\"line\">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = mapper.deleteUser(<span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;删除成功&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        sqlSession.commit();</span><br><span class=\"line\">        sqlSession.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h1><ul>\n<li><p>单个基本类型参数</p>\n<p>非对象，可以不写parameterType</p>\n<p>可以直接在sql中获取，如</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> mybatis.user <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"comment\">#&#123;id&#125;;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多个参数</p>\n<p>基本思想封装成对象或使用map</p>\n<ul>\n<li><p>对象传递参数，parameterType=”Object(根据情况写具体类)”</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> mybatis.user <span class=\"keyword\">values</span> (<span class=\"comment\">#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span></span><br></pre></td></tr></table></figure>\n\n<p>缺点：必须封装一个完整的对象，参数较多时不便</p>\n</li>\n<li><p>map传递参数，parameterType=”map”</p>\n<p>先给map添加键值对</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;userId&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;userName&quot;</span>,<span class=\"string\">&quot;MapUser&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = mapper.updateUserName(map);</span><br></pre></td></tr></table></figure>\n\n<p>添加sql语句</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;updateUserName&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;map&quot;</span>&gt;</span></span><br><span class=\"line\">    update mybatis.user set name=#&#123;userName&#125; where id=#&#123;userId&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>拓展：模糊查询</strong></p>\n<p>sql语句</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUserLike&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.lan5th.pojo.User&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是如上格式可能会产生sql注入的问题，可改为在传入参数时就封装完毕</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; userList = mapper.getUserLike(<span class=\"string\">&quot;%李%&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUserLike&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.lan5th.pojo.User&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from mybatis.user where name like #&#123;value&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><ul>\n<li>mybatis-config.xml</li>\n<li>Mybatis配置文件包含了深深影响Mybatis行为的属性信息</li>\n</ul>\n<p><strong>注意：configration标签内部元素顺序是已经指定的，如properties必须在最上层等，configration下所有的标签都需要写在固定的位置</strong></p>\n<h2 id=\"environments\"><a href=\"#environments\" class=\"headerlink\" title=\"environments\"></a>environments</h2><p>Mybatis可以配置多种环境(尽管最终能够同时运行的只有一个)，每个SqlSessionFactory实例只能选择一种环境，通过default选择需要使用的环境</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210402152641543.png\" alt=\"image-20210402152641543\"></p>\n<p>POOLED：连接池，提升sql执行效率(具体在MySql篇查看)</p>\n<h2 id=\"properties\"><a href=\"#properties\" class=\"headerlink\" title=\"properties\"></a>properties</h2><p>可以通过properties属性来实现引用配置文件</p>\n<p>这些属性都是可外部配置且可动态替换的，可以在典型的java属性文件中配置，亦可通过properties元素的子元素来传递</p>\n<p><code>db.properties</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">driver</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"string\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p>`mybatis-config.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--配置文件标签--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;com/lan5th/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>还可以在properties标签内配置属性</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210402154934191.png\" alt=\"image-20210402154934191\"></p>\n<p>如果同时在配置文件中的properties标签中和外部properties文件中同时配置了同一个属性，则会优先使用外部配置文件中该属性的值。</p>\n<h2 id=\"typeAliases\"><a href=\"#typeAliases\" class=\"headerlink\" title=\"typeAliases\"></a>typeAliases</h2><p>类型别名是为java类型设置一个短的名字，存在意义仅在于减少完全限定名的冗余</p>\n<p><code>mybatis-config.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--别名标签--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">typeAlias</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.lan5th.pojo.User&quot;</span> <span class=\"attr\">alias</span>=<span class=\"string\">&quot;User&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;com/lan5th/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以制定一个包名，Mybatis会在包名下自动搜索需要的Java Bean</p>\n<p>扫描实体类的包，他的默认别名就为这个类的类名，首字母小写</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.lan5th.pojo&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以通过给实体类添加注解来修改别名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Alias(&quot;User&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"settings\"><a href=\"#settings\" class=\"headerlink\" title=\"settings\"></a>settings</h2><p>关于mybatis的拓展功能设置</p>\n<p>一个完整配置的settings元素实例如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;cacheEnabled&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lazyLoadingEnabled&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;multipleResultSetsEnabled&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;useColumnLabel&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;useGeneratedKeys&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;autoMappingBehavior&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultExecutorType&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultStatementTimeout&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;25&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;defaultFetchSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;100&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;safeRowBoundsEnabled&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapUnderscoreToCamelCase&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;false&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;localCacheScope&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcTypeForNull&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;lazyLoadTriggerMethods&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>每个选项的具体含义请到mybatis官网查看</p>\n<h2 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h2><ul>\n<li>typeHandlers(类型处理器)</li>\n<li>objectFactory(对象工厂)</li>\n<li>plugins插件(仅列举出几个典型的)<ul>\n<li>mybatis-generator-core(可根据数据库自动生成增删改查代码)</li>\n<li>mybatis-plus(与mybatis互补的简化工具)</li>\n<li>通用mapper</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"mappers\"><a href=\"#mappers\" class=\"headerlink\" title=\"mappers\"></a>mappers</h2><p>MapperRegistry：注册我们的Mapper文件</p>\n<ul>\n<li><p>方式一</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;com/lan5th/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方式二：使用class文件绑定注册</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意点:接口和接口的Mapper配置文件必须同名，也必须在同一文件夹下</p>\n</li>\n<li><p>方式三：使用扫描包进行注入绑定，mybatis自动扫描包下的所有接</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.lan5th.dao&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意点与方式二相同</p>\n</li>\n</ul>\n<h1 id=\"生命周期和作用域\"><a href=\"#生命周期和作用域\" class=\"headerlink\" title=\"生命周期和作用域\"></a>生命周期和作用域</h1><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210402225136243.png\" alt=\"image-20210402225136243\"></p>\n<ul>\n<li><p><strong>SqlSessionFactoryBuildert</strong></p>\n<p>作为一个局部变量，一旦创建完SqlSessionFactory便不再需要</p>\n</li>\n<li><p><strong>SqlSessionFactory</strong></p>\n<p>可以理解为数据库连接池</p>\n<p>SqlSessionFactory一旦被创建就应该在运行期间一直存在，不能丢弃它或创建另一个实例，因此SqlSessionFactory的最佳作用域是应用作用域</p>\n<p>应使用单例模式或静态单例模式</p>\n</li>\n<li><p><strong>SqlSession</strong></p>\n<p>连接到连接池的一个请求</p>\n<p>SqlSession的实例不是线程安全的，因此不能被共享，最佳作用域是请求或方法作用域</p>\n<p>使用完成后需要立即关闭，否则资源会被占用</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210402231412062.png\" alt=\"image-20210402231412062\"></p>\n<p>其中每一个Mapper代表一个具体的业务</p>\n<h1 id=\"ResultMap\"><a href=\"#ResultMap\" class=\"headerlink\" title=\"ResultMap\"></a>ResultMap</h1><p>解决属性名和字段名不一致的问题</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;UserMap&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;User&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;idInDatabase&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;idInClass&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;nameInDatabase&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;nameInClass&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;passwordInDatabase&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;pwdInClass&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUserById&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;UserMap&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h1><h2 id=\"logImpl\"><a href=\"#logImpl\" class=\"headerlink\" title=\"logImpl\"></a>logImpl</h2><p>日志工厂</p>\n<p>选项：</p>\n<ul>\n<li>SLF4J</li>\n<li>LOG4J</li>\n<li>LOG4J2</li>\n<li>JDK_LOGGING</li>\n<li>COMMONS_LOGGING</li>\n<li>STDOUT_LOGGING</li>\n<li>NO_LOGGING</li>\n</ul>\n<p>在配置文件<code>mybatis-config.xml</code>中添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;logImpl&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"log4j\"><a href=\"#log4j\" class=\"headerlink\" title=\"log4j\"></a>log4j</h2><p>简单使用：需要导入log4j的maven包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>resources目录下新建<code>log4j.properties</code>配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class=\"line\"><span class=\"meta\">log4j.rootLogger</span>=<span class=\"string\">DEBUG,console,file</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#控制台输出的相关设置</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.console</span> = <span class=\"string\">org.apache.log4j.ConsoleAppender</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.console.Target</span> = <span class=\"string\">System.out</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.console.Threshold</span>=<span class=\"string\">DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.console.layout</span> = <span class=\"string\">org.apache.log4j.PatternLayout</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.console.layout.ConversionPattern</span>=<span class=\"string\">[%c]-%m%n</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#文件输出的相关设置</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file</span> = <span class=\"string\">org.apache.log4j.RollingFileAppender</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.File</span>=<span class=\"string\">./log/mybatis.log</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.MaxFileSize</span>=<span class=\"string\">10mb</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.Threshold</span>=<span class=\"string\">DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.layout</span>=<span class=\"string\">org.apache.log4j.PatternLayout</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.file.layout.ConversionPattern</span>=<span class=\"string\">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#日志输出级别</span></span><br><span class=\"line\"><span class=\"meta\">log4j.logger.org.mybatis</span>=<span class=\"string\">DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">log4j.logger.java.sql</span>=<span class=\"string\">DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">log4j.logger.java.sql.Statement</span>=<span class=\"string\">DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">log4j.logger.java.sql.ResultSet</span>=<span class=\"string\">DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">log4j.logger.java.sql.PreparedStatement</span>=<span class=\"string\">DEBUG</span></span><br></pre></td></tr></table></figure>\n\n<p>除了log4j的默认输出，还可以在方法中手动添加需要记录的日志，如在<code>UserDaoTest.java</code>测试类中添加测试方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testLog4j</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Logger.info(<span class=\"string\">&quot;info:testLog4j&quot;</span>);</span><br><span class=\"line\">    Logger.debug(<span class=\"string\">&quot;debug:testLog4j&quot;</span>);</span><br><span class=\"line\">    Logger.error(<span class=\"string\">&quot;error:testLog4j&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h1><h2 id=\"limit实现\"><a href=\"#limit实现\" class=\"headerlink\" title=\"limit实现\"></a>limit实现</h2><p>用sql语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> mybatis.user <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n\n<p>其实位置为0，页面大小为5</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUserByRowBounds&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;map&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;User&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试类不再与上方代码类似，不再复述</p>\n<h2 id=\"高级分页\"><a href=\"#高级分页\" class=\"headerlink\" title=\"高级分页\"></a>高级分页</h2><p>原因：mysql的limit会先将所有的limit2之前的数据加载到内存中，然后取需要的数据，造成内存浪费，这里子查询先取需要的id，加载到内存中的数据较少，由外层查询由in语句再进行查询；</p>\n<p>注意点：mysql5.7之前不能在子句中使用limit条件，因此需要把子查询b2中的结果再封装成b3这张表，再从外层取id集合</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getPagination&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.lan5th.blog.pojo.BlogDetail&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from lz_blog.blogs as b1 where b1.id in (select b3.id from (select b2.id from lz_blog.blogs as b2 where b2.deleted = 0 order by create_time desc limit #&#123;preNum&#125;, #&#123;postNum&#125;) as b3);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RowBounds实现\"><a href=\"#RowBounds实现\" class=\"headerlink\" title=\"RowBounds实现\"></a>RowBounds实现</h2><p>（近些年不再使用）</p>\n<p>将所有数据查出缓存再将需要的取出显示</p>\n<ol>\n<li><p>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">List&lt;User&gt; <span class=\"title\">getUserListByRowBounds</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Mapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUserByRowBounds&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;User&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from mybatis.user;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getUserByRowBoundsTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class=\"line\"></span><br><span class=\"line\">    RowBounds rowBounds = <span class=\"keyword\">new</span> RowBounds(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;User&gt; userList = sqlSession.selectList(<span class=\"string\">&quot;com.lan5th.dao.UserMapper.getUserByRowBounds&quot;</span>, <span class=\"keyword\">null</span>, rowBounds);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (User user : userList) &#123;</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sqlSession.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"PageHelper插件\"><a href=\"#PageHelper插件\" class=\"headerlink\" title=\"PageHelper插件\"></a>PageHelper插件</h2><p><a href=\"https://pagehelper.github.io/\">插件官网</a></p>\n<h1 id=\"通过注解开发\"><a href=\"#通过注解开发\" class=\"headerlink\" title=\"通过注解开发\"></a>通过注解开发</h1><p>仅适用于一些简短的sql语句，且不能使用结果集映射</p>\n<ul>\n<li><p>接口类<code>UserMapper.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@select(&quot;select * from user&quot;)</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">getUserByRowBounds</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件<code>mybatis-config.xml</code>(注意是接口类，而不是xml配置文件)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>本质：反射机制</p>\n<p>底层：动态代理</p>\n<h2 id=\"CRUD-1\"><a href=\"#CRUD-1\" class=\"headerlink\" title=\"CRUD\"></a>CRUD</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210410162230758.png\" alt=\"image-20210410162230758\"></p>\n<h2 id=\"关于-Param-注解\"><a href=\"#关于-Param-注解\" class=\"headerlink\" title=\"关于@Param()注解\"></a>关于@Param()注解</h2><ul>\n<li>基本类型的参数或String类型需要添加</li>\n<li>引用类型不需要添加</li>\n<li>如果只有一个基本类型可以忽略但按规范一般都需要添加</li>\n<li>在sql语句中引用的就是@Param()中设定好的属性名</li>\n</ul>\n<h1 id=\"Mybatis具体执行过程\"><a href=\"#Mybatis具体执行过程\" class=\"headerlink\" title=\"Mybatis具体执行过程\"></a>Mybatis具体执行过程</h1><ol>\n<li>Resources获取加载全局配置文件</li>\n<li>实例化SqlSessionFactoryBuilder构造器</li>\n<li>解析配置文件流XMLConfigBuilder</li>\n<li>Configration包含所有的配置信息</li>\n<li>SqlSessionFactory实例化</li>\n<li>transaction事务管理</li>\n<li>创建executer执行器</li>\n<li>创建sqlsession</li>\n<li>实现CRUD，失败则回滚到6事务管理</li>\n<li>查看是否执行成功，失败则回滚到6事务管理</li>\n<li>提交事务</li>\n<li>关闭</li>\n</ol>\n<h1 id=\"Lombok\"><a href=\"#Lombok\" class=\"headerlink\" title=\"Lombok\"></a>Lombok</h1><ul>\n<li><p>idea中安装插件</p>\n</li>\n<li><p>导入jar包(maven)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>可用注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span> and <span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"meta\">@FieldNameConstants</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span>, <span class=\"meta\">@RequiredArgsConstructor</span> and <span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Log</span>, <span class=\"meta\">@Log4j</span>, <span class=\"meta\">@Log4j2</span>, <span class=\"meta\">@Slf4j</span>, <span class=\"meta\">@XSlf4j</span>, <span class=\"meta\">@CommonsLog</span>, <span class=\"meta\">@JBossLog</span>, <span class=\"meta\">@Flogger</span>, <span class=\"meta\">@CustomLog</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"meta\">@SuperBuilder</span></span><br><span class=\"line\"><span class=\"meta\">@Singular</span></span><br><span class=\"line\"><span class=\"meta\">@Delegate</span></span><br><span class=\"line\"><span class=\"meta\">@Value</span></span><br><span class=\"line\"><span class=\"meta\">@Accessors</span></span><br><span class=\"line\"><span class=\"meta\">@Wither</span></span><br><span class=\"line\"><span class=\"meta\">@With</span></span><br><span class=\"line\"><span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\"><span class=\"meta\">@val</span></span><br><span class=\"line\"><span class=\"meta\">@var</span></span><br><span class=\"line\">experimental <span class=\"meta\">@var</span></span><br><span class=\"line\"><span class=\"meta\">@UtilityClass</span></span><br><span class=\"line\"><span class=\"meta\">@ExtensionMethod</span> (Experimental, activate manually in plugin settings)</span><br></pre></td></tr></table></figure>\n\n<p>常用注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span>:包含无参构造、get、set、toString、hashCode、equals</span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"多对一\"><a href=\"#多对一\" class=\"headerlink\" title=\"多对一\"></a>多对一</h1><p>一个老师有多个学生</p>\n<ul>\n<li><p>对于学生而言，<strong>关联</strong>，多个学生关联一个老师【多对一】</p>\n</li>\n<li><p>对于老师而言，<strong>集合</strong>，一个老师有很多学生【一对多】</p>\n</li>\n<li><p>创建数据表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`teacher`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">INT</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`name`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">INNODB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> teacher(<span class=\"string\">`id`</span>, <span class=\"string\">`name`</span>) <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"string\">&#x27;秦老师&#x27;</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`student`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">INT</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`name`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">30</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`tid`</span> <span class=\"built_in\">INT</span>(<span class=\"number\">10</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`fktid`</span> (<span class=\"string\">`tid`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">CONSTRAINT</span> <span class=\"string\">`fktid`</span> <span class=\"keyword\">FOREIGN</span> <span class=\"keyword\">KEY</span> (<span class=\"string\">`tid`</span>) <span class=\"keyword\">REFERENCES</span> <span class=\"string\">`teacher`</span> (<span class=\"string\">`id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">INNODB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">`student`</span> (<span class=\"string\">`id`</span>, <span class=\"string\">`name`</span>, <span class=\"string\">`tid`</span>) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;小明&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">`student`</span> (<span class=\"string\">`id`</span>, <span class=\"string\">`name`</span>, <span class=\"string\">`tid`</span>) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;小红&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">`student`</span> (<span class=\"string\">`id`</span>, <span class=\"string\">`name`</span>, <span class=\"string\">`tid`</span>) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;小张&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">`student`</span> (<span class=\"string\">`id`</span>, <span class=\"string\">`name`</span>, <span class=\"string\">`tid`</span>) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;小李&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>); </span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">`student`</span> (<span class=\"string\">`id`</span>, <span class=\"string\">`name`</span>, <span class=\"string\">`tid`</span>) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;小王&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象接口</p>\n<ul>\n<li><code>StudentMapper</code></li>\n</ul>\n</li>\n<li><p><code>TeacherMapper</code></p>\n</li>\n<li><p>xml配置文件</p>\n<ul>\n<li><code>StudentMapper.xml</code></li>\n</ul>\n</li>\n<li><p><code>TeacherMapper.xml</code></p>\n</li>\n</ul>\n<h2 id=\"多对一-1\"><a href=\"#多对一-1\" class=\"headerlink\" title=\"多对一\"></a>多对一</h2><p>实体类</p>\n<ul>\n<li><p><code>Student.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Teacher teacher;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Teacher.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>按照查询嵌套</strong></p>\n<p>类似子查询</p>\n<p><code>StudentMapper.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--查询所有学生信息，根据查询出的tid查询对应的老师--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;StudentTeacher&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Student&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;name&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--复杂的属性需要单独处理对象 关联：association 集合：collection--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;tid&quot;</span> <span class=\"attr\">javaType</span>=<span class=\"string\">&quot;Teacher&quot;</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getStudent&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from student where id = #&#123;id&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--这里的参数名可以任意给定，但一般与上方association中的参数名相同--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getTeacher&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;Teacher&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from teacher where id = #&#123;tid&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>按照结果嵌套</strong></p>\n<p>类似联表查询</p>\n<p><code>StudentMapper.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;StudentTeacher2&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Student&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sid&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sname&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;teacher&quot;</span> <span class=\"attr\">javaType</span>=<span class=\"string\">&quot;Teacher&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;tname&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getStudent2&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class=\"line\">    select s.id sid,s.name sname,t.name tname </span><br><span class=\"line\">    from student s,teacher t </span><br><span class=\"line\">    where s.tid = t.id;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一对多\"><a href=\"#一对多\" class=\"headerlink\" title=\"一对多\"></a>一对多</h2><p>实体类</p>\n<ul>\n<li><p><code>Student.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tid;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Teacher.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Student&gt; students;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>按照查询嵌套处理</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;TeacherStudent&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Teacher&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--javaType：指定的属性类型 而集合中的泛型信息用ofType获取--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;students&quot;</span> <span class=\"attr\">javaType</span>=<span class=\"string\">&quot;ArrayList&quot;</span> <span class=\"attr\">ofType</span>=<span class=\"string\">&quot;Student&quot;</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;getStudent&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getTeacher&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from teacher where id = #&#123;tid&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getStudent&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;Student&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from student where tid = #&#123;id&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>按照结果嵌套处理</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;TeacherStudent2&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Teacher&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;tid&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;tname&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;students&quot;</span> <span class=\"attr\">ofType</span>=<span class=\"string\">&quot;Student&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sid&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sname&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;tid&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;tid&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getTeacher2&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class=\"line\">    select s.id sid,s.name sname,t.name tname,t.id tid</span><br><span class=\"line\">    from student s,teacher t</span><br><span class=\"line\">    where s.tid = t.id and t.id = #&#123;tid&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意点：</strong></p>\n<ul>\n<li>保证SQL可读性，尽量保证通俗易懂</li>\n<li>注意一对多和多对一中属性名和字段问题</li>\n<li>问题不容易排查时使用日志</li>\n</ul>\n<h1 id=\"动态SQL\"><a href=\"#动态SQL\" class=\"headerlink\" title=\"动态SQL\"></a>动态SQL</h1><ul>\n<li><p>IF</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;queryBlogIF&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;map&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;blog&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from mybatis.blog where 1=1</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;title != null&quot;</span>&gt;</span></span><br><span class=\"line\">        and title = #&#123;title&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;author != null&quot;</span>&gt;</span></span><br><span class=\"line\">        and author = #&#123;author&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>choose(when,otherwise)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;queryBlogWhere&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;map&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;blog&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from mybatis.blog</span><br><span class=\"line\">    <span class=\"comment\">&lt;!--类似于java中的switch语句--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">choose</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;title != null&quot;</span>&gt;</span></span><br><span class=\"line\">                title = #&#123;title&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;author != null&quot;</span>&gt;</span></span><br><span class=\"line\">                author = #&#123;author&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">otherwise</span>&gt;</span></span><br><span class=\"line\">                view - #&#123;view&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">otherwise</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">choose</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>trim(where,set)</p>\n<p>只有当后面条件至少有一个满足时才会插入where或set</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;queryBlogTrim&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;map&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;blog&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from mybatis.blog</span><br><span class=\"line\">    <span class=\"comment\">&lt;!--where语句当选择的第一项前有and/or时会自动去除--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;title != null&quot;</span>&gt;</span></span><br><span class=\"line\">            title = #&#123;title&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;author != null&quot;</span>&gt;</span></span><br><span class=\"line\">            and author = #&#123;author&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;updateBlog&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;map&quot;</span>&gt;</span></span><br><span class=\"line\">    update mybatis.blog</span><br><span class=\"line\">    <span class=\"comment\">&lt;!--set语句当选择的最后一项后有&#x27;,&#x27;时会自动去除--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;title != null&quot;</span>&gt;</span></span><br><span class=\"line\">            title = #&#123;title&#125;,</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;author != null&quot;</span>&gt;</span></span><br><span class=\"line\">            and author = #&#123;author&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>还可以使用trim自定义选择</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">&quot;WHERE&quot;</span> <span class=\"attr\">prefixOverrides</span>=<span class=\"string\">&quot;AND&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;state != null&quot;</span>&gt;</span></span><br><span class=\"line\">      state = #&#123;state&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span> </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;title != null&quot;</span>&gt;</span></span><br><span class=\"line\">      AND title like #&#123;title&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class=\"line\">      AND author_name like #&#123;author.name&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">&quot;SET&quot;</span> <span class=\"attr\">suffixOverrides</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>sql片段</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--使用sql标签抽取公共部分</span></span><br><span class=\"line\"><span class=\"comment\">最好根据单表来抽取sql</span></span><br><span class=\"line\"><span class=\"comment\">不要包含where标签</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sql</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;title != null&quot;</span>&gt;</span></span><br><span class=\"line\">        title = #&#123;title&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;author !=null&quot;</span>&gt;</span></span><br><span class=\"line\">        author = #&#123;author&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;queryBlogIF&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;map&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;blog&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from mybatis.blog</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">&quot;if=title-author&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Foreach</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--先传递一个map，其中包含键值对ids，内容为数组--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;queryBlogForeach&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;map&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;blog&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from mybatis.blog</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;ids&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">open</span>=<span class=\"string\">&quot;and (&quot;</span> <span class=\"attr\">close</span>=<span class=\"string\">&quot;)&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;or&quot;</span>&gt;</span></span><br><span class=\"line\">        id = #&#123;id&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<blockquote>\n<p>动态sql就是在拼接sql语句，我们只需保证sql的正确性，按照sql的格式去排列组合即可；一般先在对应的Dmms中写出完整的sql，在修改动态sql实现通用</p>\n</blockquote>\n<h1 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h1><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210414204042584.png\" alt=\"image-20210414204042584\"></p>\n<p>Mybatis缓存</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210414205433478.png\" alt=\"image-20210414205433478\"></p>\n<h2 id=\"一级缓存\"><a href=\"#一级缓存\" class=\"headerlink\" title=\"一级缓存\"></a>一级缓存</h2><p>一级缓存也叫本地缓存，在mybatis中是默认开启的，只在一次SqlSession中有效</p>\n<ul>\n<li>与数据库同一次会话期间查询到的数据会放在本地缓存中</li>\n<li>之后如果需要获取相同的数据，直接从缓存中拿到，不再查询数据库</li>\n</ul>\n<p>缓存失效情况：</p>\n<ul>\n<li>查询不同的数据</li>\n<li>经过增删改操作之后，可能会改变原来的数据，缓存会刷新<strong>（如对data1进行修改，虽然没有改变data2数据，但data2数据的缓存也会被清空！）</strong></li>\n<li>查询不同的Mapper.xml</li>\n<li>手动清理缓存<code>sqlSession.clearCache()</code></li>\n</ul>\n<h2 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h2><p>二级缓存也叫全局缓存，基于namespace级别的缓存，一个名称空间对应一个二级缓存</p>\n<ul>\n<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中</li>\n<li>新的会话查询信息可以从二级缓存中获取内容</li>\n<li>不同的mapper查处的数据会放在自己对应的缓存中</li>\n</ul>\n<p>开启步骤：</p>\n<ol>\n<li><p>开启全局缓存(尽管是默认开启的)</p>\n<p><code>mybatis-config.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;cacheEnabled&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在某个Mapper中配置缓存</p>\n<p><code>UserMapper.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--不使用参数可以直接血&lt;cache/&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cache</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">eviction</span>=<span class=\"string\">&quot;FIFO&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">flushInterval</span>=<span class=\"string\">&quot;60000&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">size</span>=<span class=\"string\">&quot;512&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">readOnly</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用FIFO算法清除缓存，每60s刷新，最多可以存储结果或对象的512个引用，且存储的对象为只读</p>\n</li>\n<li><p>测试问题：<strong>使用时需要将实体类序列化，否则会报错！</strong></p>\n</li>\n</ol>\n<p>小结：</p>\n<ul>\n<li>开启二级缓存后，在同一Mapper下有效</li>\n<li>所有的数据都先放在一级缓存中，只有当会话提交或者关闭的时候才会提交到二级缓存中</li>\n</ul>\n<h2 id=\"mybatis-ehcache\"><a href=\"#mybatis-ehcache\" class=\"headerlink\" title=\"mybatis-ehcache\"></a>mybatis-ehcache</h2><p><code>pom.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.caches<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-ehcache<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>新建ehcache配置文件<code>ehcache.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ehcache</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:noNamespaceSchemaLocation</span>=<span class=\"string\">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">updateCheck</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span></span><br><span class=\"line\"><span class=\"comment\">       user.home – 用户主目录</span></span><br><span class=\"line\"><span class=\"comment\">       user.dir  – 用户当前工作目录</span></span><br><span class=\"line\"><span class=\"comment\">       java.io.tmpdir – 默认临时文件路径</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">diskStore</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;java.io.tmpdir/Tmp_EhCache&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">      name:缓存名称。</span></span><br><span class=\"line\"><span class=\"comment\">      maxElementsInMemory:缓存最大数目</span></span><br><span class=\"line\"><span class=\"comment\">      maxElementsOnDisk：硬盘最大缓存个数。</span></span><br><span class=\"line\"><span class=\"comment\">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span></span><br><span class=\"line\"><span class=\"comment\">      overflowToDisk:是否保存到磁盘，当系统当机时</span></span><br><span class=\"line\"><span class=\"comment\">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span></span><br><span class=\"line\"><span class=\"comment\">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span></span><br><span class=\"line\"><span class=\"comment\">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span></span><br><span class=\"line\"><span class=\"comment\">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span></span><br><span class=\"line\"><span class=\"comment\">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span></span><br><span class=\"line\"><span class=\"comment\">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span></span><br><span class=\"line\"><span class=\"comment\">      clearOnFlush：内存数量最大时是否清除。</span></span><br><span class=\"line\"><span class=\"comment\">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span></span><br><span class=\"line\"><span class=\"comment\">      FIFO，first in first out，这个是大家最熟的，先进先出。</span></span><br><span class=\"line\"><span class=\"comment\">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span></span><br><span class=\"line\"><span class=\"comment\">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span></span><br><span class=\"line\"><span class=\"comment\">   --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">defaultCache</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">eternal</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">maxElementsInMemory</span>=<span class=\"string\">&quot;10000&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">overflowToDisk</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">diskPersistent</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">timeToIdleSeconds</span>=<span class=\"string\">&quot;1800&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">timeToLiveSeconds</span>=<span class=\"string\">&quot;259200&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">memoryStoreEvictionPolicy</span>=<span class=\"string\">&quot;LRU&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cache</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">name</span>=<span class=\"string\">&quot;cloud_user&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">eternal</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">maxElementsInMemory</span>=<span class=\"string\">&quot;5000&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">overflowToDisk</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">diskPersistent</span>=<span class=\"string\">&quot;false&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">timeToIdleSeconds</span>=<span class=\"string\">&quot;1800&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">timeToLiveSeconds</span>=<span class=\"string\">&quot;1800&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">memoryStoreEvictionPolicy</span>=<span class=\"string\">&quot;LRU&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>UserMapper.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cache</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n","categories":["JavaEE"]},{"title":"Spring5","url":"/2021/05/04/JavaEE/Spring5/","content":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p>一些框架整合：</p>\n<ul>\n<li>SSH：Struct2+Spring+Hibernate</li>\n<li>SSM：SpringMvc+Sping+Mybatis</li>\n</ul>\n<p><strong>Spring特点</strong>：</p>\n<ul>\n<li>轻量级、非入侵式、开源免费框架</li>\n<li>控制反转（IOC）、面向切面编程（AOP）</li>\n<li>支持事务处理，对框架整合支持</li>\n</ul>\n<h2 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210509190514905.png\" alt=\"image-20210509190514905\"></p>\n<h2 id=\"IOC理论\"><a href=\"#IOC理论\" class=\"headerlink\" title=\"IOC理论\"></a>IOC理论</h2><p>此时有一个接口UserDao和一些实现类，用户可能会调用不同的实现类</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210504141738119.png\" alt=\"image-20210504141738119\"></p>\n<p>如果按照一般的设计理念来说，会在UserServiceImpl中指定实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> UserDao userDao = <span class=\"keyword\">new</span> UserDapMysqlImpl;</span><br></pre></td></tr></table></figure>\n\n<p>如果这样做，每次用户变更需求需要在业务层中更改代码，十分麻烦，此时可以按照IOC思想，使用DI(依赖注入)的实现方式，将控制权转移到用户手中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserDao</span><span class=\"params\">(UserDao userDao)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.userDao = userDao;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时用户在指定具体的实现方法时只需要传入特定的实现类，即可调用不同实现类中的方法，而程序员不需要再更改业务层中的代码。</p>\n<p><code>MyTest.java</code>部分代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">UserSercive userService = <span class=\"keyword\">new</span> UserServiceImpl;</span><br><span class=\"line\">userService.setUserDao(<span class=\"keyword\">new</span> UserDaoSqlserverImpl);</span><br><span class=\"line\">userService.getUser();</span><br></pre></td></tr></table></figure>\n\n<p><strong>本质区别</strong></p>\n<p>之前程序控制权在业务层手中，IOC中程序控制权在用户手中</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210504142807255.png\" alt=\"image-20210504142807255\"></p>\n<p>解耦的过程</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210504142935159.png\" alt=\"image-20210504142935159\"></p>\n<p><strong>IOC本质</strong></p>\n<p>控制反转IoC是一种设计思想，DI（依赖注入）是实现IoC的一种方法，没有IoC的程序中，我们使用面向对象编程，对象的创建与对象之间的依赖完全硬编码在程序中，对象的创建程序由程序自己控制，控制反转后将对象的创建转移给第三方。</p>\n<p>控制反转是一种通过描述（XML或注解）并通过第三方生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，实现方式为依赖注入。</p>\n<h1 id=\"HelloSpring\"><a href=\"#HelloSpring\" class=\"headerlink\" title=\"HelloSpring\"></a>HelloSpring</h1><ul>\n<li><p>导入maven配置(webmvc整合了多个依赖，避免了多次导入的重复)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.12.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实体类<code>Hello.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStr</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;str=&#x27;&quot;</span> + str + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件<code>beans.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myHello&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.pojo.Hello&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;str&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Hello world!&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试类<code>HelloTest.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">&quot;beans.xml&quot;</span>);</span><br><span class=\"line\">        Hello myHello = (Hello) context.getBean(<span class=\"string\">&quot;myHello&quot;</span>);</span><br><span class=\"line\">        System.out.println(myHello);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h1 id=\"IOC创建对象的方式\"><a href=\"#IOC创建对象的方式\" class=\"headerlink\" title=\"IOC创建对象的方式\"></a>IOC创建对象的方式</h1><ol>\n<li><p>默认无参构造创建对象</p>\n<p>同上<code>&lt;property name=&quot;str&quot; value=&quot;Hello world!&quot;/&gt;</code>用法</p>\n</li>\n<li><p>如果使用有参构造创建对象</p>\n<ul>\n<li><p>下标赋值</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;bean id=<span class=\"string\">&quot;myHello&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;com.lan5th.pojo.Hello&quot;</span>&gt;</span><br><span class=\"line\">    &lt;constructor-arg index=<span class=\"string\">&quot;0&quot;</span> value=<span class=\"string\">&quot;Hello world!&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类型赋值，不推荐使用(多个同类型值难以处理)</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;bean id=<span class=\"string\">&quot;myHello&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;com.lan5th.pojo.Hello&quot;</span>&gt;</span><br><span class=\"line\">    &lt;constructor-arg type=<span class=\"string\">&quot;java.lang.String&quot;</span> value=<span class=\"string\">&quot;Hello world!&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数名赋值</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;bean id=<span class=\"string\">&quot;myHello&quot;</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;com.lan5th.pojo.Hello&quot;</span>&gt;</span><br><span class=\"line\">    &lt;constructor-arg name=<span class=\"string\">&quot;str&quot;</span> value=<span class=\"string\">&quot;Hello world!&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n<p>在配置文件加载时，容器中所有注册的对象都已经被实例化了一次</p>\n<h1 id=\"Spring配置\"><a href=\"#Spring配置\" class=\"headerlink\" title=\"Spring配置\"></a>Spring配置</h1><h2 id=\"Alias\"><a href=\"#Alias\" class=\"headerlink\" title=\"Alias\"></a>Alias</h2><p>配置别名之后新旧两个名字都可以正常获取到对象</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">alias</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">alias</span>=<span class=\"string\">&quot;userNew&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但一般取别名时不适用alias，而是直接在bean里面配置name属性</p>\n<h2 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"Bean\"></a>Bean</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\tid:bean的唯一标识符，相当于对象名</span></span><br><span class=\"line\"><span class=\"comment\">\tclass:bean对象所对应的全限定名，包名+类型</span></span><br><span class=\"line\"><span class=\"comment\">\tname:别名，且可以同时配置多个别名，&#x27; ,;&#x27;字符都可以分割</span></span><br><span class=\"line\"><span class=\"comment\">\t--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myHello&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.pojo.Hello&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hello hello1,hello2;hello3&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;str&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Hello world!&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Import\"><a href=\"#Import\" class=\"headerlink\" title=\"Import\"></a>Import</h2><p>impot一般用于团队开发使用，可以将多个配置文件合并导入一个总的配置文件</p>\n<p>假设项目中有三人进行开发，这三个人负责不同类的开发，不同的类注册在不同的beans中，我们可以利用import将所有的beans.xml合并为一</p>\n<p><code>application.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;beans1.xml&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;beans2.xml&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;beans3.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"DI依赖注入\"><a href=\"#DI依赖注入\" class=\"headerlink\" title=\"DI依赖注入\"></a>DI依赖注入</h1><ul>\n<li><p>构造器注入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myHello&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.pojo.Hello&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Hello world!&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>与之前相同，不再复述</p>\n</li>\n<li><p>Set方式注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数据结构</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String[] books;</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;String&gt; hobbys;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String,String&gt; card;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Set&lt;String&gt; games;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String wife;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Properties info;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myHello&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.pojo.Hello&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;张三&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;address&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;address&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;books&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>红楼梦<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>西游记<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>水浒传<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>三国演义<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hobbys&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>听歌<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>吃饭<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>看电影<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;身份证&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;学号&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1234&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;games&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>LOL<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>COC<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>BOB<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>MO<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;wife&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">null</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;info&quot;</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;driver&quot;</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;url&quot;</span>&gt;</span>xxx<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span>lan5th<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拓展方式注入</p>\n<p>p命名空间对应set方法、c命名空间对应construct方法(注意使用前需要提前添加依赖)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:p</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;helloBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.pojo.Hello&quot;</span> <span class=\"attr\">p:str</span>=<span class=\"string\">&quot;hello&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:c</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;helloBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.pojo.Hello&quot;</span> <span class=\"attr\">c:_0</span>=<span class=\"string\">&quot;hello1&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"Bean作用域\"><a href=\"#Bean作用域\" class=\"headerlink\" title=\"Bean作用域\"></a>Bean作用域</h1><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210509194146854.png\" alt=\"image-20210509194146854\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;helloBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.pojo.Hello&quot;</span> <span class=\"attr\">p:str</span>=<span class=\"string\">&quot;hello&quot;</span> <span class=\"attr\">scope</span>=<span class=\"string\">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>单例模式(Spring默认)</li>\n<li>原型模式：每次从容器中get时都会产生一个新对象</li>\n<li>其余的request、session、application一般在web开发中用到</li>\n</ol>\n<h1 id=\"Bean自动装配\"><a href=\"#Bean自动装配\" class=\"headerlink\" title=\"Bean自动装配\"></a>Bean自动装配</h1><ul>\n<li>自动装配是Spring满足bean依赖的一种方式</li>\n<li>Spring会在上下文中自动寻找，并自动给bean装配属性</li>\n</ul>\n<p>Spring三种装配方法</p>\n<ol>\n<li>xml显式配置</li>\n<li>java中显式配置</li>\n<li>隐式自动装配bean</li>\n</ol>\n<h2 id=\"自动转配类型\"><a href=\"#自动转配类型\" class=\"headerlink\" title=\"自动转配类型\"></a>自动转配类型</h2><p>分别根据set方法中提供的变量名和变量类型自动在上下文中寻找对应实体进行装配</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dog dog;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDog</span><span class=\"params\">(Dog dog)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dog = dog;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>ByName</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myHello&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.pojo.Hello&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;byName&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;str&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Hello world!&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.pojo.Dog&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ByType</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myHello&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.pojo.Hello&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;byType&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;str&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Hello world!&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.pojo.Dog&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>byName时需要保证所有beanid唯一，而byType需要保证所有bean的class唯一</p>\n<h2 id=\"使用注解自动装配\"><a href=\"#使用注解自动装配\" class=\"headerlink\" title=\"使用注解自动装配\"></a>使用注解自动装配</h2><p>jdk1.5，Spring2.5之后就开始支持注解开发了</p>\n<p>使用注解前：</p>\n<ul>\n<li>导入约束<code>xmlns:context</code>约束</li>\n<li>配置注解支持<code>&lt;context:annotation-config/&gt;</code></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--开启注解支持--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:annotation-config</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>@Autowired</strong></p>\n<ul>\n<li>可以在属性或set方法上使用</li>\n<li>使用Autowired后我们可以不用编写set方法了，前提是这个自动装配的属性在IOC(Spring)容器中存在，且符合byName规则</li>\n</ul>\n<p>拓展：</p>\n<ul>\n<li><p><code>@Nullable</code>注解表示该字段可以为null</p>\n</li>\n<li><p><code>@Autowired</code>注解中有一个required参数，表示该对象是否为必需，与<code>@Nullable</code>相似</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Autowired &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">required</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">true</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired(required = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dog dog;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>如果<code>Autowired</code>自动装配的环境比较复杂，自动装配无法通过一个注解完成时，可以增加<code>@Qualifier(value = &quot;&quot;)</code>去配合<code>@Autowired</code>的使用，指定一个唯一的bean对象注入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myHello&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.pojo.Hello&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;str&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Hello world!&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.pojo.Dog&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dog1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.pojo.Dog&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier(value = &quot;dog1&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dog dog;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>@Resource</code>和<code>@autoWired</code>类似，但是是java原生提供的注解</p>\n<ul>\n<li>都是用来自动装配的，都可以放在属性字段或set方法上</li>\n<li><code>@Autowired</code>默认通过byType方式，有多个重复Type再通过byName方式查找</li>\n<li><code>@Resource</code>默认通过byName方式，有多个重复id再通过byType方式查找</li>\n</ul>\n<h1 id=\"使用注解开发\"><a href=\"#使用注解开发\" class=\"headerlink\" title=\"使用注解开发\"></a>使用注解开发</h1><p><strong>xml功能更齐全，适用于任何场合，维护简单方便，而注解适用于简单的类，且只能作用于本类上</strong></p>\n<p>一般采用：</p>\n<ul>\n<li>xml管理bean</li>\n<li>注解进行属性注入</li>\n</ul>\n<p>Spring4后要使用注解开发必须导入aop包，并导入<code>&lt;context:annotation-config/&gt;</code>约束</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--扫描特定包，使其中的注解生效--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">&quot;com.lan5th.pojo&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性注入\"><a href=\"#属性注入\" class=\"headerlink\" title=\"属性注入\"></a>属性注入</h2><p>可以在属性上加，也可以在set方法上加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//相当于&lt;property name=&quot;name&quot; value=&quot;lan5th&quot;/&gt;</span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;lan5th&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStr</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注解衍生\"><a href=\"#注解衍生\" class=\"headerlink\" title=\"注解衍生\"></a>注解衍生</h2><p>基于MVC三层架构</p>\n<ul>\n<li>dao层：<code>@Repository</code></li>\n<li>service层：<code>@Service</code></li>\n<li>controller层：<code>@Controller</code></li>\n</ul>\n<p>这三个注解跟<code>@Component</code>功能类似，将某个类注册到Spring中，装配Bean，但区分于不同的开发模块</p>\n<h2 id=\"自动装配配置\"><a href=\"#自动装配配置\" class=\"headerlink\" title=\"自动装配配置\"></a>自动装配配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Autowired：自动通过类型、名字装配</span><br><span class=\"line\">@Nullable：说明字段可以为null</span><br><span class=\"line\">@Resource：自动通过名字，类型装配</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//prototype：原型模式</span></span><br><span class=\"line\"><span class=\"comment\">//singleton：单例模式，还可以通过@Lazy注解指定懒汉式加载</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Scope(&quot;prototype&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用Java的方式配置Spring\"><a href=\"#使用Java的方式配置Spring\" class=\"headerlink\" title=\"使用Java的方式配置Spring\"></a>使用Java的方式配置Spring</h1><p>现在完全不使用Spring的xml配置</p>\n<p>JavaConfig是Spring的一个字项目，在Spring4之后成为了核心功能</p>\n<p>配置类<code>Lan5thConfig.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span><span class=\"comment\">//配置类注解</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&quot;com.lan5th.pojo&quot;)</span><span class=\"comment\">//扫描指定包</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lan5thConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Hello <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Hello.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;lan5th&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类<code>ConfigTest.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//注意：之前使用的是ClassPathXmlApplicationContext通过配置文件获得上下文，现在使用的是注解获取上下文</span></span><br><span class=\"line\">        ApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(Lan5thConfig.class);</span><br><span class=\"line\">        Hello hello = (Hello) context.getBean(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        System.out.println(hello);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>这种纯java的配置方式在SpringBoot中随处可见</strong></p>\n<h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><p>作为SpringAOP的底层</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210523144021826.png\" alt=\"image-20210523144021826\"></p>\n<h2 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h2><p>角色分析：</p>\n<ul>\n<li><p>抽象角色：一般使用接口或抽象类实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Rent</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>真实角色：被代理的角色</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Host</span> <span class=\"keyword\">implements</span> <span class=\"title\">Rent</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;房东出租房子&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>代理角色：代理真实角色，一般代理后会做一些附属操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">Rent</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Host host;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Proxy</span><span class=\"params\">(Host host)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.host = host;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rent</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        seeHouse();</span><br><span class=\"line\">        host.Rent();</span><br><span class=\"line\">        hetong();</span><br><span class=\"line\">        fare();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">seeHouse</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;中介带领看房&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hetong</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;签租借合同&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fare</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;收中介费&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户：访问代理对象的角色</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Host host = <span class=\"keyword\">new</span> Host();</span><br><span class=\"line\">        Proxy proxy = <span class=\"keyword\">new</span> Proxy(host);</span><br><span class=\"line\">        proxy.rent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>代理模式优点：</p>\n<ul>\n<li>使真实角色的操作更加纯粹，不再关心一些公共业务</li>\n<li>公共业务交给代理角色，实现业务分工</li>\n<li>公共业务发生扩展的时候方便集中管理</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>一个真实角色对应一个代理角色，代码量翻倍，开发效率降低</li>\n</ul>\n<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><p>角色和静态代理一样，区别是动态代理类使动态生成的，不是直接写好的</p>\n<ul>\n<li>基于接口–jdk动态代理【此处使用】</li>\n<li>基于类–cglib</li>\n<li>java字节码实现–JAVAssist</li>\n</ul>\n<p>使用到两个类：</p>\n<ul>\n<li><p><code>Proxy</code>：动态生成代理对象</p>\n<p><code>Proxy.newProxyInstance()</code>传入三个参数：</p>\n<ul>\n<li>ClassLoader：InvocationHandler实现类位置</li>\n<li>Interface：需要实现的接口</li>\n<li>InvocationHandler：InvocationHandler类对象，这里直接指定this</li>\n</ul>\n</li>\n<li><p><code>InvocationHandler</code>：调用处理程序并返回结果</p>\n<p>只有一个函数<code>invoke()</code>，得到代理对象后执行具体方法时自动运行，用过<code>method.invoke()</code>指定代理的类和参数</p>\n</li>\n</ul>\n<p><code>ProxyInvocationHandler.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyInvocationHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//被代理的接口，这里适用于所有类，具体实现时可以指定一个具体类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTarget</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//动态生成代理类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(<span class=\"keyword\">this</span>.getClass().getClassLoader(),</span><br><span class=\"line\">                target.getClass().getInterfaces(), <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//处理代理示例并返回结果</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里可以在代理的具体函数前后添加其他操作，如下面的log()函数</span></span><br><span class=\"line\">        log(method.getName());</span><br><span class=\"line\">        Object result = method.invoke(target, args);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;执行了&quot;</span>+msg+<span class=\"string\">&quot;方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ProxyTest.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//真实类</span></span><br><span class=\"line\">        Dog dog = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">        ProxyInvocationHandler pih = <span class=\"keyword\">new</span> ProxyInvocationHandler();</span><br><span class=\"line\">        <span class=\"comment\">//设置代理对象</span></span><br><span class=\"line\">        pih.setTarget(dog);</span><br><span class=\"line\">        <span class=\"comment\">//这里强转为真实类的接口，而不是真实类</span></span><br><span class=\"line\">        Animal dog01 = (Animal) pih.getProxy();</span><br><span class=\"line\">        dog01.shout();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210524145043627.png\" alt=\"image-20210524145043627\"></p>\n<p>优点：</p>\n<ul>\n<li>包括静态代理的所有优点</li>\n<li>一个动态代理代理的是一个接口，一般对应一类业务</li>\n<li>一个动态代理可以代理多个类，只需要这些类实现同一个接口，减少了静态代理的缺点</li>\n</ul>\n<h1 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h1><p>只有IOC容器中的组件才能获得AOP功能，在获取实例时必须从容器中获取</p>\n<p>面向切面编程，是OOP(面向对象)的延续，思想和动态代理模式类似，降低耦合性，提高可重用性和开发效率</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210524140941713.png\" alt=\"image-20210524140941713\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210524141123942.png\" alt=\"image-20210524141123942\"></p>\n<p>预先导包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>方式一：使用Spring自带接口</p>\n</blockquote>\n<p>接口<code>Animal.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现类<code>Dog.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;wo wo!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行前输出<code>LogBefore.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogBefore</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodBeforeAdvice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(Method method, Object[] args, Object target)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(target.getClass().getName()+<span class=\"string\">&quot;类正在执行&quot;</span>+method.getName()+<span class=\"string\">&quot;方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行后输出<code>LogAfter.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogAfter</span> <span class=\"keyword\">implements</span> <span class=\"title\">AfterReturningAdvice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterReturning</span><span class=\"params\">(Object returnValue, Method method, Object[] args, Object target)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(method.getName()+<span class=\"string\">&quot;方法执行完毕，返回结果为&quot;</span>+returnValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置beans<code>aop.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--注册bean--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dog&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.pojo.Dog&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;logBefore&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.service.LogBefore&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;logAfter&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.service.LogAfter&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--配置aop，需要先导入aop约束--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--切入点，expression表达式：execution(返回值类型 包名.类名.方法.参数)--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* com.lan5th.pojo.Dog.*(..))&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--配置环绕增加--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">&quot;logBefore&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">&quot;logAfter&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试类<code>AopTest.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AopTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">&quot;aop.xml&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//注意此处强转为接口</span></span><br><span class=\"line\">        Animal dog = (Animal) context.getBean(<span class=\"string\">&quot;dog&quot;</span>);</span><br><span class=\"line\">        dog.shout();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>方式二：自定义类</p>\n</blockquote>\n<p>自定义类<code>DIYLog.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DIYLog</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法将要执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法执行完毕&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新配置<code>aop.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;diy&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.service.DIYLog&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--自定义切面，ref标识要引用的类--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;diy&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* com.lan5th.pojo.Dog.*(..))&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--直接标识出执行的时机：before,after等--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;before&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;after&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>方式三：注解实现</p>\n</blockquote>\n<p>aop注解参数格式：<code>访问修饰符 返回值类型 方法全类名(参数)</code>，如：</p>\n<ul>\n<li>指定某个方法<code>execution(public int com.lan5th.service.calculate(int, int))</code></li>\n<li>指定所有方法<code>execution(* com.lan5th.service.calculate.*(..))</code></li>\n</ul>\n<p>==切面类和被切入的类都需要被注入到容器中==</p>\n<p>带注解的自定义类<code>AnnotationLog.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//告诉spring这是一个切面类</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnnotationLog</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//注意不要导成junit的注解</span></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;execution(* com.lan5th.pojo.Dog.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">log</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法执行前&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新配置<code>aop.xml</code>，或给配置类上添加<code>@EnableAspectJAutoProxy</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;AnnAop&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.service.AnnotationLog&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--开启注解 可添加proxy-target-class项，默认为false使用jdk，若设置为true则使用cglib--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>常用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//配置整体切入点</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(public int com.lan5th.beans.Calculator.calculate(int, int ))&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pointCut</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取参数</span></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;pointCut()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logBefore</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Arrays.asList(joinPoint.getArgs()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取方法名</span></span><br><span class=\"line\">    <span class=\"meta\">@After(&quot;pointCut()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logAfter</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(joinPoint.getSignature().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取结果</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(value = &quot;pointCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logReturn</span><span class=\"params\">(Object result)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//捕捉异常</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing(value = &quot;pointCut()&quot;, throwing = &quot;exception&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logError</span><span class=\"params\">(Exception exception)</span></span>&#123;</span><br><span class=\"line\">        exception.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>需要注意一下环绕方法，需要手动放行</strong></p>\n<p><strong>通过JoinPoint参数可以获取到被切入方法的许多信息</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Around(&quot;execution(* com.lan5th.pojo.Dog.*(..))&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//需要引入参数，代表我们获取处理切入的点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Around</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Around方法执行前&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//还可以获取签名，一般用于日志</span></span><br><span class=\"line\">    Signature signature = joinPoint.getSignature();</span><br><span class=\"line\">    System.out.println(signature);</span><br><span class=\"line\">    <span class=\"comment\">//执行方法</span></span><br><span class=\"line\">    joinPoint.proceed();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Around方法执行前&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"整合Mybatis\"><a href=\"#整合Mybatis\" class=\"headerlink\" title=\"整合Mybatis\"></a>整合Mybatis</h1><h2 id=\"搭建Mybatis环境\"><a href=\"#搭建Mybatis环境\" class=\"headerlink\" title=\"搭建Mybatis环境\"></a>搭建Mybatis环境</h2><p>步骤：</p>\n<ol>\n<li><p>导入jar包</p>\n<ul>\n<li><p>junit</p>\n</li>\n<li><p>mtbatis</p>\n</li>\n<li><p>mysql</p>\n</li>\n<li><p>spring</p>\n</li>\n<li><p>spring-jdbc【新增】</p>\n</li>\n<li><p>mybatis-spring【新增】</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.31<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.12.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--lombok自选--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>编写配置文件</p>\n</li>\n<li><p>测试</p>\n</li>\n</ol>\n<h2 id=\"Mybatis-Spring\"><a href=\"#Mybatis-Spring\" class=\"headerlink\" title=\"Mybatis-Spring\"></a>Mybatis-Spring</h2><p>步骤：</p>\n<ol>\n<li><p>编写数据源</p>\n</li>\n<li><p>编写SqlSessionFactory</p>\n</li>\n<li><p>编写SqlSessionTemplate</p>\n<p>SqlSessionTemplate是SqlSession的一个实现，在代码中可以无缝替代之前的SqlSession</p>\n</li>\n<li><p>编写实现类</p>\n</li>\n<li><p>将实现类注入到Spring中</p>\n</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210524200916839.png\" alt=\"image-20210524200916839\"></p>\n<p><code>User.java</code>，<code>UserMapper.java</code>和<code>UserMapper.xml</code>与之前相同</p>\n<blockquote>\n<p>方式一：直接实例化SqlSessionTemplate对象</p>\n</blockquote>\n<p>新增实现类<code>UserMapperImpl.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserMapperImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserMapper</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlSessionTemplate sqlSession;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSqlSession</span><span class=\"params\">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sqlSession = sqlSession;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">selectUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mapper.selectUser();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>精简化<code>mybatis-config.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--之后只在这里写一些设置--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.lan5th.pojo&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Spring核心文件<code>spring-dao.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;datasource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--配置数据源--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class=\"symbol\">&amp;amp;</span>useUnicode=true<span class=\"symbol\">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123456&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;datasource&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--绑定mybatis-config配置文件，一般只在这个文件中写一些设置，不包含mapper--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;configLocation&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapperLocations&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath:com/lan5th/dao/*.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sqlSessionTemplate&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--只能使用构造器注入，因为没有set方法--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--添加实现类--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userMapper&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.dao.UserMapperImpl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sqlSession&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;sqlSessionTemplate&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试类<code>MSTest.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MSTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">msTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ClassPathXmlApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">&quot;spring-dao.xml&quot;</span>);</span><br><span class=\"line\">        UserMapper mapper = context.getBean(<span class=\"string\">&quot;userMapper&quot;</span>,UserMapper.class);</span><br><span class=\"line\">        List&lt;User&gt; userList = mapper.selectUser();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (User user : userList) &#123;</span><br><span class=\"line\">            System.out.println(user);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>方法二：继承SqlSessionDaoSupport类</p>\n</blockquote>\n<p>新增实现类<code>UserMapperImpl2.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserMapperImpl2</span> <span class=\"keyword\">extends</span> <span class=\"title\">SqlSessionDaoSupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserMapper</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">selectUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//继承后可以直接获取sqlSession</span></span><br><span class=\"line\">        SqlSession sqlSession = getSqlSession();</span><br><span class=\"line\">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mapper.selectUser();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简化<code>spring-dao.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;datasource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--配置数据源--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class=\"symbol\">&amp;amp;</span>useUnicode=true<span class=\"symbol\">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;123456&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;datasource&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--绑定mybatis-config配置文件，一般只在这个文件中写一些设置，不包含mapper--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;configLocation&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapperLocations&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath:com/lan5th/dao/*.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--继承SqlSessionDaoSupport后不需要再实例化SqlSessionTemplate了，因为父类已经实现--&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--添加实现类2--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userMapper2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.lan5th.dao.UserMapperImpl2&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"声明式事务\"><a href=\"#声明式事务\" class=\"headerlink\" title=\"声明式事务\"></a>声明式事务</h1><h2 id=\"配置文件方式\"><a href=\"#配置文件方式\" class=\"headerlink\" title=\"配置文件方式\"></a>配置文件方式</h2><p>让mybatis通过spring来管理事务，借由DataSourceTransactionManager类实现</p>\n<p>配置<code>spring-dao.xml</code></p>\n<p>注意需要导入aop和tx的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/tx</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--其他bean...--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--配置声明式事务--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;transactionManager&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;datasource&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--结合AOP实现事务置入--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;txAdvice&quot;</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--propagation事务传播特性--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;selectUser&quot;</span> <span class=\"attr\">read-only</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--其他一般方法采用默认配置--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;*&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--配置Aop切入--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;txPointcut&quot;</span> <span class=\"attr\">expression</span>=<span class=\"string\">&quot;execution(* com.lan5th.dao.*.*(..))&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">&quot;txAdvice&quot;</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;txPointcut&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>七种事务传播方式</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210524210943304.png\" alt=\"image-20210524210943304\"></p>\n<p>如果不在Spring中实现事务，就需要在代码中手动配置事务</p>\n<h2 id=\"注解方式\"><a href=\"#注解方式\" class=\"headerlink\" title=\"注解方式\"></a>注解方式</h2><ul>\n<li><p>配置数据源DataSource</p>\n</li>\n<li><p>主类上添加<code>@EnableTransactionManagement</code></p>\n</li>\n<li><p>需要转为事务操作的方法上添加<code>@Transactional</code></p>\n</li>\n<li><p>配置事务管理器来管理事务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PlatformTransactionManager <span class=\"title\">transactionManager</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里传入配置好的数据源</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(datasource());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","categories":["JavaEE"]},{"title":"SpringBoot高级","url":"/2021/09/22/JavaEE/SpringBoot%E9%AB%98%E7%BA%A7/","content":"<h1 id=\"Spring缓存\"><a href=\"#Spring缓存\" class=\"headerlink\" title=\"Spring缓存\"></a>Spring缓存</h1><h2 id=\"缓存原理\"><a href=\"#缓存原理\" class=\"headerlink\" title=\"缓存原理\"></a>缓存原理</h2><ul>\n<li><p>缓存自动配置类CacheAutoConfiguration，导入CacheConfigurationImportSelector</p>\n</li>\n<li><p>CacheConfigurationImportSelector，获取所有的CacheConfiguration</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210922151815235.png\" alt=\"image-20210922151815235\"></p>\n</li>\n<li><p>默认SimpleCacheConfiguration生效：给容器中注册了一个CacheManager：ConcurrentMapCacheManager</p>\n</li>\n<li><p>ConcurrentMapCacheManager可以获取和创建ConcurrentMapCache类型的缓存组件，将数据保存在ConCurrentMap中</p>\n</li>\n</ul>\n<h2 id=\"运行流程\"><a href=\"#运行流程\" class=\"headerlink\" title=\"运行流程\"></a>运行流程</h2><ol>\n<li><p>方法运行之前，先去查询缓存组件，按照cacheNames指定的名字获取相应的缓存（如果没有Cache组件则会自动创建）</p>\n</li>\n<li><p>去Cache中查找缓存内容，使用key（默认方法参数）默认使用simpleKeyGenerator生成key</p>\n<p>simpleKeyGenerator策略：</p>\n<ul>\n<li>如果没有参数，key=new SimpleKey();</li>\n<li>如果只有一个参数，key=参数值</li>\n<li>如果有多个参数，key=new SimpleKey(params);</li>\n</ul>\n</li>\n<li><p>没有查到缓存就会调用目标方法，如果缓存中存在key，则从缓存中获取值</p>\n</li>\n<li><p>将目标方法返回的结果放回缓存中</p>\n</li>\n</ol>\n<h2 id=\"使用缓存\"><a href=\"#使用缓存\" class=\"headerlink\" title=\"使用缓存\"></a>使用缓存</h2><p>注解属性</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cacheNames/value <span class=\"comment\">#指定缓存组件名字，可以以数组形式指定多个缓存组件</span></span><br><span class=\"line\">key <span class=\"comment\">#指定key，默认为方法参数的值，可以使用SpEL表达式</span></span><br><span class=\"line\">keyGenerator <span class=\"comment\">#指定key生成器，与key二选一使用</span></span><br><span class=\"line\">cacheManager <span class=\"comment\">#指定缓存管理器</span></span><br><span class=\"line\">cacheResolver <span class=\"comment\">#指定缓存解析器，与cacheManager二选一使用</span></span><br><span class=\"line\">condition <span class=\"comment\">#指定条件下再缓存</span></span><br><span class=\"line\">unless <span class=\"comment\">#否定缓存，与condition相反，指定条件下不缓存</span></span><br><span class=\"line\">sync <span class=\"comment\">#异步缓存模式</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>主类注解<code>@EnableCaching</code>开启缓存功能</p>\n</li>\n<li><p>方法注解<code>@Cacheable</code>缓存返回结果，如果有缓存直接查询缓存而不调用方法</p>\n<ul>\n<li><p>key</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Cacheable(value = &quot;userInfo&quot;, key = &quot;#root.method.getName() + &#x27;[&#x27; + #id + &#x27;]&#x27;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(Serializable id)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义keyGenerator</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(&quot;myKeyGenerator&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> KeyGenerator <span class=\"title\">keyGenerator</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> KeyGenerator()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">generate</span><span class=\"params\">(Object o, Method method, Object... objects)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> method.getName()+ Arrays.asList(objects);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Cacheable(value = &quot;userInfo&quot;, keyGenerator = &quot;myKeyGenerator&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(Serializable id)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>condition&amp;unless</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一个参数大于1缓存，并且等于2时不缓存</span></span><br><span class=\"line\"><span class=\"meta\">@Cacheable(value = &quot;userInfo&quot;, condition = &quot;#a0&gt;1&quot;, unless = &quot;#a0==2&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getById</span><span class=\"params\">(Serializable id)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>方法注解<code>@CachePut</code>调用方法之后保存或更新缓存结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CachePut(value = &quot;userInfo&quot;, key = &quot;&#x27;userInfo&#x27; + &#x27;[&#x27; + #entity.id + &#x27;]&#x27;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">updateById</span><span class=\"params\">(User entity)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法注解<code>@CacheEvict</code>缓存清除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CacheEvict(value = &quot;userInfo&quot;, key = &quot;&#x27;userInfo&#x27; + &#x27;[&#x27; + #id + &#x27;]&#x27;&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeById</span><span class=\"params\">(Serializable id)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>AllEntries</code>属性：默认为false，为true时清空所有缓存</li>\n<li><code>beforeInvocation</code>属性：默认为false，是否在方法之前执行</li>\n</ul>\n</li>\n<li><p>方法注解<code>Caching</code>配置复杂的缓存情景</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Caching(</span></span><br><span class=\"line\"><span class=\"meta\">    cacheable = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">        @Cacheable(value = &quot;byName&quot;, key = &quot;name&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;,</span></span><br><span class=\"line\"><span class=\"meta\">    put = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">        @CachePut(value = &quot;byId&quot;, key = &quot;id&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">        @CachePut(value = &quot;byAge&quot;, key = &quot;age&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">save</span><span class=\"params\">(User entity)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类注解<code>CacheConfig</code>，用来配置一整个类中的缓存配置，如下例类中所有的缓存注解都不需要再次配置cacheNames/value属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CacheConfig(cacheNames = &quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">ServiceImpl</span>&lt;<span class=\"title\">UserMapper</span>, <span class=\"title\">User</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>如果要使用同一个缓存，需要注意这些注解的key是否含义相同（不是简单的代码相同！！）</strong></p>\n<h2 id=\"切换缓存中间件\"><a href=\"#切换缓存中间件\" class=\"headerlink\" title=\"切换缓存中间件\"></a>切换缓存中间件</h2><p>一般来说，只要容器中注入了相应的Bean，SpringBoot就会自动切换CacheManager，如注入RedisTemplate组件之后RedisCacheManager会自动开启，并关闭默认的ConcurrentMapCacheManager</p>\n<p>自定义RedisTemplate和RedisCacheManager，使用json序列化替代默认的jdk序列化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span></span>&#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> RedisTemplate&lt;&gt;();</span><br><span class=\"line\">        template.setConnectionFactory(factory);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//自定义Jackson序列化配置</span></span><br><span class=\"line\">        Jackson2JsonRedisSerializer jsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class=\"line\">        template.setDefaultSerializer(jsonRedisSerializer);</span><br><span class=\"line\"></span><br><span class=\"line\">        ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class=\"line\"></span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisCacheManager <span class=\"title\">redisCacheManager</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化一个RedisCacheWriter</span></span><br><span class=\"line\">        RedisCacheWriter redisCacheWriter = RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory);</span><br><span class=\"line\">        <span class=\"comment\">//设置CacheManager的值序列化方式为json序列化</span></span><br><span class=\"line\">        RedisSerializer&lt;Object&gt; jsonSerializer = <span class=\"keyword\">new</span> GenericJackson2JsonRedisSerializer();</span><br><span class=\"line\">        RedisSerializationContext.SerializationPair&lt;Object&gt; pair = RedisSerializationContext.SerializationPair.fromSerializer(jsonSerializer);</span><br><span class=\"line\">        RedisCacheConfiguration defaultCacheConfig = RedisCacheConfiguration.defaultCacheConfig().serializeValuesWith(pair)</span><br><span class=\"line\">                .entryTtl(Duration.ofSeconds(<span class=\"number\">10</span>));<span class=\"comment\">//设置过期时间</span></span><br><span class=\"line\">        <span class=\"comment\">//初始化RedisCacheManager</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RedisCacheManager(redisCacheWriter, defaultCacheConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h1><p>概念图解</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925104140962.png\" alt=\"image-20210925104140962\"></p>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><ul>\n<li><p>消息服务的对象两个类型</p>\n<ul>\n<li>消息代理message broker</li>\n<li>目的地destination</li>\n</ul>\n<p>消息发送这发送消息后由消息代理接管并传递到目的地</p>\n</li>\n<li><p>消息队列的目的地形式</p>\n<ul>\n<li><p>队列queue：点对点通信</p>\n<p>如果有多个接收者，一旦有接收者最先拿到消息，这个消息就会被删除，其他接收者不会接收到消息</p>\n</li>\n<li><p>主题topic：发布和订阅消息通信</p>\n<p>所有接收者都能接收到发布的主题消息</p>\n</li>\n</ul>\n</li>\n<li><p>消息代理规范</p>\n<ul>\n<li><p>JMS(Java Message Service)</p>\n<p>基于JVM消息代理的规范，代表：ActiveMQ，HornetMQ</p>\n</li>\n<li><p>AMQP(Advanced Message Queing Protocol)</p>\n<p>高级消息队列协议，兼容JMS，代表：RabbitMQ</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"原理简析\"><a href=\"#原理简析\" class=\"headerlink\" title=\"原理简析\"></a>原理简析</h2><ul>\n<li>RabbitAutoConfiguration配置了连接工厂ConnectionFactory</li>\n<li>RabbitProperties封装了RabbitMQ的配置，对应前缀<code>spring.rabbitmq</code></li>\n<li>注入了模板RabbitTemplate</li>\n<li>注入了AmqpAdmin：RabbitMQ的系统管理组件</li>\n</ul>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><p>包依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入amqp协议，即RabbitMQ的依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">x.x.x.x</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">xxx</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RabbitTemplate\"><a href=\"#RabbitTemplate\" class=\"headerlink\" title=\"RabbitTemplate\"></a>RabbitTemplate</h2><p>使用RabbitTemplate发送和接收消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Springboot02ApplicationTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//方式一：rabbitTemplate.send(交换机,key,message)</span></span><br><span class=\"line\">        <span class=\"comment\">//这种方式需要我们自定义消息体内容和消息头</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//方式二：rabbitTemplate.convertAndSend(交换机,key,object)</span></span><br><span class=\"line\">        <span class=\"comment\">//只要传入需要发送的对象，就会被自动序列化并发送给RabbitMQ服务器</span></span><br><span class=\"line\">        HashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;this is a msg from client&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;list&quot;</span>, Arrays.asList(<span class=\"keyword\">true</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;object3&quot;</span>));</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(<span class=\"string\">&quot;springboot.mq&quot;</span>,<span class=\"string\">&quot;user.warning&quot;</span>,map);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=========&gt;消息发送完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从que1接收消息，对应key：user.*</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getTest1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//接收消息并自动反序列化</span></span><br><span class=\"line\">        Object que1 = rabbitTemplate.receiveAndConvert(<span class=\"string\">&quot;que1&quot;</span>);</span><br><span class=\"line\">        System.out.println(que1.getClass());</span><br><span class=\"line\">        System.out.println(que1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从que2接收消息，对应key：*.info</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getTest2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Object que2 = rabbitTemplate.receiveAndConvert(<span class=\"string\">&quot;que2&quot;</span>);</span><br><span class=\"line\">        System.out.println(que2.getClass());</span><br><span class=\"line\">        System.out.println(que2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于默认使用的是jdk序列化，如果我们需要可以注入我们自己的MessageConverter，使其转换为json序列化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MQConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Jackson2JsonMessageConverter <span class=\"title\">messageConverter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Jackson2JsonMessageConverter();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注解开发RabbitMQ\"><a href=\"#注解开发RabbitMQ\" class=\"headerlink\" title=\"注解开发RabbitMQ\"></a>注解开发RabbitMQ</h2><p>主类上添加<code>@EnableRabbit</code>以开启注解功能</p>\n<p>使用注解监听队列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//转换器会将消息内容自动转换为实体类</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &quot;que1&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listenQue1</span><span class=\"params\">(User user)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(user.getClass());</span><br><span class=\"line\">        System.out.println(user.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用Message接收消息能够拿到消息的完整信息</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &quot;que2&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listenQue2</span><span class=\"params\">(Message message)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(message.getClass());</span><br><span class=\"line\">        System.out.println(message.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210925195337485.png\" alt=\"image-20210925195337485\"></p>\n<h2 id=\"AmqpAdmin\"><a href=\"#AmqpAdmin\" class=\"headerlink\" title=\"AmqpAdmin\"></a>AmqpAdmin</h2><p>通过AmqpAdmin就可以进行消息队列的一系列操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Springboot02ApplicationTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    AmqpAdmin amqpAdmin;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建交换器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">createExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        amqpAdmin.declareExchange(<span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">&quot;amqpadmin.exchange&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建队列</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">createQue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        amqpAdmin.declareQueue(<span class=\"keyword\">new</span> Queue(<span class=\"string\">&quot;amqpadmin.que&quot;</span>,<span class=\"keyword\">true</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建绑定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">createBinding</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        amqpAdmin.declareBinding(<span class=\"keyword\">new</span> Binding(<span class=\"string\">&quot;amqpadmin.que&quot;</span>, Binding.DestinationType.QUEUE, <span class=\"string\">&quot;amqpadmin.exchange&quot;</span>,<span class=\"string\">&quot;amqp.info&quot;</span>,<span class=\"keyword\">null</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ElasticSearch检索\"><a href=\"#ElasticSearch检索\" class=\"headerlink\" title=\"ElasticSearch检索\"></a>ElasticSearch检索</h1><p>SpringBoot支持两种交互技术：</p>\n<ul>\n<li><p>Jest(默认不生效)</p>\n<p>需要导入工具包</p>\n</li>\n<li><p>SpringData Elasticsearch</p>\n<ul>\n<li>使用ElasticsearchTemplate来操作ES</li>\n<li>编写ElasticsearchRepository子接口来操作ES</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Jest\"><a href=\"#Jest\" class=\"headerlink\" title=\"Jest\"></a>Jest</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.searchbox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jest<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注入JestClient</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JestConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JestClient <span class=\"title\">jestCline</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        JestClientFactory factory = <span class=\"keyword\">new</span> JestClientFactory();</span><br><span class=\"line\">        <span class=\"comment\">//配置服务端信息</span></span><br><span class=\"line\">        factory.setHttpClientConfig(<span class=\"keyword\">new</span> HttpClientConfig</span><br><span class=\"line\">                .Builder(<span class=\"string\">&quot;http://47.113.225.244:9200&quot;</span>)</span><br><span class=\"line\">                .multiThreaded(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                .build());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factory.getObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Article</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//指定文档id</span></span><br><span class=\"line\">    <span class=\"meta\">@JestId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String author;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JestApplicationTests</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    JestClient jestClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//增加索引并添加数据</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testPut</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Article article = <span class=\"keyword\">new</span> Article(<span class=\"number\">1</span>, <span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;title&quot;</span>, <span class=\"string\">&quot;hello,world!&quot;</span>);</span><br><span class=\"line\">        Index index = <span class=\"keyword\">new</span> Index.Builder(article).index(<span class=\"string\">&quot;docs&quot;</span>).type(<span class=\"string\">&quot;news&quot;</span>).build();</span><br><span class=\"line\">        DocumentResult result = jestClient.execute(index);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查询数据</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testSearch</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        String json = <span class=\"string\">&quot;&#123;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;  \\&quot;query\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;    \\&quot;match\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;      \\&quot;author\\&quot;: \\&quot;张三\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;    &#125;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;  &#125;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">        Search search = <span class=\"keyword\">new</span> Search.Builder(json).addIndex(<span class=\"string\">&quot;docs&quot;</span>).addType(<span class=\"string\">&quot;news&quot;</span>).build();</span><br><span class=\"line\">        SearchResult result = jestClient.execute(search);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现Repository接口\"><a href=\"#实现Repository接口\" class=\"headerlink\" title=\"实现Repository接口\"></a>实现Repository接口</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">ElasticsearchRepository</span>&lt;<span class=\"title\">User</span>, <span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在这里指定索引名</span></span><br><span class=\"line\"><span class=\"meta\">@Document(indexName = &quot;docs2&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//指定文档id</span></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RepositoryTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    UserRepository userRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testIndex</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User(<span class=\"number\">1</span>,<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">        userRepository.save(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testSearch</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Iterable&lt;User&gt; users = userRepository.findAll();</span><br><span class=\"line\">        System.out.println(users);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Template\"><a href=\"#使用Template\" class=\"headerlink\" title=\"使用Template\"></a>使用Template</h2><p>这部分的使用，以及ElasticSearch的安装的其他事项在我的另一篇博客ElasticSearch中有详细介绍</p>\n<h1 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h1><h2 id=\"异步任务\"><a href=\"#异步任务\" class=\"headerlink\" title=\"异步任务\"></a>异步任务</h2><p>主运行类上添加注解开启异步功能<code>@EnableAsync</code></p>\n<p>处理访问请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    AsyncService asyncService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        asyncService.hello();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设AsyncService类处理后台业务需要三秒时间(这里使用线程睡眠表达含义)，访问/hello路径需要等待三秒才能访问页面内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//标识这是一个异步方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Async</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;处理数据中......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当标识异步方法之后，访问/hello路径不再需要等待三秒才能访问页面内容</p>\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h2><p>运行主类上添加注解开启定时功能<code>@EnableScheduling</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 定时注解格式&#x27;* * * * * *&#x27;共六项</span></span><br><span class=\"line\"><span class=\"comment\">* 每项代表下面的一个时间节点，并用空格分隔</span></span><br><span class=\"line\"><span class=\"comment\">* ‘*’代表任意时刻，示例：</span></span><br><span class=\"line\"><span class=\"comment\">* `0 * * * * MON_FRI`代表周一到周五每分钟执行一次</span></span><br><span class=\"line\"><span class=\"comment\">* second</span></span><br><span class=\"line\"><span class=\"comment\">* minute</span></span><br><span class=\"line\"><span class=\"comment\">* hour</span></span><br><span class=\"line\"><span class=\"comment\">* day of month</span></span><br><span class=\"line\"><span class=\"comment\">* month</span></span><br><span class=\"line\"><span class=\"comment\">* day of week</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Scheduled(cron = &quot;0 * * * * MON-FRI&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduled</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Scheduled Hello......&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211001162806033.png\" alt=\"image-20211001162806033\"></p>\n<p>一些常用参数举例</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211001163014197.png\" alt=\"image-20211001163014197\"></p>\n<h2 id=\"邮件任务\"><a href=\"#邮件任务\" class=\"headerlink\" title=\"邮件任务\"></a>邮件任务</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-mail<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用发送邮箱的服务，需要自己在对应邮箱设置中开启smtp服务并获取授权码，这里的password不是登录邮箱用的密码，而是开启服务时获得的授权码</p>\n<p>配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mail:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">smtp.163.com</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">jteam6register@163.com</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\">    <span class=\"attr\">properties:</span></span><br><span class=\"line\">      <span class=\"attr\">mail:</span></span><br><span class=\"line\">        <span class=\"attr\">smtp:</span></span><br><span class=\"line\">          <span class=\"attr\">ssl:</span></span><br><span class=\"line\">            <span class=\"attr\">enable:</span></span><br><span class=\"line\">              <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h1><p>安全框架的主要作用：</p>\n<ul>\n<li>认证Authentication：建立用户</li>\n<li>授权Authorization：给用户授予访问权限</li>\n</ul>\n<h2 id=\"SpringSecurity\"><a href=\"#SpringSecurity\" class=\"headerlink\" title=\"SpringSecurity\"></a>SpringSecurity</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--SpringSecurity启动器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--整合thymeleaf--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.thymeleaf.extras<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定制授权规则</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> http</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/&quot;</span>).permitAll()</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/level1/**&quot;</span>).hasRole(<span class=\"string\">&quot;vip1&quot;</span>)</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/level2/**&quot;</span>).hasRole(<span class=\"string\">&quot;vip2&quot;</span>)</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/level3/**&quot;</span>).hasRole(<span class=\"string\">&quot;vip3&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//开启登录功能</span></span><br><span class=\"line\">        <span class=\"comment\">//1.&#x27;/login&#x27;请求来到登录页(未授权自动重定向)</span></span><br><span class=\"line\">        <span class=\"comment\">//2.重定向到&#x27;login?error&#x27;表示登录失败</span></span><br><span class=\"line\">        <span class=\"comment\">//3.默认发送post方法的&#x27;/login&#x27;请求来进行登录认证</span></span><br><span class=\"line\">        <span class=\"comment\">//4.自定义登录页中发送post方法的loginPage(与页面url相同)请求来进行登录认证</span></span><br><span class=\"line\">        http.formLogin().loginPage(<span class=\"string\">&quot;/loginPage&quot;</span>).usernameParameter(<span class=\"string\">&quot;user&quot;</span>).passwordParameter(<span class=\"string\">&quot;pwd&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//开启注销功能</span></span><br><span class=\"line\">        <span class=\"comment\">//1.&#x27;/logout&#x27;请求来到用户注销，清空session</span></span><br><span class=\"line\">        <span class=\"comment\">//2.默认注销成功重定向到到&#x27;/login?logout&#x27;页面</span></span><br><span class=\"line\">        http.logout().logoutSuccessUrl(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//开启记住功能</span></span><br><span class=\"line\">        <span class=\"comment\">//登录成功后会将cookie发给浏览器保存，之后访问页面只要带上cookie就会自动登录</span></span><br><span class=\"line\">        <span class=\"comment\">//注销会删除cookie</span></span><br><span class=\"line\">        http.rememberMe();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定制认证规则</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> auth</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//需要选择密码的加密方式，否则会报错</span></span><br><span class=\"line\">        auth.inMemoryAuthentication().passwordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder())</span><br><span class=\"line\">                .withUser(<span class=\"string\">&quot;lan5th&quot;</span>).password(<span class=\"keyword\">new</span> BCryptPasswordEncoder().encode(<span class=\"string\">&quot;123456&quot;</span>)).roles(<span class=\"string\">&quot;vip1&quot;</span>,<span class=\"string\">&quot;vip2&quot;</span>,<span class=\"string\">&quot;vip3&quot;</span>)</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .withUser(<span class=\"string\">&quot;zhangsan&quot;</span>).password(<span class=\"keyword\">new</span> BCryptPasswordEncoder().encode(<span class=\"string\">&quot;123456&quot;</span>)).roles(<span class=\"string\">&quot;vip1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>视图解析类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ModelController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;index&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/level1&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">level1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;level1/vip1&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/level2&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">level2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;level2/vip2&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/level3&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">level3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;level3/vip3&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/loginPage&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">loginPage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>权限分流页面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:sec</span>=<span class=\"string\">&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">sec:authorize</span>=<span class=\"string\">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class=\"line\">    当前用户：<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">sec:authentication</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    当前角色：<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">sec:authentication</span>=<span class=\"string\">&quot;principal.authorities&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/level1&#125;&quot;</span>&gt;</span>vip1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/level2&#125;&quot;</span>&gt;</span>vip2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/level3&#125;&quot;</span>&gt;</span>vip3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/upload&#125;&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;headerImg&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;photos&quot;</span> <span class=\"attr\">multiple</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">sec:authorize</span>=<span class=\"string\">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/loginPage&#125;&quot;</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">sec:authorize</span>=<span class=\"string\">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span>注销<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>登录页</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">xmlns:sec</span>=<span class=\"string\">&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这是登录页面<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/loginPage&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pwd&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;rememberme&quot;</span>&gt;</span>记住我<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;登录&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用数据库中的数据来进行用户授权\"><a href=\"#使用数据库中的数据来进行用户授权\" class=\"headerlink\" title=\"使用数据库中的数据来进行用户授权\"></a>使用数据库中的数据来进行用户授权</h2><p>UserDetailsService实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDetailImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetailsService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里因为本项目中也使用了User类，只能使用全类名进行引用</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> UsernameNotFoundException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserDetails <span class=\"title\">loadUserByUsername</span><span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里继承了MybatisPlus的实现，可以选择其他的实现方式来查询数据库</span></span><br><span class=\"line\">        QueryWrapper&lt;com.example.mybatisplus.model.domain.User&gt; wrapper = <span class=\"keyword\">new</span> QueryWrapper&lt;&gt;();</span><br><span class=\"line\">        wrapper.eq(<span class=\"string\">&quot;name&quot;</span>, s);</span><br><span class=\"line\">        com.example.mybatisplus.model.domain.User userInfo = userService.getOne(wrapper);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (userInfo == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;用户不存在&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//这里也必须指定密码的编码方式</span></span><br><span class=\"line\">        BCryptPasswordEncoder encoder = <span class=\"keyword\">new</span> BCryptPasswordEncoder();</span><br><span class=\"line\">        <span class=\"comment\">//设定用户名、加密密码 和 相应权限</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(userInfo.getName(), encoder.encode(userInfo.getPassword()), AuthorityUtils.commaSeparatedStringToAuthorityList(<span class=\"string\">&quot;ADMIN&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定制授权规则，详细功能在上面已经给出，这里不再赘述</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> http</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        http.authorizeRequests().antMatchers(<span class=\"string\">&quot;/&quot;</span>).permitAll()</span><br><span class=\"line\">            .antMatchers(<span class=\"string\">&quot;/api/user/test&quot;</span>).hasRole(<span class=\"string\">&quot;ADMIN&quot;</span>);</span><br><span class=\"line\">        http.formLogin().usernameParameter(<span class=\"string\">&quot;user&quot;</span>).passwordParameter(<span class=\"string\">&quot;pwd&quot;</span>);</span><br><span class=\"line\">        http.logout().logoutSuccessUrl(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">        http.rememberMe();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注入UserDetailsService的实现类</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserDetailImpl <span class=\"title\">userDetails</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UserDetailImpl();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定制认证规则</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> auth</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//需要选择密码的加密方式，否则会报错</span></span><br><span class=\"line\">        <span class=\"comment\">//使用数据库用户验证</span></span><br><span class=\"line\">        auth.userDetailsService(userDetails()).passwordEncoder(<span class=\"keyword\">new</span> BCryptPasswordEncoder());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"单点登录\"><a href=\"#单点登录\" class=\"headerlink\" title=\"单点登录\"></a>单点登录</h1><h2 id=\"token简介\"><a href=\"#token简介\" class=\"headerlink\" title=\"token简介\"></a>token简介</h2><p>token一般包含三部分：</p>\n<ul>\n<li><p>header</p>\n<p>一般包含typ（token类型）和alg（加密算法）</p>\n</li>\n<li><p>payload</p>\n<p>保存用户信息（比如id）</p>\n</li>\n<li><p>signature</p>\n<p>由header和payload联合加密形成的签名</p>\n</li>\n</ul>\n<p>最后组合起来的token格式为：header.payload.signature</p>\n<p>服务器进行token的有效验证时，先将收到的前两部分header和payload用相应算法形成结果签名，再将得到的签名与第三部分的signature进行对比，如果相同则验证通过</p>\n<h2 id=\"JWT\"><a href=\"#JWT\" class=\"headerlink\" title=\"JWT\"></a>JWT</h2><p>导包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.auth0<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>java-jwt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.18.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>自定义注解</p>\n<p>@PassToken跳过token验证</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> PassToken &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">required</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">true</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@UserLoginToken进行用户token验证</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> UserLoginToken &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">required</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">true</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>获取JWT token</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">JWT.create().withAudience(String.valueOf(user.userId)).sign(Algorithm.HMAC256(user.getPassword()));</span><br></pre></td></tr></table></figure>\n\n<p>自定义拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthenticationInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object object)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String token = httpServletRequest.getHeader(<span class=\"string\">&quot;token&quot;</span>);<span class=\"comment\">// 从 http 请求头中取出 token</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果不是映射到方法直接通过</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(object <span class=\"keyword\">instanceof</span> HandlerMethod)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HandlerMethod handlerMethod = (HandlerMethod) object;</span><br><span class=\"line\">        Method method = handlerMethod.getMethod();</span><br><span class=\"line\">        <span class=\"comment\">//检查是否有passtoken注释，有则跳过认证</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method.isAnnotationPresent(PassToken.class)) &#123;</span><br><span class=\"line\">            PassToken passToken = method.getAnnotation(PassToken.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (passToken.required()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//检查有没有需要用户权限的注解</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method.isAnnotationPresent(UserLoginToken.class)) &#123;</span><br><span class=\"line\">            UserLoginToken userLoginToken = method.getAnnotation(UserLoginToken.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (userLoginToken.required()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 执行认证</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (token == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;无token，请重新登录&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 获取 token 中的 user id</span></span><br><span class=\"line\">                String userId;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//解码</span></span><br><span class=\"line\">                    userId = JWT.decode(token).getAudience().get(<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (JWTDecodeException j) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;401&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                User user = userService.getById(userId);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (user == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;用户不存在，请重新登录&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 验证 token</span></span><br><span class=\"line\">                JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(user.getPassword())).build();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    jwtVerifier.verify(token);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (JWTVerificationException e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;401&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest httpServletRequest,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           HttpServletResponse httpServletResponse,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           Object o, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest httpServletRequest,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                HttpServletResponse httpServletResponse,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                Object o, Exception e)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JWTConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AuthenticationInterceptor <span class=\"title\">authenticationInterceptor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AuthenticationInterceptor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addInterceptor(authenticationInterceptor()).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义注解</p>\n<p>进行访问时带上之前服务器签名过的token就能进行用户信息的验证</p>\n<p><img src=\"C:/Users/57624/AppData/Roaming/Typora/typora-user-images/image-20211210192706212.png\" alt=\"image-20211210192706212\"></p>\n<h1 id=\"分布式\"><a href=\"#分布式\" class=\"headerlink\" title=\"分布式\"></a>分布式</h1><p>分布式架构遇到的四个核心问题：</p>\n<ol>\n<li><p>这么多服务，客户端应该如何去访问</p>\n<p>api网管，服务路由</p>\n</li>\n<li><p>这么多服务，服务之间应该如何通信</p>\n<p>Http或RPC框架，异步调用</p>\n</li>\n<li><p>这么多服务，如何管理</p>\n<p>服务注册与发现</p>\n</li>\n<li><p>服务宕机应该怎么做</p>\n<p>熔断机制，服务降级</p>\n</li>\n</ol>\n<p>注重原因：网络是不可靠的</p>\n<h2 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h2><p>Remote Procedure Call：远程过程调用</p>\n<p>是一种进程间的通信方式，是一种技术思想，不是规范，突出程序调用另一个网络空间中的过程或函数</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211001224205471.png\" alt=\"image-20211001224205471\"></p>\n<p>两个核心：</p>\n<ul>\n<li>通信</li>\n<li>序列化</li>\n</ul>\n<h2 id=\"Dubbo-Zookeeper\"><a href=\"#Dubbo-Zookeeper\" class=\"headerlink\" title=\"Dubbo+Zookeeper\"></a>Dubbo+Zookeeper</h2><p><strong>Dubbo</strong></p>\n<p>Dubbo是一个高性能、轻量级的RPC通信框架，提供了三大核心能力：</p>\n<ul>\n<li>面向接口的远程方法调用</li>\n<li>智能容错和负载均衡</li>\n<li>服务启动注册和发现</li>\n</ul>\n<p>现在已经被Apache基金会接管</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211001225230412.png\" alt=\"image-20211001225230412\"></p>\n<p>Dubbo默认端口20880</p>\n<p><strong>ZooKeeper</strong></p>\n<p>zookeeper是一款Dubbo的注册中心服务器程序</p>\n<p>docker安装zookeeper，默认端口2181</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull zookeeper:3.7.0</span><br><span class=\"line\">docker run --name zookeeper -p 2181:2181 --restart always -d zookeeper:3.7.0</span><br></pre></td></tr></table></figure>\n\n<p><strong>Dubbo-admin</strong></p>\n<p>dubbo-admin是一个监控管理后台，可以查看我们注册和消费了的服务的具体信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull chenchuxin/dubbo-admin</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -it -d --name dubbo-admin \\</span><br><span class=\"line\">-v /xxx/xxx/dubbo-admin:/data \\</span><br><span class=\"line\">-p 8080:8080 \\</span><br><span class=\"line\">-e dubbo.registry.address=zookeeper://47.113.225.244:2181 \\</span><br><span class=\"line\">-e dubbo.admin.root.password=root \\</span><br><span class=\"line\">-e dubbo.admin.guest.password=root \\</span><br><span class=\"line\">chenchuxin/dubbo-admin</span><br></pre></td></tr></table></figure>\n\n<p>这时访问8080端口并输入用户名和密码就能看到管理页面了</p>\n<p><strong>依赖</strong></p>\n<p>服务端和客户端都需要引入dubbo和zkclient的依赖</p>\n<p>服务端和客户端都需要引入dubbo和zkclient的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--不要导成alibaba的依赖了--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.sgroschupf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zkclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--不导入下面这些包会报一大堆的错--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.curator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>curator-recipes<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.12.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.curator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>curator-framework<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.12.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.zookeeper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--排除这个slf4j-log4j12--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><ol>\n<li>引入依赖dubbo和zkclient的依赖</li>\n<li>配置dubbo扫描包和注册中心地址</li>\n<li>使用<code>@Service</code>发布服务</li>\n<li>启动应用</li>\n</ol>\n<p>配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dubbo.application.name</span>=<span class=\"string\">provider</span></span><br><span class=\"line\"><span class=\"meta\">dubbo.registry.address</span>=<span class=\"string\">zookeeper://47.113.225.244:2181</span></span><br><span class=\"line\"><span class=\"meta\">dubbo.scan.base-package</span>=<span class=\"string\">com.example.provider.service</span></span><br></pre></td></tr></table></figure>\n\n<p>服务接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.provider.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TicketService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTicket</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>服务实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注意这里的@Service是dubbo的Service，目的是注册服务</span></span><br><span class=\"line\"><span class=\"comment\">//@Service注解会向注册中心注册TicketService的全类名，包括完整路径</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">TicketService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTicket</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;一张电影票&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><p>配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dubbo.application.name</span>=<span class=\"string\">provider</span></span><br><span class=\"line\"><span class=\"meta\">dubbo.registry.address</span>=<span class=\"string\">zookeeper://47.113.225.244:2181</span></span><br></pre></td></tr></table></figure>\n\n<p>服务接口</p>\n<p>==警告：这里的全类名路径(包路径)必须与服务端完全相同，不然会报错==</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.provider.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TicketService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTicket</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用户服务类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里的@Service是Spring的注解</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//@Reference注解会将TicketService全类名去注册中心进行匹配，</span></span><br><span class=\"line\">    <span class=\"comment\">//将注册中心已经注册的相同全类名的实现类进行注入</span></span><br><span class=\"line\">    <span class=\"meta\">@Reference</span></span><br><span class=\"line\">    TicketService ticketService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTicket</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ticketService.getTicket();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerApplicationTests</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">   UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">contextLoads</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      String ticket = userService.getTicket();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;买到票了：&quot;</span>+ticket);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SpringCloud\"><a href=\"#SpringCloud\" class=\"headerlink\" title=\"SpringCloud\"></a>SpringCloud</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20211001222612665.png\" alt=\"image-20211001222612665\"></p>\n<p>待补充</p>\n<hr>\n<h1 id=\"热部署\"><a href=\"#热部署\" class=\"headerlink\" title=\"热部署\"></a>热部署</h1><p>四种情况实现热部署</p>\n<ul>\n<li>禁用模板引擎的缓存，项目运行过程中build就可以重新编译页面并生效</li>\n<li>SpringLoaded：Spring官方的热部署程序</li>\n<li>JRebel：收费的热部署插件</li>\n<li>SpringBoot Devtools</li>\n</ul>\n<p><strong>SpringBoot Devtools</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在运行项目时修改文件后只需要Build Project(快捷键ctrl+F9)就可以将改动部署到运行中的应用上，实时查看效果，不需要重启项目</p>\n","categories":["JavaEE"]},{"title":"MySQL","url":"/2020/10/20/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/","content":"<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><ul>\n<li>关系型数据库(SQL)：<ul>\n<li>MySQL,Oracle,Sql Server,DB2,SQLlite</li>\n<li>通过表与表之间，列与列之间关系进行数据的存储</li>\n</ul>\n</li>\n<li>非关系型数据库(NoSQL)：<ul>\n<li>Redis,MongDB</li>\n<li>通过对象存储，由对象自身属性决定</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<p>DBMS：数据库管理系统-&gt;用于管理数据库</p>\n<p>MySQL：最好的RDBMS(关系型数据库)之一，Oracle旗下产品</p>\n<p><strong>通过SQLyog来可视化操作MySQL数据库</strong></p>\n<ul>\n<li>DDL定义</li>\n<li>DML操作</li>\n<li>DQL查询</li>\n<li>DCL控制</li>\n</ul>\n<p>mySQL中SQL语言不区分大小写</p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ul>\n<li><p>数值</p>\n<p><img src=\"https://i.loli.net/2021/02/01/Z5NaWvs2XPxEzLQ.png\" alt=\"image-20210201115938647\"></p>\n<p><code>int(10)</code>表示显示宽度，与存储宽度无关，如括号里面的10表示0填充时自动填充至10位</p>\n</li>\n<li><p>字符串</p>\n<p><img src=\"https://i.loli.net/2021/02/01/6FPlJbWwdOyEhBu.png\" alt=\"image-20210201120227494\"></p>\n<p><code>varchar(20)</code>表示可变宽度</p>\n</li>\n<li><p>时间日期</p>\n<p><img src=\"https://i.loli.net/2021/02/01/x915gEJMt6F87kr.png\" alt=\"image-20210201120552461\"></p>\n</li>\n<li><p>null</p>\n<p>无值，跟任何数计算结果均为null</p>\n</li>\n</ul>\n<h3 id=\"字段属性\"><a href=\"#字段属性\" class=\"headerlink\" title=\"字段属性\"></a>字段属性</h3><ul>\n<li>unsigned:无符号整数，声明该列不能为负数</li>\n<li>zerofill:0填充，不足的位数用0来填充，如int(3),5-&gt;005</li>\n<li>自增：自动在上一条记录基础上+1；通常用来设置唯一主键，必须为整数型，可以设置起始值和步长</li>\n<li>非空：插入数据时不填写该数据会报错</li>\n<li>默认：插入数据时不填写该数据会自动填写为设置的值</li>\n</ul>\n<h3 id=\"数据规范\"><a href=\"#数据规范\" class=\"headerlink\" title=\"数据规范\"></a>数据规范</h3><p>每个表都必须包含以下字段，表示一个记录的存在意义：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>主键</td>\n</tr>\n<tr>\n<td>‘version’</td>\n<td>乐观锁</td>\n</tr>\n<tr>\n<td>is_delete</td>\n<td>伪删除</td>\n</tr>\n<tr>\n<td>gmt_create</td>\n<td>创建时间</td>\n</tr>\n<tr>\n<td>gmt_update</td>\n<td>修改时间</td>\n</tr>\n</tbody></table>\n<h3 id=\"数据库引擎\"><a href=\"#数据库引擎\" class=\"headerlink\" title=\"数据库引擎\"></a>数据库引擎</h3><ul>\n<li>INNODB:现在默认使用，安全性高，事务处理，多表操作</li>\n<li>MYISAM:早些年使用，节约空间，速度较快</li>\n</ul>\n<p>区别：</p>\n<table>\n<thead>\n<tr>\n<th>区别项</th>\n<th>MYISAM</th>\n<th>INNODB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>事务支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>数据行锁定</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>外键约束</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>表空间大小</td>\n<td>较小</td>\n<td>较大，约为前者的2倍</td>\n</tr>\n</tbody></table>\n<p>所有数据库文件都存在于data目录下，本质是文件的存储</p>\n<ul>\n<li>INNODB在数据库目录中只有一个<code>*.frm</code>文件，以及上级目录的<code>ibdata1</code>文件</li>\n<li>MYISAM对应文件<ul>\n<li><code>*.frm</code>表结构定义文件</li>\n<li><code>*.MYD</code>数据文件(data)</li>\n<li><code>*.MYI</code>索引文件(index)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"字符集编码\"><a href=\"#字符集编码\" class=\"headerlink\" title=\"字符集编码\"></a>字符集编码</h3><p>默认编码=Latin1，不支持中文</p>\n<p>要显示中文应设置<code>charset=utf8</code></p>\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><h4 id=\"事务的四大特征ACID\"><a href=\"#事务的四大特征ACID\" class=\"headerlink\" title=\"事务的四大特征ACID\"></a>事务的四大特征ACID</h4><p>A 原子性：事务是最小的单位，不可再分割，同一事物中的sql语句必须保证同时成功或同时失败；</p>\n<p>C 一致性：最终一致性：事务前后总和相同；</p>\n<p>I 隔离性：事务1和事务2之间是有隔离性的，同时进行多个事务处理时，一个事务不能操作另一个事务正在操作的数据；</p>\n<p>D 持久性：事务一旦结束(commit,roll back)就不可以返回，事务未提交之前重启数据库则恢复原状，一旦提交则持久化到数据库；</p>\n<p><strong>隔离引发相关问题</strong></p>\n<table>\n<thead>\n<tr>\n<th>概念</th>\n<th>理解</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>脏读</td>\n<td>一个事务读到了另一个事务没有提交的数据，实际开发下是不允许存在的</td>\n</tr>\n<tr>\n<td>不可重复读</td>\n<td>一个事务内读取到另一个事务插入的数据，导致前后读取同一个表的数据不一致</td>\n</tr>\n<tr>\n<td>虚读(幻读)</td>\n<td>两个不同的终端分别访问数据库并开启事务一个终端插入数据另一端不可见但也不可插入相同数据</td>\n</tr>\n<tr>\n<td>串行化</td>\n<td>一个终端开启事务操作数据时另一个终端进行操作会进入等待状态（卡死），一旦终端commit后另一终端再解除等待</td>\n</tr>\n</tbody></table>\n<ul>\n<li>串行化问题是性能最差，即隔离级别越高性能越差</li>\n<li>mysql默认隔离级别是repeatable-read</li>\n</ul>\n<h4 id=\"SQL中的事务\"><a href=\"#SQL中的事务\" class=\"headerlink\" title=\"SQL中的事务\"></a>SQL中的事务</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> autocommit = <span class=\"number\">0</span> <span class=\"comment\">-- 关闭自动提交</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> autocommit = <span class=\"number\">1</span> <span class=\"comment\">-- 开启自动提交(默认)</span></span><br></pre></td></tr></table></figure>\n\n<p>事务全过程</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> autocommit = <span class=\"number\">0</span> <span class=\"comment\">-- 关闭自动提交</span></span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">transaction</span> <span class=\"comment\">-- 标记事务开始，从这开始的sql都在同一个事务中</span></span><br><span class=\"line\"><span class=\"comment\">-- SQL语句</span></span><br><span class=\"line\">insert...</span><br><span class=\"line\">insert...</span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"comment\">-- 提交，事务持久化</span></span><br><span class=\"line\">rollbak <span class=\"comment\">-- 回滚，返回原来状态</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> autocommit = <span class=\"number\">1</span> <span class=\"comment\">--开启自动提交,恢复默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">savepoint</span> 保存点名 <span class=\"comment\">-- 设置保存点</span></span><br><span class=\"line\"><span class=\"keyword\">rollback</span> <span class=\"keyword\">to</span> <span class=\"keyword\">savepoint</span> 保存点名 <span class=\"comment\">-- 保存点</span></span><br><span class=\"line\"><span class=\"keyword\">release</span> <span class=\"keyword\">savepoint</span> 保存点名 <span class=\"comment\">--撤销保存点</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p>帮助MySQL高效获取数据的数据结构，小数据时影响不明显，数据量很大时效果很明显，小数据量表不需要加索引，一般加在常来查询的字段上</p>\n<ul>\n<li>主键索引(primary key)<ul>\n<li>唯一标识，不可重复，只能有一个列作为主键</li>\n</ul>\n</li>\n<li>唯一索引(unique key)<ul>\n<li>表面重复列出现，可以重复</li>\n</ul>\n</li>\n<li>常规索引(key/index)<ul>\n<li>默认</li>\n</ul>\n</li>\n<li>全文索引(full text)<ul>\n<li>特定数据库引擎才有，快速定位数据</li>\n</ul>\n</li>\n</ul>\n<p><strong>匹配索引</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> student <span class=\"keyword\">where</span> <span class=\"keyword\">match</span>(studentNo) against(<span class=\"string\">&#x27;刘&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>SQL编程</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">delimiter $$ <span class=\"comment\">--函数标志</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">function</span> myFunction()</span><br><span class=\"line\"><span class=\"keyword\">returns</span> <span class=\"built_in\">int</span></span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\t<span class=\"keyword\">declare</span> <span class=\"keyword\">num</span> <span class=\"built_in\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">1000000</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">declare</span> i <span class=\"built_in\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\twhile i&lt;num do</span><br><span class=\"line\">\t\t<span class=\"keyword\">insert</span> ...</span><br><span class=\"line\">\t\t<span class=\"keyword\">set</span> i=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">end</span> <span class=\"keyword\">while</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>索引数据结构：Btree</strong>,详细介绍<a href=\"http://blog.codinglabs.org/articles/theory-of-mysql-index.html\">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p>\n<p>MySQL端口号：3306</p>\n<h2 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a>SQL</h2><p>基础概念</p>\n<h3 id=\"主要操作\"><a href=\"#主要操作\" class=\"headerlink\" title=\"主要操作\"></a>主要操作</h3><p>命令结尾跟<code>;</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u root -p\t<span class=\"comment\">-- 登录</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> mysql.user <span class=\"keyword\">set</span> authentication_string=<span class=\"keyword\">password</span>(<span class=\"string\">&#x27;123456&#x27;</span>)<span class=\"keyword\">where</span> <span class=\"keyword\">user</span>=<span class=\"string\">&#x27;root&#x27;</span> <span class=\"keyword\">and</span> Host=<span class=\"string\">&#x27;localhost&#x27;</span>;\t<span class=\"comment\">-- 修改密码</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">version</span>()\t<span class=\"comment\">-- 查询mysql版本</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">100</span>*<span class=\"number\">3</span><span class=\"number\">-1</span> <span class=\"keyword\">as</span> 计算结果\t<span class=\"comment\">-- 可以用于简单计算</span></span><br><span class=\"line\"><span class=\"comment\">-- 代表注释</span></span><br><span class=\"line\"><span class=\"comment\">-- 字段加``取消高亮,一般用于字段和表名等</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>常用命令</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">databases</span>/<span class=\"keyword\">tables</span>\t<span class=\"comment\">-- 查看数据库/数据表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> xxx\t<span class=\"comment\">-- 创建数据库</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> xxx (值)\t<span class=\"comment\">--创建数据表</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> xxx\t<span class=\"comment\">-- 转到数据库</span></span><br><span class=\"line\"><span class=\"keyword\">desc</span> xxx\t<span class=\"comment\">-- 查看数据表的数据类型</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> xxx\t<span class=\"comment\">-- 查看表中(全部)类型的记录</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">database</span> db1\t<span class=\"comment\">-- 查看创建数据库</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb1\t<span class=\"comment\">-- 查看tb1数据表的定义语句</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>条件语句</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">create database [if not exists] db1\t\t条件语句在剧中可以省略</span><br><span class=\"line\">drop database [if not exists] db1</span><br></pre></td></tr></table></figure>\n\n<p><strong>建库示利</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> shop <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8 <span class=\"keyword\">collate</span> utf8_general_ci</span><br></pre></td></tr></table></figure>\n\n<p><strong>建表示例</strong></p>\n<p>格式</p>\n<p><img src=\"https://i.loli.net/2021/02/01/KXnZIwdqYa27PNo.png\" alt=\"image-20210201142116635\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`student`</span>(</span><br><span class=\"line\">\t<span class=\"string\">`id`</span> <span class=\"built_in\">INT</span>(<span class=\"number\">8</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;学号&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">`name`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;张三&#x27;</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;姓名&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">`pwd`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">13</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;123456&#x27;</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;密码&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">`birthday`</span> <span class=\"built_in\">DATE</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;生日&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">`address`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;派出所&#x27;</span> <span class=\"keyword\">COMMENT</span><span class=\"string\">&#x27;住址&#x27;</span>,</span><br><span class=\"line\">\tPRIMARY <span class=\"keyword\">KEY</span>(<span class=\"string\">`id`</span>)</span><br><span class=\"line\">)<span class=\"keyword\">ENGINE</span> <span class=\"keyword\">INNODB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>\n\n<p>注意：字段用``，值用’’，避免混淆</p>\n<h3 id=\"修改与删除\"><a href=\"#修改与删除\" class=\"headerlink\" title=\"修改与删除\"></a>修改与删除</h3><p>change用来字段重命名，不能修改字段类型和约束；modify不能字段重命名，只能修改字段类型和约束</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb <span class=\"keyword\">rename</span> <span class=\"keyword\">as</span> tb1; <span class=\"comment\">-- 更改表名</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb tb1 <span class=\"keyword\">add</span> age <span class=\"built_in\">int</span>(<span class=\"number\">11</span>); <span class=\"comment\">-- 增加字段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb <span class=\"keyword\">modify</span> age <span class=\"built_in\">varchar</span>(<span class=\"number\">11</span>); <span class=\"comment\">-- 修改约束</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb <span class=\"keyword\">change</span> <span class=\"keyword\">id</span> id1 <span class=\"built_in\">int</span>(<span class=\"number\">11</span>); <span class=\"comment\">-- 字段重命名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb <span class=\"keyword\">drop</span> age <span class=\"comment\">-- 删除字段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> tb1 <span class=\"comment\">-- 删除表</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"主键约束\"><a href=\"#主键约束\" class=\"headerlink\" title=\"主键约束\"></a>主键约束</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">primary key()\t\t\t\t\t非空唯一</span><br><span class=\"line\">primary key(,)\t\t\t\t\t多项数据都非空，之和唯一</span><br><span class=\"line\">auto_increment\t\t\t\t\t自增</span><br><span class=\"line\">unique\t\t\t\t\t\t\t唯一</span><br><span class=\"line\">not_null\t\t\t\t\t\t非空</span><br><span class=\"line\">default\t\t\t\t\t\t\t默认（一般不用声明）</span><br><span class=\"line\">foreign_key\t\t\t\t\t\t外键约束</span><br></pre></td></tr></table></figure>\n\n<p>创建外键约束：在副表末尾跟<code>foreign (id) reference xxx(id)</code>，即创建与主表class之间的链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">建表完成后添加约束：</span><br><span class=\"line\">alter table xxx add primary key(id)</span><br><span class=\"line\">alter table xxx modify id int primary key</span><br><span class=\"line\">删除约束：</span><br><span class=\"line\">alter table xxx drop primary key</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"外键\"><a href=\"#外键\" class=\"headerlink\" title=\"外键\"></a>外键</h4><p>删除有外键关系的表时，必须先删除从表再删除主表</p>\n<p><strong>数据库级别外键</strong></p>\n<p>又称物理外键,一般不建议使用，避免数据库过多造成困扰，一般使用时在开发程序的应用层中编写逻辑实现</p>\n<p><strong>创建从表时增加外键约束</strong></p>\n<p>给student表的<code>gradeid</code>字段添加到<code>grade</code>的外键</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`student`</span>(</span><br><span class=\"line\">\t<span class=\"string\">`id`</span> <span class=\"built_in\">INT</span>(<span class=\"number\">8</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;学号&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">`name`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;张三&#x27;</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;姓名&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">`pwd`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">13</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;123456&#x27;</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;密码&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">`birthday`</span> <span class=\"built_in\">DATE</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;生日&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">`address`</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">100</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;派出所&#x27;</span> <span class=\"keyword\">COMMENT</span><span class=\"string\">&#x27;住址&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">`gradeid`</span> <span class=\"built_in\">INT</span>(<span class=\"number\">8</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;年级id&#x27;</span>,</span><br><span class=\"line\">\tPRIMARY <span class=\"keyword\">KEY</span>(<span class=\"string\">`id`</span>),</span><br><span class=\"line\">    <span class=\"keyword\">key</span> <span class=\"string\">`FK_gradeid`</span> (<span class=\"string\">`gradeid`</span>),</span><br><span class=\"line\">    <span class=\"keyword\">constraint</span> <span class=\"string\">`fk_gradeid`</span> <span class=\"keyword\">foreign</span> <span class=\"keyword\">key</span> (<span class=\"string\">`gradeid`</span>) <span class=\"keyword\">references</span> <span class=\"string\">`grade`</span> (<span class=\"string\">`gradeid`</span>)</span><br><span class=\"line\">)<span class=\"keyword\">ENGINE</span> <span class=\"keyword\">INNODB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>\n\n<p><strong>建表之后添加外键约束</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> <span class=\"string\">`student`</span></span><br><span class=\"line\"><span class=\"keyword\">add</span> <span class=\"keyword\">constraint</span> <span class=\"string\">`FK_gradeid`</span> <span class=\"keyword\">foreign</span> <span class=\"keyword\">key</span>(<span class=\"string\">`gradeid`</span>) <span class=\"keyword\">references</span> <span class=\"string\">`grade`</span> (<span class=\"string\">`gradeid`</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DML语言\"><a href=\"#DML语言\" class=\"headerlink\" title=\"DML语言\"></a>DML语言</h3><p>数据操纵语言</p>\n<ul>\n<li><p>添加insert</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"string\">`student`</span> (<span class=\"string\">`name`</span>) <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;李四&#x27;</span>); <span class=\"comment\">-- 插入特定字段的值</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"string\">`student`</span> (<span class=\"string\">`name`</span>) <span class=\"keyword\">values</span>(<span class=\"string\">&#x27;李四&#x27;</span>),(<span class=\"string\">&#x27;王五&#x27;</span>) <span class=\"comment\">-- 插入多项数据</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"string\">`student`</span> (<span class=\"string\">`name`</span>,<span class=\"string\">`pwd`</span>) <span class=\"keyword\">values</span>(<span class=\"string\">`李四`</span>,<span class=\"string\">`123`</span>) <span class=\"comment\">-- 插入一项多字段的数据，插入时字段一一对应</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> <span class=\"string\">`student`</span> <span class=\"keyword\">values</span>(<span class=\"string\">`李四`</span>,<span class=\"string\">`123`</span>) <span class=\"comment\">-- 无字段插入数据，插入时字段与值一一对应</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改update</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"string\">`student`</span> <span class=\"keyword\">set</span> <span class=\"string\">`name`</span>=<span class=\"string\">&#x27;张三&#x27;</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span>; <span class=\"comment\">-- 修改id为1的学员姓名</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"string\">`student`</span> <span class=\"keyword\">set</span> <span class=\"string\">`name`</span>=<span class=\"string\">&#x27;张三&#x27;</span>,<span class=\"string\">`email`</span>=<span class=\"string\">`123@gmail.com`</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span>; <span class=\"comment\">-- 多字段修改</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> <span class=\"string\">`student`</span> <span class=\"keyword\">set</span> <span class=\"string\">`name`</span>=<span class=\"string\">&#x27;张三&#x27;</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span> <span class=\"keyword\">and</span> sex = <span class=\"string\">`女`</span>; <span class=\"comment\">-- 多约束修改</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除delete</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> <span class=\"string\">`student`</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">1001</span>;</span><br></pre></td></tr></table></figure>\n\n<p>切记添加约束</p>\n<p>不使用where进行约束时会将修改应用于所有数据，请务必小心</p>\n<p><code>truncate</code>删除所有数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"string\">`student`</span>;</span><br></pre></td></tr></table></figure>\n\n<p>相同点：两者都能删除数据，不删除表结构</p>\n<p>不同点：<code>truncate</code>重新设置自增列，计数器归零，且不会影响事；delete删除后若为InnoDB引擎重启数据库后计数器归零(计数存在于内存中)，若为MyISAM引擎重启后会继承上次计数(计数存在于文件中)</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into xxx values()\t\t插入值</span><br><span class=\"line\">delete from xxx\t\t\t\t\t删除数据记录</span><br><span class=\"line\">update xxx set name&#x3D;&#39;&#39;\t\t\t将表中name修改为&#39;&#39;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"选择约束\"><a href=\"#选择约束\" class=\"headerlink\" title=\"选择约束\"></a>选择约束</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">where\t\t\t\t\t\t\t添加约束(后加条件语句)</span><br><span class=\"line\">group by xxx\t\t\t\t\t分组查询</span><br><span class=\"line\">having\t\t\t\t\t\t\t分组后过滤</span><br><span class=\"line\">between 1 and 5</span><br><span class=\"line\">like &#39;3%&#39;\t\t\t\t\t\t模糊查询（以3开头）</span><br></pre></td></tr></table></figure>\n\n<p>where后的特殊表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;&gt; -- 不等判定，与!&#x3D;通用</span><br><span class=\"line\">between 1 and 5 --区间判定，两个数字之间</span><br><span class=\"line\">and\t-- 并</span><br><span class=\"line\">or -- 或</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DQL语言\"><a href=\"#DQL语言\" class=\"headerlink\" title=\"DQL语言\"></a>DQL语言</h3><p>数据查询语言，数据库核心语言</p>\n<p><strong>select完整语法</strong></p>\n<p><img src=\"https://i.loli.net/2021/02/08/WAahsYyPDS31JVK.png\" alt=\"image-20210208153320888\"></p>\n<p><strong>select语句可以用于其他操作</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">version</span>()\t<span class=\"comment\">-- 查询mysql版本</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"number\">100</span>*<span class=\"number\">3</span><span class=\"number\">-1</span> <span class=\"keyword\">as</span> 计算结果\t<span class=\"comment\">-- 可以用于简单计算</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> @@auto_increment_increment\t<span class=\"comment\">-- 查询自增步长</span></span><br><span class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> ... <span class=\"comment\">-- 分析查询情况</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"简单查询\"><a href=\"#简单查询\" class=\"headerlink\" title=\"简单查询\"></a>简单查询</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> tb1\t<span class=\"comment\">-- 查询全部学生</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">`字段名`</span> <span class=\"keyword\">from</span> tb1\t<span class=\"comment\">-- 查询指定字段</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">`字段1`</span> <span class=\"keyword\">as</span> 指定名<span class=\"number\">1</span>,<span class=\"string\">`字段2`</span> <span class=\"keyword\">as</span> 指定名<span class=\"number\">2</span> <span class=\"keyword\">from</span> tb1 <span class=\"keyword\">as</span> 指定表<span class=\"number\">1</span>\t<span class=\"comment\">-- 给字段或表起别名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">concat</span>(<span class=\"string\">`姓名`</span>,StudentName) <span class=\"keyword\">as</span> 新名字 <span class=\"keyword\">from</span> student\t<span class=\"comment\">-- concat函数进行拼接数据</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> <span class=\"string\">`StudentNo`</span> <span class=\"keyword\">from</span> <span class=\"keyword\">result</span> <span class=\"comment\">-- 去重关键字distinct,用来去除多余的重复数据</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">`StudentNo`</span>,<span class=\"string\">`StudentResult`</span>+<span class=\"number\">1</span> <span class=\"keyword\">as</span> <span class=\"string\">&#x27;提分后&#x27;</span> <span class=\"keyword\">from</span> <span class=\"keyword\">result</span>\t<span class=\"comment\">-- 学员成绩+1查看</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">`StudentNo`</span>,<span class=\"string\">`StudentResult`</span>+<span class=\"number\">1</span> <span class=\"keyword\">as</span> <span class=\"string\">&#x27;提分后&#x27;</span> <span class=\"keyword\">from</span> <span class=\"keyword\">result</span> groupby <span class=\"string\">`StudentNo`</span> <span class=\"comment\">-- 分组查询</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>concat</code>函数拼接图例</strong></p>\n<p><img src=\"https://i.loli.net/2021/02/06/vgSKEfzQW7RLNxm.png\" alt=\"image-20210206154030772\"></p>\n<h4 id=\"where条件查询\"><a href=\"#where条件查询\" class=\"headerlink\" title=\"where条件查询\"></a>where条件查询</h4><p>基本句式</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> studentNo, <span class=\"string\">`studentResult`</span> <span class=\"keyword\">from</span> <span class=\"keyword\">result</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> studentresult <span class=\"keyword\">between</span> <span class=\"number\">95</span> <span class=\"keyword\">and</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> studentNo, <span class=\"string\">`studentResult`</span> <span class=\"keyword\">from</span> <span class=\"keyword\">result</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">not</span> studentNo = <span class=\"number\">1000</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>where后的逻辑表达式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;&gt; -- 不等判定，与!&#x3D;通用</span><br><span class=\"line\">between 1 and 5 --区间判定，两个数字之间</span><br><span class=\"line\">a and b\t-- 并</span><br><span class=\"line\">a or b\t-- 或</span><br><span class=\"line\">not a\t-- 非</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"模糊查询\"></a>模糊查询</h4><p>本质：比较运算符</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>语法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IS NULL</td>\n<td>a is null</td>\n<td>为null则为真</td>\n</tr>\n<tr>\n<td>IS NOT NULL</td>\n<td>a is not null</td>\n<td>不为null则为真</td>\n</tr>\n<tr>\n<td>BETWEEN</td>\n<td>a between b and c</td>\n<td>a在b和c之间为真</td>\n</tr>\n<tr>\n<td><strong>like</strong></td>\n<td>a like b</td>\n<td>SQL匹配，a匹配b则为真</td>\n</tr>\n<tr>\n<td><strong>IN</strong></td>\n<td>a in (a1,a2,a3…)</td>\n<td>假设a是其中一个值则为真</td>\n</tr>\n</tbody></table>\n<p><strong>like</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- %表示任意个字符</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">`studentNo`</span>,<span class=\"string\">`studentName`</span> <span class=\"keyword\">from</span> <span class=\"string\">`student`</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"string\">`studentName`</span> <span class=\"keyword\">like</span> <span class=\"string\">&#x27;刘%&#x27;</span>; <span class=\"comment\">-- 以%来模糊查询姓刘的学生</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">`studentNo`</span>,<span class=\"string\">`studentName`</span> <span class=\"keyword\">from</span> <span class=\"string\">`student`</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"string\">`studentName`</span> <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%嘉%&#x27;</span>; <span class=\"comment\">-- 以%来模糊查询名字里带嘉的学生</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- _表示一个字符</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">`studentNo`</span>,<span class=\"string\">`studentName`</span> <span class=\"keyword\">from</span> <span class=\"string\">`student`</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"string\">`studentName`</span> <span class=\"keyword\">like</span> <span class=\"string\">&#x27;刘_&#x27;</span>; <span class=\"comment\">-- 以_来模糊查询姓刘且名字只有两个字的学生</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">`studentNo`</span>,<span class=\"string\">`studentName`</span> <span class=\"keyword\">from</span> <span class=\"string\">`student`</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"string\">`studentName`</span> <span class=\"keyword\">like</span> <span class=\"string\">&#x27;刘__&#x27;</span>; <span class=\"comment\">-- 以_来模糊查询姓刘且名字只有三个字的学生</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>in</strong></p>\n<p>一个或多个值</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">`studentNo`</span>,<span class=\"string\">`studentName`</span> <span class=\"keyword\">from</span> <span class=\"string\">`student`</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"string\">`studentNo`</span> <span class=\"keyword\">in</span> (<span class=\"number\">1001</span>,<span class=\"number\">1002</span>,<span class=\"number\">1003</span>); <span class=\"comment\">-- 模糊查询标号其中的学生</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>null/not null</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">`studentNo`</span>,<span class=\"string\">`studentName`</span> <span class=\"keyword\">from</span> <span class=\"string\">`student`</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"string\">`address`</span>=<span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">or</span> address <span class=\"keyword\">is</span> <span class=\"literal\">null</span>; <span class=\"comment\">-- 模糊查询地址为空的学生</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">`studentNo`</span>,<span class=\"string\">`studentName`</span> <span class=\"keyword\">from</span> <span class=\"string\">`student`</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"string\">`BirthDate`</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>; <span class=\"comment\">-- 模糊查询地址为空的学生</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"联表查询\"><a href=\"#联表查询\" class=\"headerlink\" title=\"联表查询\"></a>联表查询</h4><p><strong>外连接</strong></p>\n<p><img src=\"https://i.loli.net/2021/02/06/5CaWFwgcSM3tTGi.png\" alt=\"image-20210206171422572\"></p>\n<p>步骤：</p>\n<ul>\n<li>需求分析，分析查询的字段来自哪些表</li>\n<li>确定使用哪种查询方式(7种)</li>\n<li>确定交叉点和判断条件</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- inner join</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> s.<span class=\"string\">`studentNo`</span>,<span class=\"string\">`studentName`</span>,<span class=\"string\">`SubjectNo`</span>,<span class=\"string\">`StudentResult`</span> <span class=\"keyword\">from</span> <span class=\"string\">`student`</span> s <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> <span class=\"string\">`result`</span> r <span class=\"keyword\">where</span> s.<span class=\"string\">`studentNo`</span> = r.<span class=\"string\">`studentNo`</span>;\t<span class=\"comment\">-- 内联查询，将两个表中的共有字段`studentNo`作为交叉点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- right join</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> s.<span class=\"string\">`studentNo`</span>,<span class=\"string\">`studentName`</span>,<span class=\"string\">`SubjectNo`</span>,<span class=\"string\">`StudentResult`</span> <span class=\"keyword\">from</span> <span class=\"string\">`student`</span> s <span class=\"keyword\">right</span> <span class=\"keyword\">join</span> <span class=\"string\">`result`</span> r <span class=\"keyword\">on</span> s.<span class=\"string\">`studentNo`</span> = r.<span class=\"string\">`studentNo`</span>;\t<span class=\"comment\">-- 右查询，将两个表中的共有字段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- left join</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> s.<span class=\"string\">`studentNo`</span>,<span class=\"string\">`studentName`</span>,<span class=\"string\">`SubjectNo`</span>,<span class=\"string\">`StudentResult`</span> <span class=\"keyword\">from</span> <span class=\"string\">`student`</span> s <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> <span class=\"string\">`result`</span> r <span class=\"keyword\">on</span> s.<span class=\"string\">`studentNo`</span> = r.<span class=\"string\">`studentNo`</span>;\t<span class=\"comment\">-- 左查询，将两个表中的共有字段</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 连接词on为连接查询，where为等值查询</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Inner join</td>\n<td>若表中至少有一个匹配则返回该行</td>\n</tr>\n<tr>\n<td>left join</td>\n<td>返回左表中所有的值，即使右表没有匹配</td>\n</tr>\n<tr>\n<td>right join</td>\n<td>返回右表中所有的值，即使左表没有匹配</td>\n</tr>\n</tbody></table>\n<p><strong>自连接</strong></p>\n<p>将一张表理解为两个一摸一样的表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> a.<span class=\"string\">`categoryName`</span> <span class=\"keyword\">as</span> <span class=\"string\">&#x27;父栏目&#x27;</span>,b.<span class=\"string\">`categoryName`</span> <span class=\"keyword\">as</span> <span class=\"string\">&#x27;子栏目&#x27;</span> <span class=\"keyword\">from</span> <span class=\"string\">`category`</span> <span class=\"keyword\">as</span> a,<span class=\"string\">`category`</span> <span class=\"keyword\">as</span> b <span class=\"keyword\">where</span> a.<span class=\"string\">`category`</span>=b.<span class=\"string\">`pid`</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分页和排序\"><a href=\"#分页和排序\" class=\"headerlink\" title=\"分页和排序\"></a>分页和排序</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- order by 字段名 asc/desc</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">`StudentNo`</span>,<span class=\"string\">`StudentResult`</span>+<span class=\"number\">1</span> <span class=\"keyword\">as</span> <span class=\"string\">&#x27;提分后&#x27;</span> <span class=\"keyword\">from</span> <span class=\"keyword\">result</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"string\">`studentResult`</span> <span class=\"keyword\">asc</span> <span class=\"comment\">-- 升序排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- limit 起始数据序号 页面数据条数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">`StudentNo`</span>,<span class=\"string\">`StudentResult`</span>+<span class=\"number\">1</span> <span class=\"keyword\">as</span> <span class=\"string\">&#x27;提分后&#x27;</span> <span class=\"keyword\">from</span> <span class=\"keyword\">result</span> <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">5</span> <span class=\"comment\">-- limit来分页</span></span><br><span class=\"line\"><span class=\"comment\">-- 标准公式 limit (n-1)pagesize, pagesize 其中n为当前页，pagesize为页面大小</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h4><p>where之后再嵌套另外一个子查询语句，可以理解为将一个查询分解为多个查询，在一些情况中与联表查询同功能</p>\n<p>公式<code>where (select ...)</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">`StudentNo`</span>,<span class=\"string\">`SubjectNo`</span>,<span class=\"string\">`StudentResult`</span> <span class=\"keyword\">from</span> <span class=\"string\">`result`</span> <span class=\"keyword\">where</span> (<span class=\"keyword\">select</span> <span class=\"string\">`SubjectNo`</span> <span class=\"keyword\">from</span> <span class=\"string\">`subject`</span> <span class=\"keyword\">where</span> <span class=\"string\">`SubejectName`</span> = <span class=\"string\">&#x27;数据库结构-1&#x27;</span>) <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"string\">`StudentResult`</span> <span class=\"keyword\">Desc</span></span><br><span class=\"line\"><span class=\"comment\">-- 利用子查询降序查看课程名为数据库结构-1的学生成绩</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MySQL常用函数\"><a href=\"#MySQL常用函数\" class=\"headerlink\" title=\"MySQL常用函数\"></a>MySQL常用函数</h4><p><strong>常用函数</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 数学运算</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">abs</span>(<span class=\"number\">-8</span>); <span class=\"comment\">-- 绝对值</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">ceiling</span>(<span class=\"number\">9.4</span>); <span class=\"comment\">-- 向上取整</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">floor</span>(<span class=\"number\">9.4</span>) <span class=\"comment\">-- 向下取整</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">rand</span>(); <span class=\"comment\">-- 返回0-1之间的随机数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">sign</span>(<span class=\"number\">-1</span>); <span class=\"comment\">-- 判断数的符号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 字符串函数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">char_length</span>(<span class=\"string\">&#x27;abcde&#x27;</span>) <span class=\"comment\">-- 返回字符串长度</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>) <span class=\"comment\">-- 拼接字符串</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">INSERT</span>(<span class=\"string\">&#x27;需要插入的字符串&#x27;</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"string\">&#x27;新字符串&#x27;</span>); <span class=\"comment\">-- 查询，从某个位置替换某个长度</span></span><br><span class=\"line\"><span class=\"comment\">-- 替换结果：&#x27;新字符串的字符串&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">lower</span>(<span class=\"string\">&#x27;Ab&#x27;</span>) <span class=\"comment\">-- 全转小写</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">upper</span>(<span class=\"string\">&#x27;aB&#x27;</span>) <span class=\"comment\">-- 全转大写</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">instr</span>(<span class=\"string\">&#x27;abcde&#x27;</span>,<span class=\"string\">&#x27;h&#x27;</span>) <span class=\"comment\">-- 查询第一次出现子串的索引</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">replace</span>(<span class=\"string\">&#x27;坚持就能成功&#x27;</span>,<span class=\"string\">&#x27;坚持&#x27;</span>,<span class=\"string\">&#x27;努力&#x27;</span>) <span class=\"comment\">-- 指定替换，一般用insert</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">substr</span>(<span class=\"string\">&#x27;abcdefg&#x27;</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>) <span class=\"comment\">-- 截取指定字符串，结果cdef</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">reverse</span>(<span class=\"string\">&#x27;abcdefg&#x27;</span>) <span class=\"comment\">-- 反转字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 时间和日期</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">current_date</span>() <span class=\"comment\">-- 获取当前日期 </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">curdate</span>() <span class=\"comment\">-- 获取当前日期</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">now</span>() <span class=\"comment\">-- 获取当前时间</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">localtime</span>() <span class=\"comment\">-- 获取系统时间</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">sysdate</span>() <span class=\"comment\">-- 获取系统日期</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">year</span>(<span class=\"keyword\">now</span>()) <span class=\"comment\">-- 获取不同时间参数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">month</span>(<span class=\"keyword\">now</span>())</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">day</span>(<span class=\"keyword\">now</span>())</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">hour</span>(<span class=\"keyword\">now</span>())</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">minute</span>(<span class=\"keyword\">now</span>())</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">second</span>(<span class=\"keyword\">now</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 系统</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">system</span> <span class=\"keyword\">user</span>() <span class=\"comment\">-- 获取系统用户</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">user</span>() <span class=\"comment\">-- 获取用户</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">version</span>() <span class=\"comment\">-- 获取版本</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>聚合函数</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>() <span class=\"comment\">-- 计数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">sum</span>() <span class=\"comment\">-- 求和</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">avg</span>() <span class=\"comment\">-- 平均值</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">max</span>() <span class=\"comment\">-- 最大值</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">min</span>() <span class=\"comment\">-- 最小值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- count</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(<span class=\"string\">`BirthDate`</span>) <span class=\"keyword\">from</span> <span class=\"string\">`student`</span> <span class=\"comment\">-- 忽略所有null</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> <span class=\"string\">`student`</span> <span class=\"comment\">-- 不忽略所有null</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(<span class=\"number\">1</span>) <span class=\"keyword\">from</span> <span class=\"string\">`student`</span> <span class=\"comment\">-- 忽略所有null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- having可以对函数的结果进行过滤</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">avg</span>(StudentResult) <span class=\"keyword\">as</span> 平均分 </span><br><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"keyword\">result</span> r </span><br><span class=\"line\"><span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> <span class=\"string\">`subject`</span> sub </span><br><span class=\"line\"><span class=\"keyword\">on</span> r.<span class=\"string\">`SubjectNo`</span> = sub.<span class=\"string\">`SubjectNo`</span> </span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> r.<span class=\"string\">`SubjectNo`</span> <span class=\"comment\">-- 分组</span></span><br><span class=\"line\"><span class=\"keyword\">having</span> 平均分&gt;<span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MD5加密\"><a href=\"#MD5加密\" class=\"headerlink\" title=\"MD5加密\"></a>MD5加密</h4><p>信息加密算法，增强算法复杂度，不可逆，具体值的MD5值是一样的，破解网站的原理是字典</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 明文密码</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> testmd5 <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;张三&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>),(<span class=\"number\">2</span>,<span class=\"string\">&#x27;李四&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>),(<span class=\"number\">3</span>,<span class=\"string\">&#x27;王五&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">-- md5()加密函数</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> testmd5 <span class=\"keyword\">set</span> pwd = <span class=\"keyword\">MD5</span>(pwd) <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span> <span class=\"comment\">-- 加密密码1</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> testmd5 <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;张三&#x27;</span>,<span class=\"keyword\">md5</span>(<span class=\"string\">&#x27;123456&#x27;</span>)) <span class=\"comment\">-- 插入时加密</span></span><br><span class=\"line\"><span class=\"comment\">-- 校验：将用户传进的数据进行md5加密，然后对比加密后的值</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> testmd5 <span class=\"keyword\">where</span> <span class=\"string\">`name`</span>=<span class=\"string\">&#x27;张三&#x27;</span> <span class=\"keyword\">and</span> pwd=<span class=\"keyword\">md5</span>(<span class=\"string\">&#x27;123456&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MySQL高级\"><a href=\"#MySQL高级\" class=\"headerlink\" title=\"MySQL高级\"></a>MySQL高级</h2><h3 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h3><p>SQLyog可以进行对用户的管理，权限操作等</p>\n<p>用户表：<code>mysql.user</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> 用户名 <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;123456&#x27;</span> <span class=\"comment\">-- 以123456为密码</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> 用户名 <span class=\"comment\">-- 删除用户</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">password</span> = <span class=\"keyword\">password</span>(<span class=\"string\">&#x27;123456&#x27;</span>) <span class=\"comment\">--设置密码</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">password</span> <span class=\"keyword\">for</span> 用户名 = <span class=\"keyword\">password</span>(<span class=\"string\">&#x27;123456&#x27;</span>) <span class=\"comment\">-- 指定用户设置密码</span></span><br><span class=\"line\"><span class=\"keyword\">rename</span> <span class=\"keyword\">user</span> name1 <span class=\"keyword\">to</span> name2 <span class=\"comment\">-- 用户重命名</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> 用户名 <span class=\"comment\">-- 设置最高权限(没有grant权限)</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grant</span> <span class=\"keyword\">for</span> 用户名 <span class=\"comment\">-- 查看指定用户权限</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grant</span> <span class=\"keyword\">for</span> root@localhost <span class=\"comment\">-- 查看主机权限</span></span><br><span class=\"line\"><span class=\"keyword\">revoke</span> <span class=\"keyword\">all</span> privilege <span class=\"keyword\">on</span> *.* <span class=\"keyword\">for</span> 用户名 <span class=\"comment\">-- 撤销全权限</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据库备份\"><a href=\"#数据库备份\" class=\"headerlink\" title=\"数据库备份\"></a>数据库备份</h3><ul>\n<li>保证重要的数据不丢失</li>\n<li>数据转移</li>\n</ul>\n<p>方式：</p>\n<ul>\n<li><p>手动copy</p>\n</li>\n<li><p>Sqlyog可视化工具导出sql文件</p>\n</li>\n<li><p>命令行导入导出</p>\n<ul>\n<li><p>导出(若在登陆情况下可以不加用户名等选项)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#格式：mysqldump -h主机 -u用户名 -p密码 数据库 表名 &gt;物理磁盘位置/文件名</span></span><br><span class=\"line\">mysqldump -hlocalhost -uroot -p123456 school student &gt;D:/a.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#多表导出： mysqldump -h主机 -u用户名 -p密码 数据库 表1 表2 表3 &gt;物理磁盘位置/文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#导出数据库: mysqldump -h主机 -u用户名 -p密码 库1 库2 &gt;物理磁盘位置/文件名</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>导入(同上，默认已登录)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#格式：source 物理磁盘地址/文件名</span></span><br><span class=\"line\"><span class=\"built_in\">source</span>  d:/a.sql</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>通过sql文件的传递进行库的备份</p>\n</li>\n</ul>\n<h3 id=\"规范数据库设计\"><a href=\"#规范数据库设计\" class=\"headerlink\" title=\"规范数据库设计\"></a>规范数据库设计</h3><ul>\n<li>糟糕数据库设计<ul>\n<li>数据冗余，浪费空间</li>\n<li>数据库插入和删除麻烦，异常(屏蔽物理外键)</li>\n<li>程序性能差</li>\n</ul>\n</li>\n<li>良好的数据库设计<ul>\n<li>节省内存空间</li>\n<li>保证数据库完整性</li>\n<li>方便开发系统</li>\n</ul>\n</li>\n</ul>\n<p><strong>设计步骤</strong></p>\n<ul>\n<li>手机信息，分析需求(以博客网站分析实例)<ul>\n<li>用户表(用户登录注销，个人信息，写博客，创建分类)</li>\n<li>分类表(文章分类，创建者)</li>\n<li>文章表(文章信息)</li>\n<li>友链表(友链信息)</li>\n<li>自定义表(系统信息)</li>\n</ul>\n</li>\n<li>标识实体(需求落实到字段)</li>\n<li>表示实体之间的关系<ul>\n<li>写博客：user-&gt;blog</li>\n<li>创建分类：user-&gt;category</li>\n<li>关注：user-&gt;user</li>\n<li>友链：links</li>\n<li>评论：user-user-blog</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三大范式\"><a href=\"#三大范式\" class=\"headerlink\" title=\"三大范式\"></a>三大范式</h3><p>设计表的三大范式，规范数据库</p>\n<p><strong>为什么需要数据规范化</strong></p>\n<ul>\n<li>信息重复</li>\n<li>更新异常</li>\n<li>插入异常<ul>\n<li>无法正常显示信息</li>\n</ul>\n</li>\n<li>删除异常<ul>\n<li>丢失有效信息</li>\n</ul>\n</li>\n</ul>\n<p><strong>第一范式(1NF)</strong></p>\n<p>内容：数据库表的每一列都是不可分割的原子数据项</p>\n<p><img src=\"https://i.loli.net/2021/02/10/ewBYdlrAUMxnHTj.png\" alt=\"image-20210210113549834\"></p>\n<p><strong>第二范式(2NF)</strong></p>\n<p>前提：满足第一范式</p>\n<p>内容：</p>\n<p><img src=\"https://i.loli.net/2021/02/10/o8ZBh2GSP1zlMi5.png\" alt=\"image-20210210114011275\"></p>\n<p><strong>第三范式(3NF)</strong></p>\n<p>前提：满足第一范式和第二范式</p>\n<p>内容：</p>\n<p><img src=\"https://i.loli.net/2021/02/10/eWERtZ5pYS3yVhb.png\" alt=\"image-20210210114825964\"></p>\n<p><strong>规范性和性能问题</strong></p>\n<p>关联查询的表不得超过三张(阿里规范)</p>\n<ul>\n<li>考虑商业化的需求和目标，(成本和用户体验)数据库的性能更加重要</li>\n<li>在规范性能问题时，适当考虑下规范性</li>\n<li>故意给一些表增加冗余字段，将多表查询变为单表查询</li>\n<li>故意增加一些计算列(大数据量降低为小数据量：索引)</li>\n</ul>\n<h2 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h2><p>程序通过数据库驱动和数据库交互</p>\n<p>SUN公司为简化开发人员对数据库的统一操作，提供了一个java操作数据库的规范，俗称JDBC</p>\n<p>规范的具体实现由厂商完成</p>\n<p><img src=\"https://i.loli.net/2021/02/10/ROksE3uTgKVfzmI.png\" alt=\"image-20210210120241647\"></p>\n<p>两个包java.sql和javax.sql，此外再导入一个数据库驱动包mysql-connector-java-5.1.47.jar</p>\n<p>导入jar包：</p>\n<p><img src=\"https://i.loli.net/2021/02/10/eGA7xtbmz3cKDvR.png\" alt=\"image-20210210150151226\"></p>\n<h3 id=\"第一个JDBC程序\"><a href=\"#第一个JDBC程序\" class=\"headerlink\" title=\"第一个JDBC程序\"></a>第一个JDBC程序</h3><p><strong>步骤</strong></p>\n<ul>\n<li>加载驱动</li>\n<li>连接数据库DriverManager</li>\n<li>获得执行sql的对象Statement</li>\n<li>获得返回的结果集</li>\n<li>释放连接</li>\n</ul>\n<p>创建数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> jdbcStudy <span class=\"built_in\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">USE</span> jdbcStudy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`users`</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">id</span> <span class=\"built_in\">INT</span> PRIMARY <span class=\"keyword\">KEY</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">NAME</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">40</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">PASSWORD</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">40</span>),</span><br><span class=\"line\">\temail <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">60</span>),</span><br><span class=\"line\">\tbirthday <span class=\"built_in\">DATE</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">`users`</span>(<span class=\"keyword\">id</span>,<span class=\"keyword\">NAME</span>,<span class=\"keyword\">PASSWORD</span>,email,birthday)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span>(<span class=\"number\">1</span>,<span class=\"string\">&#x27;zhansan&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;zs@sina.com&#x27;</span>,<span class=\"string\">&#x27;1980-12-04&#x27;</span>),</span><br><span class=\"line\">(<span class=\"number\">2</span>,<span class=\"string\">&#x27;lisi&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;lisi@sina.com&#x27;</span>,<span class=\"string\">&#x27;1981-12-04&#x27;</span>),</span><br><span class=\"line\">(<span class=\"number\">3</span>,<span class=\"string\">&#x27;wangwu&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;wangwu@sina.com&#x27;</span>,<span class=\"string\">&#x27;1979-12-04&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>JDBC程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDBCTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.加载驱动</span></span><br><span class=\"line\">        <span class=\"comment\">//原本写法：DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span></span><br><span class=\"line\">        Class.forName(<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2.用户信息和url后面三个参数分别为：支持中文编码，设定字符集，设置安全连接</span></span><br><span class=\"line\">        String url = <span class=\"string\">&quot;jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&quot;</span>;</span><br><span class=\"line\">        String username = <span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">        String password = <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//3.连接成功，数据库对象</span></span><br><span class=\"line\">        Connection connection = DriverManager.getConnection(url,username,password);</span><br><span class=\"line\">        <span class=\"comment\">//4.执行SQL的对象</span></span><br><span class=\"line\">        Statement statement = connection.createStatement();</span><br><span class=\"line\">        <span class=\"comment\">//5.执行SQL的对象执行SQL，可能存在结果，查看返回结果</span></span><br><span class=\"line\">        String sql = <span class=\"string\">&quot;select * from users&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        ResultSet resultSet = statement.executeQuery(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (resultSet.next())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;id=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;name=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;name&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;pwd=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;password&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;email=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;email&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;birth=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;birthday&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;---------------------&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//6.释放连接</span></span><br><span class=\"line\">        <span class=\"comment\">//连接十分占用内存，需要从后到前释放</span></span><br><span class=\"line\">        resultSet.close();</span><br><span class=\"line\">        statement.close();</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Connection对象</strong></p>\n<p>数据库对象，可以执行一些数据库级别的指令</p>\n<p><strong>Statement对象</strong></p>\n<p>执行SQL的对象，常用函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">statement.execute();<span class=\"comment\">//执行任何SQL</span></span><br><span class=\"line\">statement.executeQuery();<span class=\"comment\">//查询操作返回ResultSet</span></span><br><span class=\"line\">statement.executeUpdate();<span class=\"comment\">//更新，插入，删除都能用，返回一个受影响的参数</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>ResultSet对象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">resultSet.getObject();<span class=\"comment\">//在不清楚列类型的情况下使用</span></span><br><span class=\"line\"><span class=\"comment\">//若知道列类型则使用指定的类型</span></span><br><span class=\"line\">resultSet.getString();</span><br><span class=\"line\">resultSet.getInt();</span><br><span class=\"line\">resultSet.getFloat();</span><br><span class=\"line\">resultSet.getDate();</span><br><span class=\"line\"></span><br><span class=\"line\">resultSet.next();<span class=\"comment\">//表示下一个数据对象是否存在</span></span><br><span class=\"line\">resultSet.absolute();<span class=\"comment\">//移动到指定行</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编写工具类\"><a href=\"#编写工具类\" class=\"headerlink\" title=\"编写工具类\"></a>编写工具类</h3><p>db.propeities配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">driver</span> = <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">url</span> = <span class=\"string\">jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class=\"line\"><span class=\"attr\">username</span> = <span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">password</span> = <span class=\"string\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p>JdbcUtils.java工具类文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Lesson.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdbcUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String driver = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String url = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String username = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String password = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//静态代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取配置文件</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//通过反射来获得配置文件的输入流</span></span><br><span class=\"line\">            InputStream in = JdbcUtils.class.getClassLoader().getResourceAsStream(&quot;Lesson/utils/db.properties&quot;);</span><br><span class=\"line\">            Properties properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">            properties.load(in);</span><br><span class=\"line\"></span><br><span class=\"line\">            driver = properties.getProperty(<span class=\"string\">&quot;driver&quot;</span>);</span><br><span class=\"line\">            url = properties.getProperty(<span class=\"string\">&quot;url&quot;</span>);</span><br><span class=\"line\">            username = properties.getProperty(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">            password = properties.getProperty(<span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//驱动只需加载一次</span></span><br><span class=\"line\">            Class.forName(driver);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块加载完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取mysql连接函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DriverManager.getConnection(url,username,password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//释放连接函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">(Connection conn, Statement st,ResultSet rs)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rs!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            rs.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(st!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            st.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(conn!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            conn.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//重载释放函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">(Connection conn, Statement st)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(st!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            st.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(conn!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            conn.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UtilsTest.java测试函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Lesson;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Lesson.utils.JdbcUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UtilsTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Connection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Statement st = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ResultSet rs = <span class=\"keyword\">null</span>;<span class=\"comment\">//查询时更新该参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn = JdbcUtils.getConnection();</span><br><span class=\"line\">            st = conn.createStatement();</span><br><span class=\"line\">            <span class=\"comment\">//编写SQL语句</span></span><br><span class=\"line\">            String sql = <span class=\"string\">&quot;insert into users(id,`NAME`,`PASSWORD`,`email`,`birthday`)&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;values(4,&#x27;shumu&#x27;,&#x27;123456&#x27;,&#x27;123456@163.com&#x27;,&#x27;2021-01-01&#x27;)&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = st.executeUpdate(sql);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;更新成功！&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//释放连接</span></span><br><span class=\"line\">            JdbcUtils.release(conn,st,rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h3><p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//login函数中的查询语句</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String username, String password)</span></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">    <span class=\"comment\">//拼接字符串来获得完整的sql语句</span></span><br><span class=\"line\">    String sql = <span class=\"string\">&quot;select * from users where &#x27;name&#x27; = &#x27;&quot;</span>+ username + <span class=\"string\">&quot;&#x27; and `password` = &#x27;&quot;</span> + password + <span class=\"string\">&quot;&#x27;&quot;</span>;</span><br><span class=\"line\">    rs = st.executeQuery(sql);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (rs.next())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;id=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;id&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;name=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;name&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;pwd=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;password&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;email=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;email&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;birth=&quot;</span>+resultSet.getObject(<span class=\"string\">&quot;birthday&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;---------------------&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时用户只需输入username=<code>&#39;or &#39;1=1</code>，password=<code>&#39;or &#39;1=1</code>即拼接出非正常的sql语句</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String sql = <span class=\"string\">&quot;select * from users where &#x27;name&#x27; = &#x27;&#x27;or &#x27;1=1&#x27; and `password` = &#x27;&#x27;or &#x27;1=1&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>即可破获给数据库的所有数据，形成信息安全漏洞，容易被攻击</p>\n<h3 id=\"PreparedStatement\"><a href=\"#PreparedStatement\" class=\"headerlink\" title=\"PreparedStatement\"></a>PreparedStatement</h3><p>代替Statement，可以防止SQL注入</p>\n<p>本质：检测传入的字符，若出现转义字符则直接转义(如)</p>\n<p>PpstTest.java测试函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Lesson.utils.JdbcUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.PreparedStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PpstTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        Connection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PreparedStatement ppst = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        conn = JdbcUtils.getConnection();</span><br><span class=\"line\">        <span class=\"comment\">//使用?占位符代替参数</span></span><br><span class=\"line\">        String sql = <span class=\"string\">&quot;insert into users(id,`name`,`password`,`email`,`birthday`)values(?,?,?,?,?)&quot;</span>;</span><br><span class=\"line\">        ppst = conn.prepareStatement(sql);<span class=\"comment\">//预编译SQL，先编写SQL但不执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第一个参数表示第几个字段，第二个参数表示用什么代替占位符</span></span><br><span class=\"line\">        ppst.setInt(<span class=\"number\">1</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\">        ppst.setString(<span class=\"number\">2</span>,<span class=\"string\">&quot;user6&quot;</span>);</span><br><span class=\"line\">        ppst.setString(<span class=\"number\">3</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        ppst.setString(<span class=\"number\">4</span>,<span class=\"string\">&quot;123456@163.com&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//sql.Date      数据库     java.sql.Date()传入时间戳</span></span><br><span class=\"line\">        <span class=\"comment\">//utils.Date    java       Date().getTime()函数获取时间戳    </span></span><br><span class=\"line\">        ppst.setDate(<span class=\"number\">5</span>, <span class=\"keyword\">new</span>  java.sql.Date(<span class=\"keyword\">new</span> Date().getTime()));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//直接执行预编译的sql，无参数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = ppst.executeUpdate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;更新成功！&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;更改失败，请重试！&quot;</span>);</span><br><span class=\"line\">        JdbcUtils.release(conn,ppst);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>IDEA导入数据库</strong></p>\n<p>必须先导入mysql-connector-java-5.1.47.jar包测试连接，连接数据库，可以在console界面编写执行sql代码，修改数据项后须点击提交以保存至数据库</p>\n<h3 id=\"JDBC中的事务\"><a href=\"#JDBC中的事务\" class=\"headerlink\" title=\"JDBC中的事务\"></a>JDBC中的事务</h3><p>ACID原则</p>\n<p>失败时会自动回滚</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Lesson;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Lesson.utils.JdbcUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.PreparedStatement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        Connection conn = JdbcUtils.getConnection();</span><br><span class=\"line\">        PreparedStatement ppst = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭自动提交(开启事务)</span></span><br><span class=\"line\">            conn.setAutoCommit(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">//编写多个sql语句</span></span><br><span class=\"line\">            String sql1 = <span class=\"string\">&quot;update account set money = money-100 where name = &#x27;A&#x27;&quot;</span>;</span><br><span class=\"line\">            ppst = conn.prepareStatement(sql1);</span><br><span class=\"line\">            ppst.executeUpdate();</span><br><span class=\"line\"></span><br><span class=\"line\">            String sql2 = <span class=\"string\">&quot;update account set money = money+100 where name = &#x27;B&#x27;&quot;</span>;</span><br><span class=\"line\">            ppst = conn.prepareStatement(sql2);</span><br><span class=\"line\">            ppst.executeUpdate();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//sql编写完成，提交修改</span></span><br><span class=\"line\">            conn.commit();</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;更新成功！&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//执行失败不需要执行catch中的内容，一旦报错会自动rollback</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;更新失败，请重试&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//释放连接</span></span><br><span class=\"line\">            JdbcUtils.release(conn,ppst);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据库连接池\"><a href=\"#数据库连接池\" class=\"headerlink\" title=\"数据库连接池\"></a>数据库连接池</h3><p>数据库连接–执行完毕–释放，连接到释放的过程十分浪费资源</p>\n<p><strong>池化技术：准备预先的资源，一旦连接就连接预先准备好的资源</strong></p>\n<p>根据常用连接数来决定最小连接数</p>\n<p>如：</p>\n<ul>\n<li>最小连接数：10</li>\n<li>最大连接数：20</li>\n<li>等待超时：100ms</li>\n</ul>\n<p>超过20个连接则会进行等待，超过100ms则会自行停止连接</p>\n<p>一般来说编写连接池，实现接口DataSourse接口</p>\n<p><strong>开源数据源实现</strong>(拿来即用)</p>\n<p>使用数据库连接池后可以不用编写连接数据库的代码</p>\n<ul>\n<li><p>DBCP</p>\n<p>需要导入的jar包：commons-dbcp2-2.8.0.jar,commons-pool2-2.9.0.jar,commons-logging-1.2.jar</p>\n</li>\n<li><p>C3P0</p>\n<p>需要导入的jar包：c3p0-0.9.5.5,mchange-commons-java-0.2.19</p>\n</li>\n<li><p>Druid(阿里)：</p>\n</li>\n</ul>\n<p><strong>DBCP实例</strong></p>\n<p>dbcpconfig.properties配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#连接设置</span></span><br><span class=\"line\"><span class=\"attr\">driverClassName</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"string\">123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#&lt;!-- 初始化连接 --&gt;</span></span><br><span class=\"line\"><span class=\"attr\">initialSize</span>=<span class=\"string\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#最大连接数量</span></span><br><span class=\"line\"><span class=\"attr\">maxActive</span>=<span class=\"string\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#&lt;!-- 最大空闲连接 --&gt;</span></span><br><span class=\"line\"><span class=\"attr\">maxIdle</span>=<span class=\"string\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#&lt;!-- 最小空闲连接 --&gt;</span></span><br><span class=\"line\"><span class=\"attr\">minIdle</span>=<span class=\"string\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#&lt;!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --&gt;</span></span><br><span class=\"line\"><span class=\"attr\">maxWait</span>=<span class=\"string\">60000</span></span><br><span class=\"line\"><span class=\"comment\">#JDBC驱动建立连接时附带的连接属性属性的格式必须为这样：[属性名=property;]</span></span><br><span class=\"line\"><span class=\"comment\">#注意：&quot;user&quot; 与 &quot;password&quot; 两个属性会被明确地传递，因此这里不需要包含他们。</span></span><br><span class=\"line\"><span class=\"attr\">connectionProperties</span>=<span class=\"string\">useUnicode=true;characterEncoding=UTF8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定由连接池所创建的连接的自动提交（auto-commit）状态。</span></span><br><span class=\"line\"><span class=\"attr\">defaultAutoCommit</span>=<span class=\"string\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#driver default 指定由连接池所创建的连接的只读（read-only）状态。</span></span><br><span class=\"line\"><span class=\"comment\">#如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）</span></span><br><span class=\"line\"><span class=\"attr\">defaultReadOnly</span>=<span class=\"string\"></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。</span></span><br><span class=\"line\"><span class=\"comment\">#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</span></span><br><span class=\"line\"><span class=\"attr\">defaultTransactionIsolation</span>=<span class=\"string\">READ_UNCOMMITTED</span></span><br></pre></td></tr></table></figure>\n\n<p>JdbcUtils_DBCP工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Lesson.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.dbcp2.BasicDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.dbcp2.BasicDataSourceFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdbcUtils_DBCP</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BasicDataSource dataSource = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//静态代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取配置文件</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//通过反射来获得指定文件的输入流</span></span><br><span class=\"line\">            InputStream in = JdbcUtils.class.getClassLoader().getResourceAsStream(&quot;Lesson/utils/dbcpconfig.properties&quot;);</span><br><span class=\"line\">            Properties properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">            properties.load(in);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//创建数据源 工厂模式创建对象</span></span><br><span class=\"line\">            dataSource = BasicDataSourceFactory.createDataSource(properties);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块加载完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取mysql连接函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataSource.getConnection();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//释放连接函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">(Connection conn, Statement st,ResultSet rs)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rs!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            rs.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(st!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            st.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(conn!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            conn.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">release</span><span class=\"params\">(Connection conn, Statement st)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(st!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            st.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(conn!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            conn.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>DbcpTest.java测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Lesson;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Lesson.utils.JdbcUtils_DBCP;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.ResultSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Statement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DbcpTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Connection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Statement st = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            conn = JdbcUtils_DBCP.getConnection();</span><br><span class=\"line\">            st = conn.createStatement();</span><br><span class=\"line\">            String sql = <span class=\"string\">&quot;insert into users(id,`name`,`password`,`email`,`birthday`)&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;values(7,&#x27;user7&#x27;,&#x27;123456&#x27;,&#x27;123456@163.com&#x27;,&#x27;2021-01-01&#x27;)&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = st.executeUpdate(sql);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;更新成功！&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//释放连接</span></span><br><span class=\"line\">            JdbcUtils_DBCP.release(conn,st);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>无论使用什么数据源，本质是一样的，DataSource接口不变，方法就不会变</p>\n<p><strong>写在最后：面试高频考点：</strong></p>\n<ul>\n<li>MySql引擎<ul>\n<li>InnoDB</li>\n<li>MyIsam</li>\n</ul>\n</li>\n<li>InnoDB底层原理</li>\n<li>索引</li>\n<li>索引优化</li>\n</ul>\n<h2 id=\"安装问题\"><a href=\"#安装问题\" class=\"headerlink\" title=\"安装问题\"></a>安装问题</h2><p>linux系统中安装mysql是没有data目录的，默认的data目录是/var/lib/mysql</p>\n<p>在centos中安装mysql启动报错，在mysql配置文件中找对应的错误日志位置<code>cat /etc/my.cnf</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220624103723.png\" alt=\"image-20220624103716346\"></p>\n<p>一般在<code>/var/log/mysqld.log</code></p>\n<ul>\n<li><p>启动mysql服务<code>systemctl start mysqld</code>，发现没执行数据表初始化<code>mysqld --initialize --console --user-mysql</code>，如果发现<code>Failed to find valid data directory.</code>报错，需要修改对应的文件夹权限:<code>chmod -R /var/lib/mysql mysql:mysql</code></p>\n</li>\n<li><p>同时这一步会生成临时密码，需要查找日志找出来<code>cat /var/log/mysqld.log|grep localhost</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220624152819.png\" alt=\"image-20220624152819900\"></p>\n</li>\n<li><p>这时可能会发现另一个报错：<code>The designated data directory /var/lib/mysql/ is unusable. You can remove all files that the server added to it.</code>，笔者尝试按照提示取删除mysql文件夹中的内容，但是还是无法正常运行，只能更改datadir目录，将<code>/etc/my.cnf</code>中改为<code>datadir=/var/lib/mysql/data</code>，这时才正常初始化成功。当然手动创建的/var/lib/mysql/data权限也需要修改为mysql:mysql</p>\n</li>\n<li><p>当mysqld –initialize初始化完成后，就可以正常登录mysql了：<code>mysql -uroot -p刚才获取到的临时密码</code>，然后再mysql客户端中修改密码<code>alter user root@localhost identified by &#39;新密码&#39;;</code></p>\n</li>\n</ul>\n","categories":["数据库"]},{"title":"Redis","url":"/2021/09/18/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/","content":"<h1 id=\"Redis特点\"><a href=\"#Redis特点\" class=\"headerlink\" title=\"Redis特点\"></a>Redis特点</h1><p><strong>NoSQL特点</strong></p>\n<ol>\n<li>大数据高性能(Redis一秒写8w次，读11w次，细粒度的关村，性能较高)</li>\n<li>数据类型多样性，不需要实现设计数据库，随取随用，键值对存储，列存储，文档存储，图形数据库</li>\n<li>方便扩展（数据之间没有关系，容易扩展）</li>\n<li>没有固定查询语言</li>\n<li>最终一致性</li>\n<li>CAP定理和BASE （异地多活）</li>\n</ol>\n<p><strong>大数据特点</strong></p>\n<ul>\n<li>3V：描述问题<ul>\n<li>海量Volume</li>\n<li>多样Variety</li>\n<li>实时Veiocity</li>\n</ul>\n</li>\n<li>3高：对程序的要求<ul>\n<li>高并发</li>\n<li>高可用（随时水平拆分）</li>\n<li>高性能（保证用户使用）</li>\n</ul>\n</li>\n</ul>\n<p><strong>NoSQL分类</strong></p>\n<ul>\n<li><p>KV键值对：Redis</p>\n</li>\n<li><p>文档型数据库：</p>\n<ul>\n<li>MongoDB：分布式文件存储的数据库，c++变编写，一个介于关系型和非关系型之间的产品</li>\n<li>CouchDB</li>\n</ul>\n</li>\n<li><p>列存储数据库：HBase</p>\n</li>\n<li><p>图关系数据库：Neo4j，InfoGrid</p>\n<p>用来存储对象之间的关系网图，如社交关系网</p>\n</li>\n</ul>\n<p><strong>Redis：Remote DIctionary Server</strong></p>\n<p><strong>特点</strong></p>\n<ul>\n<li>内存存储，持久化（rdb,aof）</li>\n<li>效率高，用于高速存储</li>\n<li>发布订阅信息</li>\n<li>地图信息分析</li>\n<li>计时器、计数器（浏览量等）</li>\n<li>Redis的常见用途：<strong>数据库</strong>、<strong>缓存</strong>、<strong>消息中间件MQ</strong></li>\n</ul>\n<blockquote>\n<p><strong>为什么Redis是单线程的？</strong></p>\n<p>Redis给予内存操作，Redis的性能瓶颈不是CPU，而是机器的内存和网络带宽，既然可以使用单线程来实现，就没必要用多线程</p>\n<ul>\n<li>避免线程上下文切换开销</li>\n<li>避免线程同步机制的开销</li>\n<li>如果是多线程模型就需要设计底层线程安全的数据结构，这会让redis更加复杂</li>\n</ul>\n</blockquote>\n<p><strong>Redis是多线程吗？</strong></p>\n<ul>\n<li>Redis4.0(引入多线程处理异步任务)</li>\n<li>Redis6.0(在网络模型中实现多线程IO)</li>\n</ul>\n<p>一般讨论的单线程Redis一般指Redis6.0之前的单线程多路复用网络模型</p>\n<p>但Redis6.0执行实际任务仍然是单线程，除非是非阻塞命令，如：UNLINK, FLUSHALL ASYNC, FLUSHDB ASYNC</p>\n<h1 id=\"Redis配置\"><a href=\"#Redis配置\" class=\"headerlink\" title=\"Redis配置\"></a>Redis配置</h1><h2 id=\"安装和运行\"><a href=\"#安装和运行\" class=\"headerlink\" title=\"安装和运行\"></a>安装和运行</h2><blockquote>\n<p>Redis官方推荐在linux上进行redis的部署，github的windows版本已经停更许久</p>\n</blockquote>\n<p>redis默认端口号6379</p>\n<p>操作流程：</p>\n<ol>\n<li><p>直接解压<code>redis-6.2.5.tar.gz</code></p>\n</li>\n<li><p>安装依赖<code>yum install gcc-c++</code></p>\n<p><code>gcc -v</code>检查版本</p>\n</li>\n<li><p>redis目录中运行<code>make</code></p>\n</li>\n<li><p>redis默认不是后台启动的，需要修改配置文件，我们可以将make文件同级目录的<code>redis.conf</code>文件拷贝一份到我们指定的目录，以防止错误配置报错，同时对其进行修改，开启守护进程模式</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210920153359292.png\" alt=\"image-20210920153359292\"></p>\n</li>\n<li><p>redis默认指令在make目录下的src目录，进入后输入指令，指定配置文件并运行redis服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./redis-server ../redis.conf <span class=\"comment\">#后面的参数使我们自己的配置文件路径</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动客户端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./redis-cli [-h 主机ip] -p 6379 <span class=\"comment\">#默认主机ip为本机，可以不写</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端测试连接<code>ping</code>，如果出现PONG的返回提示即运行成功</p>\n</li>\n<li><p>查看进程<code>ps -ef|grep redis</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210920153854917.png\" alt=\"image-20210920153854917\"></p>\n</li>\n<li><p>客户端关闭服务<code>shutdown</code></p>\n</li>\n</ol>\n<h2 id=\"测试性能\"><a href=\"#测试性能\" class=\"headerlink\" title=\"测试性能\"></a>测试性能</h2><p>redis-benchmark：压力测试工具</p>\n<p>指令示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#100个并发客户端 100000条请求</span></span><br><span class=\"line\">redis-benchmark -p 6379 -c 100 -n 100000</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210920162142997.png\" alt=\"image-20210920162142997\"></p>\n<h2 id=\"RedisKey基础操作\"><a href=\"#RedisKey基础操作\" class=\"headerlink\" title=\"RedisKey基础操作\"></a>RedisKey基础操作</h2><ul>\n<li><p>redis默认有16个数据库，默认使用第’0’个</p>\n<p>可以使用<code>select 编号</code>来切换数据库</p>\n</li>\n<li><p>查看db大小<code>dbsize</code></p>\n</li>\n<li><p>清空数据库（不会清空已经持久化的数据）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">flushdb <span class=\"comment\">#清除当前数据库</span></span><br><span class=\"line\">flushall <span class=\"comment\">#清除全部数据库</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><pre><code class=\"bash\">keys * #查看所有的key\nset &lt;key&gt; &lt;value&gt; #设置键值对\nget &lt;key&gt; #获取key对应的value值\nexists &lt;key&gt; #查看指定key是否存在\nmove &lt;key&gt; &lt;db_id&gt; #将指定k-v键值对移动至指定数据库\nexpire &lt;key&gt; &lt;seconds&gt; #指定过期时间\nttl &lt;key&gt; #查看指定key剩余时间\ntype &lt;key&gt; #查看指定key对应value类型\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## Redis配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">+ 配置文件对大小写不敏感</span><br><span class=\"line\"></span><br><span class=\"line\">  可以&#96;include xxx.config&#96;导入多个配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">+ 可以通过客户端对配置文件进行修改(如果有密码要求已经认证)，如</span><br><span class=\"line\"></span><br><span class=\"line\">  &#96;&#96;&#96;bash</span><br><span class=\"line\">  config set requirepass &quot;&quot; #修改密码</span><br></pre></td></tr></table></figure></code></pre>\n</li>\n<li><p>网络</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span> 127.0.0.1 <span class=\"comment\">#绑定ip</span></span><br><span class=\"line\">protected-mode yes <span class=\"comment\">#保护模式</span></span><br><span class=\"line\">port 6379 <span class=\"comment\">#端口</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">daemonize yes <span class=\"comment\">#守护者进程运行（后台运行）</span></span><br><span class=\"line\">pidfile /var/run/redis_6379.pid <span class=\"comment\">#守护者模式需要指定pid文件</span></span><br><span class=\"line\">loglevel notice <span class=\"comment\">#日志级别: debug verbose notice warning</span></span><br><span class=\"line\">logfile <span class=\"string\">&quot;&quot;</span> <span class=\"comment\">#日志文件名</span></span><br><span class=\"line\">database 16 <span class=\"comment\">#数据库数量</span></span><br><span class=\"line\">always-show-log yes <span class=\"comment\">#是否显示logo</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>快照</p>\n<p>持久化：在规定时间内执行多少次操作会持久化到.rdb.aof</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">save 900 1 <span class=\"comment\">#900s内至少1个key修改了一次就进行持久化操作,下面两个同理</span></span><br><span class=\"line\">save 300 10</span><br><span class=\"line\">save 60 10000</span><br><span class=\"line\"></span><br><span class=\"line\">stop-writes-on-bgsave-error yes <span class=\"comment\">#异常之后是否继续工作</span></span><br><span class=\"line\">rdbcompression yes <span class=\"comment\">#是否压缩rdb文件，需要消耗cpu资源</span></span><br><span class=\"line\">rdbchecksum yes <span class=\"comment\">#保存rdb文件时是否错误校验</span></span><br><span class=\"line\">dir ./ <span class=\"comment\"># rdb文件保存的位置</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>主从复制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">replicaof &lt;masterip&gt; &lt;masterport&gt; <span class=\"comment\">#从机配置文件添加主机的ip和端口</span></span><br><span class=\"line\">masterauth &lt;master-password&gt; <span class=\"comment\">#如果主机有认证密码则在这里配置</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安全</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">requirepass xxx <span class=\"comment\">#设置认证密码，默认为空</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">auth xxx <span class=\"comment\">#在客户端访问时进行密码认证</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端限制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">maxclients 10000 <span class=\"comment\">#最大客户端数量</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>内存</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">maxmemory &lt;bytes&gt; <span class=\"comment\">#最大内存容量</span></span><br><span class=\"line\">maxmemory-policy noeviction <span class=\"comment\">#内存达到上限的策略</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#内存策略</span></span><br><span class=\"line\">volatile-lru <span class=\"comment\">#只对设置了过期时间的的key进行lru（默认）</span></span><br><span class=\"line\">allkeys-lru <span class=\"comment\">#删除lru算法的key</span></span><br><span class=\"line\">volatile-random <span class=\"comment\">#随机删除即将过期key</span></span><br><span class=\"line\">allkeys-random <span class=\"comment\">#随机删除</span></span><br><span class=\"line\">volatile-ttl <span class=\"comment\">#删除季建国七的</span></span><br><span class=\"line\">noeviction <span class=\"comment\">#永不过期，返回错误</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>append only模式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">appendonly no <span class=\"comment\">#默认不开启aof模式，而是使用rdb模式</span></span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span> <span class=\"comment\">#持久化文件的名字</span></span><br><span class=\"line\">appendfsync everysec <span class=\"comment\">#每秒执行一次sync，可能丢失数据，其它选项 always no</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"Redis数据\"><a href=\"#Redis数据\" class=\"headerlink\" title=\"Redis数据\"></a>Redis数据</h1><h2 id=\"五大数据类型\"><a href=\"#五大数据类型\" class=\"headerlink\" title=\"五大数据类型\"></a>五大数据类型</h2><h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><p>String类型操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">append &lt;key&gt; <span class=\"string\">&quot;someString&quot;</span> <span class=\"comment\">#向指定key的value字符串后面追加自定义字符串 / 如果当前key不存在就相当于set key value</span></span><br><span class=\"line\">strlen &lt;key&gt; <span class=\"comment\">#获取指定key的value字符串长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#getrange &lt;key&gt; 0 -1表示获取全部</span></span><br><span class=\"line\">getrange &lt;key&gt; left right <span class=\"comment\">#截取字符串，相当于切片 </span></span><br><span class=\"line\">setrange &lt;key&gt; offset &lt;value&gt; <span class=\"comment\">#将偏移量为offset的值开始向后替换为所指的value</span></span><br><span class=\"line\"></span><br><span class=\"line\">setex &lt;key&gt; &lt;seconds&gt; &lt;value&gt; <span class=\"comment\">#set with expire 设置过期时间</span></span><br><span class=\"line\">setnx &lt;key&gt; &lt;value&gt;<span class=\"comment\">#set not exists 如果不存在设置，在分布式所常见</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#批量操作都是原子性操作，同时成功或失败</span></span><br><span class=\"line\">mset &lt;key1&gt; &lt;value1&gt; &lt;key2&gt; &lt;value&gt; ... <span class=\"comment\">#批量设置值</span></span><br><span class=\"line\">mget &lt;key1&gt; &lt;key2&gt; ... <span class=\"comment\">#批量获取值</span></span><br><span class=\"line\"></span><br><span class=\"line\">getset &lt;key&gt; &lt;value&gt; <span class=\"comment\">#先get再set</span></span><br></pre></td></tr></table></figure>\n\n<p>int类型操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">incr &lt;key&gt; <span class=\"comment\">#i++ 如果指定key不存在则会自动自动设置kv，且v=1</span></span><br><span class=\"line\">decr &lt;key&gt; <span class=\"comment\">#i-- 如果指定key不存在则会自动自动设置kv，且v=-1</span></span><br><span class=\"line\">incrby &lt;key&gt; num <span class=\"comment\">#数值增加num 同上，自动设置值为num</span></span><br><span class=\"line\">decrby &lt;key&gt; num <span class=\"comment\">#数值减少num 同上，自动设置值为-num</span></span><br></pre></td></tr></table></figure>\n\n<p>对象操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> user:1 &#123;name:zhangsan,age:3&#125; <span class=\"comment\">#以对象形式保存</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p>可以将其看做一个双向链表，在两头进行操作效率最高</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">lpush &lt;list&gt; &lt;value&gt; <span class=\"comment\">#左入栈（新建list）</span></span><br><span class=\"line\">rpush &lt;list&gt; &lt;value&gt; <span class=\"comment\">#右入栈（新建list）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#与getrange类似 lrange 0 -1表示获取全部</span></span><br><span class=\"line\">lrange &lt;list&gt; left right <span class=\"comment\">#从左到右排列</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#其他的操作也可以通过l和r作以区分</span></span><br><span class=\"line\">lpop &lt;list&gt; <span class=\"comment\">#左出栈</span></span><br><span class=\"line\">rpop &lt;list&gt; <span class=\"comment\">#右出栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">lset &lt;list&gt; i &lt;newItem&gt; <span class=\"comment\">#更新下标为i的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">lindex &lt;list&gt; i <span class=\"comment\">#获取list中第i个值</span></span><br><span class=\"line\"></span><br><span class=\"line\">llen &lt;list&gt; <span class=\"comment\">#获取list长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">lrem &lt;list&gt; num &lt;value&gt; <span class=\"comment\">#移除list中num个为value的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">ltrim &lt;list&gt; left right <span class=\"comment\">#切片（与range不同并且会改变原list）</span></span><br><span class=\"line\"></span><br><span class=\"line\">lpoprpush &lt;list1&gt; &lt;list2&gt; <span class=\"comment\">#将list1中左端元素移至list2最右端</span></span><br><span class=\"line\"></span><br><span class=\"line\">linsert &lt;list&gt; before/after &lt;value1&gt; &lt;value2&gt; <span class=\"comment\">#在value1值得前/后插入value2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sadd &lt;<span class=\"built_in\">set</span>&gt; &lt;value&gt; <span class=\"comment\">#向set中添加value值对（新建set）</span></span><br><span class=\"line\">smember &lt;<span class=\"built_in\">set</span>&gt; <span class=\"comment\">#查看指定set的所有值</span></span><br><span class=\"line\">sismenmber &lt;<span class=\"built_in\">set</span>&gt; &lt;value&gt; <span class=\"comment\">#判断某个值是否是set中的元素</span></span><br><span class=\"line\">scard &lt;<span class=\"built_in\">set</span>&gt; <span class=\"comment\">#查看set中元素的个数</span></span><br><span class=\"line\">srem &lt;<span class=\"built_in\">set</span>&gt; &lt;value&gt; <span class=\"comment\">#移除set中某个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">srandmember &lt;<span class=\"built_in\">set</span>&gt; [i] <span class=\"comment\">#随机抽出i个数的元素（默认一个）</span></span><br><span class=\"line\"></span><br><span class=\"line\">spop &lt;<span class=\"built_in\">set</span>&gt; <span class=\"comment\">#随机出栈元素</span></span><br><span class=\"line\">smove &lt;set1&gt; &lt;set2&gt; &lt;value&gt;<span class=\"comment\">#将set1中指定值元素移至set2中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#集合相关</span></span><br><span class=\"line\">sdiff &lt;set1&gt; &lt;set2&gt; <span class=\"comment\">#求差集</span></span><br><span class=\"line\">sinter &lt;set1&gt; &lt;set2&gt; <span class=\"comment\">#求交集</span></span><br><span class=\"line\">sunion &lt;set1&gt; &lt;set2&gt; <span class=\"comment\">#求并集</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h3><p>key-map，可以存一些变更数据，且更适合对象的存储</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hset &lt;map&gt; &lt;key&gt; &lt;value&gt; <span class=\"comment\">#给map中填入kv值（新建map）</span></span><br><span class=\"line\">hset &lt;map&gt; &lt;key1&gt; &lt;value2&gt; &lt;key2&gt; &lt;value2&gt; ... <span class=\"comment\">#可以同时赋多个kv值</span></span><br><span class=\"line\"></span><br><span class=\"line\">hgetall &lt;map&gt; <span class=\"comment\">#获取一个map中的全部kv值</span></span><br><span class=\"line\">hdel &lt;map&gt; &lt;key&gt; <span class=\"comment\">#删除一个map中指定的kv值</span></span><br><span class=\"line\"></span><br><span class=\"line\">hlen &lt;map&gt; <span class=\"comment\">#获取map长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexists &lt;map&gt; &lt;key&gt; <span class=\"comment\">#判断一个map中指定kv是否存在</span></span><br><span class=\"line\"></span><br><span class=\"line\">hkeys &lt;map&gt; <span class=\"comment\">#获取一个map所有key</span></span><br><span class=\"line\">hvals &lt;map&gt; <span class=\"comment\">#获取一个map所有value</span></span><br><span class=\"line\"></span><br><span class=\"line\">incr/decr &lt;map&gt; &lt;key&gt; <span class=\"comment\">#自增/自减</span></span><br><span class=\"line\"></span><br><span class=\"line\">hsetnx &lt;map&gt; &lt;key&gt; &lt;value&gt; <span class=\"comment\">#不存在则设置</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Zset\"><a href=\"#Zset\" class=\"headerlink\" title=\"Zset\"></a>Zset</h3><p>有序集合</p>\n<p>可以用来是先重要消息，以及带权重任务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">zadd &lt;zset&gt; &lt;score&gt; &lt;value&gt; <span class=\"comment\">#给zset插入值score和value</span></span><br><span class=\"line\">zrange &lt;zset&gt; left right <span class=\"comment\">#查看从左到右排列</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#left和right可以使用+/-inf表示无穷</span></span><br><span class=\"line\">zrangebyscore &lt;zset&gt; left right <span class=\"comment\">#按score排序，区间为left~right</span></span><br><span class=\"line\">zrevrangebyscore &lt;zset&gt; right left <span class=\"comment\">#同上降序排序</span></span><br><span class=\"line\">zrevrange &lt;zset&gt; left right <span class=\"comment\">#按照索引排序，与上面不一样！</span></span><br><span class=\"line\"></span><br><span class=\"line\">zrem &lt;<span class=\"built_in\">set</span>&gt; &lt;value&gt; <span class=\"comment\">#移除指定值的元素</span></span><br><span class=\"line\">zcard &lt;<span class=\"built_in\">set</span>&gt; <span class=\"comment\">#获取集合中的个数</span></span><br><span class=\"line\">zcount &lt;<span class=\"built_in\">set</span>&gt; low high <span class=\"comment\">#同级score在low和high之间的个数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"特殊数据类型\"><a href=\"#特殊数据类型\" class=\"headerlink\" title=\"特殊数据类型\"></a>特殊数据类型</h2><h3 id=\"geospatial\"><a href=\"#geospatial\" class=\"headerlink\" title=\"geospatial\"></a>geospatial</h3><p>地理位置信息geospatial简称<strong>GEO</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#lot:经度，lat纬度，member详细信息</span></span><br><span class=\"line\"><span class=\"comment\">#规则：南北极无法直接添加，一般会下载城市数据通过java一次性导入</span></span><br><span class=\"line\"><span class=\"comment\">#可以使用key和member联合确定，如key=china:city member=beijing</span></span><br><span class=\"line\">geoadd &lt;key&gt; &lt;lot&gt; &lt;lat&gt; &lt;member&gt; <span class=\"comment\">#添加geo数据</span></span><br><span class=\"line\">geopos &lt;key&gt; &lt;member1&gt; [&lt;member2&gt; ...] <span class=\"comment\">#获取位置信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">geodist &lt;key&gt; &lt;member1&gt; &lt;member2&gt; <span class=\"comment\">#计算直线距离</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#如附近的人</span></span><br><span class=\"line\">georadius &lt;key&gt; &lt;lot&gt; &lt;lat&gt; 5 km <span class=\"comment\">#给出某一个位置指定半径之内的元素</span></span><br><span class=\"line\">georadiusbymember &lt;key&gt; &lt;member&gt; 5 km <span class=\"comment\">#给出某一个元素指定半径之内的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">geohash &lt;key&gt; &lt;member1&gt; &lt;member2&gt; <span class=\"comment\">#将二维经纬度转换为一维的字符串，两个字符串越相近，距离也越相近</span></span><br></pre></td></tr></table></figure>\n\n<p>获取附近的人示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#获取以北京为中心，500km为半径距离最近的前三个城市的全部信息</span></span><br><span class=\"line\">georadiusbymember china:city beijing 500 km withdist withcoord count 3</span><br></pre></td></tr></table></figure>\n\n<p>可用的距离单位：</p>\n<ul>\n<li>m ：米，默认单位。</li>\n<li>km ：千米。</li>\n<li>mi ：英里。</li>\n<li>ft ：英尺。</li>\n</ul>\n<p>底层其实是zset，我们可以使用zset相关命令来操作geo，如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">zrange &lt;ket&gt; left right <span class=\"comment\">#查看元素</span></span><br><span class=\"line\">zrem &lt;key&gt; left right <span class=\"comment\">#删除元素</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hyperloglog\"><a href=\"#Hyperloglog\" class=\"headerlink\" title=\"Hyperloglog\"></a>Hyperloglog</h3><p>基数：不重复的元素</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210920223331016.png\" alt=\"image-20210920223331016\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pfadd &lt;key&gt; &lt;value1&gt; &lt;value3&gt; ... <span class=\"comment\">#添加数据</span></span><br><span class=\"line\">pfcount &lt;key&gt; <span class=\"comment\">#统计数据</span></span><br><span class=\"line\">pfmerge &lt;key1&gt; &lt;key2&gt; <span class=\"comment\">#合并集合（包括去重）</span></span><br></pre></td></tr></table></figure>\n\n<p>如果允许容错就可以使用Hyperloglog，不允许容错则使用set()集合或自定义数据类型去重</p>\n<h3 id=\"Bitmaps\"><a href=\"#Bitmaps\" class=\"headerlink\" title=\"Bitmaps\"></a>Bitmaps</h3><p>位存储</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210920224558909.png\" alt=\"image-20210920224558909\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">setbit &lt;key&gt; &lt;offset&gt; &lt;value&gt; <span class=\"comment\">#给位移量为offset的位置放入元素value，当然value只能为0,1</span></span><br><span class=\"line\">bitcount &lt;key&gt; <span class=\"comment\">#统计为1的位数</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Redis高级特性\"><a href=\"#Redis高级特性\" class=\"headerlink\" title=\"Redis高级特性\"></a>Redis高级特性</h1><h2 id=\"Redis的事务\"><a href=\"#Redis的事务\" class=\"headerlink\" title=\"Redis的事务\"></a>Redis的事务</h2><ul>\n<li>为了保持简单，redis事务保证了其中的一致性和隔离性，不满足原子性和持久性；</li>\n<li>一次性，顺序性，排他性的执行一系列的命令</li>\n</ul>\n<p><strong>事务指令</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">multi <span class=\"comment\">#开启事务</span></span><br><span class=\"line\">... <span class=\"comment\">#输入一系列指令</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span> <span class=\"comment\">#执行事务中所有的指令</span></span><br><span class=\"line\">discard <span class=\"comment\">#取消事务</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>不保证原子性的原因</strong></p>\n<ul>\n<li><p>编译型异常：代码有问题，事务中所有指令都不会执行</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images//image-20210921131338267.png\" alt=\"image-20210921131338267\"></p>\n</li>\n<li><p>运行时异常：逻辑错误，只有事务中出错的指令不会执行，其他正确指令正常运行</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images//image-20210921131647150.png\" alt=\"image-20210921131647150\"></p>\n</li>\n</ul>\n<h2 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h2><ul>\n<li>悲观锁：认为什么时候都会出问题，任何操作都会加锁</li>\n<li>乐观锁：认为什么时候都不会出问题，所以不会上锁，更新数据的时候判断数据是否已被修改</li>\n</ul>\n<p><strong>Redis监视变量，可以视为乐观锁操作</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先watch某个key再开启事务，如果exec时key对应的value改变，则事务中的所有指令提交失败，事务回滚</span></span><br><span class=\"line\">watch &lt;key&gt;</span><br><span class=\"line\">multi</span><br><span class=\"line\"></span><br><span class=\"line\">unwatch <span class=\"comment\">#取消之前的watch指令</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如果watch发现value已经改变，事务执行失败：</strong></p>\n<ul>\n<li><code>unwatch</code>先解锁监视</li>\n<li><code>watch</code>获取最新值，重新监视</li>\n<li>重新提交事务</li>\n</ul>\n<h2 id=\"订阅发布\"><a href=\"#订阅发布\" class=\"headerlink\" title=\"订阅发布\"></a>订阅发布</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921204012895.png\" alt=\"image-20210921204012895\"></p>\n<p>一些常用命令</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921204032829.png\" alt=\"image-20210921204032829\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921204110130.png\" alt=\"image-20210921204110130\"></p>\n<h2 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921204255540.png\" alt=\"image-20210921204255540\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921205757888.png\" alt=\"image-20210921205757888\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921205827739.png\" alt=\"image-20210921205827739\"></p>\n<p><strong>复制原理</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921212534965.png\" alt=\"image-20210921212534965\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">info replication <span class=\"comment\">#查看从属关系</span></span><br><span class=\"line\"><span class=\"comment\">#返回信息</span></span><br><span class=\"line\">role:master <span class=\"comment\">#角色：master，每台redis服务器默认都是master</span></span><br><span class=\"line\">connected_slaves:0 <span class=\"comment\">#已连接的从机</span></span><br><span class=\"line\">master_failover_state:no-failover</span><br><span class=\"line\">master_replid:20e2fc4f1bef8039f45fc11e89e7abb7c6dbd2dd</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:0</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:0</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:0</span><br><span class=\"line\">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"环境测试\"><a href=\"#环境测试\" class=\"headerlink\" title=\"环境测试\"></a>环境测试</h3><p>将原配置文件拷贝三份<code>redis-m1.config redis-s1.config redis-s2.config</code></p>\n<p>修改其中的属性：端口，pid，log，dump.rdb</p>\n<p>然后分别运行，检查情况</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921210922412.png\" alt=\"image-20210921210922412\"></p>\n<p>一主二从，在从机的客户端使用命令<code>salveof &lt;ip&gt; &lt;port&gt;</code>使其成为某个主机的从机（暂时），使用<code>salveof no one</code>使其重新变为主机</p>\n<p>然后在主机查看结果</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921211506064.png\" alt=\"image-20210921211506064\"></p>\n<ul>\n<li>只有主机可以进行写操作，从机进行写操作会进行报错，且从机可以读到主机新写入的数据（<strong>增量复制</strong>）</li>\n<li>主机断开连接，从机依旧保持从机状态，不能进行写操作，主机如果重新上线，从机依旧可以读取主机写的数据</li>\n<li>如果是命令行进行的配置，从机重启后会重新变为主机，只要变回从机，会立即从主机中获取值，进行<strong>完全复制</strong></li>\n</ul>\n<h3 id=\"主机宕机的解决方案\"><a href=\"#主机宕机的解决方案\" class=\"headerlink\" title=\"主机宕机的解决方案\"></a>主机宕机的解决方案</h3><p>如果主机m1突然断开连接，如何选取一个新的主机？</p>\n<ul>\n<li><p>手动选取某个从机为主机<code>salveof no one</code></p>\n</li>\n<li><p><strong>哨兵模式</strong>（自动选取主机的模式）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921215322848.png\" alt=\"image-20210921215322848\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921215405539.png\" alt=\"image-20210921215405539\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921213724681.png\" alt=\"image-20210921213724681\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921213850531.png\" alt=\"image-20210921213850531\"></p>\n<p>当主机客观下线之后，所有哨兵会根据算法投票选取一个从机成为新的主机</p>\n<p>哨兵模式配置文件<code>sentinel.conf</code></p>\n<p>最基础的配置文件可以只配置<code>sentinel monitor mymaster 127.0.0.1 6379 1</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example sentinel.conf</span></span><br><span class=\"line\"><span class=\"comment\"># 哨兵sentinel实例运行的端口 默认26379</span></span><br><span class=\"line\">port 26379</span><br><span class=\"line\"><span class=\"comment\"># 哨兵sentinel的工作目录</span></span><br><span class=\"line\">dir /tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 哨兵sentinel监控的redis主节点的 ip port</span></span><br><span class=\"line\"><span class=\"comment\"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span></span><br><span class=\"line\"><span class=\"comment\"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt; </span></span><br><span class=\"line\"><span class=\"comment\"># 最后的1表示总共有1个哨兵观测到宕机就判断主机宕机</span></span><br><span class=\"line\">sentinel monitor mymaster 127.0.0.1 6379 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class=\"line\"><span class=\"comment\"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class=\"line\">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class=\"line\">sentinel down-after-milliseconds mymaster 30000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span></span><br><span class=\"line\"><span class=\"comment\"># 这个数字越小，完成failover所需的时间就越长，</span></span><br><span class=\"line\"><span class=\"comment\"># 但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span></span><br><span class=\"line\"><span class=\"comment\"># 可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span></span><br><span class=\"line\">sentinel parallel-syncs mymaster 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面：</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span></span><br><span class=\"line\"><span class=\"comment\"># 3.当想要取消一个正在进行的failover所需要的时间。</span></span><br><span class=\"line\"><span class=\"comment\"># 4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span></span><br><span class=\"line\"><span class=\"comment\"># 默认三分钟</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class=\"line\">sentinel failover-timeout mymaster 180000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># SCRIPTS EXECUTION</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span></span><br><span class=\"line\"><span class=\"comment\"># 对于脚本的运行结果有以下规则：</span></span><br><span class=\"line\"><span class=\"comment\"># 若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span></span><br><span class=\"line\"><span class=\"comment\"># 若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span></span><br><span class=\"line\"><span class=\"comment\"># 如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span></span><br><span class=\"line\"><span class=\"comment\"># 一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span></span><br><span class=\"line\"><span class=\"comment\"># 通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span></span><br><span class=\"line\"><span class=\"comment\"># 通知脚本</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class=\"line\">sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 客户端重新配置主节点参数脚本</span></span><br><span class=\"line\"><span class=\"comment\"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class=\"line\"><span class=\"comment\"># 以下参数将会在调用脚本时传给脚本:</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 目前&lt;state&gt;总是“failover”,</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;role&gt;是“leader”或者“observer”中的一个。</span></span><br><span class=\"line\"><span class=\"comment\"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span></span><br><span class=\"line\"><span class=\"comment\"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span></span><br><span class=\"line\"><span class=\"comment\"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class=\"line\">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br></pre></td></tr></table></figure>\n\n<p><strong>如果主机宕机之后重新启动，他不会重新成为主机，而是成为新主机的一个从机</strong></p>\n<ul>\n<li>优点：<ul>\n<li>哨兵集群基于主从复制，主从复制的优点都有</li>\n<li>主从可以切换，故障可以转移，系统可用性更高</li>\n<li>哨兵模式是主从模式的升级，健壮性更高</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"缓存穿透与雪崩\"><a href=\"#缓存穿透与雪崩\" class=\"headerlink\" title=\"缓存穿透与雪崩\"></a>缓存穿透与雪崩</h2><p>服务的高可用问题</p>\n<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><p>查不到</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921220552480.png\" alt=\"image-20210921220552480\"></p>\n<p><strong>解决方案</strong></p>\n<ul>\n<li><p>布隆过滤器</p>\n<p>是一种数据结构，对所有可能查询的数据以hash形式存储，在控制层先进行校验，不符合则丢弃，避免对底层存储系统的压力</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921220800881.png\" alt=\"image-20210921220800881\"></p>\n</li>\n<li><p>缓存空对象</p>\n<p>当存储层不命中后，即使返回空对象也将其缓存起来，并设置过期时间，之后相同的查询请求会从缓存中获取，保护后端数据源</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921220932184.png\" alt=\"image-20210921220932184\"></p>\n<p>缺点：</p>\n<ul>\n<li>缓存需要更多地存储空间来保存许多值为空的key</li>\n<li>即使设置了过期时间，缓存层和存储层的数据还是会存在一段时间的不一致性（缓存中为空但已经向存储层存放了新值），对于需要保持一致性的业务会有影响</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h3><p>量大，缓存过期</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921221322161.png\" alt=\"image-20210921221322161\"></p>\n<p><strong>解决方案</strong></p>\n<ul>\n<li><p>设置热点数据不过期</p>\n</li>\n<li><p>加互斥锁</p>\n<p>保证缓存过期后同时仅有一个线程能够查询数据</p>\n</li>\n</ul>\n<h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>缓存集体失效或Redis宕机</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921221700754.png\" alt=\"image-20210921221700754\"></p>\n<p>比如双十一：停掉一些服务，保证主要业务可用</p>\n<p><strong>解决方案</strong></p>\n<ul>\n<li><p>redis高可用</p>\n<p>多设Redis服务器，搭建大型redis集群</p>\n</li>\n<li><p>限流降级</p>\n<p>缓存失效后通过加锁或队列来控制数据库写缓存的线程数量，比如某个key仅允许一个线程查询和写缓存</p>\n</li>\n<li><p>数据预热</p>\n<p>正式部署之前把可能的数据先预先访问一遍，大量访问的数据就会加载到缓存中，在即将发生大的并发访问时手动触发加载不同的key设置不同的过期时间，让缓存失效的时间点尽量均匀</p>\n</li>\n</ul>\n<h2 id=\"数据淘汰策略\"><a href=\"#数据淘汰策略\" class=\"headerlink\" title=\"数据淘汰策略\"></a>数据淘汰策略</h2><p>配置文件对应项：<code>maxmemory-policy</code></p>\n<p>Redis提供了5种数据淘汰策略： </p>\n<ul>\n<li>volatile-lru：使用LRU算法进行数据淘汰（淘汰上次使用时间最早的，且使用次数最少的key），只淘汰设定了有效期的key</li>\n<li>allkeys-lru：使用LRU算法进行数据淘汰，所有的key都可以被淘汰</li>\n<li>volatile-random：随机淘汰数据，只淘汰设定了有效期的key</li>\n<li>allkeys-random：随机淘汰数据，所有的key都可以被淘汰</li>\n<li>volatile-ttl：淘汰剩余有效期最短的key</li>\n<li>no-eviction：不进行去主数据，直接报错（默认，但不推荐使用）</li>\n</ul>\n<p><strong>Redis4.0新增策略</strong></p>\n<ul>\n<li>volatile-lfu：从已设置过期时间的数据集挑选使用频率最低的数据淘汰。</li>\n<li>allkeys-lfu：从数据集中挑选使用频率最低的数据淘汰。</li>\n</ul>\n<p>​    最好为Redis指定一种有效的数据淘汰策略以配合maxmemory设置，避免在内存使用满后发生写入失败的情况。</p>\n<p>​    一般来说，推荐使用的策略是volatile-lru，并辨识Redis中保存的数据的重要性。对于那些重要的，绝对不能丢弃的数据（如配置类数据等），应不设置有效期，这样Redis就永远不会淘汰这些数据。对于那些相对不是那么重要的，并且能够热加载的数据（比如缓存最近登录的用户信息，当在Redis中找不到时，程序会去DB中读取），可以设置上有效期，这样在内存不够时Redis就会淘汰这部分数据。</p>\n<h1 id=\"整合Java\"><a href=\"#整合Java\" class=\"headerlink\" title=\"整合Java\"></a>整合Java</h1><h2 id=\"阿里云redis连接失败的原因\"><a href=\"#阿里云redis连接失败的原因\" class=\"headerlink\" title=\"阿里云redis连接失败的原因\"></a>阿里云redis连接失败的原因</h2><ul>\n<li>阿里云安全组策略是否开启对应端口？</li>\n<li>redis-server配置文件中是否绑定0.0.0.0？</li>\n<li>server密码问题</li>\n<li>服务器防火墙是否开放对应端口，如CentOS7系统：<ul>\n<li>开放防火墙对应端口<code>firewall-cmd --zone=public --add-port=6379/tcp --permanent</code></li>\n<li>查看端口开放情况<code>netstat -ntlp</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Jedis\"><a href=\"#Jedis\" class=\"headerlink\" title=\"Jedis\"></a>Jedis</h2><h3 id=\"java实例\"><a href=\"#java实例\" class=\"headerlink\" title=\"java实例\"></a>java实例</h3><p>导包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.76<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Jedis jedis = <span class=\"keyword\">new</span> Jedis(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6379</span>);</span><br><span class=\"line\">    <span class=\"comment\">//Jedis实例能够调用方法以执行任何redis命令</span></span><br><span class=\"line\">    System.out.println(jedis.ping());</span><br><span class=\"line\">    jedis.flushDB();</span><br><span class=\"line\">    System.out.println(jedis.set(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">    System.out.println(jedis.get(<span class=\"string\">&quot;key&quot;</span>));</span><br><span class=\"line\">\t<span class=\"comment\">//记得结束后关闭客户端</span></span><br><span class=\"line\">    jedis.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Jedis事务\"><a href=\"#Jedis事务\" class=\"headerlink\" title=\"Jedis事务\"></a>Jedis事务</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">multi</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Jedis jedis = <span class=\"keyword\">new</span> Jedis(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6379</span>);</span><br><span class=\"line\">        <span class=\"comment\">//开启事务</span></span><br><span class=\"line\">        Transaction multi = jedis.multi();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(multi.set(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">            System.out.println(multi.get(<span class=\"string\">&quot;key&quot;</span>));</span><br><span class=\"line\">            multi.exec();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            jedis.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整合SpringBoot\"><a href=\"#整合SpringBoot\" class=\"headerlink\" title=\"整合SpringBoot\"></a>整合SpringBoot</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>springboot2.x后原来的jedis被替换为了lettuce</p>\n<ul>\n<li>jedis：采用直连方法，多个线程操作是不安全的，避免这种情况需要使用jedis pool，类似BIO模式</li>\n<li>lettuce：采用netty，实例可以在多个线程中共享，不存在线程安全问题，减少线程数据，类似NIO模式</li>\n</ul>\n<h3 id=\"使用默认的RedisTemplate\"><a href=\"#使用默认的RedisTemplate\" class=\"headerlink\" title=\"使用默认的RedisTemplate\"></a>使用默认的RedisTemplate</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">redisTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\">    RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class=\"line\">    connection.flushDb();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//先用opsForXXX()获取专门处理某类业务的工具</span></span><br><span class=\"line\">    <span class=\"comment\">//如valueOperations专门操作字符串</span></span><br><span class=\"line\">    ValueOperations valueOperations = redisTemplate.opsForValue();</span><br><span class=\"line\">    <span class=\"comment\">//再调用valueOperations的方法来执行具体操作</span></span><br><span class=\"line\">    valueOperations.set(<span class=\"string\">&quot;key&quot;</span>,<span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">    System.out.println(valueOperations.get(<span class=\"string\">&quot;key&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义RedisTemplate\"><a href=\"#自定义RedisTemplate\" class=\"headerlink\" title=\"自定义RedisTemplate\"></a>自定义RedisTemplate</h3><p>自定义配置类给容器中注入自定义Bean，默认的Bean就会失效</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span></span>&#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> RedisTemplate&lt;&gt;();</span><br><span class=\"line\">        template.setConnectionFactory(factory);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//自定义Jackson序列化配置</span></span><br><span class=\"line\">        Jackson2JsonRedisSerializer jsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class=\"line\">        ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//key使用String的序列化方式</span></span><br><span class=\"line\">        StringRedisSerializer stringRedisSerializer = <span class=\"keyword\">new</span> StringRedisSerializer();</span><br><span class=\"line\">        template.setKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">//hash的key也是用String的序列化方式</span></span><br><span class=\"line\">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">//value的key使用jackson的序列化方式</span></span><br><span class=\"line\">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">//hash的value也是用jackson的序列化方式</span></span><br><span class=\"line\">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.CollectionUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// =============================common============================</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定缓存失效时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time 时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">expire</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据key 获取过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getExpire</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断key是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 存在 false不存在</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasKey</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.hasKey(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除缓存</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 可以传一个值 或多个</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(String... key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key != <span class=\"keyword\">null</span> &amp;&amp; key.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                redisTemplate.delete(key[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                redisTemplate.delete((Collection&lt;String&gt;) CollectionUtils.arrayToList(key));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ============================String=============================</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通缓存获取</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通缓存放入</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true成功 false失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通缓存放入并设置时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true成功 false 失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(String key, Object value, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                set(key, value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递增</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delta 要增加几(大于0)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">incr</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> delta)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (delta &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;递增因子必须大于0&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递减</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> delta 要减少几(小于0)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">decr</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> delta)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (delta &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;递减因子必须大于0&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ================================Map=================================</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * HashGet</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 项 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">hget</span><span class=\"params\">(String key, String item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取hashKey对应的所有键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 对应的多个键值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Object, Object&gt; <span class=\"title\">hmget</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * HashSet</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> map 对应多个键值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hmset</span><span class=\"params\">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * HashSet 并设置时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> map  对应多个键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time 时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true成功 false失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hmset</span><span class=\"params\">(String key, Map&lt;String, Object&gt; map, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                expire(key, time);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item  项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 成功 false失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hset</span><span class=\"params\">(String key, String item, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item  项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 成功 false失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hset</span><span class=\"params\">(String key, String item, Object value, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                expire(key, time);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除hash表中的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 项 可以使多个 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hdel</span><span class=\"params\">(String key, Object... item)</span> </span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForHash().delete(key, item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断hash表中是否有该项的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 项 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 存在 false不存在</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hHasKey</span><span class=\"params\">(String key, String item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> by   要增加几(大于0)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">hincr</span><span class=\"params\">(String key, String item, <span class=\"keyword\">double</span> by)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * hash递减</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> by   要减少记(小于0)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">hdecr</span><span class=\"params\">(String key, String item, <span class=\"keyword\">double</span> by)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ============================set=============================</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据key获取Set中的所有值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Object&gt; <span class=\"title\">sGet</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForSet().members(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据value从一个set中查询,是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 存在 false不存在</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sHasKey</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将数据放入set缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key    键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values 值 可以是多个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 成功个数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">sSet</span><span class=\"params\">(String key, Object... values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将set数据放入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key    键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time   时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values 值 可以是多个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 成功个数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">sSetAndTime</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> time, Object... values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                expire(key, time);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取set缓存的长度</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">sGetSetSize</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForSet().size(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除值为value的</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key    键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> values 值 可以是多个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 移除的个数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">setRemove</span><span class=\"params\">(String key, Object... values)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ===============================list=================================</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取list缓存的内容</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start 开始</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Object&gt; <span class=\"title\">lGet</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> start, <span class=\"keyword\">long</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取list缓存的长度</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">lGetListSize</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过索引 获取list中的值</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">lGetIndex</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将list放入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lSet</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将list放入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time  时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lSet</span><span class=\"params\">(String key, Object value, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                expire(key, time);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将list放入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lSet</span><span class=\"params\">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将list放入缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time  时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lSet</span><span class=\"params\">(String key, List&lt;Object&gt; value, <span class=\"keyword\">long</span> time)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                expire(key, time);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据索引修改list中的某条数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">lUpdateIndex</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> index, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForList().set(key, index, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 移除N个值为value</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> count 移除多少个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 移除的个数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">lRemove</span><span class=\"params\">(String key, <span class=\"keyword\">long</span> count, Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> remove;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h1><h2 id=\"RDB-Redis-DataBase\"><a href=\"#RDB-Redis-DataBase\" class=\"headerlink\" title=\"RDB(Redis DataBase)\"></a>RDB(Redis DataBase)</h2><p>主从复制中rdb可以在从机备用</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921200555786.png\" alt=\"image-20210921200555786\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921200652340.png\" alt=\"image-20210921200652340\"></p>\n<blockquote>\n<p>rdb文件命默认为 dump.rdb，可以在配置文件中修改dbfilename进行修改</p>\n</blockquote>\n<p><strong>生成rdb文件的触发规则：</strong></p>\n<ul>\n<li>满足save规则，自动生成rdb</li>\n<li>执行<code>flushall</code>命令，自动生成rdb(flushdb不会)</li>\n<li>退出redis，生成rdb文件</li>\n</ul>\n<p><strong>如何恢复rdb文件：</strong></p>\n<ul>\n<li><p>将rdb文件放在redis启动目录，redis启动时会自动检查dump.rdb并恢复其中的数据</p>\n</li>\n<li><p>查看需要存放的位置<code>config get dir</code></p>\n</li>\n<li><p>优点</p>\n<ul>\n<li>适合大规模数据恢复</li>\n<li>对数据完整性要求不高</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>需要一定的时间进行进程操作，如果redis意外宕机，最后一次修改的数据就会消失</li>\n<li>fork进程的时候也会占用一定的内存空间</li>\n</ul>\n</li>\n</ul>\n<p>一般来说，rdb的默认机制就足够我们日常使用了</p>\n<h2 id=\"AOF-Append-Only-File\"><a href=\"#AOF-Append-Only-File\" class=\"headerlink\" title=\"AOF(Append Only File)\"></a>AOF(Append Only File)</h2><p>将我们所有的命令都几乎下来，相当于history，恢复时即将所有命令全部记录下来</p>\n<blockquote>\n<p>aof文件命默认为 appendonly.aof，可以在配置文件中修改dbfilename进行修改</p>\n</blockquote>\n<ul>\n<li><p>默认不开启，需要手动更改配置文件中<code>appendonly </code>修改为<code>yes</code>进行开启</p>\n</li>\n<li><p>优点(三种不同的同步策略)</p>\n<ul>\n<li>每一次修改都同步，文件完整性好</li>\n<li>每秒同步一次，可能丢失一秒的数据</li>\n<li>从不同步，效率最高</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>相对于数据文件来说，aof远远大于rdb，修复速度也比rdb慢</li>\n<li>aof运行效率也比rdb慢，因此redis默认配置就是rdb持久化</li>\n</ul>\n</li>\n</ul>\n<p><strong>扩展</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921202615736.png\" alt=\"image-20210921202615736\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210921202658568.png\" alt=\"image-20210921202658568\"></p>\n","categories":["数据库"]},{"title":"Tensorflow2.0","url":"/2020/11/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Tensorflow/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import tensorflow as tf\t\t\t\t\t\t\t\t导入tensorflow</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>Tensorflow学习代码</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/1LJM8_QoT-Z88VYwZhSonFw\">https://pan.baidu.com/s/1LJM8_QoT-Z88VYwZhSonFw</a><br>提取码：ammg </p>\n<h2 id=\"Tensor数据\"><a href=\"#Tensor数据\" class=\"headerlink\" title=\"Tensor数据\"></a>Tensor数据</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">list</span><br><span class=\"line\">np.array科学计算库</span><br><span class=\"line\">tf.Tensor支持连续求导</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20201221104752364.png\" alt=\"image-20201221104752364\"></p>\n<h3 id=\"创建tensor\"><a href=\"#创建tensor\" class=\"headerlink\" title=\"创建tensor\"></a>创建tensor</h3><p><code>tf.constant([1,5], dtype=tf.int64)</code>创建一个tensor</p>\n<p><code>tf.convert_to_tensor(np, dtype=tf.int64)</code>可以将numpy数据转换为tensor</p>\n<p><img src=\"https://i.loli.net/2020/12/21/Nxp5XbZOtnaql9W.png\" alt=\"image-20201221110137328\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tf.constant([1,5], dtype&#x3D;tf.int64)创建一个张量</span><br><span class=\"line\">tf.convert_to_tensor(np, dtype&#x3D;tf.int64)将numpy数据转换为tensor</span><br><span class=\"line\">tf.zeros(维度)创建全为0的tensor</span><br><span class=\"line\">tf.ones(维度)创建全为0的tensor</span><br><span class=\"line\">tf.fill(维度, 指定值)创建全为指定值的tensor</span><br><span class=\"line\">tf.random.normal(维度, mean&#x3D;, stddev&#x3D;)创建指定维度的正态分布随机数</span><br><span class=\"line\">tf.random.truncated_normal(维度, mean&#x3D;, stddev&#x3D;)创建指定维度的正态分布随机数,其中所有数值都在(μ-2σ,μ+2σ)范围内</span><br><span class=\"line\">tf.uniform(维度,minval&#x3D;,maxval)生成指定维度均匀分布的随机数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tf.cast(tf, dtype&#x3D;)强制转换tensor中的数据类型</span><br><span class=\"line\">tf.reduce_min(tf)计算最小值</span><br><span class=\"line\">tf.reduce_max(tf)计算最大值</span><br><span class=\"line\">tf.reduce_mean(tf, axis&#x3D;)计算指定经度的平均值(不指定axis则对所有数据进行操作)</span><br><span class=\"line\">tf.reduce_sum(tf, axis&#x3D;)计算指定经度的和(不指定axis则对所有数据进行操作)</span><br><span class=\"line\">tf.Variable(tf)将变量标记为可训练，变量在反向传播中记录梯度信息</span><br><span class=\"line\">其他数学运算如下图</span><br></pre></td></tr></table></figure>\n\n<p>维度相同的tensor才能进行数学运算</p>\n<p><img src=\"https://i.loli.net/2020/12/21/DIXJaLF2lEcWH1R.png\" alt=\"image-20201221111649506\"></p>\n<h6 id=\"axis\"><a href=\"#axis\" class=\"headerlink\" title=\"axis\"></a>axis</h6><p><img src=\"https://i.loli.net/2020/12/21/YAXDR6zK9JVFswZ.png\" alt=\"image-20201221111145138\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tf.data.Dataset.from_tensor_slices((features, labels))将数据与标签配对</span><br><span class=\"line\">tf.GradientTape()实现loss对参数w的求导计算，如图(需要variable类型)</span><br><span class=\"line\">enumerate(列表&#x2F;元组&#x2F;字符串)枚举每一个元素并组合为索引元素(为python自带函数)</span><br><span class=\"line\">tf.one_hot(tf, depth&#x3D;几分类)</span><br><span class=\"line\">tf.nn.softmax(tf)将数据转换为总和为一且每一项大于0的数据，常用于逻辑回归</span><br><span class=\"line\">tf.assign_sub(w自减内容)，赋值操作，更新参数并返回(需要variable类型)</span><br><span class=\"line\">tf.argmax(tf,axis&#x3D;)返回指定轴最大值索引</span><br><span class=\"line\">tf.where(条件语句, a, b)若为真返回a对应位置元素，若为假返回b对应位置元素</span><br><span class=\"line\">np.random.RandomState.rand(维度)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2020/12/21/RCuek7PGmlYi9dt.png\" alt=\"image-20201221121900348\"></p>\n<p>独热码one-hot</p>\n<p><img src=\"https://i.loli.net/2020/12/21/hIBvDdnt72wNL3W.png\" alt=\"image-20201221123854796\"></p>\n<h3 id=\"获取数据集\"><a href=\"#获取数据集\" class=\"headerlink\" title=\"获取数据集\"></a>获取数据集</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from sklearn.datasets import load_iris</span><br><span class=\"line\">x_data&#x3D;datasets.load_iris().data获取特征值</span><br><span class=\"line\">y_data&#x3D;datasets.load_iris().target获取标签</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"numpy常用函数\"><a href=\"#numpy常用函数\" class=\"headerlink\" title=\"numpy常用函数\"></a>numpy常用函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">np.random.RandomState.rand(维度)</span><br><span class=\"line\">np.vstack(数组1, 数组2)两个数组垂直方向叠加</span><br></pre></td></tr></table></figure>\n\n<p>随机数种子</p>\n<p><img src=\"https://i.loli.net/2020/12/21/DdpIyYWfaXA5xh1.png\" alt=\"image-20201221153210793\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">np.mgrid[]\t\t&#125;</span><br><span class=\"line\">np.ravel()\t\t&#125;联合使用可以创建网格坐标点，如下图</span><br><span class=\"line\">np.c_[]\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2020/12/21/LyxnkhZBW5zN7JD.png\" alt=\"image-20201221154627787\"></p>\n<h2 id=\"神经网络实现\"><a href=\"#神经网络实现\" class=\"headerlink\" title=\"神经网络实现\"></a>神经网络实现</h2><h3 id=\"指数衰减学习率\"><a href=\"#指数衰减学习率\" class=\"headerlink\" title=\"指数衰减学习率\"></a>指数衰减学习率</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">w = tf.Variable(tf.constant(<span class=\"number\">5</span>, dtype=tf.float32))</span><br><span class=\"line\"></span><br><span class=\"line\">epoch = <span class=\"number\">40</span></span><br><span class=\"line\">LR_BASE = <span class=\"number\">0.2</span>  <span class=\"comment\"># 最初学习率</span></span><br><span class=\"line\">LR_DECAY = <span class=\"number\">0.99</span>  <span class=\"comment\"># 学习率衰减率</span></span><br><span class=\"line\">LR_STEP = <span class=\"number\">1</span>  <span class=\"comment\"># 喂入多少轮BATCH_SIZE后，更新一次学习率</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> range(epoch):  <span class=\"comment\"># for epoch 定义顶层循环，表示对数据集循环epoch次，此例数据集数据仅有1个w,初始化时候constant赋值为5，循环100次迭代。</span></span><br><span class=\"line\">    lr = LR_BASE * LR_DECAY ** (epoch / LR_STEP)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> tf.GradientTape() <span class=\"keyword\">as</span> tape:  <span class=\"comment\"># with结构到grads框起了梯度的计算过程。</span></span><br><span class=\"line\">        loss = tf.square(w + <span class=\"number\">1</span>)</span><br><span class=\"line\">    grads = tape.gradient(loss, w)  <span class=\"comment\"># .gradient函数告知谁对谁求导</span></span><br><span class=\"line\"></span><br><span class=\"line\">    w.assign_sub(lr * grads)  <span class=\"comment\"># .assign_sub 对变量做自减 即：w -= lr*grads 即 w = w - lr*grads</span></span><br><span class=\"line\">    print(<span class=\"string\">&quot;After %s epoch,w is %f,loss is %f,lr is %f&quot;</span> % (epoch, w.numpy(), loss, lr))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"激活函数\"><a href=\"#激活函数\" class=\"headerlink\" title=\"激活函数\"></a>激活函数</h3><h4 id=\"relu函数\"><a href=\"#relu函数\" class=\"headerlink\" title=\"relu函数\"></a>relu函数</h4><p>初学者首选</p>\n<p><img src=\"https://i.loli.net/2020/11/19/6snpNe8GCmvj7I9.png\" alt=\"img\"></p>\n<p><img src=\"https://i.loli.net/2020/12/21/ScVf1xabOjqnoXF.png\" alt=\"image-20201221155858186\"></p>\n<p>均值非0导致收敛变慢，同时可能存在dead_relu问题，即激活函数输出为0，反向传播得到梯度为0，参数无法更新，神经元死亡</p>\n<p>改进方法：随机初始化，减小学习率</p>\n<h4 id=\"sigmoid函数\"><a href=\"#sigmoid函数\" class=\"headerlink\" title=\"sigmoid函数\"></a>sigmoid函数</h4><p><img src=\"https://i.loli.net/2020/11/19/AbBgPzp32NdOSkW.png\" alt=\"img\"></p>\n<p><img src=\"https://i.loli.net/2020/12/21/qxAvKV3mgzO8tbH.png\" alt=\"image-20201221155530105\"></p>\n<p>反向传播需要多个导数项相乘，sigmoid函数导数都在0~0.25之间，导致梯度消失，参数无法继续更新；同时，存在幂运算导致计算量偏大</p>\n<h4 id=\"tanh函数\"><a href=\"#tanh函数\" class=\"headerlink\" title=\"tanh函数\"></a>tanh函数</h4><p><img src=\"https://i.loli.net/2020/11/19/ZrLTUHJi6PFQtB7.png\" alt=\"img\"></p>\n<p><img src=\"https://i.loli.net/2020/12/21/pf2iakB6LUATunb.png\" alt=\"image-20201221155725328\"></p>\n<p>与sigmoid函数相同，具有梯度消失和幂运算问题</p>\n<h4 id=\"leak-relu函数\"><a href=\"#leak-relu函数\" class=\"headerlink\" title=\"leak relu函数\"></a>leak relu函数</h4><p>负值影响较小</p>\n<p><img src=\"https://i.loli.net/2020/11/20/VgTpCzkEPYJKGIn.png\" alt=\"img\"></p>\n<p>效果比relu更好，但一般还是选择relu</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">%matplot-inline</span><br><span class=\"line\"></span><br><span class=\"line\">data=pd.read_csv(<span class=\"string\">&quot;./datasets.csv&quot;</span>)</span><br><span class=\"line\">x = data.iloc[:,<span class=\"number\">1</span>:<span class=\"number\">-1</span>]</span><br><span class=\"line\">y = data.iloc[:, <span class=\"number\">-1</span>]</span><br><span class=\"line\"><span class=\"comment\">#建立多层模型</span></span><br><span class=\"line\">model = tf.keras.Sequential([tf.keras.layers.Dense(<span class=\"number\">10</span>, input_shape=(<span class=\"number\">3</span>,), activation=<span class=\"string\">&#x27;relu&#x27;</span>),</span><br><span class=\"line\">                            tf.keras.layers.Dense(<span class=\"number\">1</span>)]</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">#查看模型总体数据</span></span><br><span class=\"line\">model.summary()</span><br><span class=\"line\"><span class=\"comment\">#模型配置(优化方法adam,损失函数mse均方差)</span></span><br><span class=\"line\">model.compile(optimizer=<span class=\"string\">&#x27;adam&#x27;</span>, loss=<span class=\"string\">&#x27;mse&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#训练模型(epochs表示次数)</span></span><br><span class=\"line\">model.fit(x,y,epochs=<span class=\"number\">1000</span>)</span><br><span class=\"line\"><span class=\"comment\">#预测数据</span></span><br><span class=\"line\">model.predict(Test)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tf.reduce_mean(tf)计算均方差</span><br><span class=\"line\">tf.losses.categorical_crossentropy(y_, y)计算交叉熵</span><br><span class=\"line\">tf.nn.softmax_cross_entropy_with_logits(y_, y)将softmax与交叉熵结合，用于多分类问题</span><br><span class=\"line\">自定义损失函数，如下图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2020/12/21/hixnQZJ365IbyFK.png\" alt=\"image-20201221162135559\"></p>\n<p><img src=\"https://i.loli.net/2020/12/21/whT9eGHlLZqRkEC.png\" alt=\"image-20201221162430270\"></p>\n<h4 id=\"正则化\"><a href=\"#正则化\" class=\"headerlink\" title=\"正则化\"></a>正则化</h4><p><img src=\"https://i.loli.net/2020/12/21/O8Re3jfX2nC7kQq.png\" alt=\"image-20201221163023605\"></p>\n<h3 id=\"神经网络参数优化器\"><a href=\"#神经网络参数优化器\" class=\"headerlink\" title=\"神经网络参数优化器\"></a>神经网络参数优化器</h3><p><img src=\"https://i.loli.net/2020/12/21/3esCl2RQxMFTpNq.png\" alt=\"image-20201221163833148\"></p>\n<h4 id=\"SGD\"><a href=\"#SGD\" class=\"headerlink\" title=\"SGD\"></a>SGD</h4><p><img src=\"https://i.loli.net/2020/12/21/ybqoa5lWQA9vghF.png\" alt=\"image-20201221165530498\"></p>\n<h4 id=\"SGDM\"><a href=\"#SGDM\" class=\"headerlink\" title=\"SGDM\"></a>SGDM</h4><p><img src=\"https://i.loli.net/2020/12/21/HBxnvPEhOjg4aRF.png\" alt=\"image-20201221165649601\"></p>\n<p>m_t-1表示上一时刻的动量</p>\n<p>实现代码(部分)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">m_w, m_b = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">beta = <span class=\"number\">0.9</span></span><br><span class=\"line\"></span><br><span class=\"line\">m_w = beta * m_w + (<span class=\"number\">1</span> - beta) * grads[<span class=\"number\">0</span>]</span><br><span class=\"line\">        m_b = beta * m_b + (<span class=\"number\">1</span> - beta) * grads[<span class=\"number\">1</span>]</span><br><span class=\"line\">        w1.assign_sub(lr * m_w)</span><br><span class=\"line\">        b1.assign_sub(lr * m_b)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Adagrad\"><a href=\"#Adagrad\" class=\"headerlink\" title=\"Adagrad\"></a>Adagrad</h4><p><img src=\"https://i.loli.net/2020/12/21/tjugIfeDqPkO7sV.png\" alt=\"image-20201221170155720\"></p>\n<p>实现代码(部分)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">v_w, v_b = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">v_w += tf.square(grads[<span class=\"number\">0</span>])</span><br><span class=\"line\">v_b += tf.square(grads[<span class=\"number\">1</span>])</span><br><span class=\"line\">w1.assign_sub(lr * grads[<span class=\"number\">0</span>] / tf.sqrt(v_w))</span><br><span class=\"line\">b1.assign_sub(lr * grads[<span class=\"number\">1</span>] / tf.sqrt(v_b))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"RMSProp\"><a href=\"#RMSProp\" class=\"headerlink\" title=\"RMSProp\"></a>RMSProp</h4><p><img src=\"https://i.loli.net/2020/12/21/rfJIpYXoU718d4c.png\" alt=\"image-20201221233035802\"></p>\n<p>代码实现(部分)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">v_w, v_b = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">beta = <span class=\"number\">0.9</span></span><br><span class=\"line\"></span><br><span class=\"line\">v_w = beta * v_w + (<span class=\"number\">1</span> - beta) * tf.square(grads[<span class=\"number\">0</span>])</span><br><span class=\"line\">v_b = beta * v_b + (<span class=\"number\">1</span> - beta) * tf.square(grads[<span class=\"number\">1</span>])</span><br><span class=\"line\">w1.assign_sub(lr * grads[<span class=\"number\">0</span>] / tf.sqrt(v_w))</span><br><span class=\"line\">b1.assign_sub(lr * grads[<span class=\"number\">1</span>] / tf.sqrt(v_b))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Adam\"><a href=\"#Adam\" class=\"headerlink\" title=\"Adam\"></a>Adam</h4><p><img src=\"https://i.loli.net/2020/12/21/So4DFhWf3BwrV9A.png\" alt=\"image-20201221233441518\"></p>\n<p>代码实现(部分)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">m_w, m_b = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">v_w, v_b = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">beta1, beta2 = <span class=\"number\">0.9</span>, <span class=\"number\">0.999</span></span><br><span class=\"line\">delta_w, delta_b = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">global_step = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">m_w = beta1 * m_w + (<span class=\"number\">1</span> - beta1) * grads[<span class=\"number\">0</span>]</span><br><span class=\"line\">m_b = beta1 * m_b + (<span class=\"number\">1</span> - beta1) * grads[<span class=\"number\">1</span>]</span><br><span class=\"line\">v_w = beta2 * v_w + (<span class=\"number\">1</span> - beta2) * tf.square(grads[<span class=\"number\">0</span>])</span><br><span class=\"line\">v_b = beta2 * v_b + (<span class=\"number\">1</span> - beta2) * tf.square(grads[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">m_w_correction = m_w / (<span class=\"number\">1</span> - tf.pow(beta1, int(global_step)))</span><br><span class=\"line\">m_b_correction = m_b / (<span class=\"number\">1</span> - tf.pow(beta1, int(global_step)))</span><br><span class=\"line\">v_w_correction = v_w / (<span class=\"number\">1</span> - tf.pow(beta2, int(global_step)))</span><br><span class=\"line\">v_b_correction = v_b / (<span class=\"number\">1</span> - tf.pow(beta2, int(global_step)))</span><br><span class=\"line\"></span><br><span class=\"line\">w1.assign_sub(lr * m_w_correction / tf.sqrt(v_w_correction))</span><br><span class=\"line\">b1.assign_sub(lr * m_b_correction / tf.sqrt(v_b_correction))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全连接网络\"><a href=\"#全连接网络\" class=\"headerlink\" title=\"全连接网络\"></a>全连接网络</h2><p>六步法搭建神经网络</p>\n<ul>\n<li>import</li>\n<li>train, test</li>\n<li>model=tf.keras.models.Sequential</li>\n<li>model.compile</li>\n<li>model.fit</li>\n<li>model.summary</li>\n</ul>\n<h3 id=\"方法描述\"><a href=\"#方法描述\" class=\"headerlink\" title=\"方法描述\"></a>方法描述</h3><h4 id=\"model-tf-keras-models-Sequential\"><a href=\"#model-tf-keras-models-Sequential\" class=\"headerlink\" title=\"model=tf.keras.models.Sequential\"></a>model=tf.keras.models.Sequential</h4><p>包含了各种网络结构：拉直层、全连接层、卷积层、LSTM层</p>\n<p><img src=\"https://i.loli.net/2020/12/21/fpkcAGlVC2FIz8Z.png\" alt=\"image-20201221234451260\"></p>\n<h5 id=\"compile\"><a href=\"#compile\" class=\"headerlink\" title=\"compile\"></a>compile</h5><p><img src=\"https://i.loli.net/2020/12/21/qAmVlzCeFUaQodg.png\" alt=\"image-20201221234815182\"></p>\n<h5 id=\"fit\"><a href=\"#fit\" class=\"headerlink\" title=\"fit\"></a>fit</h5><p>使用时validation_data和validation_split二选一</p>\n<p><img src=\"https://i.loli.net/2020/12/21/H2JcEDCTWRgGMkP.png\" alt=\"image-20201221234952677\"></p>\n<h5 id=\"summary\"><a href=\"#summary\" class=\"headerlink\" title=\"summary\"></a>summary</h5><p>在终端输出训练结果</p>\n<h5 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> datasets</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">x_train = datasets.load_iris().data</span><br><span class=\"line\">y_train = datasets.load_iris().target</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#打乱数据集，使用相同的seed保证输入特征和标签对应</span></span><br><span class=\"line\">np.random.seed(<span class=\"number\">116</span>)</span><br><span class=\"line\">np.random.shuffle(x_train)</span><br><span class=\"line\">np.random.seed(<span class=\"number\">116</span>)</span><br><span class=\"line\">np.random.shuffle(y_train)</span><br><span class=\"line\">tf.random.set_seed(<span class=\"number\">116</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">model = tf.keras.models.Sequential([</span><br><span class=\"line\">    tf.keras.layers.Dense(<span class=\"number\">3</span>, activation=<span class=\"string\">&#x27;softmax&#x27;</span>, kernel_regularizer=tf.keras.regularizers.l2())</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\">model.compile(optimizer=tf.keras.optimizers.SGD(lr=<span class=\"number\">0.1</span>),</span><br><span class=\"line\">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class=\"literal\">False</span>),</span><br><span class=\"line\">              metrics=[<span class=\"string\">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">model.fit(x_train, y_train, batch_size=<span class=\"number\">32</span>, epochs=<span class=\"number\">500</span>, validation_split=<span class=\"number\">0.2</span>, validation_freq=<span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">model.summary()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"class-MyModel-Model-model-MyModel\"><a href=\"#class-MyModel-Model-model-MyModel\" class=\"headerlink\" title=\"class MyModel(Model) model=MyModel\"></a>class MyModel(Model) model=MyModel</h4><p>将之前的Sequential替换为自定义class继承Model类</p>\n<p><img src=\"https://i.loli.net/2020/12/22/dhiJTE7Y61LbGMU.png\" alt=\"image-20201222142747894\"></p>\n<h5 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p>相比之下，导入模块增加了<code>Dense</code>和<code>Model</code>，然后自定义<code>IrisModel</code>类来创建神经网络结构</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.keras.layers <span class=\"keyword\">import</span> Dense</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.keras <span class=\"keyword\">import</span> Model</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> datasets</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">x_train = datasets.load_iris().data</span><br><span class=\"line\">y_train = datasets.load_iris().target</span><br><span class=\"line\"></span><br><span class=\"line\">np.random.seed(<span class=\"number\">116</span>)</span><br><span class=\"line\">np.random.shuffle(x_train)</span><br><span class=\"line\">np.random.seed(<span class=\"number\">116</span>)</span><br><span class=\"line\">np.random.shuffle(y_train)</span><br><span class=\"line\">tf.random.set_seed(<span class=\"number\">116</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IrisModel</span>(<span class=\"params\">Model</span>):</span><span class=\"comment\">#自定义类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        super(IrisModel, self).__init__()</span><br><span class=\"line\">        self.d1 = Dense(<span class=\"number\">3</span>, activation=<span class=\"string\">&#x27;softmax&#x27;</span>, kernel_regularizer=tf.keras.regularizers.l2())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call</span>(<span class=\"params\">self, x</span>):</span></span><br><span class=\"line\">        y = self.d1(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y</span><br><span class=\"line\"></span><br><span class=\"line\">model = IrisModel()</span><br><span class=\"line\"></span><br><span class=\"line\">model.compile(optimizer=tf.keras.optimizers.SGD(lr=<span class=\"number\">0.1</span>),</span><br><span class=\"line\">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class=\"literal\">False</span>),</span><br><span class=\"line\">              metrics=[<span class=\"string\">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">model.fit(x_train, y_train, batch_size=<span class=\"number\">32</span>, epochs=<span class=\"number\">500</span>, validation_split=<span class=\"number\">0.2</span>, validation_freq=<span class=\"number\">20</span>)</span><br><span class=\"line\">model.summary()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"mnist数据集\"><a href=\"#mnist数据集\" class=\"headerlink\" title=\"mnist数据集\"></a>mnist数据集</h4><p><img src=\"https://i.loli.net/2020/12/22/6xrMUNYS4Pgdbhf.png\" alt=\"image-20201222143513639\"></p>\n<h5 id=\"查看数据集\"><a href=\"#查看数据集\" class=\"headerlink\" title=\"查看数据集\"></a>查看数据集</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">mnist = tf.keras.datasets.mnist</span><br><span class=\"line\">(x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可视化训练集输入特征的第一个元素</span></span><br><span class=\"line\">plt.imshow(x_train[<span class=\"number\">0</span>], cmap=<span class=\"string\">&#x27;gray&#x27;</span>)  <span class=\"comment\"># 绘制灰度图</span></span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印出训练集输入特征的第一个元素</span></span><br><span class=\"line\">print(<span class=\"string\">&quot;x_train[0]:\\n&quot;</span>, x_train[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"comment\"># 打印出训练集标签的第一个元素</span></span><br><span class=\"line\">print(<span class=\"string\">&quot;y_train[0]:\\n&quot;</span>, y_train[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印出整个训练集输入特征形状</span></span><br><span class=\"line\">print(<span class=\"string\">&quot;x_train.shape:\\n&quot;</span>, x_train.shape)</span><br><span class=\"line\"><span class=\"comment\"># 打印出整个训练集标签的形状</span></span><br><span class=\"line\">print(<span class=\"string\">&quot;y_train.shape:\\n&quot;</span>, y_train.shape)</span><br><span class=\"line\"><span class=\"comment\"># 打印出整个测试集输入特征的形状</span></span><br><span class=\"line\">print(<span class=\"string\">&quot;x_test.shape:\\n&quot;</span>, x_test.shape)</span><br><span class=\"line\"><span class=\"comment\"># 打印出整个测试集标签的形状</span></span><br><span class=\"line\">print(<span class=\"string\">&quot;y_test.shape:\\n&quot;</span>, y_test.shape)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Sequential实现\"><a href=\"#Sequential实现\" class=\"headerlink\" title=\"Sequential实现\"></a>Sequential实现</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">mnist = tf.keras.datasets.mnist</span><br><span class=\"line\">(x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br><span class=\"line\">x_train, x_test = x_train / <span class=\"number\">255.0</span>, x_test / <span class=\"number\">255.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">model = tf.keras.models.Sequential([</span><br><span class=\"line\">    tf.keras.layers.Flatten(),</span><br><span class=\"line\">    tf.keras.layers.Dense(<span class=\"number\">128</span>, activation=<span class=\"string\">&#x27;relu&#x27;</span>),</span><br><span class=\"line\">    tf.keras.layers.Dense(<span class=\"number\">10</span>, activation=<span class=\"string\">&#x27;softmax&#x27;</span>)</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\">model.compile(optimizer=<span class=\"string\">&#x27;adam&#x27;</span>,</span><br><span class=\"line\">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class=\"literal\">False</span>),</span><br><span class=\"line\">              metrics=[<span class=\"string\">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">model.fit(x_train, y_train, batch_size=<span class=\"number\">32</span>, epochs=<span class=\"number\">5</span>, validation_data=(x_test, y_test), validation_freq=<span class=\"number\">1</span>)</span><br><span class=\"line\">model.summary()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"自定义class实现\"><a href=\"#自定义class实现\" class=\"headerlink\" title=\"自定义class实现\"></a>自定义class实现</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.keras.layers <span class=\"keyword\">import</span> Dense, Flatten</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.keras <span class=\"keyword\">import</span> Model</span><br><span class=\"line\"></span><br><span class=\"line\">mnist = tf.keras.datasets.mnist</span><br><span class=\"line\">(x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br><span class=\"line\">x_train, x_test = x_train / <span class=\"number\">255.0</span>, x_test / <span class=\"number\">255.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MnistModel</span>(<span class=\"params\">Model</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        super(MnistModel, self).__init__()</span><br><span class=\"line\">        self.flatten = Flatten()</span><br><span class=\"line\">        self.d1 = Dense(<span class=\"number\">128</span>, activation=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        self.d2 = Dense(<span class=\"number\">10</span>, activation=<span class=\"string\">&#x27;softmax&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call</span>(<span class=\"params\">self, x</span>):</span></span><br><span class=\"line\">        x = self.flatten(x)</span><br><span class=\"line\">        x = self.d1(x)</span><br><span class=\"line\">        y = self.d2(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">model = MnistModel()</span><br><span class=\"line\"></span><br><span class=\"line\">model.compile(optimizer=<span class=\"string\">&#x27;adam&#x27;</span>,</span><br><span class=\"line\">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class=\"literal\">False</span>),</span><br><span class=\"line\">              metrics=[<span class=\"string\">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">model.fit(x_train, y_train, batch_size=<span class=\"number\">32</span>, epochs=<span class=\"number\">5</span>, validation_data=(x_test, y_test), validation_freq=<span class=\"number\">1</span>)</span><br><span class=\"line\">model.summary()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"fashion数据集\"><a href=\"#fashion数据集\" class=\"headerlink\" title=\"fashion数据集\"></a>fashion数据集</h4><p><img src=\"https://i.loli.net/2020/12/22/wkdYRCqVHcMOuxA.png\" alt=\"image-20201222151008787\"></p>\n<h5 id=\"Sequential实现-1\"><a href=\"#Sequential实现-1\" class=\"headerlink\" title=\"Sequential实现\"></a>Sequential实现</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"></span><br><span class=\"line\">fashion = tf.keras.datasets.fashion_mnist</span><br><span class=\"line\">(x_train, y_train),(x_test, y_test) = fashion.load_data()</span><br><span class=\"line\">x_train, x_test = x_train / <span class=\"number\">255.0</span>, x_test / <span class=\"number\">255.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">model = tf.keras.models.Sequential([</span><br><span class=\"line\">    tf.keras.layers.Flatten(),</span><br><span class=\"line\">    tf.keras.layers.Dense(<span class=\"number\">128</span>, activation=<span class=\"string\">&#x27;relu&#x27;</span>),</span><br><span class=\"line\">    tf.keras.layers.Dense(<span class=\"number\">10</span>, activation=<span class=\"string\">&#x27;softmax&#x27;</span>)</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\">model.compile(optimizer=<span class=\"string\">&#x27;adam&#x27;</span>,</span><br><span class=\"line\">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class=\"literal\">False</span>),</span><br><span class=\"line\">              metrics=[<span class=\"string\">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">model.fit(x_train, y_train, batch_size=<span class=\"number\">32</span>, epochs=<span class=\"number\">5</span>, validation_data=(x_test, y_test), validation_freq=<span class=\"number\">1</span>)</span><br><span class=\"line\">model.summary()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"补充方法\"><a href=\"#补充方法\" class=\"headerlink\" title=\"补充方法\"></a>补充方法</h3><h4 id=\"自制数据集\"><a href=\"#自制数据集\" class=\"headerlink\" title=\"自制数据集\"></a>自制数据集</h4><h5 id=\"实现代码-部分\"><a href=\"#实现代码-部分\" class=\"headerlink\" title=\"实现代码(部分)\"></a>实现代码(部分)</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">train_path = <span class=\"string\">&#x27;./mnist_image_label/mnist_train_jpg_60000/&#x27;</span></span><br><span class=\"line\">train_txt = <span class=\"string\">&#x27;./mnist_image_label/mnist_train_jpg_60000.txt&#x27;</span></span><br><span class=\"line\">x_train_savepath = <span class=\"string\">&#x27;./mnist_image_label/mnist_x_train.npy&#x27;</span></span><br><span class=\"line\">y_train_savepath = <span class=\"string\">&#x27;./mnist_image_label/mnist_y_train.npy&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">test_path = <span class=\"string\">&#x27;./mnist_image_label/mnist_test_jpg_10000/&#x27;</span></span><br><span class=\"line\">test_txt = <span class=\"string\">&#x27;./mnist_image_label/mnist_test_jpg_10000.txt&#x27;</span></span><br><span class=\"line\">x_test_savepath = <span class=\"string\">&#x27;./mnist_image_label/mnist_x_test.npy&#x27;</span></span><br><span class=\"line\">y_test_savepath = <span class=\"string\">&#x27;./mnist_image_label/mnist_y_test.npy&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generateds</span>(<span class=\"params\">path, txt</span>):</span></span><br><span class=\"line\">    f = open(txt, <span class=\"string\">&#x27;r&#x27;</span>)  <span class=\"comment\"># 以只读形式打开txt文件</span></span><br><span class=\"line\">    contents = f.readlines()  <span class=\"comment\"># 读取文件中所有行</span></span><br><span class=\"line\">    f.close()  <span class=\"comment\"># 关闭txt文件</span></span><br><span class=\"line\">    x, y_ = [], []  <span class=\"comment\"># 建立空列表</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> content <span class=\"keyword\">in</span> contents:  <span class=\"comment\"># 逐行取出</span></span><br><span class=\"line\">        value = content.split()  <span class=\"comment\"># 以空格分开，图片路径为value[0] , 标签为value[1] , 存入列表</span></span><br><span class=\"line\">        img_path = path + value[<span class=\"number\">0</span>]  <span class=\"comment\"># 拼出图片路径和文件名</span></span><br><span class=\"line\">        img = Image.open(img_path)  <span class=\"comment\"># 读入图片</span></span><br><span class=\"line\">        img = np.array(img.convert(<span class=\"string\">&#x27;L&#x27;</span>))  <span class=\"comment\"># 图片变为8位宽灰度值的np.array格式</span></span><br><span class=\"line\">        img = img / <span class=\"number\">255.</span>  <span class=\"comment\"># 数据归一化 （实现预处理）</span></span><br><span class=\"line\">        x.append(img)  <span class=\"comment\"># 归一化后的数据，贴到列表x</span></span><br><span class=\"line\">        y_.append(value[<span class=\"number\">1</span>])  <span class=\"comment\"># 标签贴到列表y_</span></span><br><span class=\"line\">        print(<span class=\"string\">&#x27;loading : &#x27;</span> + content)  <span class=\"comment\"># 打印状态提示</span></span><br><span class=\"line\"></span><br><span class=\"line\">    x = np.array(x)  <span class=\"comment\"># 变为np.array格式</span></span><br><span class=\"line\">    y_ = np.array(y_)  <span class=\"comment\"># 变为np.array格式</span></span><br><span class=\"line\">    y_ = y_.astype(np.int64)  <span class=\"comment\"># 变为64位整型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x, y_  <span class=\"comment\"># 返回输入特征x，返回标签y_</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> os.path.exists(x_train_savepath) <span class=\"keyword\">and</span> os.path.exists(y_train_savepath) <span class=\"keyword\">and</span> os.path.exists(</span><br><span class=\"line\">        x_test_savepath) <span class=\"keyword\">and</span> os.path.exists(y_test_savepath):</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;-------------Load Datasets-----------------&#x27;</span>)</span><br><span class=\"line\">    x_train_save = np.load(x_train_savepath)</span><br><span class=\"line\">    y_train = np.load(y_train_savepath)</span><br><span class=\"line\">    x_test_save = np.load(x_test_savepath)</span><br><span class=\"line\">    y_test = np.load(y_test_savepath)</span><br><span class=\"line\">    x_train = np.reshape(x_train_save, (len(x_train_save), <span class=\"number\">28</span>, <span class=\"number\">28</span>))</span><br><span class=\"line\">    x_test = np.reshape(x_test_save, (len(x_test_save), <span class=\"number\">28</span>, <span class=\"number\">28</span>))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;-------------Generate Datasets-----------------&#x27;</span>)</span><br><span class=\"line\">    x_train, y_train = generateds(train_path, train_txt)</span><br><span class=\"line\">    x_test, y_test = generateds(test_path, test_txt)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;-------------Save Datasets-----------------&#x27;</span>)</span><br><span class=\"line\">    x_train_save = np.reshape(x_train, (len(x_train), <span class=\"number\">-1</span>))</span><br><span class=\"line\">    x_test_save = np.reshape(x_test, (len(x_test), <span class=\"number\">-1</span>))</span><br><span class=\"line\">    np.save(x_train_savepath, x_train_save)</span><br><span class=\"line\">    np.save(y_train_savepath, y_train)</span><br><span class=\"line\">    np.save(x_test_savepath, x_test_save)</span><br><span class=\"line\">    np.save(y_test_savepath, y_test)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数据增强\"><a href=\"#数据增强\" class=\"headerlink\" title=\"数据增强\"></a>数据增强</h4><p>可用作增大数据量</p>\n<p><img src=\"https://i.loli.net/2020/12/22/mKfH5dh6pvRkBMq.png\" alt=\"image-20201222160932779\"></p>\n<h5 id=\"fit-1\"><a href=\"#fit-1\" class=\"headerlink\" title=\"fit\"></a>fit</h5><p><code>fit(x, augment=False, rounds=1, seed=None)</code></p>\n<p>将数据生成器用于某些样本数据数据。它基于一组样本数据，计算与数据转换相关的内部数据统计。当且仅当 <code>featurewise_center</code> 或 <code>featurewise_std_normalization</code> 或 <code>zca_whitening</code> 设置为 True 时才需要。</p>\n<ul>\n<li><strong>x</strong>: 样本数据。秩应该为 4，即（batch，width，height，channel）的格式。对于灰度数据，通道轴的值应该为 1；对于 RGB 数据，值应该为 3。</li>\n<li><strong>augment</strong>: 布尔值（默认为 False）。是否使用随机样本扩张。</li>\n<li><strong>rounds</strong>: 整数（默认为 1）。如果数据数据增强（augment=True），表明在数据上进行多少次增强。</li>\n<li><strong>seed</strong>: 整数（默认 None）。随机种子。</li>\n</ul>\n<h5 id=\"flow\"><a href=\"#flow\" class=\"headerlink\" title=\"flow\"></a>flow</h5><p><code>flow(x, y=None, batch_size=32, shuffle=True, sample_weight=None, seed=None, save_to_dir=None, save_prefix=&#39;&#39;, save_format=&#39;png&#39;, subset=None)</code></p>\n<p>采集数据和标签数组，生成批量增强数据。</p>\n<ul>\n<li><strong>x</strong>: 输入数据。秩为 4 的 Numpy 矩阵或元组。如果是元组，第一个元素应该包含图像，第二个元素是另一个 Numpy 数组或一列 Numpy 数组，它们不经过任何修改就传递给输出。可用于将模型杂项数据与图像一起输入。对于灰度数据，图像数组的通道轴的值应该为 1，而对于 RGB 数据，其值应该为 3。</li>\n<li><strong>y</strong>: 标签。</li>\n<li><strong>batch_size</strong>: 整数 (默认为 32)。</li>\n<li><strong>shuffle</strong>: 布尔值 (默认为 True)。</li>\n<li><strong>sample_weight</strong>: 样本权重。</li>\n<li><strong>seed</strong>: 整数（默认为 None）。</li>\n<li><strong>save_to_dir</strong>: None 或 字符串（默认为 None）。这使您可以选择指定要保存的正在生成的增强图片的目录（用于可视化您正在执行的操作）。</li>\n<li><strong>save_prefix</strong>: 字符串（默认 <code>&#39;&#39;</code>）。保存图片的文件名前缀（仅当 <code>save_to_dir</code> 设置时可用）。</li>\n<li><strong>save_format</strong>: “png”, “jpeg” 之一（仅当 <code>save_to_dir</code> 设置时可用）。默认：”png”。</li>\n<li><strong>subset</strong>: 数据子集 (“training” 或 “validation”)，如果 在 <code>ImageDataGenerator</code> 中设置了 <code>validation_split</code>。</li>\n</ul>\n<p>返回一个生成元组 <code>(x, y)</code> 的 生成器<code>Iterator</code>，其中 <code>x</code> 是图像数据的 Numpy 数组（在单张图像输入时），或 Numpy 数组列表（在额外多个输入时），<code>y</code> 是对应的标签的 Numpy 数组。如果 ‘sample_weight’ 不是 None，生成的元组形式为 <code>(x, y, sample_weight)</code>。如果 <code>y</code> 是 None, 只有 Numpy 数组 <code>x</code> 被返回。</p>\n<h5 id=\"实现代码-部分-1\"><a href=\"#实现代码-部分-1\" class=\"headerlink\" title=\"实现代码(部分)\"></a>实现代码(部分)</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.keras.preprocessing.image <span class=\"keyword\">import</span> ImageDataGenerator</span><br><span class=\"line\"></span><br><span class=\"line\">x_train = x_train.reshape(x_train.shape[<span class=\"number\">0</span>], <span class=\"number\">28</span>, <span class=\"number\">28</span>, <span class=\"number\">1</span>)<span class=\"comment\">#fit要求秩为4</span></span><br><span class=\"line\">image_gen_train = ImageDataGenerator(</span><br><span class=\"line\">    rescale=<span class=\"number\">1.</span> / <span class=\"number\">1.</span>,  <span class=\"comment\"># 如为图像，分母为255时，可归至0～1</span></span><br><span class=\"line\">    rotation_range=<span class=\"number\">45</span>,  <span class=\"comment\"># 随机45度旋转</span></span><br><span class=\"line\">    width_shift_range=<span class=\"number\">.15</span>,  <span class=\"comment\"># 宽度偏移</span></span><br><span class=\"line\">    height_shift_range=<span class=\"number\">.15</span>,  <span class=\"comment\"># 高度偏移</span></span><br><span class=\"line\">    horizontal_flip=<span class=\"literal\">False</span>,  <span class=\"comment\"># 水平翻转</span></span><br><span class=\"line\">    zoom_range=<span class=\"number\">0.5</span>  <span class=\"comment\"># 将图像随机缩放阈量50％</span></span><br><span class=\"line\">)</span><br><span class=\"line\">image_gen_train.fit(x_train)</span><br><span class=\"line\"></span><br><span class=\"line\">model.fit(image_gen_train.flow(x_train, y_train, batch_size=<span class=\"number\">32</span>), epochs=<span class=\"number\">5</span>, validation_data=(x_test, y_test),</span><br><span class=\"line\">          validation_freq=<span class=\"number\">1</span>)<span class=\"comment\">#填入训练数据和标签要用flow函数生成增强数据</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"断点续训\"><a href=\"#断点续训\" class=\"headerlink\" title=\"断点续训\"></a>断点续训</h4><p>将之前训练好的模型加载进来，在原来模型的基础上再进行训练</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20201223095033595.png\" alt=\"image-20201223095033595\"></p>\n<h5 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">mnist = tf.keras.datasets.mnist</span><br><span class=\"line\">(x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br><span class=\"line\">x_train, x_test = x_train / <span class=\"number\">255.0</span>, x_test / <span class=\"number\">255.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">model = tf.keras.models.Sequential([</span><br><span class=\"line\">    tf.keras.layers.Flatten(),</span><br><span class=\"line\">    tf.keras.layers.Dense(<span class=\"number\">128</span>, activation=<span class=\"string\">&#x27;relu&#x27;</span>),</span><br><span class=\"line\">    tf.keras.layers.Dense(<span class=\"number\">10</span>, activation=<span class=\"string\">&#x27;softmax&#x27;</span>)</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\">model.compile(optimizer=<span class=\"string\">&#x27;adam&#x27;</span>,</span><br><span class=\"line\">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class=\"literal\">False</span>),</span><br><span class=\"line\">              metrics=[<span class=\"string\">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">checkpoint_save_path = <span class=\"string\">&quot;./checkpoint/mnist.ckpt&quot;</span><span class=\"comment\">#保存模型路径</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> os.path.exists(checkpoint_save_path + <span class=\"string\">&#x27;.index&#x27;</span>):<span class=\"comment\">#检查是否已生成索引表</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;-------------load the model-----------------&#x27;</span>)</span><br><span class=\"line\">    model.load_weights(checkpoint_save_path)<span class=\"comment\">#加载模型</span></span><br><span class=\"line\"></span><br><span class=\"line\">cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path,</span><br><span class=\"line\">                                                 save_weights_only=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                                 save_best_only=<span class=\"literal\">True</span>)<span class=\"comment\">#回调函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">history = model.fit(x_train, y_train, batch_size=<span class=\"number\">32</span>, epochs=<span class=\"number\">5</span>, validation_data=(x_test, y_test), validation_freq=<span class=\"number\">1</span>,</span><br><span class=\"line\">                    callbacks=[cp_callback])<span class=\"comment\">#添加callback选项，若没有checkpoint文件夹则会自动创建</span></span><br><span class=\"line\">model.summary()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数提取\"><a href=\"#参数提取\" class=\"headerlink\" title=\"参数提取\"></a>参数提取</h4><p><img src=\"https://i.loli.net/2020/12/23/jh5svyZizwU4Rx2.png\" alt=\"image-20201223101139650\"></p>\n<h5 id=\"实现代码-部分-2\"><a href=\"#实现代码-部分-2\" class=\"headerlink\" title=\"实现代码(部分)\"></a>实现代码(部分)</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">np.set_printoptions(threshold=np.inf)</span><br><span class=\"line\"></span><br><span class=\"line\">print(model.trainable_variables)</span><br><span class=\"line\">file = open(<span class=\"string\">&#x27;./weights.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> model.trainable_variables:</span><br><span class=\"line\">    file.write(str(v.name) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    file.write(str(v.shape) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    file.write(str(v.numpy()) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">file.close()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"acc-loss可视化\"><a href=\"#acc-loss可视化\" class=\"headerlink\" title=\"acc/loss可视化\"></a>acc/loss可视化</h4><p>加入绘图模块</p>\n<p>实现代码(部分)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">history = model.fit(x_train, y_train, batch_size=<span class=\"number\">32</span>, epochs=<span class=\"number\">5</span>, validation_data=(x_test, y_test), validation_freq=<span class=\"number\">1</span>,</span><br><span class=\"line\">                    callbacks=[cp_callback])<span class=\"comment\">#将模型传给history</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示训练集和验证集的acc和loss曲线</span></span><br><span class=\"line\">acc = history.history[<span class=\"string\">&#x27;sparse_categorical_accuracy&#x27;</span>]</span><br><span class=\"line\">val_acc = history.history[<span class=\"string\">&#x27;val_sparse_categorical_accuracy&#x27;</span>]</span><br><span class=\"line\">loss = history.history[<span class=\"string\">&#x27;loss&#x27;</span>]</span><br><span class=\"line\">val_loss = history.history[<span class=\"string\">&#x27;val_loss&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">plt.plot(acc, label=<span class=\"string\">&#x27;Training Accuracy&#x27;</span>)</span><br><span class=\"line\">plt.plot(val_acc, label=<span class=\"string\">&#x27;Validation Accuracy&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Training and Validation Accuracy&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">plt.plot(loss, label=<span class=\"string\">&#x27;Training Loss&#x27;</span>)</span><br><span class=\"line\">plt.plot(val_loss, label=<span class=\"string\">&#x27;Validation Loss&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Training and Validation Loss&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现预测\"><a href=\"#实现预测\" class=\"headerlink\" title=\"实现预测\"></a>实现预测</h4><p>在已训练好模型的基础上实现预测</p>\n<p><img src=\"https://i.loli.net/2020/12/23/ImxZkehCEloinvP.png\" alt=\"image-20201223103609620\"></p>\n<h5 id=\"实现代码-部分-3\"><a href=\"#实现代码-部分-3\" class=\"headerlink\" title=\"实现代码(部分)\"></a>实现代码(部分)</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(preNum):</span><br><span class=\"line\">    image_path = input(<span class=\"string\">&quot;the path of test picture:&quot;</span>)</span><br><span class=\"line\">    img = Image.open(image_path)</span><br><span class=\"line\">    img = img.resize((<span class=\"number\">28</span>, <span class=\"number\">28</span>), Image.ANTIALIAS)</span><br><span class=\"line\">    img_arr = np.array(img.convert(<span class=\"string\">&#x27;L&#x27;</span>))<span class=\"comment\">#转换为灰度值表示</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">28</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">28</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> img_arr[i][j] &lt; <span class=\"number\">200</span>:<span class=\"comment\">#噪声过滤</span></span><br><span class=\"line\">                img_arr[i][j] = <span class=\"number\">255</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                img_arr[i][j] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    img_arr = img_arr / <span class=\"number\">255.0</span><span class=\"comment\">#归一化</span></span><br><span class=\"line\">    x_predict = img_arr[tf.newaxis, ...]<span class=\"comment\">#增加维度</span></span><br><span class=\"line\">    result = model.predict(x_predict)<span class=\"comment\">#进行预测</span></span><br><span class=\"line\">    pred = tf.argmax(result, axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    tf.print(pred)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"卷积神经网络\"><a href=\"#卷积神经网络\" class=\"headerlink\" title=\"卷积神经网络\"></a>卷积神经网络</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><h4 id=\"卷积核\"><a href=\"#卷积核\" class=\"headerlink\" title=\"卷积核\"></a>卷积核</h4><p>输出层对应特征为此时对应位置所有特征乘积之和</p>\n<p><img src=\"https://i.loli.net/2020/12/23/FiPRgWhA7ubK2EV.png\" alt=\"image-20201223105856460\"></p>\n<p>单通道卷积核</p>\n<img src=\"https://i.loli.net/2020/12/23/vqFpwWurBDbJXmf.png\" alt=\"image-20201223110035869\"  />\n\n<p>三通道卷积核</p>\n<img src=\"https://i.loli.net/2020/12/23/wvumgzbaKsHAhpy.png\" alt=\"image-20201223110035869\" style=\"zoom:200%;\" />\n\n<h4 id=\"感受野\"><a href=\"#感受野\" class=\"headerlink\" title=\"感受野\"></a>感受野</h4><p>如图，黄色的卷积核感受野为3×3，绿色和蓝色卷积核的感受野为5×5</p>\n<p><img src=\"https://i.loli.net/2020/12/23/VytBqKxFHUmDpEX.png\" alt=\"image-20201223111247005\"></p>\n<h4 id=\"全零填充\"><a href=\"#全零填充\" class=\"headerlink\" title=\"全零填充\"></a>全零填充</h4><p>在输入图的周围填充一层0</p>\n<p><img src=\"https://i.loli.net/2020/12/23/q4PLidCgnhoWKtT.png\" alt=\"image-20201223111516974\"></p>\n<h4 id=\"实现卷积层\"><a href=\"#实现卷积层\" class=\"headerlink\" title=\"实现卷积层\"></a>实现卷积层</h4><p><img src=\"https://i.loli.net/2020/12/23/tgZc7Av5HXTGfyw.png\" alt=\"image-20201223112144294\"></p>\n<h4 id=\"批标准化BN\"><a href=\"#批标准化BN\" class=\"headerlink\" title=\"批标准化BN\"></a>批标准化BN</h4><p>位于卷积层之后，激活层之前</p>\n<p><img src=\"https://i.loli.net/2020/12/23/EaBp62TIdDwPRYo.png\" alt=\"image-20201223112637606\"></p>\n<p>归一化提升了激活函数对输入数据的区分力，但会使得函数丧失非线性，可添加参数作以调整</p>\n<p><img src=\"https://i.loli.net/2020/12/23/YZOxBVvSa16U9Io.png\" alt=\"image-20201223112926668\"></p>\n<p>tf实现</p>\n<p><img src=\"https://i.loli.net/2020/12/23/lP1OcHYXnIqwJa5.png\" alt=\"image-20201223113837324\"></p>\n<h4 id=\"池化\"><a href=\"#池化\" class=\"headerlink\" title=\"池化\"></a>池化</h4><p>减少卷积神经网络中特征数据量</p>\n<p>最大池化提取图片纹理</p>\n<p>均值池化保留背景特征</p>\n<p>如图使用2×2的池化核对4×4图片进行操作，每次移动步长为2，得到不同的结果</p>\n<p><img src=\"https://i.loli.net/2020/12/23/jrHPGopIh7u31ls.png\" alt=\"image-20201223161305084\"></p>\n<p><img src=\"https://i.loli.net/2020/12/23/velEPCKORxoDa4t.png\" alt=\"image-20201223161546439\"></p>\n<h4 id=\"舍弃\"><a href=\"#舍弃\" class=\"headerlink\" title=\"舍弃\"></a>舍弃</h4><p>训练时随机舍弃一部分神经元，防止过拟合，使用时回复神经元</p>\n<p><img src=\"https://i.loli.net/2020/12/23/8wpHBLQCaIGrMWP.png\" alt=\"image-20201223161704792\"></p>\n<h3 id=\"总体实现\"><a href=\"#总体实现\" class=\"headerlink\" title=\"总体实现\"></a>总体实现</h3><p>过程：CBAPD</p>\n<ul>\n<li>卷积核()</li>\n<li>批标准化()</li>\n<li>激活函数()</li>\n<li>池化核()</li>\n<li>舍弃()</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/12/23/yt1NViczEWI8lOh.png\" alt=\"image-20201223162600423\"></p>\n<h4 id=\"自定义模型\"><a href=\"#自定义模型\" class=\"headerlink\" title=\"自定义模型\"></a>自定义模型</h4><p>之后的经典卷积网络都基于此代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Baseline</span>(<span class=\"params\">Model</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        super(Baseline, self).__init__()</span><br><span class=\"line\">        self.c1 = Conv2D(filters=<span class=\"number\">6</span>, kernel_size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>)  <span class=\"comment\"># 卷积层</span></span><br><span class=\"line\">        self.b1 = BatchNormalization()  <span class=\"comment\"># BN层</span></span><br><span class=\"line\">        self.a1 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)  <span class=\"comment\"># 激活层</span></span><br><span class=\"line\">        self.p1 = MaxPool2D(pool_size=(<span class=\"number\">2</span>, <span class=\"number\">2</span>), strides=<span class=\"number\">2</span>, padding=<span class=\"string\">&#x27;same&#x27;</span>)  <span class=\"comment\"># 池化层</span></span><br><span class=\"line\">        self.d1 = Dropout(<span class=\"number\">0.2</span>)  <span class=\"comment\"># dropout层</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.flatten = Flatten()</span><br><span class=\"line\">        self.f1 = Dense(<span class=\"number\">128</span>, activation=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        self.d2 = Dropout(<span class=\"number\">0.2</span>)</span><br><span class=\"line\">        self.f2 = Dense(<span class=\"number\">10</span>, activation=<span class=\"string\">&#x27;softmax&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call</span>(<span class=\"params\">self, x</span>):</span></span><br><span class=\"line\">        x = self.c1(x)</span><br><span class=\"line\">        x = self.b1(x)</span><br><span class=\"line\">        x = self.a1(x)</span><br><span class=\"line\">        x = self.p1(x)</span><br><span class=\"line\">        x = self.d1(x)</span><br><span class=\"line\"></span><br><span class=\"line\">        x = self.flatten(x)</span><br><span class=\"line\">        x = self.f1(x)</span><br><span class=\"line\">        x = self.d2(x)</span><br><span class=\"line\">        y = self.f2(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"经典卷积网络\"><a href=\"#经典卷积网络\" class=\"headerlink\" title=\"经典卷积网络\"></a>经典卷积网络</h3><p><img src=\"https://i.loli.net/2020/12/23/b3cpo8GSkNghlaD.png\" alt=\"image-20201223192744044\"></p>\n<h4 id=\"LeNet\"><a href=\"#LeNet\" class=\"headerlink\" title=\"LeNet\"></a>LeNet</h4><p>共享卷积层减少网络的参数</p>\n<p>(统计层数时只统计卷积计算层和全连接计算层)</p>\n<p>共5层，2层卷积层，3层全连接层，一层Flatten层</p>\n<p><img src=\"https://i.loli.net/2020/12/23/5q1iUBLj6TxAcvK.png\" alt=\"image-20201223165152017\"></p>\n<h5 id=\"模型代码\"><a href=\"#模型代码\" class=\"headerlink\" title=\"模型代码\"></a>模型代码</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeNet5</span>(<span class=\"params\">Model</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        super(LeNet5, self).__init__()</span><br><span class=\"line\">        self.c1 = Conv2D(filters=<span class=\"number\">6</span>, kernel_size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>),</span><br><span class=\"line\">                         activation=<span class=\"string\">&#x27;sigmoid&#x27;</span>)</span><br><span class=\"line\">        self.p1 = MaxPool2D(pool_size=(<span class=\"number\">2</span>, <span class=\"number\">2</span>), strides=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.c2 = Conv2D(filters=<span class=\"number\">16</span>, kernel_size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>),</span><br><span class=\"line\">                         activation=<span class=\"string\">&#x27;sigmoid&#x27;</span>)</span><br><span class=\"line\">        self.p2 = MaxPool2D(pool_size=(<span class=\"number\">2</span>, <span class=\"number\">2</span>), strides=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.flatten = Flatten()</span><br><span class=\"line\">        self.f1 = Dense(<span class=\"number\">120</span>, activation=<span class=\"string\">&#x27;sigmoid&#x27;</span>)</span><br><span class=\"line\">        self.f2 = Dense(<span class=\"number\">84</span>, activation=<span class=\"string\">&#x27;sigmoid&#x27;</span>)</span><br><span class=\"line\">        self.f3 = Dense(<span class=\"number\">10</span>, activation=<span class=\"string\">&#x27;softmax&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"AlexNet\"><a href=\"#AlexNet\" class=\"headerlink\" title=\"AlexNet\"></a>AlexNet</h4><p>共8层，5层卷积层，3层全连接层，一层Flatten层</p>\n<p><img src=\"https://i.loli.net/2020/12/23/i5VR2LlcdC6vmJG.png\" alt=\"image-20201223165825915\"></p>\n<p>注：LRN近年来使用较少，效果与BN类似，故使用BN作为替代</p>\n<h5 id=\"模型代码-1\"><a href=\"#模型代码-1\" class=\"headerlink\" title=\"模型代码\"></a>模型代码</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AlexNet8</span>(<span class=\"params\">Model</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        super(AlexNet8, self).__init__()</span><br><span class=\"line\">        self.c1 = Conv2D(filters=<span class=\"number\">96</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">        self.b1 = BatchNormalization()</span><br><span class=\"line\">        self.a1 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        self.p1 = MaxPool2D(pool_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), strides=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.c2 = Conv2D(filters=<span class=\"number\">256</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">        self.b2 = BatchNormalization()</span><br><span class=\"line\">        self.a2 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        self.p2 = MaxPool2D(pool_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), strides=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.c3 = Conv2D(filters=<span class=\"number\">384</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>,</span><br><span class=\"line\">                         activation=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">                         </span><br><span class=\"line\">        self.c4 = Conv2D(filters=<span class=\"number\">384</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>,</span><br><span class=\"line\">                         activation=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">                         </span><br><span class=\"line\">        self.c5 = Conv2D(filters=<span class=\"number\">256</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>,</span><br><span class=\"line\">                         activation=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        self.p3 = MaxPool2D(pool_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), strides=<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.flatten = Flatten()</span><br><span class=\"line\">        self.f1 = Dense(<span class=\"number\">2048</span>, activation=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        self.d1 = Dropout(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">        self.f2 = Dense(<span class=\"number\">2048</span>, activation=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        self.d2 = Dropout(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">        self.f3 = Dense(<span class=\"number\">10</span>, activation=<span class=\"string\">&#x27;softmax&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"VGGNet\"><a href=\"#VGGNet\" class=\"headerlink\" title=\"VGGNet\"></a>VGGNet</h4><p>使用小尺寸卷积核，减少参数的同时提高了识别准确率，网络结构规整，适合硬件加速</p>\n<p>在CBAPD的卷积层之间加入CBA的卷积层</p>\n<h5 id=\"16层VGGNet实例\"><a href=\"#16层VGGNet实例\" class=\"headerlink\" title=\"16层VGGNet实例\"></a>16层VGGNet实例</h5><p><img src=\"https://i.loli.net/2020/12/23/XQNSZ9jyhtPkIHr.png\" alt=\"image-20201223171207115\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VGG16</span>(<span class=\"params\">Model</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        super(VGG16, self).__init__()</span><br><span class=\"line\">        self.c1 = Conv2D(filters=<span class=\"number\">64</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>)  <span class=\"comment\"># 卷积层1</span></span><br><span class=\"line\">        self.b1 = BatchNormalization()  <span class=\"comment\"># BN层1</span></span><br><span class=\"line\">        self.a1 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)  <span class=\"comment\"># 激活层1</span></span><br><span class=\"line\">        self.c2 = Conv2D(filters=<span class=\"number\">64</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>, )</span><br><span class=\"line\">        self.b2 = BatchNormalization()  <span class=\"comment\"># BN层1</span></span><br><span class=\"line\">        self.a2 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)  <span class=\"comment\"># 激活层1</span></span><br><span class=\"line\">        self.p1 = MaxPool2D(pool_size=(<span class=\"number\">2</span>, <span class=\"number\">2</span>), strides=<span class=\"number\">2</span>, padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.d1 = Dropout(<span class=\"number\">0.2</span>)  <span class=\"comment\"># dropout层</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.c3 = Conv2D(filters=<span class=\"number\">128</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.b3 = BatchNormalization()  <span class=\"comment\"># BN层1</span></span><br><span class=\"line\">        self.a3 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)  <span class=\"comment\"># 激活层1</span></span><br><span class=\"line\">        self.c4 = Conv2D(filters=<span class=\"number\">128</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.b4 = BatchNormalization()  <span class=\"comment\"># BN层1</span></span><br><span class=\"line\">        self.a4 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)  <span class=\"comment\"># 激活层1</span></span><br><span class=\"line\">        self.p2 = MaxPool2D(pool_size=(<span class=\"number\">2</span>, <span class=\"number\">2</span>), strides=<span class=\"number\">2</span>, padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.d2 = Dropout(<span class=\"number\">0.2</span>)  <span class=\"comment\"># dropout层</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.c5 = Conv2D(filters=<span class=\"number\">256</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.b5 = BatchNormalization()  <span class=\"comment\"># BN层1</span></span><br><span class=\"line\">        self.a5 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)  <span class=\"comment\"># 激活层1</span></span><br><span class=\"line\">        self.c6 = Conv2D(filters=<span class=\"number\">256</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.b6 = BatchNormalization()  <span class=\"comment\"># BN层1</span></span><br><span class=\"line\">        self.a6 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)  <span class=\"comment\"># 激活层1</span></span><br><span class=\"line\">        self.c7 = Conv2D(filters=<span class=\"number\">256</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.b7 = BatchNormalization()</span><br><span class=\"line\">        self.a7 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        self.p3 = MaxPool2D(pool_size=(<span class=\"number\">2</span>, <span class=\"number\">2</span>), strides=<span class=\"number\">2</span>, padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.d3 = Dropout(<span class=\"number\">0.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.c8 = Conv2D(filters=<span class=\"number\">512</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.b8 = BatchNormalization()  <span class=\"comment\"># BN层1</span></span><br><span class=\"line\">        self.a8 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)  <span class=\"comment\"># 激活层1</span></span><br><span class=\"line\">        self.c9 = Conv2D(filters=<span class=\"number\">512</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.b9 = BatchNormalization()  <span class=\"comment\"># BN层1</span></span><br><span class=\"line\">        self.a9 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)  <span class=\"comment\"># 激活层1</span></span><br><span class=\"line\">        self.c10 = Conv2D(filters=<span class=\"number\">512</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.b10 = BatchNormalization()</span><br><span class=\"line\">        self.a10 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        self.p4 = MaxPool2D(pool_size=(<span class=\"number\">2</span>, <span class=\"number\">2</span>), strides=<span class=\"number\">2</span>, padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.d4 = Dropout(<span class=\"number\">0.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.c11 = Conv2D(filters=<span class=\"number\">512</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.b11 = BatchNormalization()  <span class=\"comment\"># BN层1</span></span><br><span class=\"line\">        self.a11 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)  <span class=\"comment\"># 激活层1</span></span><br><span class=\"line\">        self.c12 = Conv2D(filters=<span class=\"number\">512</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.b12 = BatchNormalization()  <span class=\"comment\"># BN层1</span></span><br><span class=\"line\">        self.a12 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)  <span class=\"comment\"># 激活层1</span></span><br><span class=\"line\">        self.c13 = Conv2D(filters=<span class=\"number\">512</span>, kernel_size=(<span class=\"number\">3</span>, <span class=\"number\">3</span>), padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.b13 = BatchNormalization()</span><br><span class=\"line\">        self.a13 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        self.p5 = MaxPool2D(pool_size=(<span class=\"number\">2</span>, <span class=\"number\">2</span>), strides=<span class=\"number\">2</span>, padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.d5 = Dropout(<span class=\"number\">0.2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.flatten = Flatten()</span><br><span class=\"line\">        self.f1 = Dense(<span class=\"number\">512</span>, activation=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        self.d6 = Dropout(<span class=\"number\">0.2</span>)</span><br><span class=\"line\">        self.f2 = Dense(<span class=\"number\">512</span>, activation=<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        self.d7 = Dropout(<span class=\"number\">0.2</span>)</span><br><span class=\"line\">        self.f3 = Dense(<span class=\"number\">10</span>, activation=<span class=\"string\">&#x27;softmax&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"InceptionNet\"><a href=\"#InceptionNet\" class=\"headerlink\" title=\"InceptionNet\"></a>InceptionNet</h4><p>同一层网络中使用不同尺寸的卷积核，提升模型感知力</p>\n<p><img src=\"https://i.loli.net/2020/12/23/LHRhbPFYeCrzmT7.png\" alt=\"image-20201223172019888\"></p>\n<h5 id=\"精简版模型代码\"><a href=\"#精简版模型代码\" class=\"headerlink\" title=\"精简版模型代码\"></a>精简版模型代码</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConvBNRelu</span>(<span class=\"params\">Model</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, ch, kernelsz=<span class=\"number\">3</span>, strides=<span class=\"number\">1</span>, padding=<span class=\"string\">&#x27;same&#x27;</span></span>):</span></span><br><span class=\"line\">        super(ConvBNRelu, self).__init__()</span><br><span class=\"line\">        self.model = tf.keras.models.Sequential([</span><br><span class=\"line\">            Conv2D(ch, kernelsz, strides=strides, padding=padding),</span><br><span class=\"line\">            BatchNormalization(),</span><br><span class=\"line\">            Activation(<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\">        ])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call</span>(<span class=\"params\">self, x</span>):</span></span><br><span class=\"line\">        x = self.model(x, training=<span class=\"literal\">False</span>) <span class=\"comment\">#在training=False时，BN通过整个训练集计算均值、方差去做批归一化，training=True时，通过当前batch的均值、方差去做批归一化。推理时 training=False效果好</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InceptionBlk</span>(<span class=\"params\">Model</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, ch, strides=<span class=\"number\">1</span></span>):</span></span><br><span class=\"line\">        super(InceptionBlk, self).__init__()</span><br><span class=\"line\">        self.ch = ch</span><br><span class=\"line\">        self.strides = strides</span><br><span class=\"line\">        self.c1 = ConvBNRelu(ch, kernelsz=<span class=\"number\">1</span>, strides=strides)</span><br><span class=\"line\">        self.c2_1 = ConvBNRelu(ch, kernelsz=<span class=\"number\">1</span>, strides=strides)</span><br><span class=\"line\">        self.c2_2 = ConvBNRelu(ch, kernelsz=<span class=\"number\">3</span>, strides=<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.c3_1 = ConvBNRelu(ch, kernelsz=<span class=\"number\">1</span>, strides=strides)</span><br><span class=\"line\">        self.c3_2 = ConvBNRelu(ch, kernelsz=<span class=\"number\">5</span>, strides=<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.p4_1 = MaxPool2D(<span class=\"number\">3</span>, strides=<span class=\"number\">1</span>, padding=<span class=\"string\">&#x27;same&#x27;</span>)</span><br><span class=\"line\">        self.c4_2 = ConvBNRelu(ch, kernelsz=<span class=\"number\">1</span>, strides=strides)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call</span>(<span class=\"params\">self, x</span>):</span></span><br><span class=\"line\">        x1 = self.c1(x)</span><br><span class=\"line\">        x2_1 = self.c2_1(x)</span><br><span class=\"line\">        x2_2 = self.c2_2(x2_1)</span><br><span class=\"line\">        x3_1 = self.c3_1(x)</span><br><span class=\"line\">        x3_2 = self.c3_2(x3_1)</span><br><span class=\"line\">        x4_1 = self.p4_1(x)</span><br><span class=\"line\">        x4_2 = self.c4_2(x4_1)</span><br><span class=\"line\">        <span class=\"comment\"># concat along axis=channel</span></span><br><span class=\"line\">        x = tf.concat([x1, x2_2, x3_2, x4_2], axis=<span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inception10</span>(<span class=\"params\">Model</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, num_blocks, num_classes, init_ch=<span class=\"number\">16</span>, **kwargs</span>):</span></span><br><span class=\"line\">        super(Inception10, self).__init__(**kwargs)</span><br><span class=\"line\">        self.in_channels = init_ch</span><br><span class=\"line\">        self.out_channels = init_ch</span><br><span class=\"line\">        self.num_blocks = num_blocks</span><br><span class=\"line\">        self.init_ch = init_ch</span><br><span class=\"line\">        self.c1 = ConvBNRelu(init_ch)</span><br><span class=\"line\">        self.blocks = tf.keras.models.Sequential()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> block_id <span class=\"keyword\">in</span> range(num_blocks):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> layer_id <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> layer_id == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    block = InceptionBlk(self.out_channels, strides=<span class=\"number\">2</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    block = InceptionBlk(self.out_channels, strides=<span class=\"number\">1</span>)</span><br><span class=\"line\">                self.blocks.add(block)</span><br><span class=\"line\">            <span class=\"comment\"># enlarger out_channels per block</span></span><br><span class=\"line\">            self.out_channels *= <span class=\"number\">2</span></span><br><span class=\"line\">        self.p1 = GlobalAveragePooling2D()</span><br><span class=\"line\">        self.f1 = Dense(num_classes, activation=<span class=\"string\">&#x27;softmax&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call</span>(<span class=\"params\">self, x</span>):</span></span><br><span class=\"line\">        x = self.c1(x)</span><br><span class=\"line\">        x = self.blocks(x)</span><br><span class=\"line\">        x = self.p1(x)</span><br><span class=\"line\">        y = self.f1(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ResNet\"><a href=\"#ResNet\" class=\"headerlink\" title=\"ResNet\"></a>ResNet</h4><p>应用层间残差跳连，缓解梯度消失</p>\n<p><img src=\"https://i.loli.net/2020/12/23/FEgqiMYczfCX4Wy.png\" alt=\"image-20201223191538804\"></p>\n<p><img src=\"https://i.loli.net/2020/12/23/fdwJ2xPZGXRmehB.png\" alt=\"image-20201223192328864\"></p>\n<h5 id=\"模型代码-2\"><a href=\"#模型代码-2\" class=\"headerlink\" title=\"模型代码\"></a>模型代码</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResnetBlock</span>(<span class=\"params\">Model</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, filters, strides=<span class=\"number\">1</span>, residual_path=False</span>):</span></span><br><span class=\"line\">        super(ResnetBlock, self).__init__()</span><br><span class=\"line\">        self.filters = filters</span><br><span class=\"line\">        self.strides = strides</span><br><span class=\"line\">        self.residual_path = residual_path</span><br><span class=\"line\"></span><br><span class=\"line\">        self.c1 = Conv2D(filters, (<span class=\"number\">3</span>, <span class=\"number\">3</span>), strides=strides, padding=<span class=\"string\">&#x27;same&#x27;</span>, use_bias=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        self.b1 = BatchNormalization()</span><br><span class=\"line\">        self.a1 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.c2 = Conv2D(filters, (<span class=\"number\">3</span>, <span class=\"number\">3</span>), strides=<span class=\"number\">1</span>, padding=<span class=\"string\">&#x27;same&#x27;</span>, use_bias=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        self.b2 = BatchNormalization()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># residual_path为True时，对输入进行下采样，即用1x1的卷积核做卷积操作，保证x能和F(x)维度相同，顺利相加</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> residual_path:</span><br><span class=\"line\">            self.down_c1 = Conv2D(filters, (<span class=\"number\">1</span>, <span class=\"number\">1</span>), strides=strides, padding=<span class=\"string\">&#x27;same&#x27;</span>, use_bias=<span class=\"literal\">False</span>)</span><br><span class=\"line\">            self.down_b1 = BatchNormalization()</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.a2 = Activation(<span class=\"string\">&#x27;relu&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"循环神经网络\"><a href=\"#循环神经网络\" class=\"headerlink\" title=\"循环神经网络\"></a>循环神经网络</h2><p>实现短期记忆</p>\n<h3 id=\"基本概念-1\"><a href=\"#基本概念-1\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><h4 id=\"循环核\"><a href=\"#循环核\" class=\"headerlink\" title=\"循环核\"></a>循环核</h4><p>具有’记忆力‘，通过不同时刻的参数共享实现对时间序列的信息提取</p>\n<p><img src=\"https://i.loli.net/2020/12/23/Qm6tfnDTAlvaWyr.png\" alt=\"image-20201223194307322\"></p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-206db7ba9d32a80ff56b6cc988a62440_720w.jpg\" alt=\"image\"></p>\n<h6 id=\"循环核时间步展开\"><a href=\"#循环核时间步展开\" class=\"headerlink\" title=\"循环核时间步展开\"></a>循环核时间步展开</h6><p><img src=\"https://pic2.zhimg.com/80/v2-b0175ebd3419f9a11a3d0d8b00e28675_720w.jpg\"></p>\n<p><img src=\"https://i.loli.net/2020/12/23/Znw1AJ2cg3XTsjb.png\" alt=\"image-20201223194743291\"></p>\n<h6 id=\"循环计算层\"><a href=\"#循环计算层\" class=\"headerlink\" title=\"循环计算层\"></a>循环计算层</h6><p>越靠近输出方向层数越高</p>\n<p><img src=\"https://i.loli.net/2020/12/23/oPOfDW2NdQBzxMm.png\" alt=\"image-20201223195033675\"></p>\n<h4 id=\"实现循环计算层\"><a href=\"#实现循环计算层\" class=\"headerlink\" title=\"实现循环计算层\"></a>实现循环计算层</h4><p><img src=\"https://i.loli.net/2020/12/23/d3lPqfMxOe8Wchi.png\" alt=\"image-20201223195742059\"></p>\n<p><img src=\"https://i.loli.net/2020/12/23/zAJreZmMOqx7cy1.png\" alt=\"image-20201223195725027\"></p>\n<h4 id=\"循环计算过程\"><a href=\"#循环计算过程\" class=\"headerlink\" title=\"循环计算过程\"></a>循环计算过程</h4><p><img src=\"https://i.loli.net/2020/12/23/MPFSDNvqnETO3bh.png\" alt=\"image-20201223200745927\"></p>\n<h3 id=\"one-hot实现预测字母\"><a href=\"#one-hot实现预测字母\" class=\"headerlink\" title=\"one-hot实现预测字母\"></a>one-hot实现预测字母</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.keras.layers <span class=\"keyword\">import</span> Dense, SimpleRNN</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">input_word = <span class=\"string\">&quot;abcde&quot;</span></span><br><span class=\"line\">w_to_id = &#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;c&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;d&#x27;</span>: <span class=\"number\">3</span>, <span class=\"string\">&#x27;e&#x27;</span>: <span class=\"number\">4</span>&#125;  <span class=\"comment\"># 单词映射到数值id的词典</span></span><br><span class=\"line\">id_to_onehot = &#123;<span class=\"number\">0</span>: [<span class=\"number\">1.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>], <span class=\"number\">1</span>: [<span class=\"number\">0.</span>, <span class=\"number\">1.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>], <span class=\"number\">2</span>: [<span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">1.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>], <span class=\"number\">3</span>: [<span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">1.</span>, <span class=\"number\">0.</span>],</span><br><span class=\"line\">                <span class=\"number\">4</span>: [<span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">0.</span>, <span class=\"number\">1.</span>]&#125;  <span class=\"comment\"># id编码为one-hot</span></span><br><span class=\"line\"></span><br><span class=\"line\">x_train = [id_to_onehot[w_to_id[<span class=\"string\">&#x27;a&#x27;</span>]], id_to_onehot[w_to_id[<span class=\"string\">&#x27;b&#x27;</span>]], id_to_onehot[w_to_id[<span class=\"string\">&#x27;c&#x27;</span>]],</span><br><span class=\"line\">           id_to_onehot[w_to_id[<span class=\"string\">&#x27;d&#x27;</span>]], id_to_onehot[w_to_id[<span class=\"string\">&#x27;e&#x27;</span>]]]</span><br><span class=\"line\">y_train = [w_to_id[<span class=\"string\">&#x27;b&#x27;</span>], w_to_id[<span class=\"string\">&#x27;c&#x27;</span>], w_to_id[<span class=\"string\">&#x27;d&#x27;</span>], w_to_id[<span class=\"string\">&#x27;e&#x27;</span>], w_to_id[<span class=\"string\">&#x27;a&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">np.random.seed(<span class=\"number\">7</span>)</span><br><span class=\"line\">np.random.shuffle(x_train)</span><br><span class=\"line\">np.random.seed(<span class=\"number\">7</span>)</span><br><span class=\"line\">np.random.shuffle(y_train)</span><br><span class=\"line\">tf.random.set_seed(<span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使x_train符合SimpleRNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]。</span></span><br><span class=\"line\"><span class=\"comment\"># 此处整个数据集送入，送入样本数为len(x_train)；输入1个字母出结果，循环核时间展开步数为1; 表示为独热码有5个输入特征，每个时间步输入特征个数为5</span></span><br><span class=\"line\">x_train = np.reshape(x_train, (len(x_train), <span class=\"number\">1</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">y_train = np.array(y_train)</span><br><span class=\"line\"></span><br><span class=\"line\">model = tf.keras.Sequential([</span><br><span class=\"line\">    SimpleRNN(<span class=\"number\">3</span>),</span><br><span class=\"line\">    Dense(<span class=\"number\">5</span>, activation=<span class=\"string\">&#x27;softmax&#x27;</span>)</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\">model.compile(optimizer=tf.keras.optimizers.Adam(<span class=\"number\">0.01</span>),</span><br><span class=\"line\">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class=\"literal\">False</span>),</span><br><span class=\"line\">              metrics=[<span class=\"string\">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">checkpoint_save_path = <span class=\"string\">&quot;./checkpoint/rnn_onehot_1pre1.ckpt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> os.path.exists(checkpoint_save_path + <span class=\"string\">&#x27;.index&#x27;</span>):</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;-------------load the model-----------------&#x27;</span>)</span><br><span class=\"line\">    model.load_weights(checkpoint_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\">cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path,</span><br><span class=\"line\">                                                 save_weights_only=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                                 save_best_only=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                                 monitor=<span class=\"string\">&#x27;loss&#x27;</span>)  <span class=\"comment\"># 由于fit没有给出测试集，不计算测试集准确率，根据loss，保存最优模型</span></span><br><span class=\"line\"></span><br><span class=\"line\">history = model.fit(x_train, y_train, batch_size=<span class=\"number\">32</span>, epochs=<span class=\"number\">100</span>, callbacks=[cp_callback])</span><br><span class=\"line\"></span><br><span class=\"line\">model.summary()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(model.trainable_variables)</span></span><br><span class=\"line\">file = open(<span class=\"string\">&#x27;./weights.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)  <span class=\"comment\"># 参数提取</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> model.trainable_variables:</span><br><span class=\"line\">    file.write(str(v.name) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    file.write(str(v.shape) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    file.write(str(v.numpy()) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">file.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###############################################    show   ###############################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示训练集和验证集的acc和loss曲线</span></span><br><span class=\"line\">acc = history.history[<span class=\"string\">&#x27;sparse_categorical_accuracy&#x27;</span>]</span><br><span class=\"line\">loss = history.history[<span class=\"string\">&#x27;loss&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">plt.plot(acc, label=<span class=\"string\">&#x27;Training Accuracy&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Training Accuracy&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">plt.plot(loss, label=<span class=\"string\">&#x27;Training Loss&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Training Loss&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">############### predict #############</span></span><br><span class=\"line\"></span><br><span class=\"line\">preNum = int(input(<span class=\"string\">&quot;input the number of test alphabet:&quot;</span>))</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(preNum):</span><br><span class=\"line\">    alphabet1 = input(<span class=\"string\">&quot;input test alphabet:&quot;</span>)</span><br><span class=\"line\">    alphabet = [id_to_onehot[w_to_id[alphabet1]]]</span><br><span class=\"line\">    <span class=\"comment\"># 使alphabet符合SimpleRNN输入要求：[送入样本数， 循环核时间展开步数， 每个时间步输入特征个数]。此处验证效果送入了1个样本，送入样本数为1；输入1个字母出结果，所以循环核时间展开步数为1; 表示为独热码有5个输入特征，每个时间步输入特征个数为5</span></span><br><span class=\"line\">    alphabet = np.reshape(alphabet, (<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    result = model.predict([alphabet])</span><br><span class=\"line\">    pred = tf.argmax(result, axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">    pred = int(pred)</span><br><span class=\"line\">    tf.print(alphabet1 + <span class=\"string\">&#x27;-&gt;&#x27;</span> + input_word[pred])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Embedding实现预测字母\"><a href=\"#Embedding实现预测字母\" class=\"headerlink\" title=\"Embedding实现预测字母\"></a>Embedding实现预测字母</h3><p>用低维向量实现编码</p>\n<p><img src=\"https://i.loli.net/2020/12/23/spUmoR86BkyFIQ1.png\" alt=\"image-20201223204355797\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.keras.layers <span class=\"keyword\">import</span> Dense, SimpleRNN, Embedding</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">input_word = <span class=\"string\">&quot;abcde&quot;</span></span><br><span class=\"line\">w_to_id = &#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;b&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;c&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;d&#x27;</span>: <span class=\"number\">3</span>, <span class=\"string\">&#x27;e&#x27;</span>: <span class=\"number\">4</span>&#125;  <span class=\"comment\"># 单词映射到数值id的词典</span></span><br><span class=\"line\"></span><br><span class=\"line\">x_train = [w_to_id[<span class=\"string\">&#x27;a&#x27;</span>], w_to_id[<span class=\"string\">&#x27;b&#x27;</span>], w_to_id[<span class=\"string\">&#x27;c&#x27;</span>], w_to_id[<span class=\"string\">&#x27;d&#x27;</span>], w_to_id[<span class=\"string\">&#x27;e&#x27;</span>]]</span><br><span class=\"line\">y_train = [w_to_id[<span class=\"string\">&#x27;b&#x27;</span>], w_to_id[<span class=\"string\">&#x27;c&#x27;</span>], w_to_id[<span class=\"string\">&#x27;d&#x27;</span>], w_to_id[<span class=\"string\">&#x27;e&#x27;</span>], w_to_id[<span class=\"string\">&#x27;a&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">np.random.seed(<span class=\"number\">7</span>)</span><br><span class=\"line\">np.random.shuffle(x_train)</span><br><span class=\"line\">np.random.seed(<span class=\"number\">7</span>)</span><br><span class=\"line\">np.random.shuffle(y_train)</span><br><span class=\"line\">tf.random.set_seed(<span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使x_train符合Embedding输入要求：[送入样本数， 循环核时间展开步数] ，</span></span><br><span class=\"line\"><span class=\"comment\"># 此处整个数据集送入所以送入，送入样本数为len(x_train)；输入1个字母出结果，循环核时间展开步数为1。</span></span><br><span class=\"line\">x_train = np.reshape(x_train, (len(x_train), <span class=\"number\">1</span>))</span><br><span class=\"line\">y_train = np.array(y_train)</span><br><span class=\"line\"></span><br><span class=\"line\">model = tf.keras.Sequential([</span><br><span class=\"line\">    Embedding(<span class=\"number\">5</span>, <span class=\"number\">2</span>),</span><br><span class=\"line\">    SimpleRNN(<span class=\"number\">3</span>),</span><br><span class=\"line\">    Dense(<span class=\"number\">5</span>, activation=<span class=\"string\">&#x27;softmax&#x27;</span>)</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\">model.compile(optimizer=tf.keras.optimizers.Adam(<span class=\"number\">0.01</span>),</span><br><span class=\"line\">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class=\"literal\">False</span>),</span><br><span class=\"line\">              metrics=[<span class=\"string\">&#x27;sparse_categorical_accuracy&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">checkpoint_save_path = <span class=\"string\">&quot;./checkpoint/run_embedding_1pre1.ckpt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> os.path.exists(checkpoint_save_path + <span class=\"string\">&#x27;.index&#x27;</span>):</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;-------------load the model-----------------&#x27;</span>)</span><br><span class=\"line\">    model.load_weights(checkpoint_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\">cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path,</span><br><span class=\"line\">                                                 save_weights_only=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                                 save_best_only=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                                 monitor=<span class=\"string\">&#x27;loss&#x27;</span>)  <span class=\"comment\"># 由于fit没有给出测试集，不计算测试集准确率，根据loss，保存最优模型</span></span><br><span class=\"line\"></span><br><span class=\"line\">history = model.fit(x_train, y_train, batch_size=<span class=\"number\">32</span>, epochs=<span class=\"number\">100</span>, callbacks=[cp_callback])</span><br><span class=\"line\"></span><br><span class=\"line\">model.summary()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(model.trainable_variables)</span></span><br><span class=\"line\">file = open(<span class=\"string\">&#x27;./weights.txt&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)  <span class=\"comment\"># 参数提取</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> model.trainable_variables:</span><br><span class=\"line\">    file.write(str(v.name) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    file.write(str(v.shape) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">    file.write(str(v.numpy()) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">file.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###############################################    show   ###############################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示训练集和验证集的acc和loss曲线</span></span><br><span class=\"line\">acc = history.history[<span class=\"string\">&#x27;sparse_categorical_accuracy&#x27;</span>]</span><br><span class=\"line\">loss = history.history[<span class=\"string\">&#x27;loss&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">plt.plot(acc, label=<span class=\"string\">&#x27;Training Accuracy&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Training Accuracy&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\"></span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">plt.plot(loss, label=<span class=\"string\">&#x27;Training Loss&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Training Loss&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">############### predict #############</span></span><br><span class=\"line\"></span><br><span class=\"line\">preNum = int(input(<span class=\"string\">&quot;input the number of test alphabet:&quot;</span>))</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(preNum):</span><br><span class=\"line\">    alphabet1 = input(<span class=\"string\">&quot;input test alphabet:&quot;</span>)</span><br><span class=\"line\">    alphabet = [w_to_id[alphabet1]]</span><br><span class=\"line\">    <span class=\"comment\"># 使alphabet符合Embedding输入要求：[送入样本数， 循环核时间展开步数]。</span></span><br><span class=\"line\">    <span class=\"comment\"># 此处验证效果送入了1个样本，送入样本数为1；输入1个字母出结果，循环核时间展开步数为1。</span></span><br><span class=\"line\">    alphabet = np.reshape(alphabet, (<span class=\"number\">1</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">    result = model.predict(alphabet)</span><br><span class=\"line\">    pred = tf.argmax(result, axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">    pred = int(pred)</span><br><span class=\"line\">    tf.print(alphabet1 + <span class=\"string\">&#x27;-&gt;&#x27;</span> + input_word[pred])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"长短记忆网络-LSTM\"><a href=\"#长短记忆网络-LSTM\" class=\"headerlink\" title=\"长短记忆网络(LSTM)\"></a>长短记忆网络(LSTM)</h3><p><img src=\"https://i.loli.net/2020/12/23/ajo3ZFGWKPwzvB9.png\" alt=\"image-20201223211401051\"></p>\n<p>实现方法</p>\n<p><img src=\"https://i.loli.net/2020/12/23/bfMZFEv41rGxOeY.png\" alt=\"image-20201223211512811\"></p>\n<h4 id=\"实现代码-部分-4\"><a href=\"#实现代码-部分-4\" class=\"headerlink\" title=\"实现代码(部分)\"></a>实现代码(部分)</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.keras.layers <span class=\"keyword\">import</span> Dropout, Dense, LSTM</span><br><span class=\"line\"></span><br><span class=\"line\">model = tf.keras.Sequential([</span><br><span class=\"line\">    LSTM(<span class=\"number\">80</span>, return_sequences=<span class=\"literal\">True</span>),</span><br><span class=\"line\">    Dropout(<span class=\"number\">0.2</span>),</span><br><span class=\"line\">    LSTM(<span class=\"number\">100</span>),</span><br><span class=\"line\">    Dropout(<span class=\"number\">0.2</span>),</span><br><span class=\"line\">    Dense(<span class=\"number\">1</span>)</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"GRU网络\"><a href=\"#GRU网络\" class=\"headerlink\" title=\"GRU网络\"></a>GRU网络</h3><p>简化过后的LSTM网络，融合了长期记忆与短期记忆</p>\n<h4 id=\"计算过程\"><a href=\"#计算过程\" class=\"headerlink\" title=\"计算过程\"></a>计算过程</h4><p><img src=\"https://i.loli.net/2020/12/23/2pmQUrVJ96hPbRL.png\" alt=\"image-20201223212810181\"></p>\n<p>实现方法</p>\n<p><img src=\"https://i.loli.net/2020/12/23/QmLoOwrtcKBqb2X.png\" alt=\"image-20201223213813845\"></p>\n<h4 id=\"实现代码-部分-5\"><a href=\"#实现代码-部分-5\" class=\"headerlink\" title=\"实现代码(部分)\"></a>实现代码(部分)</h4><p>与LSTM相似</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.keras.layers <span class=\"keyword\">import</span> Dropout, Dense, LSTM</span><br><span class=\"line\"></span><br><span class=\"line\">model = tf.keras.Sequential([</span><br><span class=\"line\">    GRU(<span class=\"number\">80</span>, return_sequences=<span class=\"literal\">True</span>),</span><br><span class=\"line\">    Dropout(<span class=\"number\">0.2</span>),</span><br><span class=\"line\">    GRU(<span class=\"number\">100</span>),</span><br><span class=\"line\">    Dropout(<span class=\"number\">0.2</span>),</span><br><span class=\"line\">    Dense(<span class=\"number\">1</span>)</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他神经网络\"><a href=\"#其他神经网络\" class=\"headerlink\" title=\"其他神经网络\"></a>其他神经网络</h2><p>如深度置信神经网络DBN、生成对抗网络GAN等</p>\n","categories":["机器学习"]},{"title":"JavaWeb基础","url":"/2021/02/12/JavaEE/JavaWeb%E5%9F%BA%E7%A1%80/","content":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p><strong>定义</strong>：在Java中，动态web资源开发的技术统称为JavaWeb</p>\n<ul>\n<li><p><strong>静态web</strong></p>\n<ul>\n<li><p>htm，html，css</p>\n</li>\n<li><p>如果服务器上一直存在这些文件，就可以被直接读取(网络)</p>\n</li>\n<li><p>提供给所有人看的数据始终不会发生变化</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210212191911405.png\" alt=\"image-20210212191911405\"></p>\n</li>\n<li><p>存在的缺点</p>\n<ul>\n<li><p>web无法动态更新，所有用户看到的都是同一页面</p>\n<p>规避方法：</p>\n<ul>\n<li>轮播图，点击特效：伪动态</li>\n<li>JavaScript(实际开发应用最多)</li>\n<li>VBScript</li>\n</ul>\n</li>\n<li><p>无法和数据库交互(数据无法持久化，用户无法交互)</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>动态web</strong></p>\n<ul>\n<li><p>几乎所有网站都用到动态web</p>\n</li>\n<li><p>每个人在不同的时间和地点看到的信息各不相同，web页面展示的效果因人而异</p>\n</li>\n<li><p>技术栈：Servlet/JSP,ASP,PHP</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/Q~8QK11T9B77N5OQQ2JB2@D.png\" alt=\"img\"></p>\n</li>\n<li><p>存在的缺点</p>\n<ul>\n<li>如果加载服务器的动态web资源出现错误，我们需要重新编写后台程序，重新发布(停机维护)</li>\n</ul>\n</li>\n<li><p>优点</p>\n<ul>\n<li>web页面可以动态更新，所有用户看到的都不是同一个页面</li>\n<li>可以与数据库交互(数据持久化：注册，商品信息，用户信息…)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"web应用程序\"><a href=\"#web应用程序\" class=\"headerlink\" title=\"web应用程序\"></a>web应用程序</h2><p><strong>定义：可以提供浏览器访问的程序</strong></p>\n<ul>\n<li>a.html,b.html…多个web资源，可以被外界访问，对外界提供服务</li>\n<li>能访问到的任何页面都存在网络上某台计算机上</li>\n<li>URL：统一资源定位符</li>\n<li>统一的web资源会被放在同一个文件夹下，web应用程序-&gt;Tomcat服务</li>\n<li>一个web程序由多个部分组成(静态web，动态web)<ul>\n<li>html，css，js</li>\n<li>jsp，servlet</li>\n<li>java程序</li>\n<li>jar包</li>\n<li>配置文件(properties)</li>\n</ul>\n</li>\n</ul>\n<p>web应用程序编写完毕后若想提供给外界访问，<strong>需要一个服务器来统一管理</strong></p>\n<h2 id=\"web服务器\"><a href=\"#web服务器\" class=\"headerlink\" title=\"web服务器\"></a>web服务器</h2><p><strong>问题：请谈谈网站是如何进行访问的？</strong></p>\n<ol>\n<li>输入一个域名，回车</li>\n<li>检查本机<code>C:\\\\Windows\\System32\\drivers\\etc\\hosts</code>配置文件中有没有该域名映射<ul>\n<li>有：直接返回对应的ip地址，在该地址中如果有需要访问的web程序则可以直接访问</li>\n<li>没有：去DNS服务器查找，找到则返回，找不到则返回找不到</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210212211156127.png\" alt=\"image-20210212211156127\"></p>\n<h3 id=\"技术讲解\"><a href=\"#技术讲解\" class=\"headerlink\" title=\"技术讲解\"></a>技术讲解</h3><ul>\n<li><strong>ASP</strong>(微软)<ul>\n<li>国内最早流行的就是ASP</li>\n<li>在HTML中嵌入了VB的脚本，ASP+COM</li>\n<li>ASP开发中，一个页面都有几千行代码，代码极其混乱，维护成本高</li>\n<li>使用C#语言</li>\n<li>IIS</li>\n</ul>\n</li>\n<li><strong>PHP</strong><ul>\n<li>开发速度快，功能强大，跨平台，代码简单</li>\n<li>无法承载大访问量情况(局限性)</li>\n</ul>\n</li>\n<li><strong>JSP/Servlet</strong>(sun)<ul>\n<li>sun公司主推的B/S架构(B/S:浏览和服务器；C/S：客户端和服务器)</li>\n<li>基于Java语言</li>\n<li>可以承载三高问题的影响(高并发，高可用，高性能)</li>\n<li>语法接近ASP，加强市场强度</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"web服务器-1\"><a href=\"#web服务器-1\" class=\"headerlink\" title=\"web服务器\"></a>web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些相应信息</p>\n<h4 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h4><p>Apache软件基金会下的核心项目，免费开源的轻量级服务器</p>\n<p>基于java，使用前应配置好java环境变量</p>\n<p><strong>Tomcat默认端口号：8080</strong></p>\n<p><strong>http默认端口号：80</strong></p>\n<p><strong>https默认端口号：443</strong></p>\n<p><strong>配置</strong></p>\n<p>/conf目录下的server.xml文件：</p>\n<ul>\n<li>配置启动的端口号</li>\n<li>配置主机名称，配置启动端口号</li>\n<li>配置主机名称，默认网络应用存放地址</li>\n</ul>\n<p><strong>发布一个web网站</strong></p>\n<ol>\n<li><p>将自己写的网站放置到服务器中指定的web应用文件夹(webapps)下，就可以进行访问了</p>\n<p>应有的结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">--webapps</span><br><span class=\"line\">\t&#x3D;ROOT ：默认Webapp目录</span><br><span class=\"line\">\t-kuangstudy ：网站目录名</span><br><span class=\"line\">\t\t-WEB-INF</span><br><span class=\"line\">\t\t\t-classes ：java程序</span><br><span class=\"line\">\t\t\t-lib ：web应用所依赖的jar包</span><br><span class=\"line\">\t\t\t-web.xml ：网站配置文件</span><br><span class=\"line\">\t\t-index.html ：默认的首页(或jsp文件)</span><br><span class=\"line\">\t\t-static</span><br><span class=\"line\">\t\t\t-css</span><br><span class=\"line\">\t\t\t\t-style.css</span><br><span class=\"line\">\t\t\t-js</span><br><span class=\"line\">\t\t\t-img</span><br><span class=\"line\">\t\t-......</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<ul>\n<li>IIS(Windows自带)</li>\n</ul>\n<h1 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h1><p>HTTP(超文本传输协议)是一个简单的请求-响应协议，通常运行在TCP之上</p>\n<ul>\n<li>文本：html，字符串……</li>\n<li>超文本：图片，音乐，视频，定位，地图……</li>\n<li>默认端口80</li>\n</ul>\n<p><strong>两个时代</strong></p>\n<ul>\n<li>http1.0<ul>\n<li>客户端可以与web服务器连接后，只能获取一个web资源</li>\n</ul>\n</li>\n<li>http1.1<ul>\n<li>客户端可以与web服务器连接后，可以获取多个web资源</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"http请求\"><a href=\"#http请求\" class=\"headerlink\" title=\"http请求\"></a>http请求</h2><p>客户端–发请求–&gt;服务器</p>\n<p><strong>请求行</strong></p>\n<ul>\n<li>请求方式：<strong>Get,Post</strong>,HEAD,DELETE,PUT,TRACT<ul>\n<li><strong>Get</strong>：能够携带的参数较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li>\n<li><strong>Post</strong>：能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Request URL: https:<span class=\"comment\">//www.baidu.com/ ;请求地址</span></span><br><span class=\"line\">Request Method: GET <span class=\"comment\">//请求方式</span></span><br><span class=\"line\">Status Code: <span class=\"number\">200</span> OK <span class=\"comment\">//状态代码:200</span></span><br><span class=\"line\">Remote Address: <span class=\"number\">14.215</span>.<span class=\"number\">177.38</span>:<span class=\"number\">443</span> <span class=\"comment\">//远程地址</span></span><br><span class=\"line\">Referrer Policy: unsafe-url <span class=\"comment\">//引用站点协议</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>请求头</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Accept: text/plain <span class=\"comment\">//所支持数据类型</span></span><br><span class=\"line\">Accept-Encoding: gzip, deflate, br <span class=\"comment\">//支持的编码形式</span></span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=<span class=\"number\">0.9</span>,en;q=<span class=\"number\">0.8</span>,en-GB;q=<span class=\"number\">0.7</span>,en-US;q=<span class=\"number\">0.6</span> <span class=\"comment\">//支持的语言环境</span></span><br><span class=\"line\">cache-Control:max-age=<span class=\"number\">0</span> <span class=\"comment\">//缓存控制</span></span><br><span class=\"line\">Connection: keep-alive <span class=\"comment\">//完成后式断开还是保持连接</span></span><br><span class=\"line\">HOST: <span class=\"comment\">//主机</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"http响应\"><a href=\"#http响应\" class=\"headerlink\" title=\"http响应\"></a>http响应</h2><p>服务器–响应–&gt;客户端</p>\n<p>百度的响应</p>\n<p><strong>响应头</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cache-Control: <span class=\"keyword\">private</span> <span class=\"comment\">//缓存控制</span></span><br><span class=\"line\">Connection: keep-alive <span class=\"comment\">//连接</span></span><br><span class=\"line\">Content-Encoding: gzip <span class=\"comment\">//编码</span></span><br><span class=\"line\">Content-Type: text/html;charset=utf-<span class=\"number\">8</span> <span class=\"comment\">//类型</span></span><br><span class=\"line\"><span class=\"comment\">//Content-Length: 78</span></span><br><span class=\"line\"><span class=\"comment\">//Date: Fri, 12 Feb 2021 13:48:52 GMT</span></span><br><span class=\"line\"><span class=\"comment\">//Expires: Fri, 12 Feb 2021 13:48:52 GMT</span></span><br><span class=\"line\"><span class=\"comment\">//Server: BWS/1.0</span></span><br><span class=\"line\"><span class=\"comment\">//Vary: Accept-Encoding</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>响应体</strong></p>\n<p>一部分与请求头相同</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Accept: text/plain //所支持数据类型</span></span><br><span class=\"line\"><span class=\"comment\">//Accept-Encoding: gzip, deflate, br //支持的编码形式</span></span><br><span class=\"line\"><span class=\"comment\">//Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 //支持的语言环境</span></span><br><span class=\"line\"><span class=\"comment\">//cache-Control:max-age=0 //缓存控制</span></span><br><span class=\"line\"><span class=\"comment\">//Connection: keep-alive //完成后式断开还是保持连接</span></span><br><span class=\"line\"><span class=\"comment\">//HOST: //主机</span></span><br><span class=\"line\">Refresh: 刷新间隔</span><br><span class=\"line\">Location: 重定位</span><br></pre></td></tr></table></figure>\n\n<p><strong>响应码</strong></p>\n<table>\n<thead>\n<tr>\n<th>响应码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>200</td>\n<td>请求成功</td>\n</tr>\n<tr>\n<td>3**</td>\n<td>请求重定向</td>\n</tr>\n<tr>\n<td>4**</td>\n<td>找不到资源(404)</td>\n</tr>\n<tr>\n<td>5**</td>\n<td>服务器代码错误(500,502)</td>\n</tr>\n</tbody></table>\n<p><strong>当浏览器地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</strong></p>\n<h1 id=\"MAVEN\"><a href=\"#MAVEN\" class=\"headerlink\" title=\"MAVEN\"></a>MAVEN</h1><p>Javaweb开发中需使用大量jar包需要手动导入，而Maven可以帮助我们导入和配置jar包</p>\n<p>Maven是一个项目架构管理工具</p>\n<p><strong>核心思想：约定大于配置</strong></p>\n<p><strong>配置</strong></p>\n<p>更改位于/conf目录下的settings.xml配置文件</p>\n<ul>\n<li><p>更改镜像：在mirrors头下添加以下标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span> </span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改本地仓库位置：在settings头下的localRepository标签下改写位置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">localRepository</span>&gt;</span>D:\\systems\\apache-maven-3.6.3\\maven-repo<span class=\"tag\">&lt;/<span class=\"name\">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"使用idea创建Maven项目\"><a href=\"#使用idea创建Maven项目\" class=\"headerlink\" title=\"使用idea创建Maven项目\"></a>使用idea创建Maven项目</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210213113705365.png\" alt=\"image-20210213113705365\"></p>\n<p>使用maven创建模板</p>\n<p>一个干净的maven项目：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210213121845476.png\" alt=\"image-20210213121845476\"></p>\n<p>maven目录：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210213155645318.png\" alt=\"image-20210213155645318\"></p>\n<p>pom.xml是maven的核心配置文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Maven版本和头文件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--配置的GAV--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>Javaweb-01-maven<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--项目打包方式</span></span><br><span class=\"line\"><span class=\"comment\">  jar包：java应用</span></span><br><span class=\"line\"><span class=\"comment\">  war包：javaweb应用</span></span><br><span class=\"line\"><span class=\"comment\">  --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--配置--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--项目默认构建编码--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--编译版本--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--项目依赖--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--Maven的高级之处在于可以帮助导入需要导入的包所依赖的其他的包(套娃)--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--项目构建所需--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>Javaweb-01-maven<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">pluginManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>由于约定大于配置的特性，若要导出位于标记为源码目录下的配置文件，需要在pom.xml的build头中添加配置</strong></p>\n<p>以下示例为添加<code>src/main/java</code>路径下的所有properties和xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>idea生成目录树，代表maven中jar包的结构体系</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210213162604310.png\" alt=\"image-20210213162604310\"></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>Maven与idea版本不匹配问题(比如2019.3之前的版本无法使用Maven3.6.3)</li>\n<li>Tomcat闪退：环境变量问题</li>\n<li>替换webapp4.0版本与tomcat一致</li>\n<li>java和resources文件夹添加标记</li>\n</ol>\n<h1 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h1><p>sun公司开发动态web的一门技术，实现了Servlet接口的Java程序称为Servlet</p>\n<p>开发Servlet程序的两个小步骤：</p>\n<ul>\n<li>编写一个类实现Servlet接口</li>\n<li>把开发好的java类部署到web服务器中</li>\n</ul>\n<h2 id=\"HelloServlet\"><a href=\"#HelloServlet\" class=\"headerlink\" title=\"HelloServlet\"></a>HelloServlet</h2><p>servlet相关依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--servlet依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--JSP依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Servlet有两个默认的实现类：HttpServlet和GenericServlet</p>\n<ol>\n<li><p>构建一个普通的Maven项目，删掉src目录，在项目中建立moudel，作为夫项目的子工程</p>\n</li>\n<li><p>父子项目的理解：</p>\n<p>父项目中有</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>Servlet<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子项目中有</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>Javaweb<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>父项目中的java子项目可以直接使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">son extends father</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Maven环境优化</p>\n<ul>\n<li>更新web.xml</li>\n<li>将Maven结构搭建完整</li>\n</ul>\n</li>\n<li><p>编写Servlet程序</p>\n<ul>\n<li><p>写一个普通类</p>\n</li>\n<li><p>实现Servlet接口(继承已经实现好的类HttpServlet)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//get或post只是实现请求的不同方式，可以互相调用，业务逻辑相同</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        PrintWriter Writer = resp.getWriter();</span><br><span class=\"line\">        Writer.print(<span class=\"string\">&quot;HelloServlet&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.doGet(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>编写Sevlet映射</p>\n<p>原因：编写的是java程序，要通过浏览器访问，而浏览器要连接web服务器，所以我们需要在web服务中注册编写的Servlet，还需给他一个浏览器能够访问的路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注册Servlet--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.lan5th.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Servlet请求路径--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置Tomcat(配置项目发布路径)</p>\n</li>\n<li><p>启动测试</p>\n</li>\n</ol>\n<h2 id=\"Servlet运行原理\"><a href=\"#Servlet运行原理\" class=\"headerlink\" title=\"Servlet运行原理\"></a>Servlet运行原理</h2><p>Servlet由web服务器调用，web服务器在收到浏览器请求递交处理请求和响应</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210214165555258.png\" alt=\"image-20210214165555258\"></p>\n<p><strong>Mapping</strong></p>\n<ol>\n<li><p>指定一个映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指定多个映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--此时多个url都可以访问到指定资源--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello1<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello2<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指定通用映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--此时后缀任意字符url都可以访问到指定资源--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认请求路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--此时任意字符url都可以访问到指定资源--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实现自定义后缀映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--此时后缀任意带指定后缀url都可以访问到指定资源</span></span><br><span class=\"line\"><span class=\"comment\">但是*前面不能加项目映射路径</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.lan5th<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>优先级：指定了固有映射路径优先级最高，找不到就会走默认(带*的路径)的处理请求</p>\n</li>\n</ol>\n<h2 id=\"ServletContext\"><a href=\"#ServletContext\" class=\"headerlink\" title=\"ServletContext\"></a>ServletContext</h2><p>web容器在启动时会为每个web程序创建一个对应的ServletContext对象，代表当前的web应用</p>\n<blockquote>\n<p>共享数据</p>\n</blockquote>\n<p>一个Servlet中保存的数据可以在另一个Servlet中拿到</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//HelloServlet函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class=\"line\">        ServletContext context = <span class=\"keyword\">this</span>.getServletContext();</span><br><span class=\"line\">        String username = <span class=\"string\">&quot;lan5th&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        context.setAttribute(<span class=\"string\">&quot;username&quot;</span>,username);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进入HelloServlet方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Getc函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        ServletContext context = <span class=\"keyword\">this</span>.getServletContext();</span><br><span class=\"line\">        String username = (String) context.getAttribute(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\">        resp.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        resp.getWriter().print(<span class=\"string\">&quot;名字：&quot;</span>+username);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进入Getc方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.lan5th.servlet.HelloServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/hello<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>getc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.lan5th.servlet.Getc<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>getc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/getc<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>获取初始化参数</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--预先设置或在web.xml中配置预参数--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>url<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>lan5th.github.io<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在Servlet中可用<code>String s = context.getInitParameter(&quot;url&quot;);</code>来进行特定参数的获取</p>\n<blockquote>\n<p>请求转发</p>\n</blockquote>\n<p>注意和重定向区别</p>\n<ul>\n<li><p>请求</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210215165726436.png\" alt=\"image-20210215165726436\"></p>\n</li>\n<li><p>重定向</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210215165815365.png\" alt=\"image-20210215165815365\"></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.getServletContext().getRequestDispatcher(<span class=\"string\">&quot;/get&quot;</span>).forward(req,resp);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>读取资源文件</p>\n</blockquote>\n<p>Properties</p>\n<ul>\n<li>在java目录下新建.properties</li>\n<li>在resources目录下新建.properties</li>\n</ul>\n<p>所有项目文件都打包到了同一个路径classes下，称为classpath</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//用文件流进行读取</span></span><br><span class=\"line\">InputStream asStream = <span class=\"keyword\">this</span>.getServletContext().getResourceAsStream(<span class=\"string\">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class=\"line\">      Properties properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">      properties.load(asStream);</span><br><span class=\"line\">      String user = properties.getProperty(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">      String pwd = properties.getProperty(<span class=\"string\">&quot;password&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HttpServletResponse\"><a href=\"#HttpServletResponse\" class=\"headerlink\" title=\"HttpServletResponse\"></a>HttpServletResponse</h2><p>web服务器接收到客户端的http请求，针对这个请求分别创建一个代表请求的HttpServletRequest对象，代表相应的一个HttpServletResponse</p>\n<ul>\n<li>要获取客户端请求过来的参数，查找HttpServletRequest</li>\n<li>要给客户端相应信息，查找HttpServletResponse</li>\n</ul>\n<h3 id=\"简单分类\"><a href=\"#简单分类\" class=\"headerlink\" title=\"简单分类\"></a>简单分类</h3><p><strong>向浏览器发送数据</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ServletOutputStream <span class=\"title\">getOutputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"><span class=\"function\">PrintWriter <span class=\"title\">getWriter</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>向浏览器发送响应头</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setDateHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">long</span> var2)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addDateHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">long</span> var2)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setHeader</span><span class=\"params\">(String var1, String var2)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addHeader</span><span class=\"params\">(String var1, String var2)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setIntHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">int</span> var2)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addIntHeader</span><span class=\"params\">(String var1, <span class=\"keyword\">int</span> var2)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setStatus</span><span class=\"params\">(<span class=\"keyword\">int</span> var1)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setCharacterEncoding</span><span class=\"params\">(String var1)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContentLength</span><span class=\"params\">(<span class=\"keyword\">int</span> var1)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContentLengthLong</span><span class=\"params\">(<span class=\"keyword\">long</span> var1)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setContentType</span><span class=\"params\">(String var1)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setBufferSize</span><span class=\"params\">(<span class=\"keyword\">int</span> var1)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>响应码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> SC_CONTINUE = <span class=\"number\">100</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_SWITCHING_PROTOCOLS = <span class=\"number\">101</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_OK = <span class=\"number\">200</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_CREATED = <span class=\"number\">201</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_ACCEPTED = <span class=\"number\">202</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class=\"number\">203</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_NO_CONTENT = <span class=\"number\">204</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_RESET_CONTENT = <span class=\"number\">205</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_PARTIAL_CONTENT = <span class=\"number\">206</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_MULTIPLE_CHOICES = <span class=\"number\">300</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_MOVED_PERMANENTLY = <span class=\"number\">301</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_MOVED_TEMPORARILY = <span class=\"number\">302</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_FOUND = <span class=\"number\">302</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_SEE_OTHER = <span class=\"number\">303</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_NOT_MODIFIED = <span class=\"number\">304</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_USE_PROXY = <span class=\"number\">305</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_TEMPORARY_REDIRECT = <span class=\"number\">307</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_BAD_REQUEST = <span class=\"number\">400</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_UNAUTHORIZED = <span class=\"number\">401</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_PAYMENT_REQUIRED = <span class=\"number\">402</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_FORBIDDEN = <span class=\"number\">403</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_NOT_FOUND = <span class=\"number\">404</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_METHOD_NOT_ALLOWED = <span class=\"number\">405</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_NOT_ACCEPTABLE = <span class=\"number\">406</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class=\"number\">407</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_REQUEST_TIMEOUT = <span class=\"number\">408</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_CONFLICT = <span class=\"number\">409</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_GONE = <span class=\"number\">410</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_LENGTH_REQUIRED = <span class=\"number\">411</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_PRECONDITION_FAILED = <span class=\"number\">412</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class=\"number\">413</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_REQUEST_URI_TOO_LONG = <span class=\"number\">414</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class=\"number\">415</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class=\"number\">416</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_EXPECTATION_FAILED = <span class=\"number\">417</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_INTERNAL_SERVER_ERROR = <span class=\"number\">500</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_NOT_IMPLEMENTED = <span class=\"number\">501</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_BAD_GATEWAY = <span class=\"number\">502</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_SERVICE_UNAVAILABLE = <span class=\"number\">503</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_GATEWAY_TIMEOUT = <span class=\"number\">504</span>;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class=\"number\">505</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>常见应用</strong></p>\n</blockquote>\n<ul>\n<li><p>向浏览器输出消息</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">PrintWriter Writer = resp.getWriter();</span><br><span class=\"line\">Writer.print(<span class=\"string\">&quot;HelloServlet&quot;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载文件(见文章末尾)</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletDown</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//1. 下载文件路径</span></span><br><span class=\"line\">       String realPath = <span class=\"string\">&quot;D:\\\\code\\\\code-resp\\\\projects\\\\Javaweb\\\\Servlet\\\\target\\\\classes\\\\test.png&quot;</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;下载文件路径&quot;</span>+realPath);</span><br><span class=\"line\">        <span class=\"comment\">//2. 下载文件名</span></span><br><span class=\"line\">        String filename = realPath.substring(realPath.lastIndexOf(<span class=\"string\">&quot;\\\\&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//3. 设置让浏览器支持下载我们需要的东西,转码支持中文文件名</span></span><br><span class=\"line\">        resp.setHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>,<span class=\"string\">&quot;attachment;filename=&quot;</span>+ URLEncoder.encode(filename,<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">       <span class=\"comment\">//4. 获取下载文件的输入流</span></span><br><span class=\"line\">        FileInputStream in = <span class=\"keyword\">new</span> FileInputStream(realPath);</span><br><span class=\"line\">        <span class=\"comment\">//5. 创建缓冲区</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"comment\">//6. 获取OutputStream对象</span></span><br><span class=\"line\">        ServletOutputStream out = resp.getOutputStream();</span><br><span class=\"line\">        <span class=\"comment\">//7. 将FileOutputStream流写入buffer缓冲区，并用OutputStream将缓冲区中的数据输出到客户端</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (in.read(buffer)&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            out.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//8.关闭流</span></span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.doGet(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证码</p>\n<p> <img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210215212937061.png\" alt=\"image-20210215212937061\"></p>\n<p> <img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210215213026962.png\" alt=\"image-20210215213026962\"></p>\n</li>\n<li><p>实现重定向</p>\n<p> <img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210215165815365.png\" alt=\"image-20210215165815365\"></p>\n<p> 一个web资源B受到客户端A请求后，B通知客户端A去访问另一个web资源C的过程叫做重定向</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sendRedirect</span><span class=\"params\">(String var1)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n\n<p> 原理</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">resp.setHeader(<span class=\"string\">&quot;Location&quot;</span>,<span class=\"string\">&quot;/s1/hello&quot;</span>);</span><br><span class=\"line\">resp.setStatus(<span class=\"number\">302</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"HttpServletRequest\"><a href=\"#HttpServletRequest\" class=\"headerlink\" title=\"HttpServletRequest\"></a>HttpServletRequest</h2><p>代表客户端的请求，用户通过Http协议访问服务器，Http请求中的所有信息会被封装到HttpServletRequest，通过这个类的方法可以获得客户端的所有信息</p>\n<blockquote>\n<p>常见应用</p>\n</blockquote>\n<ol>\n<li><p>获取参数，请求转发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        req.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        resp.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String username = req.getParameter(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">        String password = req.getParameter(<span class=\"string\">&quot;password&quot;</span>);</span><br><span class=\"line\">        String[] hobbys = req.getParameterValues(<span class=\"string\">&quot;hobbys&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===========================&quot;</span>);</span><br><span class=\"line\">        System.out.println(username);</span><br><span class=\"line\">        System.out.println(password);</span><br><span class=\"line\">        System.out.println(Arrays.toString(hobbys));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===========================&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//请求转发，这里的`/`表示当前应用，不用添加根路径，而重定向需要添加根路径</span></span><br><span class=\"line\">        req.getRequestDispatcher(<span class=\"string\">&quot;/userpage.jsp&quot;</span>).forward(req,resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">            doGet(req, resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：请求转发时url不会产生变化 307；重定向时地址栏会发生变化 302；</strong></p>\n</li>\n</ol>\n<h1 id=\"Cookie和Session\"><a href=\"#Cookie和Session\" class=\"headerlink\" title=\"Cookie和Session\"></a>Cookie和Session</h1><p><strong>会话</strong></p>\n<p>定义：用户打开浏览器，点击了很多超链接，访问多个web资源，关闭浏览器的整个过程称之为会话</p>\n<ul>\n<li><p><strong>有状态会话</strong></p>\n<p>一个网站如何证明访问过？</p>\n<ol>\n<li>服务端给客户端一个信件，客户端下次访问服务器带上信件就可以：Cookie</li>\n<li>服务器登记客户端来过，下次来由服务端对其进行匹配：Session</li>\n</ol>\n</li>\n<li><p><strong>无状态会话</strong></p>\n</li>\n</ul>\n<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><p>客户端技术（响应，请求）</p>\n<ul>\n<li>从请求中拿到cookie信息</li>\n<li>服务器响应给</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cookie[] cookies = req.getCookies();<span class=\"comment\">//获取cookie数组</span></span><br><span class=\"line\">cookie.getName();<span class=\"comment\">//获取cookie中的key</span></span><br><span class=\"line\">cookie.getValue();<span class=\"comment\">//获取cookie中的value</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Cookie(<span class=\"string\">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis() + <span class=\"string\">&quot;&quot;</span>);<span class=\"comment\">//新建cookie</span></span><br><span class=\"line\">cookie.setMaxAge(<span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>);<span class=\"comment\">//设置一天的有效期</span></span><br><span class=\"line\">resp.addCookie(cookie);<span class=\"comment\">//给客户端响应cookie</span></span><br></pre></td></tr></table></figure>\n\n<p>cookie一般会保存在本地用户目录下的appdata中</p>\n<p><strong>注意点：</strong></p>\n<ul>\n<li>一个cookie只能保存一个信息</li>\n<li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie</li>\n<li>cookie大小有限制：4kb</li>\n<li>300个cookie浏览器上限</li>\n</ul>\n<p><strong>删除cookie</strong></p>\n<ul>\n<li>不设置有效期，关闭浏览器自动失效</li>\n<li>设置cookie有效期为0</li>\n</ul>\n<p><strong>Cookie实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        req.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        resp.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        PrintWriter out = resp.getWriter();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//服务器从客户端获取Cookie</span></span><br><span class=\"line\">        <span class=\"comment\">//返回多个Cookie存于数组中</span></span><br><span class=\"line\">        Cookie[] cookies = req.getCookies();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断cookie是否存在</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cookies != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            out.write(<span class=\"string\">&quot;您上一次访问的时间是：&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Cookie cookie : cookies)&#123;</span><br><span class=\"line\">                Cookie cookie1 = cookie;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cookie1.getName().equals(<span class=\"string\">&quot;lastLoginTime&quot;</span>))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">long</span> lastLoginTime = Long.parseLong(cookie.getValue());</span><br><span class=\"line\">                    Date date =<span class=\"keyword\">new</span> Date(lastLoginTime);</span><br><span class=\"line\">                    out.write(date.toLocaleString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//服务会自动创建jsessionid等cookie,实际cookie不会为空</span></span><br><span class=\"line\">            out.write(<span class=\"string\">&quot;这是您第一次访问本站&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        //服务器给客户端响应一个cookie</span></span><br><span class=\"line\"><span class=\"comment\">//        Cookie cookie1 = new Cookie(&quot;name&quot;, &quot;lan5th&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        //设置一天的有效期</span></span><br><span class=\"line\"><span class=\"comment\">//        cookie1.setMaxAge(24*60*60);</span></span><br><span class=\"line\"><span class=\"comment\">//        resp.addCookie(cookie1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//服务器给客户端响应一个cookie</span></span><br><span class=\"line\">        Cookie cookie2 = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis() + <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置一天的有效期</span></span><br><span class=\"line\">        cookie2.setMaxAge(<span class=\"number\">24</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>);</span><br><span class=\"line\">        resp.addCookie(cookie2);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>补充：编码解码解决乱码问题</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">URLEncoder.encode(<span class=\"string\">&quot;中文&quot;</span>,<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">URLDecoder.decode(cookie,<span class=\"string\">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><p>服务器技术，利用这个技术可以保存用户的会话信息，把信息或数据保存在session中</p>\n<ul>\n<li>服务器会给每一个用户(浏览器)创建一个Session对象</li>\n<li>一个Session独占一个浏览器，只要浏览器没关闭session就一直存在</li>\n<li>用户登录后，就可以访问整个网站的用户页面(保存用户、购物车等的信息)</li>\n</ul>\n<p><strong>常用函数</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210219190917285.png\" alt=\"image-20210219190917285\"></p>\n<p><strong>删除session</strong></p>\n<ul>\n<li><p>手动对session进行remove和invalidate</p>\n</li>\n<li><p>在web.xml中添加配置,自动删除session</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--设置session失效时间，以分钟为单位--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">session-config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">session-timeout</span>&gt;</span>15<span class=\"tag\">&lt;/<span class=\"name\">session-timeout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>Session和Cookie的区别</strong></p>\n<ul>\n<li>Cookie是把用户的数据写给用户的浏览器，浏览器保存(可以保存多个)</li>\n<li>Session把用户的数据写到用户独占的Session中，由服务器进行保存(保存重要信息，减少服务器资源的浪费)</li>\n<li>Session由服务进行创建</li>\n</ul>\n<p><strong>Session实例</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210219195756512.png\" alt=\"image-20210219195756512\"></p>\n<blockquote>\n<p>Session使用场景</p>\n</blockquote>\n<ul>\n<li>保存一个登陆用户的信息或购物车</li>\n<li>整个网站中经常会使用的数据</li>\n</ul>\n<h1 id=\"JSP\"><a href=\"#JSP\" class=\"headerlink\" title=\"JSP\"></a>JSP</h1><p>Java Server Page:Java服务器端页面,和Servlet一样用于动态web技术</p>\n<p><strong>特点:</strong></p>\n<ul>\n<li>写JSP就像在写HTML</li>\n<li>区别:<ul>\n<li>HTML只给用户提供静态数据</li>\n<li>JSP页面中可以嵌入Java代码,为用户提供动态数据</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"JSP原理\"><a href=\"#JSP原理\" class=\"headerlink\" title=\"JSP原理\"></a>JSP原理</h2><ul>\n<li>服务器内部工作<ul>\n<li>tomcat目录下的work目录</li>\n<li>在idea中使用Tomcat会在idea的tomcat中生产一个work目录</li>\n<li>在idea中的tomcat的目录中可以找到一个index_jsp.java文件</li>\n</ul>\n</li>\n<li>浏览器向服务器发送请求,不管访问什么资源,都是在访问Servlet<ul>\n<li>jsp类继承了HttpJspBase类,而HttpJspBase类继承了HttpServlet类</li>\n<li><strong>JSP本质上就是一个Servlet!!!</strong></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化  </span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">_jspInit</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   <span class=\"comment\">//销毁</span></span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">_jspDestroy</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">   <span class=\"comment\">//JSPService</span></span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">_jspService</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>判断请求</p>\n</li>\n<li><p>内置对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">final</span> javax.servlet.jsp.PageContext pageContext;<span class=\"comment\">//页面上下文</span></span><br><span class=\"line\">javax.servlet.http.HttpSession session = <span class=\"keyword\">null</span>;<span class=\"comment\">//session</span></span><br><span class=\"line\">   <span class=\"keyword\">final</span> javax.servlet.ServletContext application;<span class=\"comment\">//applicationConttext</span></span><br><span class=\"line\">   <span class=\"keyword\">final</span> javax.servlet.ServletConfig config;<span class=\"comment\">//config</span></span><br><span class=\"line\">   javax.servlet.jsp.JspWriter out = <span class=\"keyword\">null</span>;<span class=\"comment\">//out</span></span><br><span class=\"line\">   <span class=\"keyword\">final</span> java.lang.Object page = <span class=\"keyword\">this</span>;<span class=\"comment\">//page:当前</span></span><br><span class=\"line\">HttpServletRequest request;<span class=\"comment\">//请求</span></span><br><span class=\"line\">HttpServletResponse response;<span class=\"comment\">//响应</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出页面前增加的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">response.setContentType(<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span>);<span class=\"comment\">//设置响应页面类型</span></span><br><span class=\"line\">pageContext = _jspxFactory.getPageContext(<span class=\"keyword\">this</span>, request, response,</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"number\">8192</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">_jspx_page_context = pageContext;</span><br><span class=\"line\">application = pageContext.getServletContext();</span><br><span class=\"line\">config = pageContext.getServletConfig();</span><br><span class=\"line\">out = pageContext.getOut();</span><br><span class=\"line\">_jspx_out = out;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以上对象可以在JSP页面中直接使用</p>\n</li>\n</ol>\n<p><strong>用户访问JSP页面示意图</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210219204803209.png\" alt=\"image-20210219204803209\"></p>\n<p><strong>JSP页面中,只要是Java代码就会原封不动的输出,如果是Html代码就会被转换为<code>out.write(&quot;&quot;)</code>的格式输出到前端</strong></p>\n<h2 id=\"JSP语法\"><a href=\"#JSP语法\" class=\"headerlink\" title=\"JSP语法\"></a>JSP语法</h2><p>JSP作为Java技术的一种应用,有一些自己扩充的语法,而Java的所有语法都支持</p>\n<h3 id=\"JSP表达式\"><a href=\"#JSP表达式\" class=\"headerlink\" title=\"JSP表达式\"></a>JSP表达式</h3><figure class=\"highlight jsp\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%--JSP表达式，用来将程序的输出输出到客户端</span><br><span class=\"line\">格式：&lt;%= 变量或表达式%&gt;</span><br><span class=\"line\">--%&gt;</span><br><span class=\"line\">&lt;%= <span class=\"keyword\">new</span> java.util.Date()%&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JSP脚本片段\"><a href=\"#JSP脚本片段\" class=\"headerlink\" title=\"JSP脚本片段\"></a>JSP脚本片段</h3><figure class=\"highlight jsp\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%--JSP脚本片段--%&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i&lt;<span class=\"number\">100</span>; i++)&#123;</span><br><span class=\"line\">    sum +=i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">out.write(<span class=\"string\">&quot;&lt;h1&gt;Sum=&quot;</span>+sum+<span class=\"string\">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JSP声明\"><a href=\"#JSP声明\" class=\"headerlink\" title=\"JSP声明\"></a>JSP声明</h3><figure class=\"highlight jsp\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%!</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">    \tSystem.out.println(<span class=\"string\">&quot;Loading Servlet!&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> Gvar = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">demo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \tSystem.out.println(<span class=\"string\">&quot;进入了demo方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n<p>JSP声明会被编译到JSP生成的Java的类中,而JSP表达式和脚本片段会被生成到<code>_jspService</code>方法中</p>\n<h3 id=\"JSP指令\"><a href=\"#JSP指令\" class=\"headerlink\" title=\"JSP指令\"></a>JSP指令</h3><figure class=\"highlight jsp\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%--格式:</span><br><span class=\"line\">&lt;%@ page args...%&gt;</span><br><span class=\"line\">--%&gt;</span><br><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page isErrorPage=<span class=\"string\">&quot;true&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>用多个jsp合成页面(比如网站的上下边框):</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210219221257511.png\" alt=\"image-20210219221257511\"></p>\n<p>JSP不会再客户端显示,而Html注释会显示在客户端源文件中</p>\n<h2 id=\"内置对象\"><a href=\"#内置对象\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h2><ul>\n<li>PageContext</li>\n<li>Request</li>\n<li>Response</li>\n<li>Session</li>\n<li>Application[ServletContext]</li>\n<li>config[ServletConfig]</li>\n<li>out</li>\n<li>page</li>\n<li>exception</li>\n</ul>\n<p><strong>常用对象的作用域</strong>(可以设置第三个属性自定义作用域)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210221100942461.png\" alt=\"image-20210221100942461\"></p>\n<p><strong>PageContext实现转发</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210221102824360.png\" alt=\"image-20210221102824360\"></p>\n<h2 id=\"JSP、JSTL标签、EL表达式\"><a href=\"#JSP、JSTL标签、EL表达式\" class=\"headerlink\" title=\"JSP、JSTL标签、EL表达式\"></a>JSP、JSTL标签、EL表达式</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--JSTL表达式依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--标签库依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>taglibs<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>standard<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>EL表达式</strong>：<code>$&#123;&#125;</code></p>\n<ul>\n<li>获取数据</li>\n<li>执行运算</li>\n<li>获取web开发常用对象</li>\n</ul>\n<p><strong>JSP标签</strong></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%--拼接html页面--%&gt;</span><br><span class=\"line\">&lt;jsp:include page=<span class=\"string\">&quot;&quot;</span>/&gt;</span><br><span class=\"line\">&lt;%--请求转发--%&gt;</span><br><span class=\"line\">&lt;jsp:forward page=<span class=\"string\">&quot;&quot;</span>/&gt;</span><br><span class=\"line\">&lt;%--设置参数--%&gt;</span><br><span class=\"line\">&lt;jsp:param name=<span class=\"string\">&quot;name&quot;</span> value=<span class=\"string\">&quot;lan5th&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>JSTL标签</strong></p>\n<p>JSP文件头加入如下代码</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%<span class=\"meta\">@taglib</span> prefix=<span class=\"string\">&quot;c&quot;</span> uri=<span class=\"string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>JSTL标签库的使用就是为了弥补Html标签的不足，自定义了许多标签，功能和java代码一样</p>\n<p><strong>核心标签</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210221111424870.png\" alt=\"image-20210221111424870\"></p>\n<p>条件语句</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210221115238770.png\" alt=\"image-20210221115238770\"></p>\n<p>选择语句</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210221115346109.png\" alt=\"image-20210221115346109\"></p>\n<p>循环语句</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210221115509248.png\" alt=\"image-20210221115509248\"></p>\n<p>此外<strong>格式化标签</strong>/<strong>SQL标签</strong>/<strong>XML标签</strong>加以了解</p>\n<h1 id=\"Javabean\"><a href=\"#Javabean\" class=\"headerlink\" title=\"Javabean\"></a>Javabean</h1><p>实体类</p>\n<p>JavaBean特有写法</p>\n<ul>\n<li>必须要有一个无参构造</li>\n<li>属性必须私有化</li>\n<li>必须有get/set方法</li>\n</ul>\n<p>一般用来和数据库的字段作映射：ORM(对象关系映射)</p>\n<ul>\n<li>表-&gt;类</li>\n<li>字段-&gt;属性</li>\n<li>行记录-&gt;对象</li>\n</ul>\n<p>people表</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>age</th>\n<th>address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>user1</td>\n<td>17</td>\n<td>A市</td>\n</tr>\n<tr>\n<td>2</td>\n<td>user2</td>\n<td>18</td>\n<td>B市</td>\n</tr>\n<tr>\n<td>3</td>\n<td>user3</td>\n<td>19</td>\n<td>C市</td>\n</tr>\n</tbody></table>\n<p>对应实体类People</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> People(<span class=\"number\">1</span>,user1,<span class=\"number\">17</span>,A市);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> People(<span class=\"number\">2</span>,user2,<span class=\"number\">18</span>,B市);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> People(<span class=\"number\">3</span>,user3,<span class=\"number\">19</span>,C市);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MVC三层架构\"><a href=\"#MVC三层架构\" class=\"headerlink\" title=\"MVC三层架构\"></a>MVC三层架构</h1><p>什么是MVC：Model  View  Controller  模型视图控制器</p>\n<p><strong>早期结构</strong></p>\n<p>servlet代码中需要处理请求，响应，视图跳转，处理JDBC，处理业务代码，处理逻辑代码</p>\n<p>弊端：程序十分臃肿，不利于维护</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210224110210416.png\" alt=\"image-20210224110210416\"></p>\n<p><strong>MVC架构</strong></p>\n<p>Model</p>\n<ul>\n<li>业务处理：业务逻辑(Service)</li>\n<li>数据持久层：CRUD(Dao)</li>\n</ul>\n<p>View</p>\n<ul>\n<li>展示数据</li>\n<li>提供连接发起Servlet请求</li>\n</ul>\n<p>Controller(Servlet)</p>\n<ul>\n<li>接收用户请求(req，请求参数，session信息等)</li>\n<li>交给业务层对应的处理代码</li>\n<li>控制视图的跳转</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210224111115671.png\" alt=\"image-20210224111115671\"></p>\n<p>登录过程示例：</p>\n<p>登录-接受用户的登录请求-&gt;处理用户的请求(获取用户登录的参数)-&gt;交给业务层处理登录业务(判断用户名和密码正确，事务)-&gt;Dao层查询用户名和密码是否正确</p>\n<h1 id=\"Filter-amp-Listener\"><a href=\"#Filter-amp-Listener\" class=\"headerlink\" title=\"Filter&amp;Listener\"></a>Filter&amp;Listener</h1><h2 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h2><p>用来过滤网站数据</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210224112309788.png\" alt=\"image-20210224112309788\"></p>\n<p>mysql-connector-java依赖(注意要对应版本)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--连接数据库依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.31<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210224120015796.png\" alt=\"image-20210224120015796\"></p>\n<p>注意实现类的包名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CharacterEncodingFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//web服务器启动时初始化</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Filter初始化&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//chain:链</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    1. 过滤中的所有代码，在过滤特定请求时都会执行</span></span><br><span class=\"line\"><span class=\"comment\">    2. 必须要让过滤器继续进行</span></span><br><span class=\"line\"><span class=\"comment\">    filterChain.doFilter(servletRequest,servletResponse);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        servletRequest.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        servletResponse.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        servletResponse.setContentType(<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Filter执行前&quot;</span>);</span><br><span class=\"line\">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Filter执行后&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//web服务器关闭时销毁</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Filter销毁&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同servlet一样，需要在web.xml中配置路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.lan5th.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Listener\"><a href=\"#Listener\" class=\"headerlink\" title=\"Listener\"></a>Listener</h2><p>监听器在GUI编程中经常使用</p>\n<p>实现监听器类并重写方法</p>\n<p>实现网站在线人数监听</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210224140202849.png\" alt=\"image-20210224140202849\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210224140226116.png\" alt=\"image-20210224140226116\"></p>\n<p>配置路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>com.lan5th.listener.listnerDemo<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常见应用\"><a href=\"#常见应用\" class=\"headerlink\" title=\"常见应用\"></a>常见应用</h2><p>用户登陆之后才能进入主页，未登录状态不能进入主页</p>\n<ol>\n<li>用户登录后向Session中放入用户数据</li>\n<li>进入主页时要判断用户是否登录(在过滤器中实现)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">HttpServletRequest request = (HttpServletRequest) req;</span><br><span class=\"line\">HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (request.getSession().getAttribute(Constant.USER_SESSION)==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    response.send(<span class=\"string\">&quot;/error.jsp&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chain.doFilter(requset.reponse);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"具体功能实例\"><a href=\"#具体功能实例\" class=\"headerlink\" title=\"具体功能实例\"></a>具体功能实例</h1><h2 id=\"下载-上传文件实例\"><a href=\"#下载-上传文件实例\" class=\"headerlink\" title=\"下载/上传文件实例\"></a>下载/上传文件实例</h2><h3 id=\"下载文件\"><a href=\"#下载文件\" class=\"headerlink\" title=\"下载文件\"></a>下载文件</h3><p>具体方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletDown</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//1. 下载文件路径</span></span><br><span class=\"line\">       String realPath = <span class=\"string\">&quot;D:\\\\code\\\\code-resp\\\\projects\\\\Javaweb\\\\Servlet\\\\target\\\\classes\\\\test.png&quot;</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;下载文件路径&quot;</span>+realPath);</span><br><span class=\"line\">        <span class=\"comment\">//2. 下载文件名</span></span><br><span class=\"line\">        String filename = realPath.substring(realPath.lastIndexOf(<span class=\"string\">&quot;\\\\&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//3. 设置让浏览器支持下载我们需要的东西,转码支持中文文件名</span></span><br><span class=\"line\">        resp.setHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>,<span class=\"string\">&quot;attachment;filename=&quot;</span>+ URLEncoder.encode(filename,<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">       <span class=\"comment\">//4. 获取下载文件的输入流</span></span><br><span class=\"line\">        FileInputStream in = <span class=\"keyword\">new</span> FileInputStream(realPath);</span><br><span class=\"line\">        <span class=\"comment\">//5. 创建缓冲区</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"comment\">//6. 获取OutputStream对象</span></span><br><span class=\"line\">        ServletOutputStream out = resp.getOutputStream();</span><br><span class=\"line\">        <span class=\"comment\">//7. 将FileOutputStream流写入buffer缓冲区，并用OutputStream将缓冲区中的数据输出到客户端</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (in.read(buffer)&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            out.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//8.关闭流</span></span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.doGet(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上传文件\"><a href=\"#上传文件\" class=\"headerlink\" title=\"上传文件\"></a>上传文件</h3><p><strong>注意点</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210302214909999.png\" alt=\"image-20210302214909999\"></p>\n<p><strong>预先导包</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>具体方法</strong></p>\n<p>前端页面表单增添enctype属性</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/fileUpload.do&quot;</span> enctype=<span class=\"string\">&quot;multipart/form-data&quot;</span> method=<span class=\"string\">&quot;post&quot;</span>&gt;</span><br><span class=\"line\">    上传者：&lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;username&quot;</span>&gt;&lt;br&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;file&quot;</span> name=<span class=\"string\">&quot;file1&quot;</span>&gt;&lt;br&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;file&quot;</span> name=<span class=\"string\">&quot;file2&quot;</span>&gt;&lt;br&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">&quot;submit&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n\n<p>FileUploadServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUploadServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断上传文件是普通表单还是带上传文件的表单</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进入目标Servlet&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ServletFileUpload.isMultipartContent(req))&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;直接return&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建上传文件的保存路径，为了服务器安全，建议在WEB-INF目录下</span></span><br><span class=\"line\">            String savePath = <span class=\"keyword\">this</span>.getServletContext().getRealPath(<span class=\"string\">&quot;/WEB-INF/upload&quot;</span>);</span><br><span class=\"line\">            File saveFile = <span class=\"keyword\">new</span> File(savePath);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!saveFile.exists())&#123;</span><br><span class=\"line\">                saveFile.mkdir();<span class=\"comment\">//创建目录</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//缓存，临时文件</span></span><br><span class=\"line\">            <span class=\"comment\">//临时文件假如文件超过预期大小，就把他放到一个临时文件中，几天后自动删除</span></span><br><span class=\"line\">            String tmpPath = <span class=\"keyword\">this</span>.getServletContext().getRealPath(<span class=\"string\">&quot;/WEB-INF/tmp&quot;</span>);</span><br><span class=\"line\">            File file = <span class=\"keyword\">new</span> File(tmpPath);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!file.exists())&#123;</span><br><span class=\"line\">                file.mkdir();<span class=\"comment\">//创建临时目录</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//1.创建DiskFileItemFactory对象，处理文件上传路径或大小限制</span></span><br><span class=\"line\">            DiskFileItemFactory factory = getDiskFileItemFactory(file);</span><br><span class=\"line\">            <span class=\"comment\">//2.获取ServletFileUpload</span></span><br><span class=\"line\">            ServletFileUpload upload = getServletFileUpload(factory);</span><br><span class=\"line\">            <span class=\"comment\">//3.处理上传的文件</span></span><br><span class=\"line\">            String msg = uploadParseRequest(upload,req,savePath);</span><br><span class=\"line\">            <span class=\"comment\">//servlet请求转发信息</span></span><br><span class=\"line\">            req.setAttribute(<span class=\"string\">&quot;msg&quot;</span>,msg);</span><br><span class=\"line\">            req.getRequestDispatcher(<span class=\"string\">&quot;info.jsp&quot;</span>).forward(req,resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileUploadException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        doGet(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> DiskFileItemFactory <span class=\"title\">getDiskFileItemFactory</span><span class=\"params\">(File file)</span></span>&#123;</span><br><span class=\"line\">        DiskFileItemFactory factory = <span class=\"keyword\">new</span> DiskFileItemFactory();</span><br><span class=\"line\">        factory.setSizeThreshold(<span class=\"number\">10240</span>*<span class=\"number\">1024</span>);<span class=\"comment\">//缓冲区大小1M</span></span><br><span class=\"line\">        factory.setRepository(file);<span class=\"comment\">//临时目录的保存路径</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> factory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> ServletFileUpload <span class=\"title\">getServletFileUpload</span><span class=\"params\">(DiskFileItemFactory factory)</span></span>&#123;</span><br><span class=\"line\">        ServletFileUpload upload = <span class=\"keyword\">new</span> ServletFileUpload(factory);</span><br><span class=\"line\">        <span class=\"comment\">//监听文件上传进度</span></span><br><span class=\"line\">        upload.setProgressListener(<span class=\"keyword\">new</span> ProgressListener() &#123;</span><br><span class=\"line\">            <span class=\"comment\">//pBytesRead:已经读取到的文件大小</span></span><br><span class=\"line\">            <span class=\"comment\">//pContentLength:文件大小</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">long</span> pBytesRead, <span class=\"keyword\">long</span> pContentLength, <span class=\"keyword\">int</span> pItems)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">float</span> degree = (<span class=\"keyword\">float</span>)(Math.round((<span class=\"keyword\">float</span>)pBytesRead/(<span class=\"keyword\">float</span>) pContentLength*<span class=\"number\">1000</span>))/<span class=\"number\">10</span>;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;总大小：&quot;</span>+pContentLength+<span class=\"string\">&quot;进度：&quot;</span>+degree+<span class=\"string\">&quot;%&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//处理乱码问题</span></span><br><span class=\"line\">        upload.setHeaderEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> upload;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> String <span class=\"title\">uploadParseRequest</span><span class=\"params\">(ServletFileUpload upload,HttpServletRequest req, String uploadPath)</span> <span class=\"keyword\">throws</span> FileUploadException, IOException </span>&#123;</span><br><span class=\"line\">        String msg = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//解析前端请求，封装成FileItem对象</span></span><br><span class=\"line\">        List&lt;FileItem&gt; fileItems = upload.parseRequest(req);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (FileItem fileItem:fileItems)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fileItem.isFormField())&#123;<span class=\"comment\">//判断上传的是普通表单还是文件表单</span></span><br><span class=\"line\">                String name = fileItem.getFieldName();<span class=\"comment\">//拿到前端表单项的name</span></span><br><span class=\"line\">                String value = fileItem.getString(<span class=\"string\">&quot;UTF-8&quot;</span>);<span class=\"comment\">//处理乱码</span></span><br><span class=\"line\">                System.out.println(name+<span class=\"string\">&quot;:&quot;</span>+value);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//判断为上传文件类型</span></span><br><span class=\"line\">                String uploadFileName = fileItem.getName();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;上传的文件名：&quot;</span>+uploadFileName);</span><br><span class=\"line\">                <span class=\"comment\">//trim()去掉首尾空格</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (uploadFileName.trim().equals(<span class=\"string\">&quot;&quot;</span>)||uploadFileName==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//获得上传文件名</span></span><br><span class=\"line\">                String fileName = uploadFileName.substring(uploadFileName.lastIndexOf(<span class=\"string\">&quot;/&quot;</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">//获得文件后缀</span></span><br><span class=\"line\">                String fileExName = uploadFileName.substring(uploadFileName.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">//可以根据后缀名来决定是否接收上传</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;文件信息[文件名：&quot;</span>+fileName+<span class=\"string\">&quot;---文件类型&quot;</span>+fileExName+<span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//使用UUID来保证文件夹名统一</span></span><br><span class=\"line\">                <span class=\"comment\">//UUID.randomUUID()生成一个唯一识别的通用码</span></span><br><span class=\"line\">                String uuidPath = UUID.randomUUID().toString();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//=================处理文件完毕=================</span></span><br><span class=\"line\">                String realPath = uploadPath+<span class=\"string\">&quot;/&quot;</span>+uuidPath;</span><br><span class=\"line\">                <span class=\"comment\">//给每个文件创建一个对应的文件夹</span></span><br><span class=\"line\">                File realPathFile = <span class=\"keyword\">new</span> File(realPath);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!realPathFile.exists())&#123;</span><br><span class=\"line\">                    realPathFile.mkdir();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//=================存放地址完毕=================</span></span><br><span class=\"line\">                <span class=\"comment\">//上传文件流</span></span><br><span class=\"line\">                InputStream inputStream = fileItem.getInputStream();</span><br><span class=\"line\">                <span class=\"comment\">//文件输出流</span></span><br><span class=\"line\">                FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(realPath + <span class=\"string\">&quot;/&quot;</span> + fileName);</span><br><span class=\"line\">                System.out.println(realPath + <span class=\"string\">&quot;/&quot;</span> + fileName);</span><br><span class=\"line\">                <span class=\"comment\">//缓冲区</span></span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((len=inputStream.read(buffer))&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    fos.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                fos.close();</span><br><span class=\"line\">                inputStream.close();</span><br><span class=\"line\"></span><br><span class=\"line\">                msg = <span class=\"string\">&quot;文件上传成功&quot;</span>;</span><br><span class=\"line\">                fileItem.delete();;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"邮件功能\"><a href=\"#邮件功能\" class=\"headerlink\" title=\"邮件功能\"></a>邮件功能</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210303200742829.png\" alt=\"image-20210303200742829\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.mail<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mail<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.activation<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>activation<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>JavaMail包支持一些常用的邮件协议，如SMTP,POP3,IMAP,MIME等</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210303201224973.png\" alt=\"image-20210303201224973\"></p>\n<p>注意过程中的session和前面所用到的session不同，适用于具体的环境</p>\n<h3 id=\"普通邮件\"><a href=\"#普通邮件\" class=\"headerlink\" title=\"普通邮件\"></a>普通邮件</h3><p>注：不一定需要在Servlet中实现，普通的java类也能进行实现</p>\n<p>若使用qq邮箱，首先在设置里开启POP3/SMTP服务并获取授权码</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210303205303527.png\" alt=\"image-20210303205303527\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mail</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Properties prop = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        prop.setProperty(<span class=\"string\">&quot;mail.host&quot;</span>,<span class=\"string\">&quot;smtp.qq.com&quot;</span>);</span><br><span class=\"line\">        prop.setProperty(<span class=\"string\">&quot;mail.transport.protocol&quot;</span>,<span class=\"string\">&quot;smtp&quot;</span>);</span><br><span class=\"line\">        prop.setProperty(<span class=\"string\">&quot;mail.smtp.auth&quot;</span>,<span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用QQ邮箱时，还要设置SSL加密，添加以下代码，一般来说其他邮箱不需要</span></span><br><span class=\"line\">        MailSSLSocketFactory sf = <span class=\"keyword\">new</span> MailSSLSocketFactory();</span><br><span class=\"line\">        sf.setTrustAllHosts(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        prop.put(<span class=\"string\">&quot;mail.smtp.ssl.enable&quot;</span>,<span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        prop.put(<span class=\"string\">&quot;mail.smtp.ssl.socketFactory&quot;</span>, sf);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用JavaMail发送邮件5个步骤</span></span><br><span class=\"line\">        <span class=\"comment\">//1.创建定义整个应用程序所需环境信息的session对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//以下代码也是QQ邮箱所需要的，其他不需要</span></span><br><span class=\"line\">        Session session = Session.getDefaultInstance(prop, <span class=\"keyword\">new</span> Authenticator() &#123;</span><br><span class=\"line\">            <span class=\"comment\">//发件人用户名，授权码(由邮箱设置拿到,笔者授权码在此用*代替)</span></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> PasswordAuthentication <span class=\"title\">getPasswordAuthentication</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PasswordAuthentication(<span class=\"string\">&quot;576247105@qq.com&quot;</span>,<span class=\"string\">&quot;************&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//可选项：开启session的debug模式，查看程序发送email的运行状态</span></span><br><span class=\"line\">        session.setDebug(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.通过session获得transport对象</span></span><br><span class=\"line\">        Transport ts = session.getTransport();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.使用邮箱的用户名和授权码连上邮箱服务器</span></span><br><span class=\"line\">        ts.connect(<span class=\"string\">&quot;smtp.qq.com&quot;</span>,<span class=\"string\">&quot;576247105@qq.com&quot;</span>,<span class=\"string\">&quot;************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4.创建邮件，写邮件(实际上是在写html文本)</span></span><br><span class=\"line\">        <span class=\"comment\">//注意传递session</span></span><br><span class=\"line\">        MimeMessage message = <span class=\"keyword\">new</span> MimeMessage(session);</span><br><span class=\"line\">        <span class=\"comment\">//知名发件人</span></span><br><span class=\"line\">        message.setFrom(<span class=\"keyword\">new</span> InternetAddress(<span class=\"string\">&quot;576247105@qq.com&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//指明收件人，给自己发则收件人和发件人相同</span></span><br><span class=\"line\">        message.setRecipient(Message.RecipientType.TO, <span class=\"keyword\">new</span> InternetAddress(<span class=\"string\">&quot;576247105@qq.com&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//邮件标题</span></span><br><span class=\"line\">        message.setSubject(<span class=\"string\">&quot;测试邮件&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//文本内容</span></span><br><span class=\"line\">        message.setContent(<span class=\"string\">&quot;&lt;h1 style=&#x27;color:red&#x27;&gt;测试邮件文本&lt;/h1&gt;&quot;</span>,<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//5.发送邮件</span></span><br><span class=\"line\">        ts.sendMessage(message,message.getAllRecipients());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//6.关闭连接</span></span><br><span class=\"line\">        ts.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"带附件的邮件\"><a href=\"#带附件的邮件\" class=\"headerlink\" title=\"带附件的邮件\"></a>带附件的邮件</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210303221653725.png\" alt=\"image-20210303221653725\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMimeEmail</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Properties prop = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">    prop.setProperty(<span class=\"string\">&quot;mail.host&quot;</span>,<span class=\"string\">&quot;smtp.qq.com&quot;</span>);</span><br><span class=\"line\">    prop.setProperty(<span class=\"string\">&quot;mail.transport.protocol&quot;</span>,<span class=\"string\">&quot;smtp&quot;</span>);</span><br><span class=\"line\">    prop.setProperty(<span class=\"string\">&quot;mail.smtp.auth&quot;</span>,<span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    MailSSLSocketFactory sf = <span class=\"keyword\">new</span> MailSSLSocketFactory();</span><br><span class=\"line\">    sf.setTrustAllHosts(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    prop.put(<span class=\"string\">&quot;mail.smtp.ssl.enable&quot;</span>,<span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">    prop.put(<span class=\"string\">&quot;mail.smtp.ssl.socketFactory&quot;</span>, sf);</span><br><span class=\"line\"></span><br><span class=\"line\">    Session session = Session.getDefaultInstance(prop, <span class=\"keyword\">new</span> Authenticator() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> PasswordAuthentication <span class=\"title\">getPasswordAuthentication</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PasswordAuthentication(<span class=\"string\">&quot;576247105@qq.com&quot;</span>,<span class=\"string\">&quot;************&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    session.setDebug(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Transport ts = session.getTransport();</span><br><span class=\"line\"></span><br><span class=\"line\">    ts.connect(<span class=\"string\">&quot;smtp.qq.com&quot;</span>,<span class=\"string\">&quot;576247105@qq.com&quot;</span>,<span class=\"string\">&quot;************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    MimeMessage message = <span class=\"keyword\">new</span> MimeMessage(session);</span><br><span class=\"line\">    message.setFrom(<span class=\"keyword\">new</span> InternetAddress(<span class=\"string\">&quot;576247105@qq.com&quot;</span>));</span><br><span class=\"line\">    message.setRecipient(Message.RecipientType.TO, <span class=\"keyword\">new</span> InternetAddress(<span class=\"string\">&quot;576247105@qq.com&quot;</span>));</span><br><span class=\"line\">    message.setSubject(<span class=\"string\">&quot;测试邮件&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//==================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//准备图片数据</span></span><br><span class=\"line\">    MimeBodyPart image = <span class=\"keyword\">new</span> MimeBodyPart();</span><br><span class=\"line\">    <span class=\"comment\">//图片需要经过数据处理DataHandler</span></span><br><span class=\"line\">    DataHandler dataHandler = <span class=\"keyword\">new</span> DataHandler(<span class=\"keyword\">new</span> FileDataSource(<span class=\"string\">&quot;D:\\\\code\\\\code-resp\\\\projects\\\\Javaweb\\\\Servlet\\\\src\\\\main\\\\resources\\\\image\\\\test.png&quot;</span>));</span><br><span class=\"line\">    image.setDataHandler(dataHandler);</span><br><span class=\"line\">    image.setContentID(<span class=\"string\">&quot;bz.jpg&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//准备正文数据</span></span><br><span class=\"line\">    MimeBodyPart text = <span class=\"keyword\">new</span> MimeBodyPart();</span><br><span class=\"line\">    text.setContent(<span class=\"string\">&quot;这是一封带图片的邮件&lt;img src=&#x27;cid:bz.jpg&#x27;&gt;&quot;</span>,<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//描述数据关系</span></span><br><span class=\"line\">    MimeMultipart mimeMultipart = <span class=\"keyword\">new</span> MimeMultipart();</span><br><span class=\"line\">    mimeMultipart.addBodyPart(text);</span><br><span class=\"line\">    mimeMultipart.addBodyPart(image);</span><br><span class=\"line\">    mimeMultipart.setSubType(<span class=\"string\">&quot;related&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置到消息中，保存修改</span></span><br><span class=\"line\">    message.setContent(mimeMultipart);</span><br><span class=\"line\">    message.saveChanges();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//==================================================</span></span><br><span class=\"line\">    ts.sendMessage(message,message.getAllRecipients());</span><br><span class=\"line\">    ts.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在发送邮件时使用多线程提高用户体验</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//......</span></span><br><span class=\"line\">        <span class=\"comment\">//在操作前获取username，passowrd和email</span></span><br><span class=\"line\">        User user = <span class=\"keyword\">new</span> User(username,password,email);</span><br><span class=\"line\">        <span class=\"comment\">//创建线程，防止出现耗时和网站人数过多的情况，让用户等待时间较长</span></span><br><span class=\"line\">        SendMail send = <span class=\"keyword\">new</span> SendMail(user);</span><br><span class=\"line\">        <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        send.start();</span><br><span class=\"line\">        req.setAttribute(<span class=\"string\">&quot;messege&quot;</span>,<span class=\"string\">&quot;显示信息&quot;</span>);</span><br><span class=\"line\">        req.getRequestDispatcher(<span class=\"string\">&quot;info.jsp&quot;</span>).forward(req,resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        doGet(req,resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SendMail</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//在这里写发送邮件代码</span></span><br><span class=\"line\">         <span class=\"comment\">//......</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["JavaEE"]},{"title":"设计模式","url":"/2021/10/06/%E6%9D%82%E9%A1%B9/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","content":"<h1 id=\"设计模式概述\"><a href=\"#设计模式概述\" class=\"headerlink\" title=\"设计模式概述\"></a>设计模式概述</h1><h2 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h2><ul>\n<li>创建型模式，共五种<ul>\n<li><a href=\"#FactoryMethod\">工厂方法模式</a></li>\n<li><a href=\"#AbstractFactory\">抽象工厂模式</a></li>\n<li><a href=\"#Singleton\">单例模式</a></li>\n<li><a href=\"#Builder\">建造者模式</a></li>\n<li><a href=\"#Prototype\">原型模式</a></li>\n</ul>\n</li>\n<li>结构型模式，共七种<ul>\n<li><a href=\"#Adapter\">适配器模式</a></li>\n<li><a href=\"#Decorator\">装饰器模式</a></li>\n<li><a href=\"#Proxy\">代理模式</a></li>\n<li><a href=\"#Facade\">外观模式</a></li>\n<li><a href=\"#Bridge\">桥接模式</a></li>\n<li><a href=\"#Composite\">组合模式</a></li>\n<li><a href=\"#Flyweight\">享元模式</a></li>\n</ul>\n</li>\n<li>行为型模式，共十一种<ul>\n<li><a href=\"#Strategy\">策略模式</a></li>\n<li><a href=\"#TemplateMethod\">模板方法模式</a></li>\n<li><a href=\"#Observer\">观察者模式</a></li>\n<li><a href=\"#Iterator\">迭代子模式</a></li>\n<li><a href=\"#ChainOfResponsibility\">责任链模式</a></li>\n<li><a href=\"#Command\">命令模式</a></li>\n<li><a href=\"#Memento\">备忘录模式</a></li>\n<li><a href=\"#State\">状态模式</a></li>\n<li><a href=\"#Visitor\">访问者模式</a></li>\n<li><a href=\"#Mediator\">中介者模式</a></li>\n<li><a href=\"#Interpreter\">解释器模式</a></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdn.net/20180820002505651?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3R0eHM5OTk4OQ\" alt=\"20180820002505651 (761×914) (csdn.net)\"></p>\n<h2 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h2><ol>\n<li><p><strong>开闭原则</strong>（Open Close Principle）</p>\n<p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。</p>\n<p>详细介绍：<a href=\"https://blog.csdn.net/lovelion/article/details/7537584\">https://blog.csdn.net/lovelion/article/details/7537584</a></p>\n</li>\n<li><p><strong>里氏代换原则</strong>（Liskov Substitution Principle）</p>\n<p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</p>\n<p>详细介绍：<a href=\"https://blog.csdn.net/lovelion/article/details/7540445\">https://blog.csdn.net/lovelion/article/details/7540445</a></p>\n</li>\n<li><p><strong>依赖倒置原则</strong>（Dependence Inversion Principle）</p>\n<p>这个是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>\n<p>详解介绍：<a href=\"https://blog.csdn.net/lovelion/article/details/7562783\">https://blog.csdn.net/lovelion/article/details/7562783</a></p>\n</li>\n<li><p><strong>接口隔离原则</strong>（Interface Segregation Principle）</p>\n<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p>\n<p>详细介绍：<a href=\"https://blog.csdn.net/lovelion/article/details/7562842\">https://blog.csdn.net/lovelion/article/details/7562842</a></p>\n</li>\n<li><p><strong>迪米特法则</strong>（最少知道原则）（Demeter Principle）</p>\n<p>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>\n<p>详细介绍：<a href=\"https://blog.csdn.net/lovelion/article/details/7563445\">https://blog.csdn.net/lovelion/article/details/7563445</a></p>\n</li>\n<li><p><strong>单一职责原则</strong>（Single-Responsibility-Principle）</p>\n<p>核心：一个类只负责一个功能领域中相应的职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。 </p>\n<p>思想：如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏。</p>\n<p>详细介绍：<a href=\"https://blog.csdn.net/lovelion/article/details/7536542\">https://blog.csdn.net/lovelion/article/details/7536542</a></p>\n</li>\n</ol>\n<p>原文连接：<a href=\"https://blog.csdn.net/ttxs99989/article/details/81844135\">设计模式的三大分类及六大原则</a></p>\n<h1 id=\"适应设计模式\"><a href=\"#适应设计模式\" class=\"headerlink\" title=\"适应设计模式\"></a>适应设计模式</h1><h2 id=\"Iterator模式\"><a href=\"#Iterator模式\" class=\"headerlink\" title=\"Iterator模式\"></a><span id=\"Iterator\">Iterator模式</span></h2><p>迭代器模式–一个一个遍历</p>\n<h3 id=\"Iterator模式中的角色\"><a href=\"#Iterator模式中的角色\" class=\"headerlink\" title=\"Iterator模式中的角色\"></a>Iterator模式中的角色</h3><ul>\n<li>迭代器接口Iterator：定义hasNext和next方法</li>\n<li>迭代器的实现类BookShelf</li>\n<li>集合接口Aggregate：定义迭代器</li>\n<li>集合的实现类BookShelfIterator</li>\n</ul>\n<p><code>Iterator.java</code>迭代器接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Object <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Aggregate.java</code>集合接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Aggregate</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再来看实现类</p>\n<p><code>Book.java</code>实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>BookShelf.java</code>实现集合接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookShelf</span> <span class=\"keyword\">implements</span> <span class=\"title\">Aggregate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Book books[];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> last = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookShelf</span><span class=\"params\">(<span class=\"keyword\">int</span> maxsize)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.books = <span class=\"keyword\">new</span> Book[maxsize];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Book <span class=\"title\">getBookAt</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> books[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">appendBook</span><span class=\"params\">(Book book)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.books[last] = book;</span><br><span class=\"line\">        last++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> last;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//定义迭代器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BookShelfIterator(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>BookShelfIterator.java</code>实现迭代器接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookShelfIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookShelf bookShelf;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookShelfIterator</span><span class=\"params\">(BookShelf bookShelf)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bookShelf = bookShelf;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; bookShelf.getLength())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Book book = bookShelf.getBookAt(index);</span><br><span class=\"line\">        index++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> book;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类：使用迭代器进行遍历输出，而不涉及集合类本身的引用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IteratorMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        BookShelf bookShelf = <span class=\"keyword\">new</span> BookShelf(<span class=\"number\">4</span>);</span><br><span class=\"line\">        bookShelf.appendBook(<span class=\"keyword\">new</span> Book(<span class=\"string\">&quot;倚天屠龙记&quot;</span>));</span><br><span class=\"line\">        bookShelf.appendBook(<span class=\"keyword\">new</span> Book(<span class=\"string\">&quot;葵花宝典&quot;</span>));</span><br><span class=\"line\">        bookShelf.appendBook(<span class=\"keyword\">new</span> Book(<span class=\"string\">&quot;九阳真经&quot;</span>));</span><br><span class=\"line\">        bookShelf.appendBook(<span class=\"keyword\">new</span> Book(<span class=\"string\">&quot;神雕侠侣&quot;</span>));</span><br><span class=\"line\">        Iterator it = bookShelf.iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (it.hasNext())&#123;</span><br><span class=\"line\">            Book book = (Book) it.next();</span><br><span class=\"line\">            System.out.println(book.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Iterator模式的特点\"><a href=\"#Iterator模式的特点\" class=\"headerlink\" title=\"Iterator模式的特点\"></a>Iterator模式的特点</h3><ul>\n<li>在我们使用while循环来进行遍历时，整个操作不依赖于集合类的具体实现，就算集合类不再使用数组而选择Vector取而代之，只要集合类中的Iterator方法能正确的返回Iterator实例，即使不对迭代器的使用者进行修改，遍历代码都能正常工作</li>\n<li>由于上一条的特点：“将遍历功能置于Aggregate角色之外是Iterator的一个特征”，因此可以针对同一个集合角色编写多个Iterator角色</li>\n<li>对Java集合中的元素进行清除只能使用迭代器</li>\n</ul>\n<h2 id=\"Adapter模式\"><a href=\"#Adapter模式\" class=\"headerlink\" title=\"Adapter模式\"></a><span id=\"Adapter\">Adapter模式</span></h2><p>适配器模式–添加适配器以便复用</p>\n<p>Adaper模式有以下两种模式：</p>\n<ul>\n<li>类适配器模式（使用继承）</li>\n<li>对象适配器模式（使用委托）</li>\n</ul>\n<h3 id=\"类适配模式\"><a href=\"#类适配模式\" class=\"headerlink\" title=\"类适配模式\"></a>类适配模式</h3><p><code>OriginBanner.java</code>被适配类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OriginBanner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String string;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OriginBanner</span><span class=\"params\">(String string)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.string = string;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showWithParen</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;(&quot;</span>+string+<span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showWithAster</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*&quot;</span>+string+<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>PrintInterface</code>业务接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PrintInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">printWeak</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">printStrong</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>PrintBannerAdapter</code>适配器类继承被适配类并调用被适配类的方法来实现业务接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintBannerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">OriginBanner</span> <span class=\"keyword\">implements</span> <span class=\"title\">PrintInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrintBannerAdapter</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printWeak</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.showWithParen();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printStrong</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.showWithAster();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类：调用业务接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        PrintBannerAdapter adapter = <span class=\"keyword\">new</span> PrintBannerAdapter(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">        adapter.printWeak();</span><br><span class=\"line\">        adapter.printStrong();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象适配模式\"><a href=\"#对象适配模式\" class=\"headerlink\" title=\"对象适配模式\"></a>对象适配模式</h3><p>将业务接口改为抽象类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintAbstract</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">printWeak</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">printStrong</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>适配器继承抽象类而在内部实例化被适配类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里继承的是PrintAbstract抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintBannerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">PrintAbstract</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化原实现类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OriginBanner banner;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrintBannerAdapter</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.banner = <span class=\"keyword\">new</span> OriginBanner(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printWeak</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        banner.showWithParen();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printStrong</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        banner.showWithAster();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Adapter模式中的角色\"><a href=\"#Adapter模式中的角色\" class=\"headerlink\" title=\"Adapter模式中的角色\"></a>Adapter模式中的角色</h3><ul>\n<li>需求接口/抽象类PrintInterface、PrintAbstract：定义请求者调用的方法</li>\n<li>请求者Main</li>\n<li>被适配类OriginBanner</li>\n<li>适配器类PrintBannerAdapter：</li>\n</ul>\n<h3 id=\"Adapter模式的特点\"><a href=\"#Adapter模式的特点\" class=\"headerlink\" title=\"Adapter模式的特点\"></a>Adapter模式的特点</h3><p>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>\n<p>例如：在解决版本升级和兼容性问题时，可以使用Adapter模式来使新版本的接口兼容老版本的实现类</p>\n<h1 id=\"交给子类\"><a href=\"#交给子类\" class=\"headerlink\" title=\"交给子类\"></a>交给子类</h1><h2 id=\"Template-Method模式\"><a href=\"#Template-Method模式\" class=\"headerlink\" title=\"Template Method模式\"></a><span id=\"TemplateMethod\">Template Method模式</span></h2><p>模板模式–将具体处理交给子类</p>\n<h3 id=\"Template-Method模式中的角色\"><a href=\"#Template-Method模式中的角色\" class=\"headerlink\" title=\"Template Method模式中的角色\"></a>Template Method模式中的角色</h3><ul>\n<li>模板：抽象类AbstractDisplay</li>\n<li>具体类：抽象类的子类DisplayA和DisplayB</li>\n</ul>\n<p>模板：抽象类<code>AbstractDisplay.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractDisplay</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//调用print方法，并且不能被子类所重写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">formalPrint</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            print();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现类1：<code>DisplayA.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DisplayA</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractDisplay</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String string;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DisplayA</span><span class=\"params\">(String string)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.string = string;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> + string);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现类2：<code>DisplayB.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DisplayB</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractDisplay</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String string;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DisplayB</span><span class=\"params\">(String string)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.string = string;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(string + <span class=\"string\">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AbstractDisplay displayA = <span class=\"keyword\">new</span> DisplayA(<span class=\"string\">&quot;testA&quot;</span>);</span><br><span class=\"line\">        AbstractDisplay displayB = <span class=\"keyword\">new</span> DisplayB(<span class=\"string\">&quot;testB&quot;</span>);</span><br><span class=\"line\">        displayA.formalPrint();</span><br><span class=\"line\">        displayB.formalPrint();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Template-Method模式的特点\"><a href=\"#Template-Method模式的特点\" class=\"headerlink\" title=\"Template Method模式的特点\"></a>Template Method模式的特点</h3><ul>\n<li>父类的模板方法中已经定义了调用方法的逻辑关系（这里表现为formalPrint调用了5次print），无需在每个子类中再实现算法</li>\n<li>在上面的示例中不论是DisplayA还是DisplayB的实例都是保存在AbstractDisplay类型的变量中的，这样编写的优点是，即使没有指定子类的具体种类，程序也能正常工作</li>\n</ul>\n<p><strong>父类与子类之间协作的必要性</strong></p>\n<p>如果将更多的方法放在父类中会导致子类更轻松，但也降低了子类的灵活性；反之，父类实现方法过少，子类会变得臃肿不堪，还可能会导致大量的代码重复</p>\n<h2 id=\"Factory-Method模式\"><a href=\"#Factory-Method模式\" class=\"headerlink\" title=\"Factory Method模式\"></a><span id=\"FactoryMethod\">Factory Method模式</span></h2><p>工厂模式–将实例的生成交给子类</p>\n<h3 id=\"Factory-Method模式中的角色\"><a href=\"#Factory-Method模式中的角色\" class=\"headerlink\" title=\"Factory Method模式中的角色\"></a>Factory Method模式中的角色</h3><ul>\n<li>产品的抽象类Product：定义了实例所持有的接口</li>\n<li>工厂的抽象类Factory：不使用new创建实例，而是使用抽象方法createProduct来防止耦合</li>\n<li>产品实现类Product</li>\n<li>工厂实现类Factory</li>\n</ul>\n<p>下面的示例结合了模板模式来实现</p>\n<p>抽象类<code>Product.java</code>代表产品</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">use</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>抽象类<code>Factory.java</code>代表工厂</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Product <span class=\"title\">create</span><span class=\"params\">(String owner)</span></span>&#123;</span><br><span class=\"line\">        Product product = createProduct(owner);</span><br><span class=\"line\">        registerProduct(product);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//使用实例化的方法而不是直接new对象来减轻耦合性</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Product <span class=\"title\">createProduct</span><span class=\"params\">(String owner)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">registerProduct</span><span class=\"params\">(Product product)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>IDCard.java</code>实现产品类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IDCard</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String owner;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IDCard</span><span class=\"params\">(String owner)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;正在制作&quot;</span> + owner + <span class=\"string\">&quot;的ID卡&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.owner = owner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">use</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;正在使用&quot;</span> + owner + <span class=\"string\">&quot;的ID卡&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOwner</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> owner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>IdCardFactory.java</code>实现工厂类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IdCardFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">Factory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; owners = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"> \t<span class=\"comment\">//实现实例化对象的方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">createProduct</span><span class=\"params\">(String owner)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> IDCard(owner);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerProduct</span><span class=\"params\">(Product product)</span> </span>&#123;</span><br><span class=\"line\">        owners.add(((IDCard)product).getOwner());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">getOwners</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> owners;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Factory factory = <span class=\"keyword\">new</span> IdCardFactory();</span><br><span class=\"line\">        Product card1 = factory.create(<span class=\"string\">&quot;user1&quot;</span>);</span><br><span class=\"line\">        Product card2 = factory.create(<span class=\"string\">&quot;user2&quot;</span>);</span><br><span class=\"line\">        Product card3 = factory.create(<span class=\"string\">&quot;user3&quot;</span>);</span><br><span class=\"line\">        card1.use();</span><br><span class=\"line\">        card2.use();</span><br><span class=\"line\">        card3.use();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"工厂模式的作用\"><a href=\"#工厂模式的作用\" class=\"headerlink\" title=\"工厂模式的作用\"></a>工厂模式的作用</h3><p>父类决定实例的生成方式，但不决定需要生成的具体的类，这样可以将生成实例的框架与实际负责生成实例的类进行解耦</p>\n<h1 id=\"生成实例\"><a href=\"#生成实例\" class=\"headerlink\" title=\"生成实例\"></a>生成实例</h1><h2 id=\"Singleton模式\"><a href=\"#Singleton模式\" class=\"headerlink\" title=\"Singleton模式\"></a><span id=\"Singleton\">Singleton模式</span></h2><p>单例模式–只有一个实例</p>\n<p>目的：确保任何情况下只生成一个实例</p>\n<p>最大的特点：构造器私有</p>\n<h3 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h3><p>提前实例化对象，可能会浪费空间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hungry</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//加载类的时候就进行实例化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Hungry HUNGRY = <span class=\"keyword\">new</span> Hungry();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Hungry</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Hungry <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HUNGRY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h3><p>在获取实例时，对象不存在再实例化对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lazy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Lazy lazy;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Lazy</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Lazy <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//实例不存在则实例化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lazy == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            lazy = <span class=\"keyword\">new</span> Lazy();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内部类模式\"><a href=\"#内部类模式\" class=\"headerlink\" title=\"内部类模式\"></a>内部类模式</h3><p>能达到双检锁方式一样的功效，但实现更简单</p>\n<p>这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Holder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Holder</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Holder <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> InnerClass.HOLDER;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//内部类内实例化对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Holder HOLDER = <span class=\"keyword\">new</span> Holder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DCL懒汉式\"><a href=\"#DCL懒汉式\" class=\"headerlink\" title=\"DCL懒汉式\"></a>DCL懒汉式</h3><p>采用双锁机制，安全且在多线程情况下能保持高性能，但还是不能防止反射机制获取构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyDCL</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LazyDCL lazyDCL;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazyDCL</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazyDCL <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//实例不存在则实例化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lazyDCL == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//对类加锁，使其获得原子性</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (LazyDCL.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (lazyDCL == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    lazyDCL = <span class=\"keyword\">new</span> LazyDCL();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazyDCL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p>简洁，自动支持序列化机制，绝对防止多次实例化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span>  EnumSingle &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    <span class=\"comment\">//这里使用构造方法测试初始化次数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">EnumSingle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;init&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//这里是单例对象的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际使用方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">EnumSingle instance = EnumSingle.INSTANCE;</span><br><span class=\"line\">instance.sayHello();</span><br></pre></td></tr></table></figure>\n\n<p>测试获取多实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class=\"line\">    Constructor&lt;EnumSingle&gt; constructor = EnumSingle.class.getDeclaredConstructor(String.class, <span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">    constructor.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    EnumSingle instance = constructor.newInstance();</span><br><span class=\"line\">    System.out.println(instance);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：不允许利用反射获取实例：<code>java.lang.IllegalArgumentException: Cannot reflectively create enum objects</code></p>\n<h2 id=\"Prototype模式\"><a href=\"#Prototype模式\" class=\"headerlink\" title=\"Prototype模式\"></a><span id=\"Prototype\">Prototype模式</span></h2><p>原型模式–通过复制生成实例</p>\n<p>可以通过clone方法来实现实例克隆</p>\n<h3 id=\"Prototype模式中的角色\"><a href=\"#Prototype模式中的角色\" class=\"headerlink\" title=\"Prototype模式中的角色\"></a>Prototype模式中的角色</h3><ul>\n<li>产品接口Product继承了Cloneable标记型接口</li>\n<li>实现类UnderlinePen调用<code>clone()</code>方法实现实例克隆</li>\n</ul>\n<p>产品接口<code>Product.java</code>，<code>clone()</code>是Object类的方法，这里Product继承了Cloneable这个标记型接口，Product的实现类都可以调用clone方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Product</span> <span class=\"keyword\">extends</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">use</span><span class=\"params\">(String s)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">createClone</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现类<code>UnderlinePen.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnderlinePen</span> <span class=\"keyword\">implements</span> <span class=\"title\">Product</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String decoChar;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UnderlinePen</span><span class=\"params\">(String decoChar)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.decoChar = decoChar;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">use</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">createClone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Product p = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            p = (Product) clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Product pen = <span class=\"keyword\">new</span> UnderlinePen(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">        pen.use(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">        Product penClone = pen.createClone();</span><br><span class=\"line\">        penClone.use(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Prototype模式使用情景\"><a href=\"#Prototype模式使用情景\" class=\"headerlink\" title=\"Prototype模式使用情景\"></a>Prototype模式使用情景</h3><ul>\n<li>对象种类繁多，无法合并到同一个类中时</li>\n<li>难以根据类生成实例时</li>\n<li>想要解耦框架与生成的实例时</li>\n</ul>\n<h2 id=\"Builder模式\"><a href=\"#Builder模式\" class=\"headerlink\" title=\"Builder模式\"></a><span id=\"Builder\">Builder模式</span></h2><p>建造者模式–组装复杂的实例</p>\n<h3 id=\"Builder模式中的角色\"><a href=\"#Builder模式中的角色\" class=\"headerlink\" title=\"Builder模式中的角色\"></a>Builder模式中的角色</h3><ul>\n<li>监工Director：负责与Builder沟通，但不关心具体是哪一个Builder工作</li>\n<li>建造者抽象类Builder：类似于包工头，定义和协调需要完成的工作，具体工作由子类来完成</li>\n<li>建造者实现类TextBuilder和HtmlBuilder：完成每一项单个工作</li>\n<li>使用者：类似于业主，只与Director进行沟通，不关心底层的实现逻辑</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/IMG_20211006_165124.jpg\" style=\"zoom: 200%;\" />\n\n<p>监工类<code>Director.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Builder builder;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Director</span><span class=\"params\">(Builder builder)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.builder=builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">construct</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        String [] items1=<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;奏国歌&quot;</span>,<span class=\"string\">&quot;升国旗&quot;</span>&#125;;</span><br><span class=\"line\">        String [] items2=<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;观众鼓掌&quot;</span>,<span class=\"string\">&quot;有序撤离&quot;</span>&#125;;</span><br><span class=\"line\">        builder.makeTitle(<span class=\"string\">&quot;学生日记&quot;</span>);</span><br><span class=\"line\">        builder.makeString(<span class=\"string\">&quot;毕业典礼&quot;</span>);</span><br><span class=\"line\">        builder.makeItems(items1);</span><br><span class=\"line\">        builder.makeString(<span class=\"string\">&quot;典礼结束&quot;</span>);</span><br><span class=\"line\">        builder.makeItems(items2);</span><br><span class=\"line\">        builder.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>建造者抽象类<code>Builder.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">makeString</span><span class=\"params\">(String str)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">makeTitle</span><span class=\"params\">(String title)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">makeItems</span><span class=\"params\">(String[] items)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>建造者实现类1<code>TextBuilder.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    StringBuffer buffer = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">makeTitle</span><span class=\"params\">(String title)</span> </span>&#123;</span><br><span class=\"line\">        buffer.append(<span class=\"string\">&quot;=====================&quot;</span> + <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        buffer.append(<span class=\"string\">&quot;[&quot;</span> + title + <span class=\"string\">&quot;]&quot;</span> + <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">makeString</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        buffer.append(<span class=\"string\">&quot;@&quot;</span> + str + <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">makeItems</span><span class=\"params\">(String[] items)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; items.length; i++) &#123;</span><br><span class=\"line\">            buffer.append(<span class=\"string\">&quot;   .&quot;</span> + items[i] + <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        buffer.append(<span class=\"string\">&quot;=====================&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getResult</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buffer.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>建造者实现类2<code>HtmlBuilder.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HtmlBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String filename;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PrintWriter writer;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">makeTitle</span><span class=\"params\">(String title)</span> </span>&#123;</span><br><span class=\"line\">        filename = <span class=\"string\">&quot;D:\\\\&quot;</span> + title + <span class=\"string\">&quot;.html&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            writer = <span class=\"keyword\">new</span> PrintWriter(<span class=\"keyword\">new</span> FileWriter(filename));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        writer.println(<span class=\"string\">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;&quot;</span> + title + <span class=\"string\">&quot;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&quot;</span>);</span><br><span class=\"line\">        writer.println(<span class=\"string\">&quot;&lt;h1&gt;&quot;</span> + title + <span class=\"string\">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">makeString</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        writer.println(<span class=\"string\">&quot;&lt;p&gt;&quot;</span> + str + <span class=\"string\">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">makeItems</span><span class=\"params\">(String[] items)</span> </span>&#123;</span><br><span class=\"line\">        writer.println(<span class=\"string\">&quot;&lt;ul&gt;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; items.length; i++) &#123;</span><br><span class=\"line\">            writer.println(<span class=\"string\">&quot;&lt;li&gt;&quot;</span> + items[i] + <span class=\"string\">&quot;&lt;/li&gt;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        writer.println(<span class=\"string\">&quot;&lt;/ul&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        writer.println(<span class=\"string\">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getResult</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filename;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String choice = <span class=\"string\">&quot;text&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (choice.equals(<span class=\"string\">&quot;text&quot;</span>)) &#123;</span><br><span class=\"line\">            TextBuilder t = <span class=\"keyword\">new</span> TextBuilder();</span><br><span class=\"line\">            Director d = <span class=\"keyword\">new</span> Director(t);</span><br><span class=\"line\">            d.construct();</span><br><span class=\"line\">            System.out.println(t.getResult());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (choice.equals(<span class=\"string\">&quot;html&quot;</span>)) &#123;</span><br><span class=\"line\">            HtmlBuilder html = <span class=\"keyword\">new</span> HtmlBuilder();</span><br><span class=\"line\">            Director d = <span class=\"keyword\">new</span> Director(html);</span><br><span class=\"line\">            d.construct();</span><br><span class=\"line\">            System.out.println(html.getResult());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            usage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">usage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用 plain，编辑文本文件&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用 html，编辑HTML文件&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Builder模式的特点\"><a href=\"#Builder模式的特点\" class=\"headerlink\" title=\"Builder模式的特点\"></a>Builder模式的特点</h3><p>每个角色只与其相邻的角色有所沟通，使用者只知道Director，Director只知道Builder，Builder负责沟通协调各个具体的Builder，正是因为这种“不知道”的特点，才能够较为容易的替换组件，组件才具有高价值，我们需要时刻关注这种可替换性</p>\n<h2 id=\"AbstractFactory模式\"><a href=\"#AbstractFactory模式\" class=\"headerlink\" title=\"AbstractFactory模式\"></a><span id=\"AbstractFactory\">AbstractFactory模式</span></h2><p>抽象工厂模式–将关联零件组装成产品</p>\n<p>抽象类与工厂模式的结合</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg\"></p>\n<p>AbstractFactory模式的特点：</p>\n<ul>\n<li>易于增加具体的工厂</li>\n<li>难以增加新的零件，因为每增加一个抽象的零件，都需要在每一个具体的工厂中都添加对应具体的零件，已经编写完成的具体工厂越多，修改的工作量就会越大</li>\n</ul>\n<h1 id=\"分开考虑\"><a href=\"#分开考虑\" class=\"headerlink\" title=\"分开考虑\"></a>分开考虑</h1><h2 id=\"Bridge模式\"><a href=\"#Bridge模式\" class=\"headerlink\" title=\"Bridge模式\"></a><span id=\"Bridge\">Bridge模式</span></h2><p>桥接模式–将类的功能层次结构与实现层次结构分离</p>\n<p>这里有一篇详细介绍桥接模式的文章<a href=\"https://www.runoob.com/w3cnote/bridge-pattern2.html\">桥接模式 | 菜鸟教程 (runoob.com)</a></p>\n<h3 id=\"Bridge模式中的角色\"><a href=\"#Bridge模式中的角色\" class=\"headerlink\" title=\"Bridge模式中的角色\"></a>Bridge模式中的角色</h3><ul>\n<li>一个业务类Display：私有并调用接口类DisplayImpl的具体业务</li>\n<li>一个扩展抽象类CountDisplay：继承业务类Display，实现更加复杂的功能</li>\n<li>一个业务接口/抽象类DisplayImpl：来定义具体业务</li>\n<li>一个业务具体实现类StringDisplayImpl：继承或实现DisplayImpl，完成具体功能的实现</li>\n</ul>\n<h3 id=\"Bridge模式的特点\"><a href=\"#Bridge模式的特点\" class=\"headerlink\" title=\"Bridge模式的特点\"></a>Bridge模式的特点</h3><ul>\n<li>桥接模式即将抽象部分与它的实现部分分离开来，使他们都可以独立变化</li>\n<li>桥接模式将继承关系转化成关联关系（委托关系），它降低了类与类之间的耦合度，减少了系统中类的数量，也减少了代码量</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统，即分开后更容易扩展</li>\n<li>实现细节对客户不可见，可以对用户隐藏实现细节</li>\n</ul>\n<h2 id=\"Strategy模式\"><a href=\"#Strategy模式\" class=\"headerlink\" title=\"Strategy模式\"></a><span id=\"Strategy\">Strategy模式</span></h2><p>策略模式–整体的替换算法</p>\n<p>定义一个策略接口，然后创建不同的策略接口实现类来实现不同的策略</p>\n<h3 id=\"Strategy模式的角色\"><a href=\"#Strategy模式的角色\" class=\"headerlink\" title=\"Strategy模式的角色\"></a>Strategy模式的角色</h3><ul>\n<li>策略接口Strategy</li>\n<li>不同的策略实现类OperationAdd, OperationSubtract, OperationMultiply</li>\n<li>策略封装类Context</li>\n</ul>\n<p><code>Strategy.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Strategy</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">doOperation</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不同的实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationAdd</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">doOperation</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationSubtract</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">doOperation</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationMultiply</span> <span class=\"keyword\">implements</span> <span class=\"title\">Strategy</span></span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">doOperation</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> num1 * num2;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Context.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Strategy strategy;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span><span class=\"params\">(Strategy strategy)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.strategy = strategy;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">executeStrategy</span><span class=\"params\">(<span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> strategy.doOperation(num1, num2);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrategyPatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Context context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> OperationAdd());    </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;10 + 5 = &quot;</span> + context.executeStrategy(<span class=\"number\">10</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">      context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> OperationSubtract());      </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;10 - 5 = &quot;</span> + context.executeStrategy(<span class=\"number\">10</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">      context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> OperationMultiply());    </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;10 * 5 = &quot;</span> + context.executeStrategy(<span class=\"number\">10</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>特点：</p>\n<p>使用委托这种弱关联关系可以方便的整体替换算法</p>\n<h1 id=\"一致性\"><a href=\"#一致性\" class=\"headerlink\" title=\"一致性\"></a>一致性</h1><h2 id=\"Composite模式\"><a href=\"#Composite模式\" class=\"headerlink\" title=\"Composite模式\"></a><span id=\"Composite\">Composite模式</span></h2><p>组合模式–容器与内容的一致性</p>\n<p>将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20210817-composite-composite.svg\"></p>\n<h3 id=\"Composite模式的特点\"><a href=\"#Composite模式的特点\" class=\"headerlink\" title=\"Composite模式的特点\"></a>Composite模式的特点</h3><ul>\n<li>以递归的形式使得同一类或相近的类(如File和Directory都是文件系统中的子项)结合成树状结构</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>高层模块调用简单</li>\n<li>节点增加自由</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>违背了依赖倒置原则</li>\n</ul>\n<h2 id=\"Decorator模式\"><a href=\"#Decorator模式\" class=\"headerlink\" title=\"Decorator模式\"></a><span id=\"Decorator\">Decorator模式</span></h2><p>装饰器模式–装饰边框与装饰物的一致性</p>\n<h3 id=\"Decorator模式中的角色\"><a href=\"#Decorator模式中的角色\" class=\"headerlink\" title=\"Decorator模式中的角色\"></a>Decorator模式中的角色</h3><ul>\n<li>被装饰类的总接口/抽象类Shape</li>\n<li>装饰器的抽象类ShapeDecorator</li>\n<li>装饰器的实现类RedShapeDecorator</li>\n</ul>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20210420-decorator-1-decorator-decorator.svg\"></p>\n<p>==这里需要注意：装饰器的抽象类是实现并私有Shape类接口的，而装饰器的实现类继承抽象类，因此被装饰类和装饰器类的所有组件都具有一致性==</p>\n<h3 id=\"Decorator模式的特点\"><a href=\"#Decorator模式的特点\" class=\"headerlink\" title=\"Decorator模式的特点\"></a>Decorator模式的特点</h3><ul>\n<li>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能</li>\n<li>可以在不想增加很多子类的情况下扩展类时使用装饰器模式，动态的增加功能</li>\n</ul>\n<h1 id=\"访问数据结构\"><a href=\"#访问数据结构\" class=\"headerlink\" title=\"访问数据结构\"></a>访问数据结构</h1><h2 id=\"Visitor模式\"><a href=\"#Visitor模式\" class=\"headerlink\" title=\"Visitor模式\"></a><span id=\"Visitor\">Visitor模式</span></h2><p>以往如果我们要对一些数据进行处理，会在这些数据结构的类中编写处理方法，如果我们需要新增处理方法，就需要修改原来的数据结构类</p>\n<p>visitor模式旨在将数据结构与对他们的处理从一个类中分离出来</p>\n<h3 id=\"Visitor模式中的角色\"><a href=\"#Visitor模式中的角色\" class=\"headerlink\" title=\"Visitor模式中的角色\"></a>Visitor模式中的角色</h3><ul>\n<li>数据结构总接口ComputerPart：定义accept方法</li>\n<li>数据结构的具体实现类Computer、KeyBoard、Mouse、Monitor：实现accept方法–根据不同的业务逻辑调用visitor的visit()方法</li>\n<li>访问者接口或抽象类ComputerPartDisplayVisitor：定义数据处理方法</li>\n<li>访问者实现类ComputerPartVisitor：编写具体的数据处理方法</li>\n</ul>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/visitor_pattern_uml_diagram.jpg\"></p>\n<p>数据结构接口<code>ComputerPart.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ComputerPart</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(ComputerPartVisitor computerPartVisitor)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>各个数据结构实现类：调用不同visitor的visit()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Keyboard</span>  <span class=\"keyword\">implements</span> <span class=\"title\">ComputerPart</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(ComputerPartVisitor computerPartVisitor)</span> </span>&#123;</span><br><span class=\"line\">      computerPartVisitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Monitor</span>  <span class=\"keyword\">implements</span> <span class=\"title\">ComputerPart</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(ComputerPartVisitor computerPartVisitor)</span> </span>&#123;</span><br><span class=\"line\">      computerPartVisitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mouse</span>  <span class=\"keyword\">implements</span> <span class=\"title\">ComputerPart</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(ComputerPartVisitor computerPartVisitor)</span> </span>&#123;</span><br><span class=\"line\">      computerPartVisitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ComputerPart</span> </span>&#123;</span><br><span class=\"line\">   ComputerPart[] parts;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Computer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      parts = <span class=\"keyword\">new</span> ComputerPart[] &#123;<span class=\"keyword\">new</span> Mouse(), <span class=\"keyword\">new</span> Keyboard(), <span class=\"keyword\">new</span> Monitor()&#125;;      </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(ComputerPartVisitor computerPartVisitor)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; parts.length; i++) &#123;</span><br><span class=\"line\">         parts[i].accept(computerPartVisitor);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      computerPartVisitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问者接口<code>ComputerPartVisitor.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ComputerPartVisitor</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Computer computer)</span></span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Mouse mouse)</span></span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Keyboard keyboard)</span></span>;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Monitor monitor)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问者实现类<code>ComputerPartDisplayVisitor.java</code>：在这里实际操作数据类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComputerPartDisplayVisitor</span> <span class=\"keyword\">implements</span> <span class=\"title\">ComputerPartVisitor</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Computer computer)</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Displaying Computer.&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Mouse mouse)</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Displaying Mouse.&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Keyboard keyboard)</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Displaying Keyboard.&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Monitor monitor)</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Displaying Monitor.&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VisitorPatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      ComputerPart computer = <span class=\"keyword\">new</span> Computer();</span><br><span class=\"line\">      computer.accept(<span class=\"keyword\">new</span> ComputerPartDisplayVisitor());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Visitor模式的特点\"><a href=\"#Visitor模式的特点\" class=\"headerlink\" title=\"Visitor模式的特点\"></a>Visitor模式的特点</h3><ul>\n<li>具体数据元素的实现类调用accept()方法，而后又visitor的visit()方法：element接受visitor，而visitor又访问数据元素，这种消息分发的方式称为双重分发</li>\n<li>解决了数据结构和易变的操作耦合问题</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>符合单一职责原则</li>\n<li>易于添加visitor，优秀的扩展性和灵活性</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>具体元素对访问者公布细节，违反了迪米特原则</li>\n<li>违反了依赖倒置原则，依赖于具体类，而不是抽象类</li>\n<li>难以扩展数据元素：需要对所有visitor加以修改</li>\n</ul>\n<h2 id=\"Chain-of-Responsibility\"><a href=\"#Chain-of-Responsibility\" class=\"headerlink\" title=\"Chain of Responsibility\"></a><span id=\"ChainOfResponsibility\">Chain of Responsibility</span></h2><p>责任链模式–推卸责任</p>\n<p>就像我们有时去办理业务，各个部门之间的会互相推卸责任，各自只处理自身所负责的一部分业务</p>\n<h3 id=\"Chain-of-Responsibility中的角色\"><a href=\"#Chain-of-Responsibility中的角色\" class=\"headerlink\" title=\"Chain of Responsibility中的角色\"></a>Chain of Responsibility中的角色</h3><ul>\n<li>抽象类业务类AbstractLogger</li>\n<li>业务类实现类ConsoleLogger、ErrorLogger、FileLogger</li>\n</ul>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/2021-chain-of-responsibility.svg\"></p>\n<p>抽象类业务类<code>AbstractLogger.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractLogger</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> INFO = <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DEBUG = <span class=\"number\">2</span>;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ERROR = <span class=\"number\">3</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> level;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">//责任链中的下一个元素</span></span><br><span class=\"line\">   <span class=\"keyword\">protected</span> AbstractLogger nextLogger;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNextLogger</span><span class=\"params\">(AbstractLogger nextLogger)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.nextLogger = nextLogger;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logMessage</span><span class=\"params\">(<span class=\"keyword\">int</span> level, String message)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.level &lt;= level)&#123;</span><br><span class=\"line\">         write(message);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(nextLogger !=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         nextLogger.logMessage(level, message);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String message)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不同级别的Logger实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsoleLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLogger</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConsoleLogger</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String message)</span> </span>&#123;    </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Standard Console::Logger: &quot;</span> + message);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ErrorLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLogger</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ErrorLogger</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String message)</span> </span>&#123;    </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Error Console::Logger: &quot;</span> + message);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLogger</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FileLogger</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.level = level;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String message)</span> </span>&#123;    </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;File::Logger: &quot;</span> + message);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChainPatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//创建责任链</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AbstractLogger <span class=\"title\">getChainOfLoggers</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      AbstractLogger errorLogger = <span class=\"keyword\">new</span> ErrorLogger(AbstractLogger.ERROR);</span><br><span class=\"line\">      AbstractLogger fileLogger = <span class=\"keyword\">new</span> FileLogger(AbstractLogger.DEBUG);</span><br><span class=\"line\">      AbstractLogger consoleLogger = <span class=\"keyword\">new</span> ConsoleLogger(AbstractLogger.INFO);</span><br><span class=\"line\"> </span><br><span class=\"line\">      errorLogger.setNextLogger(fileLogger);</span><br><span class=\"line\">      fileLogger.setNextLogger(consoleLogger);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> errorLogger;  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      AbstractLogger loggerChain = getChainOfLoggers();</span><br><span class=\"line\"> </span><br><span class=\"line\">      loggerChain.logMessage(AbstractLogger.INFO, <span class=\"string\">&quot;This is an information.&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      loggerChain.logMessage(AbstractLogger.DEBUG, </span><br><span class=\"line\">         <span class=\"string\">&quot;This is a debug level information.&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      loggerChain.logMessage(AbstractLogger.ERROR, </span><br><span class=\"line\">         <span class=\"string\">&quot;This is an error information.&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Chain-of-Responsibility的特点\"><a href=\"#Chain-of-Responsibility的特点\" class=\"headerlink\" title=\"Chain of Responsibility的特点\"></a>Chain of Responsibility的特点</h3><ul>\n<li>弱化了发送请求的类和处理业务的类之间的关系</li>\n<li>可以动态地改变责任链</li>\n<li>每个业务类都专注于自己的工作</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>降低耦合度</li>\n<li>简化了对象</li>\n<li>增强给对象指派职责的灵活性</li>\n<li>便于增添新的业务类</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>不能保证请求一定会被接收</li>\n<li>系统性能稍微降低</li>\n<li>运行过程复杂，不容易排错</li>\n</ul>\n<h1 id=\"简单化\"><a href=\"#简单化\" class=\"headerlink\" title=\"简单化\"></a>简单化</h1><h2 id=\"Facade模式\"><a href=\"#Facade模式\" class=\"headerlink\" title=\"Facade模式\"></a><span id=\"Facade\">Facade模式</span></h2><p>外观模式–简单窗口</p>\n<h3 id=\"Facade模式的角色\"><a href=\"#Facade模式的角色\" class=\"headerlink\" title=\"Facade模式的角色\"></a>Facade模式的角色</h3><ul>\n<li>外部调用的窗口类：ShapeMaker</li>\n<li>业务接口类：Shape</li>\n<li>业务实现类：Circle、Rectangel、Square</li>\n</ul>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-facade.svg\"></p>\n<h3 id=\"Facade模式的特点\"><a href=\"#Facade模式的特点\" class=\"headerlink\" title=\"Facade模式的特点\"></a>Facade模式的特点</h3><p>外观模式隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。</p>\n<p>优点：</p>\n<ul>\n<li>减少系统的相互依赖，接口变少，调用方便</li>\n<li>提高灵活性</li>\n<li>提高安全性</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>不符合开闭原则，修改组件麻烦</li>\n</ul>\n<h2 id=\"Mediator模式\"><a href=\"#Mediator模式\" class=\"headerlink\" title=\"Mediator模式\"></a><span id=\"Mediator\">Mediator模式</span></h2><p>中介者模式–只有一个仲裁者</p>\n<h3 id=\"Mediator模式中的角色\"><a href=\"#Mediator模式中的角色\" class=\"headerlink\" title=\"Mediator模式中的角色\"></a>Mediator模式中的角色</h3><ul>\n<li>中介者抽象类Mediator</li>\n<li>中介者实现类ConcretMediator</li>\n<li>同事类接口Colleague</li>\n<li>同事类实现类ConcreteColleage</li>\n</ul>\n<p><img src=\"https://img2018.cnblogs.com/blog/1018770/201906/1018770-20190601152147644-1307912298.png\"></p>\n<h3 id=\"Mediator模式的特点\"><a href=\"#Mediator模式的特点\" class=\"headerlink\" title=\"Mediator模式的特点\"></a>Mediator模式的特点</h3><ul>\n<li>集中业务逻辑与中介者类中，各个同事类之间的交互集中于调用Mediator类中的实现方法</li>\n<li>各对象不需要显式地相互引用，从而使其耦合松散</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>降低了类的复杂度，将一对多转化为了一对一</li>\n<li>各个类之间解耦</li>\n<li>符合迪米特原则</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>中介者类代码庞大且不易于维护</li>\n</ul>\n<h1 id=\"管理状态\"><a href=\"#管理状态\" class=\"headerlink\" title=\"管理状态\"></a>管理状态</h1><h2 id=\"Observer模式\"><a href=\"#Observer模式\" class=\"headerlink\" title=\"Observer模式\"></a><span id=\"Observer\">Observer模式</span></h2><p>观察者模式–发送状态变化通知</p>\n<p>另一个称呼为Publish-Subscribe模式，即发布订阅</p>\n<h3 id=\"Observer模式中的对象\"><a href=\"#Observer模式中的对象\" class=\"headerlink\" title=\"Observer模式中的对象\"></a>Observer模式中的对象</h3><ul>\n<li>主题类Subject</li>\n<li>观察者抽象类Observer</li>\n<li>观察者实现类BinaryObserver、OctalObserver、HexaObserver</li>\n</ul>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/observer_pattern_uml_diagram.jpg\"></p>\n<p>主题类<code>Subject.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">private</span> List&lt;Observer&gt; observers </span><br><span class=\"line\">      = <span class=\"keyword\">new</span> ArrayList&lt;Observer&gt;();</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> state;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//更改状态后调用通知所有的观察者方法</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setState</span><span class=\"params\">(<span class=\"keyword\">int</span> state)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state = state;</span><br><span class=\"line\">      notifyAllObservers();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//添加观察者</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Observer observer)</span></span>&#123;</span><br><span class=\"line\">      observers.add(observer);      </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//遍历通知所有观察者</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyAllObservers</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (Observer observer : observers) &#123;</span><br><span class=\"line\">         observer.update();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>观察者抽象类<code>Observer.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> Subject subject;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不同的观察者实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BinaryObserver</span><span class=\"params\">(Subject subject)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subject = subject;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subject.attach(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println( <span class=\"string\">&quot;Binary String: &quot;</span> </span><br><span class=\"line\">      + Integer.toBinaryString( subject.getState() ) ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OctalObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OctalObserver</span><span class=\"params\">(Subject subject)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subject = subject;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subject.attach(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     System.out.println( <span class=\"string\">&quot;Octal String: &quot;</span> </span><br><span class=\"line\">     + Integer.toOctalString( subject.getState() ) ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HexaObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HexaObserver</span><span class=\"params\">(Subject subject)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subject = subject;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.subject.attach(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println( <span class=\"string\">&quot;Hex String: &quot;</span> </span><br><span class=\"line\">      + Integer.toHexString( subject.getState() ).toUpperCase() ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverPatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Subject subject = <span class=\"keyword\">new</span> Subject();</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">new</span> HexaObserver(subject);</span><br><span class=\"line\">      <span class=\"keyword\">new</span> OctalObserver(subject);</span><br><span class=\"line\">      <span class=\"keyword\">new</span> BinaryObserver(subject);</span><br><span class=\"line\"> </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;First state change: 15&quot;</span>);   </span><br><span class=\"line\">      subject.setState(<span class=\"number\">15</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Second state change: 10&quot;</span>);  </span><br><span class=\"line\">      subject.setState(<span class=\"number\">10</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Observer模式的特点\"><a href=\"#Observer模式的特点\" class=\"headerlink\" title=\"Observer模式的特点\"></a>Observer模式的特点</h3><p>当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式</p>\n<p>优点：</p>\n<ul>\n<li>观察者和被观察者通过抽象类耦合</li>\n<li>建立了一套触发机制</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>如果一个被观察者有太多直接和简洁的观察者，通知所有的观察者会花费很多时间</li>\n<li>只能通知被观察者发生了变化，而不能通知其发生了怎样的变化</li>\n</ul>\n<h2 id=\"Memento模式\"><a href=\"#Memento模式\" class=\"headerlink\" title=\"Memento模式\"></a><span id = \"Memento\">Memento模式</span></h2><p>备忘录模式–保存对象状态</p>\n<p>使用Memento模式可以实现应用程序的以下功能：</p>\n<ul>\n<li>撤销</li>\n<li>重做</li>\n<li>历史记录</li>\n<li>快照</li>\n</ul>\n<h3 id=\"Memento模式中的角色\"><a href=\"#Memento模式中的角色\" class=\"headerlink\" title=\"Memento模式中的角色\"></a>Memento模式中的角色</h3><ul>\n<li>状态类Memento</li>\n<li>业务类Originator</li>\n<li>状态列表类CareTaker</li>\n</ul>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/memento_pattern_uml_diagram.jpg\"></p>\n<p>状态类<code>Memento.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Memento</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String state;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Memento</span><span class=\"params\">(String state)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state = state;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getState</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务类<code>Originator.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Originator</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String state;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setState</span><span class=\"params\">(String state)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state = state;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getState</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Memento <span class=\"title\">saveStateToMemento</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Memento(state);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getStateFromMemento</span><span class=\"params\">(Memento Memento)</span></span>&#123;</span><br><span class=\"line\">      state = Memento.getState();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>状态列表类<code>CareTaker.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CareTaker</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> List&lt;Memento&gt; mementoList = <span class=\"keyword\">new</span> ArrayList&lt;Memento&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Memento state)</span></span>&#123;</span><br><span class=\"line\">      mementoList.add(state);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Memento <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mementoList.get(index);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MementoPatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Originator originator = <span class=\"keyword\">new</span> Originator();</span><br><span class=\"line\">      CareTaker careTaker = <span class=\"keyword\">new</span> CareTaker();</span><br><span class=\"line\">      originator.setState(<span class=\"string\">&quot;State #1&quot;</span>);</span><br><span class=\"line\">      originator.setState(<span class=\"string\">&quot;State #2&quot;</span>);</span><br><span class=\"line\">      careTaker.add(originator.saveStateToMemento());</span><br><span class=\"line\">      originator.setState(<span class=\"string\">&quot;State #3&quot;</span>);</span><br><span class=\"line\">      careTaker.add(originator.saveStateToMemento());</span><br><span class=\"line\">      originator.setState(<span class=\"string\">&quot;State #4&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Current State: &quot;</span> + originator.getState());    </span><br><span class=\"line\">      originator.getStateFromMemento(careTaker.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;First saved State: &quot;</span> + originator.getState());</span><br><span class=\"line\">      originator.getStateFromMemento(careTaker.get(<span class=\"number\">1</span>));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Second saved State: &quot;</span> + originator.getState());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Memento模式的特点\"><a href=\"#Memento模式的特点\" class=\"headerlink\" title=\"Memento模式的特点\"></a>Memento模式的特点</h3><ul>\n<li>在不破坏封装的情况下捕获一个对象的内部状态，并在这个对象之外保存状态，以便恢复</li>\n<li>通过一个专门的备忘录类来专门存储对象状态</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>提供了可以恢复状态的机制，可以方便的回退到某个历史状态</li>\n<li>实现信息的封装，用户不需要关心保存细节</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>消耗内存</li>\n<li>如果需要持久化，还需要考虑有效期和对应应用程序版本的问题</li>\n</ul>\n<h2 id=\"State模式\"><a href=\"#State模式\" class=\"headerlink\" title=\"State模式\"></a><span id=\"State\">State模式</span></h2><p>状态模式–用类表示状态</p>\n<p>不使用State模式的情况下，如果我们要判断对象处于哪一个状态，往往需要编写许多if_else语句来进行判断，而使用类来表示状态可以解决这一问题</p>\n<h3 id=\"State模式中的角色\"><a href=\"#State模式中的角色\" class=\"headerlink\" title=\"State模式中的角色\"></a>State模式中的角色</h3><ul>\n<li>状态类接口State</li>\n<li>状态实现类StartState、StopState</li>\n<li>状态管理类Context</li>\n</ul>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/state_pattern_uml_diagram.png\"></p>\n<p>状态类接口<code>State.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAction</span><span class=\"params\">(Context context)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不同的状态类实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StartState</span> <span class=\"keyword\">implements</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAction</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Player is in start state&quot;</span>);</span><br><span class=\"line\">      context.setState(<span class=\"keyword\">this</span>); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;Start State&quot;</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StopState</span> <span class=\"keyword\">implements</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAction</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Player is in stop state&quot;</span>);</span><br><span class=\"line\">      context.setState(<span class=\"keyword\">this</span>); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;Stop State&quot;</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>状态管理类<code>Context.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> State state;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      state = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setState</span><span class=\"params\">(State state)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state = state;     </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getState</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StatePatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Context context = <span class=\"keyword\">new</span> Context();</span><br><span class=\"line\"> </span><br><span class=\"line\">      StartState startState = <span class=\"keyword\">new</span> StartState();</span><br><span class=\"line\">      startState.doAction(context);</span><br><span class=\"line\"> </span><br><span class=\"line\">      System.out.println(context.getState().toString());</span><br><span class=\"line\"> </span><br><span class=\"line\">      StopState stopState = <span class=\"keyword\">new</span> StopState();</span><br><span class=\"line\">      stopState.doAction(context);</span><br><span class=\"line\"> </span><br><span class=\"line\">      System.out.println(context.getState().toString());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"State模式的特点\"><a href=\"#State模式的特点\" class=\"headerlink\" title=\"State模式的特点\"></a>State模式的特点</h3><p>优点：</p>\n<ul>\n<li>封装了转换规则，易于增加新的状态</li>\n<li>枚举所有可能的状态</li>\n<li>将所有与某个状态有关的操作全部放到某个类中，只需要改变状态的类型就能改变状态的行为</li>\n<li>可以让多个环境对象共享一个状态对象</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>增加了系统类和对象的个数</li>\n<li>不易添加新的状态方法</li>\n<li>对开闭原则的支持性不好</li>\n</ul>\n<h1 id=\"避免浪费\"><a href=\"#避免浪费\" class=\"headerlink\" title=\"避免浪费\"></a>避免浪费</h1><h2 id=\"Flyweight模式\"><a href=\"#Flyweight模式\" class=\"headerlink\" title=\"Flyweight模式\"></a><span id=\"Flyweight\">Flyweight模式</span></h2><p>享元模式–共享对象，避免浪费</p>\n<p>通过尽量共享实例来避免new新的实例</p>\n<h3 id=\"Flyweight模式中的角色\"><a href=\"#Flyweight模式中的角色\" class=\"headerlink\" title=\"Flyweight模式中的角色\"></a>Flyweight模式中的角色</h3><ul>\n<li>工厂类ShapeFactory</li>\n<li>业务类接口Shape</li>\n<li>业务实现类Circle</li>\n</ul>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-fiyweight.svg\"></p>\n<p>工厂类<code>ShapeFactory.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShapeFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用HashMap保存已经实例化的对象列表</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> HashMap&lt;String, Shape&gt; circleMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Shape <span class=\"title\">getCircle</span><span class=\"params\">(String color)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//尝试从列表中获取已经实例化的对象</span></span><br><span class=\"line\">      Circle circle = (Circle)circleMap.get(color);</span><br><span class=\"line\"> \t  <span class=\"comment\">//如果无法获取对象再进行实例化</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(circle == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">         circle = <span class=\"keyword\">new</span> Circle(color);</span><br><span class=\"line\">         circleMap.put(color, circle);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Creating circle of color : &quot;</span> + color);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> circle;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务类接口<code>Shape.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务实现类<code>Circle.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String color;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> radius;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Circle</span><span class=\"params\">(String color)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.color = color;     </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRadius</span><span class=\"params\">(<span class=\"keyword\">int</span> radius)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Circle: Draw() [Color : &quot;</span> + color </span><br><span class=\"line\">         +<span class=\"string\">&quot;, x : &quot;</span> + x +<span class=\"string\">&quot;, y :&quot;</span> + y +<span class=\"string\">&quot;, radius :&quot;</span> + radius);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyweightPatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String colors[] = </span><br><span class=\"line\">      &#123; <span class=\"string\">&quot;Red&quot;</span>, <span class=\"string\">&quot;Green&quot;</span>, <span class=\"string\">&quot;Blue&quot;</span>, <span class=\"string\">&quot;White&quot;</span>, <span class=\"string\">&quot;Black&quot;</span> &#125;;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; ++i) &#123;</span><br><span class=\"line\">         Circle circle = </span><br><span class=\"line\">            (Circle)ShapeFactory.getCircle(getRandomColor());</span><br><span class=\"line\">         circle.setX(getRandomX());</span><br><span class=\"line\">         circle.setY(getRandomY());</span><br><span class=\"line\">         circle.setRadius(<span class=\"number\">100</span>);</span><br><span class=\"line\">         circle.draw();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getRandomColor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> colors[(<span class=\"keyword\">int</span>)(Math.random()*colors.length)];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandomX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)(Math.random()*<span class=\"number\">100</span> );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandomY</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)(Math.random()*<span class=\"number\">100</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Flyweight模式的特点\"><a href=\"#Flyweight模式的特点\" class=\"headerlink\" title=\"Flyweight模式的特点\"></a>Flyweight模式的特点</h3><ul>\n<li>如果要更改被共享的对象，就会对多个引用处造成影响</li>\n<li>应该被共享的信息称为固有信息(Intrinsic信息)，不应当被共享的信息被称为外部信息(Extrinsic信息)</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>减少了对象的创建，降低系统内存消耗，提高效率</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>提高了系统的复杂度，需要分理出外部状态和固有状态，否则会造成系统混乱</li>\n</ul>\n<h2 id=\"Proxy模式\"><a href=\"#Proxy模式\" class=\"headerlink\" title=\"Proxy模式\"></a><span id=\"Proxy\">Proxy模式</span></h2><p>代理模式–只在必要时生成实例</p>\n<h3 id=\"Proxy模式中的对象\"><a href=\"#Proxy模式中的对象\" class=\"headerlink\" title=\"Proxy模式中的对象\"></a>Proxy模式中的对象</h3><ul>\n<li>对象接口Image</li>\n<li>真实的对象RealImage</li>\n<li>代理人ProxyImage</li>\n</ul>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20201015-proxy.svg\"></p>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>对象接口<code>Image.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Image</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>真实对象<code>RealImage.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealImage</span> <span class=\"keyword\">implements</span> <span class=\"title\">Image</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">private</span> String fileName;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RealImage</span><span class=\"params\">(String fileName)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fileName = fileName;</span><br><span class=\"line\">      loadFromDisk(fileName);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Displaying &quot;</span> + fileName);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadFromDisk</span><span class=\"params\">(String fileName)</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Loading &quot;</span> + fileName);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代理对象<code>ProxyImage.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyImage</span> <span class=\"keyword\">implements</span> <span class=\"title\">Image</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">private</span> RealImage realImage;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String fileName;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyImage</span><span class=\"params\">(String fileName)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fileName = fileName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//只在实际执行realImage方法时才会实例化RealImage对象</span></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(realImage == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         realImage = <span class=\"keyword\">new</span> RealImage(fileName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      realImage.display();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyPatternDemo</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Image image = <span class=\"keyword\">new</span> ProxyImage(<span class=\"string\">&quot;test_10mb.jpg&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 图像将从磁盘加载</span></span><br><span class=\"line\">      image.display(); </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 图像不需要从磁盘加载</span></span><br><span class=\"line\">      image.display();  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h3><p>使用静态代理时，每个代理类只能为一个接口服务，这样在开发中必然会出现许多的代理类</p>\n<p>动态代理就能够实现通过一个代理类完成全部的代理功能</p>\n<p>这里使用Jdk代理实现</p>\n<p>仅修改代理类，实现InvocationHandler接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(Object targetObject)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target=targetObject;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Proxy.newProxyInstance(targetObject.getClass().getClassLoader(),</span><br><span class=\"line\">                targetObject.getClass().getInterfaces(),<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Proxying：&quot;</span> + proxy.getClass().getName());</span><br><span class=\"line\">        Object result = method.invoke(target, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;执行了：&quot;</span> + method.getName() + <span class=\"string\">&quot; 返回：&quot;</span> + result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdkProxyDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException </span>&#123;</span><br><span class=\"line\">        ImageHandler imageHandler = <span class=\"keyword\">new</span> ImageHandler();</span><br><span class=\"line\">        <span class=\"comment\">//传入需要被代理的实例</span></span><br><span class=\"line\">        Image instance = (Image) imageHandler.newProxyInstance(<span class=\"keyword\">new</span> RealImage(<span class=\"string\">&quot;1.jpg&quot;</span>));</span><br><span class=\"line\">        instance.display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Proxy模式的特点\"><a href=\"#Proxy模式的特点\" class=\"headerlink\" title=\"Proxy模式的特点\"></a>Proxy模式的特点</h3><p>在我们想要访问一个类时添加一些控制，增加中间层</p>\n<p>优点：</p>\n<ul>\n<li>职责清晰</li>\n<li>高扩展性</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>代理对象的存在导致请求处理速度变慢</li>\n</ul>\n<h1 id=\"用类来表现\"><a href=\"#用类来表现\" class=\"headerlink\" title=\"用类来表现\"></a>用类来表现</h1><h2 id=\"Command模式\"><a href=\"#Command模式\" class=\"headerlink\" title=\"Command模式\"></a><span id=\"Command\">Command模式</span></h2><p>命令模式–命令也是类</p>\n<p>将一个请求封装成一个对象，可以记录用户的请求来恢复或重做请求等</p>\n<h3 id=\"Command模式中的对象\"><a href=\"#Command模式中的对象\" class=\"headerlink\" title=\"Command模式中的对象\"></a>Command模式中的对象</h3><ul>\n<li>真实的请求类Stock</li>\n<li>请求接口Order</li>\n<li>请求实现类BuyStock、SellStock：调用Stock的方法</li>\n<li>请求管理类Broker</li>\n</ul>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/20210830-command-1-command-1.svg\"></p>\n<p>请求接口<code>Order.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Order</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>真实请求类<code>Stock.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stock</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String name = <span class=\"string\">&quot;ABC&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> quantity = <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buy</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Stock [ Name: &quot;</span>+name+<span class=\"string\">&quot;, </span></span><br><span class=\"line\"><span class=\"string\">         Quantity: &quot;</span> + quantity +<span class=\"string\">&quot; ] bought&quot;</span>);</span><br><span class=\"line\">      quantity++;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sell</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Stock [ Name: &quot;</span>+name+<span class=\"string\">&quot;, </span></span><br><span class=\"line\"><span class=\"string\">         Quantity: &quot;</span> + quantity +<span class=\"string\">&quot; ] sold&quot;</span>);</span><br><span class=\"line\">      quantity--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不同的请求实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuyStock</span> <span class=\"keyword\">implements</span> <span class=\"title\">Order</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Stock abcStock;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BuyStock</span><span class=\"params\">(Stock abcStock)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.abcStock = abcStock;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      abcStock.buy();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SellStock</span> <span class=\"keyword\">implements</span> <span class=\"title\">Order</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Stock abcStock;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SellStock</span><span class=\"params\">(Stock abcStock)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.abcStock = abcStock;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      abcStock.sell();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>命令调用类<code>Broker.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Broker</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> List&lt;Order&gt; orderList = <span class=\"keyword\">new</span> ArrayList&lt;Order&gt;(); </span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">takeOrder</span><span class=\"params\">(Order order)</span></span>&#123;</span><br><span class=\"line\">      orderList.add(order);      </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">placeOrders</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (Order order : orderList) &#123;</span><br><span class=\"line\">         order.execute();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      orderList.clear();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommandPatternDemo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Stock abcStock = <span class=\"keyword\">new</span> Stock();</span><br><span class=\"line\"> </span><br><span class=\"line\">      BuyStock buyStockOrder = <span class=\"keyword\">new</span> BuyStock(abcStock);</span><br><span class=\"line\">      SellStock sellStockOrder = <span class=\"keyword\">new</span> SellStock(abcStock);</span><br><span class=\"line\"> </span><br><span class=\"line\">      Broker broker = <span class=\"keyword\">new</span> Broker();</span><br><span class=\"line\">      broker.takeOrder(buyStockOrder);</span><br><span class=\"line\">      broker.takeOrder(sellStockOrder);</span><br><span class=\"line\"> </span><br><span class=\"line\">      broker.placeOrders();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Command模式的特点\"><a href=\"#Command模式的特点\" class=\"headerlink\" title=\"Command模式的特点\"></a>Command模式的特点</h3><ul>\n<li>请求执行顺序：调用者-&gt;命令-&gt;接受者，实际完成具体功能的是接收者</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>降低系统耦合度</li>\n<li>易于添加新的命令</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>可能会导致系统中命令类过多</li>\n</ul>\n<h2 id=\"Interpreter模式\"><a href=\"#Interpreter模式\" class=\"headerlink\" title=\"Interpreter模式\"></a><span id=\"Interpreter\">Interpreter模式</span></h2><p>解释器模式–语法规则也是类</p>\n<p>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子</p>\n<h3 id=\"Interpreter模式中的对象\"><a href=\"#Interpreter模式中的对象\" class=\"headerlink\" title=\"Interpreter模式中的对象\"></a>Interpreter模式中的对象</h3><ul>\n<li>表达式接口</li>\n<li>根据具体需求实现的不同表达式</li>\n</ul>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/interpreter_pattern_uml_diagram.jpg\"></p>\n<p>==这里仅给出一个示例，具体的应用结构不一定需要与示例保证完全一致==</p>\n<p>表达式接口<code>Expression.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Expression</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interpret</span><span class=\"params\">(String context)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不同类型的表达式：其中TerminalExpression用来存储单个的词语，OrExpression和AndExpression用来记录词语之间的并交关系</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TerminalExpression</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">private</span> String data;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TerminalExpression</span><span class=\"params\">(String data)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.data = data; </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interpret</span><span class=\"params\">(String context)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(context.contains(data))&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrExpression</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"keyword\">private</span> Expression expr1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Expression expr2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OrExpression</span><span class=\"params\">(Expression expr1, Expression expr2)</span> </span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.expr1 = expr1;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.expr2 = expr2;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interpret</span><span class=\"params\">(String context)</span> </span>&#123;      </span><br><span class=\"line\">      <span class=\"keyword\">return</span> expr1.interpret(context) || expr2.interpret(context);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndExpression</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">   <span class=\"keyword\">private</span> Expression expr1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Expression expr2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AndExpression</span><span class=\"params\">(Expression expr1, Expression expr2)</span> </span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.expr1 = expr1;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.expr2 = expr2;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interpret</span><span class=\"params\">(String context)</span> </span>&#123;      </span><br><span class=\"line\">      <span class=\"keyword\">return</span> expr1.interpret(context) &amp;&amp; expr2.interpret(context);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterpreterPatternDemo</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">//规则：Robert 和 John 是男性</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Expression <span class=\"title\">getMaleExpression</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      Expression robert = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">&quot;Robert&quot;</span>);</span><br><span class=\"line\">      Expression john = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">&quot;John&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OrExpression(robert, john);    </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">//规则：Julie 是一个已婚的女性</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Expression <span class=\"title\">getMarriedWomanExpression</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      Expression julie = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">&quot;Julie&quot;</span>);</span><br><span class=\"line\">      Expression married = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">&quot;Married&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AndExpression(julie, married);    </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Expression isMale = getMaleExpression();</span><br><span class=\"line\">      Expression isMarriedWoman = getMarriedWomanExpression();</span><br><span class=\"line\"> </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;John is male? &quot;</span> + isMale.interpret(<span class=\"string\">&quot;John&quot;</span>));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Julie is a married women? &quot;</span> </span><br><span class=\"line\">      + isMarriedWoman.interpret(<span class=\"string\">&quot;Married Julie&quot;</span>));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Interpreter模式的特点\"><a href=\"#Interpreter模式的特点\" class=\"headerlink\" title=\"Interpreter模式的特点\"></a>Interpreter模式的特点</h3><ul>\n<li>可以将一个需要解释执行的语言中的句子表示为一个抽象语法树</li>\n<li>一些重复出现的问题可以用一种简单的语言来进行表达</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>可扩展性好，灵活</li>\n<li>易于实现简单逻辑表达</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>可用场景少，Java中可用expression4替代</li>\n<li>难以进行语法维护</li>\n<li>引发类膨胀</li>\n</ul>\n","categories":["杂项"]},{"title":"SpringBoot","url":"/2021/08/17/JavaEE/SpringBoot/","content":"<p><strong>微服务阶段</strong></p>\n<p>Springboot：jar包，内嵌tomcat</p>\n<a id=\"more\"></a>\n\n<p><strong>最大特点：自动装配</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210817174815920.png\" alt=\"image-20210817174815920\"></p>\n<h1 id=\"Springboot原理简析\"><a href=\"#Springboot原理简析\" class=\"headerlink\" title=\"Springboot原理简析\"></a>Springboot原理简析</h1><h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><ol>\n<li>从官网<a href=\"https://start.spring.io/\">Spring Initializr</a>进行配置并下载压缩文件</li>\n<li>idea直接集成，实现原理同上</li>\n</ol>\n<h2 id=\"Springboot新功能\"><a href=\"#Springboot新功能\" class=\"headerlink\" title=\"Springboot新功能\"></a>Springboot新功能</h2><ul>\n<li><p>自动配置好SpringMVC</p>\n<ul>\n<li>引入SpringMVC全套组件</li>\n<li>自动配好SpringMVC常用组件（功能）</li>\n</ul>\n</li>\n<li><p>自动配号Web常见功能：如字符集编码问题</p>\n</li>\n<li><p>默认包结构</p>\n<ul>\n<li><p>主程序所在包及以下的所有子包内的组件会被默认扫描出来</p>\n</li>\n<li><p>无需手动配置包路径</p>\n</li>\n<li><p>如果要在上层目录也进行扫描，则可以配置注解属性</p>\n<p><code>@SpringBootApplication(scanBasePackages = &quot;com.lan5th&quot;)</code></p>\n</li>\n</ul>\n</li>\n<li><p>各种配置拥有默认值</p>\n<ul>\n<li>默认配置最终映射到MultipartProperties</li>\n<li>配置文件的值最终绑定到每个类上，并在容器中创建对象</li>\n</ul>\n</li>\n<li><p>按需加载所有自动配置项</p>\n<ul>\n<li>starter启动器，引入哪些启动器就启动哪些场景的依赖</li>\n<li>springboot所有自动配置功能都在<code>spring-boot-autoconfigure</code>包中</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"自动装配原理\"><a href=\"#自动装配原理\" class=\"headerlink\" title=\"自动装配原理\"></a>自动装配原理</h2><ul>\n<li><p><code>@SpringBootApplication</code>标识这个类是springboot的应用</p>\n<ul>\n<li>springboot项目启动时会从<code>spring-boot-autoconfigure-2.x.x.jar\\META-INF\\spring.factories</code>下自动获取指定的值</li>\n<li>它会把所有需要导入的组件一类名的方式返回，以添加到springboot容器中</li>\n<li>这个文件中存在大量xxxAutoConfigiration的类名，提供了当前starter所需的所有组件</li>\n</ul>\n</li>\n<li><p><code>SpringApplication.run()</code></p>\n<p>运行过程：</p>\n<ul>\n<li>推断应用类型（是否为web项目）</li>\n<li>查找并加载所有可用初始化器，设置到initializers属性中</li>\n<li>找出所有应用程序监听器，添加到listeners属性中</li>\n<li>团短并设置main方法的定义类，找到运行主类</li>\n</ul>\n</li>\n</ul>\n<p><strong>简单案例</strong></p>\n<p><code>spring.factories</code>中配置以下自动配置类<code>HttpEncodingAutoConfiguration.java</code>，我们以它为例更进一步了解原理</p>\n<p><code>HttpEncodingAutoConfiguration.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//标识是一个配置类</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"comment\">//自动装配属性ServerProperties</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(ServerProperties.class)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(CharacterEncodingFilter.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;server.servlet.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpEncodingAutoConfiguration</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>ServerProperties.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这与我们在配置文件中所标写的前缀所绑定，并在实例化时进行自动注入</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;server&quot;, ignoreUnknownFields = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerProperties</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ConditionalOn注解</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210821182716543.png\" alt=\"image-20210821182716543\"></p>\n</li>\n</ul>\n<p><code>HttpEncodingAutoConfiguration</code>开启自动装配，并给<code>ServerProperties</code>一些属性赋默认值，<code>ServerProperties</code>从yml配置文件中读取前缀相关的属性，替换默认值，从而加载相关组件。</p>\n<blockquote>\n<p>总结</p>\n</blockquote>\n<ul>\n<li>springboot先加载所有的自动动配置类xxxAutoConfiguration</li>\n<li>每个自动配置类按照条件进行生效，默认绑定配置文件所指定的值，通过xxxProperties与配置文件进行绑定</li>\n<li>生效的配置类为容器中注入相应的组建环境</li>\n<li>用户如果自己进行了某些组建的配置，就以用户的配置为优先</li>\n<li>自定义配置方法<ul>\n<li>用户自定义@Bean进行注入，替换底层代码</li>\n<li>用户查看组件绑定的配置文件前缀进行修改</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"请求映射原理\"><a href=\"#请求映射原理\" class=\"headerlink\" title=\"请求映射原理\"></a>请求映射原理</h2><p><code>DispatcherServlet.java</code>中由<code>doDispatch()</code>方法进行请求处理，并调用<code>getHandler()</code>方法进行处理器映射器的选择</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">mappedHandler = getHandler(processedRequest);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HandlerExecutionChain <span class=\"title\">getHandler</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//getHandler方法会在所有能够得到的handlerMapping中进行遍历并试图进行url匹配</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handlerMappings != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (HandlerMapping mapping : <span class=\"keyword\">this</span>.handlerMappings) &#123;</span><br><span class=\"line\">         HandlerExecutionChain handler = mapping.getHandler(request);</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (handler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210910204412853.png\" alt=\"image-20210910204412853\"></p>\n<p>其中，RequestMappingHandlerMapping为SpringBoot帮我们配置的映射器，在mappingRegistry属性中注册了我们所有在Controller中配置的请求url和执行方法的匹配映射</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210910204619014.png\" alt=\"image-20210910204619014\"></p>\n<p>同理，WelcomePageHandlerMapping会在RequestMappingHandlerMapping匹配url失败后进行匹配，并且仅匹配<code>/</code>路径，用于web应用首页的跳转</p>\n<h2 id=\"参数处理原理\"><a href=\"#参数处理原理\" class=\"headerlink\" title=\"参数处理原理\"></a>参数处理原理</h2><h3 id=\"参数处理流程\"><a href=\"#参数处理流程\" class=\"headerlink\" title=\"参数处理流程\"></a>参数处理流程</h3><ol>\n<li><p>处理器适配器HandlerAdapter</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//DispatcherServlet</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HandlerAdapter <span class=\"title\">getHandlerAdapter</span><span class=\"params\">(Object handler)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handlerAdapters != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (HandlerAdapter adapter : <span class=\"keyword\">this</span>.handlerAdapters) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (adapter.supports(handler)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ServletException(<span class=\"string\">&quot;No adapter for handler [&quot;</span> + handler +</span><br><span class=\"line\">         <span class=\"string\">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210912100135032.png\" alt=\"image-20210912100135032\"></p>\n</li>\n<li><p>执行目标方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//DispatcherServlet</span></span><br><span class=\"line\"><span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RequestMappingHandlerAdapter(具体的handlerAdapter)</span></span><br><span class=\"line\"><span class=\"comment\">//执行目标方法</span></span><br><span class=\"line\">mav = invokeHandlerMethod(request, response, handlerMethod);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数解析器ArgumentResolver</p>\n<p>目标方法能够写的参数类型都取决于参数解析器</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210912101130177.png\" alt=\"image-20210912101130177\"></p>\n</li>\n<li><p>返回值处理器ReturnValueHandler</p>\n<p>目标方法能够写的返回值类型都取决于返回值处理器</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210912101408958.png\" alt=\"image-20210912101408958\"></p>\n</li>\n</ol>\n<h3 id=\"复杂参数\"><a href=\"#复杂参数\" class=\"headerlink\" title=\"复杂参数\"></a>复杂参数</h3><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913105920294.png\" alt=\"image-20210913105920294\"></p>\n<p>给Map或Model对象里面添加数据相当于给HttpServletRequest中setAttribute。</p>\n<p>Map和Model在实际解析参数时都会返回<code>mavContainer.getModel();</code>其中的BindingAwareModelMap能够同时实现Map和Model的具体功能</p>\n<p>在执行具体方法时如果同时传入Map和Model对象，实际运行时只有同一个BindingAwareModelMap对象</p>\n<p>目标方法执行完成时将所有的数据都放在ModelAndViewContainer(mavContainer)中，包含目标视图VIew和相关数据Model</p>\n<blockquote>\n<p>ModelAndView转移流程</p>\n</blockquote>\n<ol>\n<li>Map和Model被BindingAwareModelMap实现</li>\n<li>BindingAwareModelMap被封装于ModelAndViewContainer</li>\n<li>BindingAwareModelMap被取出分封装于ModelAndView</li>\n<li>BindingAwareModelMap数据被取出封装于ModelMap(新对象)中</li>\n<li><code>exposeModelAsRequestAttributes(model, request);</code>暴露模型作为请求域属性</li>\n<li>对ModelMap进行遍历并将其添加到请求域参数中</li>\n</ol>\n<h3 id=\"自定义对象参数\"><a href=\"#自定义对象参数\" class=\"headerlink\" title=\"自定义对象参数\"></a>自定义对象参数</h3><p>由ServletModelAttributeMethodProcessor参数处理器(有重名)进行解析</p>\n<ol>\n<li><p>根据实体类判断是否为简单类型</p>\n</li>\n<li><p>创建出一个对象实例JavaBean</p>\n</li>\n<li><p><code>WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name)</code>Web数据绑定器，可以将请求的参数封装在指定的JavaBean(方法中指attribute)中</p>\n<p>WebDataBinder底层有非常多的数据转换器Converters来帮助我们转换常见的参数类型</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913114942990.png\" alt=\"image-20210913114942990\"></p>\n</li>\n<li><p>GenericConversionService在设置每一个值时，会遍历所有Converter，寻找能将转换指定数据类型的转换器，转换器底层利用反射获取实体类数据类型并进行相应转换</p>\n</li>\n<li><p>我们也可以自定义Converter：实现WebMvcConfigurer中的addFormatters方法，用于添加我们自己的Converter</p>\n<p>上层接口</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913165406673.png\" alt=\"image-20210913165406673\"></p>\n</li>\n</ol>\n<h2 id=\"数据响应原理\"><a href=\"#数据响应原理\" class=\"headerlink\" title=\"数据响应原理\"></a>数据响应原理</h2><h3 id=\"返回参数\"><a href=\"#返回参数\" class=\"headerlink\" title=\"返回参数\"></a>返回参数</h3><p>springboot已经帮我们导入了jackson的相关依赖</p>\n<p>returnValueHandler返回值处理器对不同的返回值类型进行处理，其上层接口结构：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913164852244.png\" alt=\"image-20210913164852244\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913162803918.png\" alt=\"image-20210913162803918\"></p>\n<p>执行流程：</p>\n<ul>\n<li><p>supportsReturnType判断是否支持该类型返回值</p>\n</li>\n<li><p>handleReturnType进行处理</p>\n</li>\n<li><p>利用MessageConverters处理返回值</p>\n<ul>\n<li><p><strong>内容协商</strong>：浏览器默认会以请求头的方式高速服务能够就接受怎样的内容类型</p>\n</li>\n<li><p>服务器根据自身能力决定能生产出什么样类型的内容数据</p>\n</li>\n<li><p>遍历所有容器底层的HttpMessageConverter，得到MappingJackson2HttpMessageConverter可以将对象转为Json格式</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913192101770.png\" alt=\"image-20210913192101770\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913192255767.png\" alt=\"image-20210913192255767\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"内容协商\"><a href=\"#内容协商\" class=\"headerlink\" title=\"内容协商\"></a>内容协商</h3><p>流程：</p>\n<ul>\n<li><p>判断当前响应头中是否已经有了确定的媒体类型</p>\n</li>\n<li><p>获取客户端中支持的内容类型(请求头accept字段，如<code>application/json</code>，一般都带有权重)</p>\n</li>\n<li><p>遍历循环所有的MessageConverter，寻找支持操作对象的Converter列表</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913200339922.png\" alt=\"image-20210913200339922\"></p>\n</li>\n<li><p>将Converter支持的媒体类型统计出来</p>\n<p>客户端需要<code>application/json</code>，服务端可以处理的类型列表：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210913200226642.png\" alt=\"image-20210913200226642\"></p>\n</li>\n<li><p>进行内容协商的最佳匹配</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (MediaType requestedType : acceptableTypes) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (MediaType producibleType : producibleTypes) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;</span><br><span class=\"line\">            mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用支持将对象转为最佳匹配媒体类型的converter进行内容转化</p>\n</li>\n</ul>\n<h3 id=\"开启参数方式的内容协商\"><a href=\"#开启参数方式的内容协商\" class=\"headerlink\" title=\"开启参数方式的内容协商\"></a>开启参数方式的内容协商</h3><p>配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.mvc.contentnegotiation.favor-parameter</span>=<span class=\"string\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>使用方式<code>url?format=相应格式</code>，如<code>http://localhost:8080/test/user?format=xml</code></p>\n<p>进行自定义Convertor实现<code>HttpMessageConverter&lt;支持操作的数据类型&gt;</code>接口，并在WebMvcConfigurer中添加进容器</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210915231645160.png\" alt=\"image-20210915231645160\"></p>\n<p>或自定义协议</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210915231819843.png\" alt=\"image-20210915231819843\"></p>\n<h2 id=\"模板引擎与视图解析原理\"><a href=\"#模板引擎与视图解析原理\" class=\"headerlink\" title=\"模板引擎与视图解析原理\"></a>模板引擎与视图解析原理</h2><ol>\n<li><p>目标方法处理的过程中，所有数据都会被放在ModelAndViewContainer中，包括数据和试图抵制</p>\n</li>\n<li><p>方法的参数是自定义对象时（从请求参数中获取），也会将其放在ModelAndViewContainer中</p>\n</li>\n<li><p>任何目标方法执行完成后都会返回ModelAndView对象</p>\n</li>\n<li><p>processDispatcherResult处理派发结果（页面响应方式）</p>\n<ul>\n<li><p><code>render(mv,request,response)</code>页面渲染逻辑</p>\n<ul>\n<li><p>根据方法的String返回值得到View对象（定义了页面的渲染逻辑）</p>\n</li>\n<li><p>所有的视图解析器尝试是否能通过当前返回值得到View对象</p>\n<p>如返回值<code>redirect:/main.html</code>由ThymeleafViewResolver进行相关判断并new了一个RedirectView对象</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210916223209162.png\" alt=\"image-20210916223209162\"></p>\n</li>\n<li><p>ContentNegotiatingViewResolver包含了下面的所有视图解析器，原理还是利用这些视图解析器获取View对象</p>\n</li>\n<li><p>VIew视图对象调用自身的render方法对页面进行渲染</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>View视图对象如何进行页面渲染？</p>\n<ul>\n<li><p>返回值以forward开始：<code>new InternalResourceView(forwardUrl)</code>-&gt;</p>\n<p><code>request.getRequestDispatcher(path).forward(request, response)</code></p>\n</li>\n<li><p>返回值以redirect开始：<code>new RedirectView()</code>-&gt;</p>\n<p><code>response.sendRedirect(encodedURL)</code></p>\n</li>\n<li><p>返回值是普通字符串：<code>new ThymeleafView()</code>-&gt;</p>\n<p>ThymeleafView调用自己底层的输出流方法对页面进行渲染</p>\n</li>\n</ul>\n<h2 id=\"拦截器原理\"><a href=\"#拦截器原理\" class=\"headerlink\" title=\"拦截器原理\"></a>拦截器原理</h2><ol>\n<li><p>根据前当前请求找到可以处理请求的handler和handler的所有拦截器</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917132912615.png\" alt=\"image-20210917132912615\"></p>\n</li>\n<li><ul>\n<li>先<strong>顺序执行</strong>所有拦截器的preHandle方法</li>\n<li>如果有某个拦截器返回为false，则<strong>倒序执行</strong>所有已经执行了的拦截器的afterCompletion</li>\n</ul>\n</li>\n<li><p>如果任何一个拦截器返回为false，则会跳出不执行目标方法</p>\n</li>\n<li><ul>\n<li>如果所有拦截器都返回为true，则执行目标方法</li>\n<li>倒序执行所有拦截器的postHandle方法</li>\n</ul>\n</li>\n<li><p>页面成功渲染之后也会<strong>倒序触发</strong>afterCompletion方法</p>\n</li>\n<li><p><strong>以上任何一步出现异常也会直接倒序触发afterCompletion方法</strong></p>\n</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917134058094.png\" alt=\"image-20210917134058094\"></p>\n<h2 id=\"文件上传原理\"><a href=\"#文件上传原理\" class=\"headerlink\" title=\"文件上传原理\"></a>文件上传原理</h2><p>文件上传自动配置类<code>MultipartAutoConfiguration</code>自动配置好了<code>StandardServletMultipartResolver</code>文件上传解析器</p>\n<ol>\n<li>文件上传解析器判断是否为Multipart请求，并封装为MultipartHttpServletRequest文件上传请求</li>\n<li>参数解析器来解析请求中的文件内容封装成MultipartFIle</li>\n<li>将request中的文件信息封装为Map：<code>MultiValueMap&lt;String, MultipartFile&gt;</code></li>\n<li>FileCopyUtils可以实现文件流的拷贝</li>\n</ol>\n<h2 id=\"错误处理原理\"><a href=\"#错误处理原理\" class=\"headerlink\" title=\"错误处理原理\"></a>错误处理原理</h2><p>异常处理自动配置类<code>ErrorMvcAutoConfiguration</code></p>\n<ul>\n<li><p>异常处理自动配置原理</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917160830225.png\" alt=\"image-20210917160830225\"></p>\n<p>如果想要返回页面，就会找到error视图(staticView)，默认为空白页</p>\n</li>\n<li><p>异常处理流程</p>\n<ol>\n<li><p>目标方法运行期间任何异常，都会被catch，并被dispatchException封装</p>\n</li>\n<li><p>进入视图解析流程(页面渲染)</p>\n<p><code>processDispatchResult(processedRequest, response, mappedHandler, mv, dispathcerException)</code></p>\n</li>\n<li><p>processHandlerException方法处理handler发生的异常，处理完成返回ModelAndView</p>\n<ul>\n<li><p>遍历所有的handlerExceptionResolvers，看谁能处理当前异常</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917162126075.png\" alt=\"image-20210917162126075\"></p>\n</li>\n<li><p>系统默认的异常解析器</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917161933384.png\" alt=\"image-20210917161933384\"></p>\n<ul>\n<li>defaultErrorAttribute现来处理异常，把异常信息保存到request域，并且返回null</li>\n<li>默认没有任何handlerExceptionResolvers能够处理，因此直接抛出异常<ul>\n<li>如果这种情况，则spring会自动发送一个/error请求，会被底层的BasicErrorController处理</li>\n<li>解析错误视图，遍历所有的<strong>ErrorViewResolver</strong>看谁能够解析</li>\n<li>默认DefaultErrorViewResolver作用是把响应状态码作为错误页的地址，如error/500.html</li>\n<li>模板引擎最终响应这个页面</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>定制错误处理逻辑</p>\n<ul>\n<li><p>在/error路径下添加404.html,5xx.html错误页</p>\n</li>\n<li><p>@ControllerAdvice+@ExceptionHandler处理全局异常：底层由<strong>ExceptionHandlerExceptionResolver</strong>支持</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalExceptionHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理计算错误异常</span></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(&#123;ArithmeticException.class,NullPointerException.class&#125;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handleArithException</span><span class=\"params\">(Exception e)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ResponseStatus+自定义异常：底层由<strong>ResponseStatusExceptionResolver</strong>支持，把responsestatus注解的信息调用<code>response.sendError(statusCode,resolvedReason)</code>给Tomcat发送/error请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseStatus(value = HttpStatus.FORBIDDEN, reason = &quot;用户数量太多了&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserTooManyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserTooManyException</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserTooManyException</span><span class=\"params\">(String msg)</span></span>&#123;<span class=\"keyword\">super</span>(msg);&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>DefaultHandlerExceptionResolver</strong>为Spring处理框架底层的异常</p>\n<p><code>response.sendError(HttpServletResponse.SC_BAD_REQUEST,ex.getMessage)</code></p>\n<p>自定义实现HandlerExceptionResolver处理异常，可以作为全局磨人的异常处理规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//优先级设置为最高，否则会由其他三个HandlerExceptionResolver接管异常的处理</span></span><br><span class=\"line\"><span class=\"meta\">@Order(value = Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerHandlerExceptionResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerExceptionResolver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveException</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            response.sendError(<span class=\"number\">511</span>,<span class=\"string\">&quot;自定义的错误类型&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//尽管我们未对ModelAndView作任何处理，但只要返回值不为空</span></span><br><span class=\"line\">        <span class=\"comment\">//都会直接跳出循环，不再进行HandlerExceptionResolver的遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>ErrorViewResolver</p>\n<ul>\n<li>response.sendError，error请求就会转给Controller</li>\n<li>当一个异常没有任何handlerExceptionResolvers能够处理，error请求也会转给Controller</li>\n<li>basicErrorController要去的页面地址是ErrorViewResolver解析的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"嵌入式Servlet容器\"><a href=\"#嵌入式Servlet容器\" class=\"headerlink\" title=\"嵌入式Servlet容器\"></a>嵌入式Servlet容器</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917205230494.png\" alt=\"image-20210917205230494\"></p>\n<p>切换容器类型</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>自定义Servlet容器</p>\n<ul>\n<li>修改配置文件server.xxx</li>\n<li>注入ConfigurableServletWebServerFactory</li>\n<li>实现<code>WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt;</code>接口</li>\n</ul>\n<h2 id=\"定制化原理\"><a href=\"#定制化原理\" class=\"headerlink\" title=\"定制化原理\"></a>定制化原理</h2><h3 id=\"定制化的常见方式\"><a href=\"#定制化的常见方式\" class=\"headerlink\" title=\"定制化的常见方式\"></a>定制化的常见方式</h3><ul>\n<li><p>修改配置文件</p>\n</li>\n<li><p>xxxCustomizer</p>\n</li>\n<li><p>编写自定义配置类 xxxConfig + <code>@Bean</code>增加组件来替换默认配置</p>\n</li>\n<li><p><strong>Web应用实现WebMvcConfigurer定制化Web功能</strong></p>\n</li>\n<li><p>WebMvcConfigurer+<code>@EnableWebMvc</code>：全面接管Mvc，自动配置全部失效，所有配置项都需要我们进行配置</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917211317115.png\" alt=\"image-20210917211317115\"></p>\n</li>\n</ul>\n<h3 id=\"原理分析常用方式\"><a href=\"#原理分析常用方式\" class=\"headerlink\" title=\"原理分析常用方式\"></a>原理分析常用方式</h3><blockquote>\n<p> 场景starter -&gt; xxxAutoConfiguration -&gt; 导入xxx组件 -&gt; 绑定xxxProperties -&gt; 绑定配置文件项</p>\n</blockquote>\n<h1 id=\"SpringBoot配置\"><a href=\"#SpringBoot配置\" class=\"headerlink\" title=\"SpringBoot配置\"></a>SpringBoot配置</h1><h2 id=\"Maven-in-SpringBoot\"><a href=\"#Maven-in-SpringBoot\" class=\"headerlink\" title=\"Maven in SpringBoot\"></a>Maven in SpringBoot</h2><p><code>pom.xml</code>中规定了springboot项目的府项目，而在父项目中规定了许多常用依赖的版本号，我们进行依赖导入时一般不需要再手动指定版本号，减少了版本不兼容的发生频率</p>\n<p>在进行依赖导入时通常直接导入启动器，一个启动器包含了多个相关的maven依赖，使用起来更为方便，一般格式为</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一般来说，<code>spring-boot-starter-XXX</code>格式为springboot官方启动器，不需要指定版本，而<code>XXX-spring-boot-starter</code>为第三方启动器，版本管理文件中是否有而决定是否需要手动配置</p>\n<p>所有场景启动器有一个共同的依赖<code>spring-boot-starter</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"yaml\"><a href=\"#yaml\" class=\"headerlink\" title=\"yaml\"></a>yaml</h2><p>springboot配置文件<code>application.yml</code>可以后缀使用<code>.yml .yaml .properties</code>(yml是yaml的缩写)</p>\n<p>其中yml作为springboot的推荐配置文件类型，可以存储多种数据类型</p>\n<p>yaml还可以获取<code>pom.xml</code>配置文件中的信息，如：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">info:</span></span><br><span class=\"line\">  <span class=\"attr\">appVersion:</span> <span class=\"string\">@project.version@</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#key-value键值对</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">lan5th</span></span><br><span class=\"line\"><span class=\"comment\">#对象</span></span><br><span class=\"line\"><span class=\"attr\">student:</span></span><br><span class=\"line\"> <span class=\"attr\">name:</span> <span class=\"string\">lan5th</span></span><br><span class=\"line\"> <span class=\"attr\">age:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">#数组</span></span><br><span class=\"line\"><span class=\"attr\">pets:</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">cat</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">dog</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">pig</span></span><br></pre></td></tr></table></figure>\n\n<p>并且yml可以注入到我们的配置之中</p>\n<p><code>User.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"comment\">//使用此注解容器会将yml中指定前缀的属性自动注入</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean married;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birth;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; map;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Object&gt; list;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dog dog;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Dog.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>application.yml</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">lan5th</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">married:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">birth:</span> <span class=\"number\">2021</span><span class=\"string\">/8/19</span></span><br><span class=\"line\">  <span class=\"attr\">map:</span> &#123;<span class=\"attr\">key1:</span> <span class=\"string\">value1</span>, <span class=\"attr\">key2:</span> <span class=\"string\">value2</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">list:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">c</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">java</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">python</span></span><br><span class=\"line\">  <span class=\"attr\">dog:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">myDog</span></span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：yaml的字符串转义问题</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">myString:</span> <span class=\"string\">&#x27;string1 /n string2&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">newString:</span> <span class=\"string\">&quot;string1 /n string2&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>单引号会输出<code>string1 /n string2</code>原字符串</p>\n</li>\n<li><p>双引号会进行转义，变为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">string1 </span><br><span class=\"line\"> string2</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>yml与properties功能对比</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210819225635969.png\" alt=\"image-20210819225635969\"></p>\n<ul>\n<li><p>松散绑定：yml文件中<code>-</code>后的字母默认大写，如yml中的last-name注入式会变成lastName</p>\n</li>\n<li><p>SpEL：使用properties文件时用于给属性赋值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>JSR303数据校验</p>\n<p>需要导入starter环境</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-validation<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用方式如下，可以只接受email格式的注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Validated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Email</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>部分校验功能</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210819231649005.png\" alt=\"image-20210819231649005\"></p>\n</li>\n<li><p>复杂类型封装：如对象</p>\n</li>\n</ul>\n<p>共有四处可以配置<code>application.yml</code>配置文件</p>\n<p>按优先级从高到低排序如下：</p>\n<ul>\n<li><code>file:./config/</code>：项目根路径下的config文件夹</li>\n<li><code>file:./：</code>项目根路径下直接创建文件</li>\n<li><code>classpath:/congfig/</code>：resources目录下的config文件夹</li>\n<li><code>classpath:/</code>：resources目录下直接创建文件（idea创建springboot项目默认于此）</li>\n</ul>\n<h2 id=\"yaml提示依赖\"><a href=\"#yaml提示依赖\" class=\"headerlink\" title=\"yaml提示依赖\"></a>yaml提示依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--在打包时不将插件打包--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多环境配置文件\"><a href=\"#多环境配置文件\" class=\"headerlink\" title=\"多环境配置文件\"></a>多环境配置文件</h2><p>新建多套配置文件</p>\n<p><code>application.properties</code></p>\n<p><code>application-dev.properties</code>生产环境</p>\n<p><code>application-test.properties</code>测试环境</p>\n<ul>\n<li><p>通过配置文件激活多环境（properties或yaml）</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#直接指定后缀可直接切换</span></span><br><span class=\"line\"><span class=\"meta\">spring.profiles.active</span>=<span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在部署时命令行激活（命令行最为优先）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -jar springboot-0.0.1-SNAPSHOT.jar --spring.profiles.active&#x3D;test</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>yml单文件激活环境</p>\n<p>单文件多环境</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"> <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"> <span class=\"attr\">profiles:</span></span><br><span class=\"line\">  <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"comment\">#---用于分割不同的生产环境</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"> <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"> <span class=\"attr\">profiles:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"> <span class=\"attr\">port:</span> <span class=\"number\">8082</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"> <span class=\"attr\">profiles:</span> <span class=\"string\">test</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义类按环境切换<code>@Profile</code>可以标注在类上和方法上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Profile(&quot;dev&quot;)</span> <span class=\"comment\">//只有dev环境才会启用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Profile(&quot;test&quot;)</span> <span class=\"comment\">//只有test环境才会启用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyConfig</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指定激活多个配置文件</p>\n<p>现在有四个配置文件</p>\n<p><code>application.properties</code></p>\n<p><code>application-dev.properties</code></p>\n<p><code>application-prod.properties</code></p>\n<p><code>application-test.properties</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.profiles.active</span>=<span class=\"string\">myenv</span></span><br><span class=\"line\"><span class=\"comment\"># 自定义环境myenv</span></span><br><span class=\"line\"><span class=\"meta\">spring.profile.group.myenv[0]</span>=<span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"meta\">spring.profile.group.myenv[1]</span>=<span class=\"string\">prod</span></span><br><span class=\"line\"><span class=\"comment\"># 自定义环境mytest</span></span><br><span class=\"line\"><span class=\"meta\">spring.profile.group.mytest[0]</span>=<span class=\"string\">test</span></span><br></pre></td></tr></table></figure>\n\n<p>当激活myenv时，<code>application.properties, application-dev.properties, application-prod.properties</code>会全部生效，实现多个配置文件的加载</p>\n</li>\n</ul>\n<h2 id=\"高级自定义配置\"><a href=\"#高级自定义配置\" class=\"headerlink\" title=\"高级自定义配置\"></a>高级自定义配置</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> WebMvcConfigurer <span class=\"title\">webMvcConfigurer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WebMvcConfigurer() &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过向容器中注入WebMvcConfigurer来实现一些自定义的组件，这个接口有许多添加组件的默认方法，借由此可以进行添加</p>\n<h2 id=\"配置加载规则\"><a href=\"#配置加载规则\" class=\"headerlink\" title=\"配置加载规则\"></a>配置加载规则</h2><ul>\n<li><p>常见外部配置源</p>\n<p>java属性文件，yaml，环境变量，命令行参数</p>\n</li>\n<li><p>配置文件加载优先级</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210918214141412.png\" alt=\"image-20210918214141412\"></p>\n<p>从上至下优先级依次变高</p>\n</li>\n<li><p><strong>总结：指定环境优先，外部优先，后项覆盖前项同名项</strong></p>\n</li>\n</ul>\n<h1 id=\"Web开发\"><a href=\"#Web开发\" class=\"headerlink\" title=\"Web开发\"></a>Web开发</h1><h2 id=\"常用注解\"><a href=\"#常用注解\" class=\"headerlink\" title=\"常用注解\"></a>常用注解</h2><ul>\n<li><p><code>@Configuration</code>标识是一个配置类</p>\n<p><code>@Bean</code>，方法级别的注解，代替xml向容器中添加组件，组件的id默认为方法名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Myconfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">userRegist</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(<span class=\"string\">&quot;lan5th&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置类本身也是组件</li>\n<li><code>@Configuration</code>注解中的属性<code>proxyBeanMethods</code>默认为true，表示配置类在容器中以代理对象形式所存在，只能拿到单例的Bean实例。同时以此区分Full模式与Lite模式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnBean(MultipartResolver.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MultipartResolver <span class=\"title\">multipartResolver</span><span class=\"params\">(MultipartResolver resolver)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这个方法中添有@Bean注解，而且有传入值，表示执行方法时会从容器中自动寻找一个与<code>MultipartResolver</code>类型相匹配的组件，将它的属性赋值给新的<code>multipartResolver</code></li>\n</ul>\n</li>\n<li><p><code>@Import</code>必须放置在组件类型的注解上：<code>@Component,@Configuration,@Controller,@Service,@Repository</code>等</p>\n<p>用于给容器中导入自己所需要的组件或第三方组件，如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import(DBHelper.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Myconfig</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>@Conditional</code>满足指定条件时再进行注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//常见注解</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnBean</span><span class=\"comment\">//指定Bean在容器中存在</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span><span class=\"comment\">//指定Bean在容器中不存在</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass</span><span class=\"comment\">//指定Class在容器中存在</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnResource</span><span class=\"comment\">//项目路径中存在指定资源</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span><span class=\"comment\">//当前运行环境为Web环境</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>@ImportResource</code>在某个配置类上导入xml类型的Bean资源，如</p>\n<p><code>@ImportResource(classpath:beans.xml)</code></p>\n</li>\n<li><p><code>@ConfigurationProperties</code>必须配合组件类型的注解使用，将配置文件中指定前缀的kv自动注入实体类中的属性。，如</p>\n<p><code>@ConfigurationProperties(prefix = &quot;user&quot;)</code></p>\n<p>或在配置类中使用<code>@EnableConfigurationProperties(User.class)</code>来代替<code>@Component + @ConfigurationProperties</code>的组合</p>\n</li>\n</ul>\n<h2 id=\"Controller请求参数\"><a href=\"#Controller请求参数\" class=\"headerlink\" title=\"Controller请求参数\"></a>Controller请求参数</h2><p>注解参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PathVariable(&quot;id&quot;)</span> <span class=\"comment\">//Restful获取url参数</span></span><br><span class=\"line\"><span class=\"meta\">@PathVariable</span> Map&lt;String,String&gt; pv <span class=\"comment\">//Restful获取url参数并自动封装，只能Map&lt;String,String&gt;类型</span></span><br><span class=\"line\"><span class=\"meta\">@RequestHeader(&quot;User-Agent&quot;)</span> <span class=\"comment\">//获取请求头</span></span><br><span class=\"line\"><span class=\"meta\">@RequestHeader</span> Map&lt;String,String&gt; header <span class=\"comment\">//获取请求头并自动封装，只能Map&lt;String,String&gt;类型</span></span><br><span class=\"line\"><span class=\"meta\">@RequestParam(&quot;id&quot;)</span> <span class=\"comment\">//获取普通类型url参数</span></span><br><span class=\"line\"><span class=\"meta\">@RequestParam</span> Map&lt;String,String&gt; params <span class=\"comment\">//获取普通类型url参数并自动封装，只能Map&lt;String,String&gt;类型</span></span><br><span class=\"line\"><span class=\"meta\">@CookieValue(&quot;id&quot;)</span> <span class=\"comment\">//获取cookie参数</span></span><br><span class=\"line\"><span class=\"meta\">@CookieValue</span> Cookie cookie <span class=\"comment\">//获取cookie并封装成对象</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@RequestBody</span> <span class=\"comment\">//获取post表单数据</span></span><br><span class=\"line\"><span class=\"meta\">@RequestAttribute(&quot;msg&quot;)</span> <span class=\"comment\">//获取request.setAttribute中设置的参数(用于方法之间)</span></span><br><span class=\"line\"><span class=\"meta\">@ModelAttribute</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@MatrixVariable</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"导入静态资源\"><a href=\"#导入静态资源\" class=\"headerlink\" title=\"导入静态资源\"></a>导入静态资源</h2><p><code>WebMvcProperties.java</code>中定义了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> String staticPathPattern = <span class=\"string\">&quot;/**&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>WebProperties.java</code>中定义了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class=\"string\">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;classpath:/resources/&quot;</span>, <span class=\"string\">&quot;classpath:/static/&quot;</span>, <span class=\"string\">&quot;classpath:/public/&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这4处即为一般默认能够引入静态资源的位置（<code>classpath:/META-INF/resources/</code>即为WebJars下的相关路径）</p>\n<p><strong>访问方式</strong></p>\n<ul>\n<li>webjars <code>localhost:8080/webjars/</code>+fileName</li>\n<li>public, static,  resources <code>localhost:8080/</code>+fileName</li>\n</ul>\n<p>优先级：resources&gt;static(默认)&gt;public</p>\n<p>可以通过在配置文件中配置<code>spring.mvc.static-path-pattern</code>来更改静态资源访问url前缀，配置<code>spring.resources.static-locations</code>来更改静态资源存储位置</p>\n<h3 id=\"原理探究\"><a href=\"#原理探究\" class=\"headerlink\" title=\"原理探究\"></a>原理探究</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果一个类只有一个有参构造器，那么所有的参数都会自动从容器中匹配获取</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WebMvcAutoConfigurationAdapter</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      org.springframework.boot.autoconfigure.web.ResourceProperties resourceProperties,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      WebProperties webProperties, WebMvcProperties mvcProperties, ListableBeanFactory beanFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.resourceProperties = resourceProperties.hasBeenCustomized() ? resourceProperties</span><br><span class=\"line\">         : webProperties.getResources();</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.mvcProperties = mvcProperties;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.beanFactory = beanFactory;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.servletRegistrations = servletRegistrations;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.mvcProperties.checkConfiguration();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模板引擎Thymeleaf\"><a href=\"#模板引擎Thymeleaf\" class=\"headerlink\" title=\"模板引擎Thymeleaf\"></a>模板引擎Thymeleaf</h2><p>代替了之前学习的jsp，允许在html页面中写入逻辑语法</p>\n<p>直接导入相应启动器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Thymeleaf本体--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--添加对java8时间LocalDate和LocalDateTime的支持依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.thymeleaf.extras<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>ThymeleafProperties.java</code>中规定了Thymeleaf保存文件的位置和后缀</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_PREFIX = <span class=\"string\">&quot;classpath:/templates/&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_SUFFIX = <span class=\"string\">&quot;.html&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>使用时需要导入命名空间<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code></p>\n<h3 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h3><ul>\n<li><p>表达式</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210901213203012.png\" alt=\"image-20210901213203012\"></p>\n</li>\n<li><p>取值方法</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210830195948186.png\" alt=\"image-20210830195948186\"></p>\n</li>\n</ul>\n<h2 id=\"扩展装配SpringMVC\"><a href=\"#扩展装配SpringMVC\" class=\"headerlink\" title=\"扩展装配SpringMVC\"></a>扩展装配SpringMVC</h2><p>自定义视图解析器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">//不能添加@EnableWebMvc，否则自动配置将会全部失效，需要手动进行全部配置</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ViewResolver <span class=\"title\">myViewResolver</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyViewResolver();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyViewResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">ViewResolver</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">resolveViewName</span><span class=\"params\">(String s, Locale locale)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注册到Spring容器之后，我们就可以使用我们自定义的视图解析器相关配置</p>\n<h2 id=\"国际化\"><a href=\"#国际化\" class=\"headerlink\" title=\"国际化\"></a>国际化</h2><ul>\n<li><p>配置<code>i18n</code>文件夹（internationalization的缩写）</p>\n<p>其中保存.properties文件并以键值对的形式保存不同翻译</p>\n<p>语言切换，例：</p>\n<ul>\n<li>中文<code>login_zh_CN.properties</code></li>\n<li>英文<code>login_en_US.properties</code></li>\n</ul>\n</li>\n<li><p>如果需要进行按钮切换，需要自定义组件实现<code>LocaleResolver</code>，并将其添加到spring容器中</p>\n</li>\n<li><p>使用<code>#&#123;&#125;进行取值</code></p>\n</li>\n</ul>\n<h2 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h2><ul>\n<li><p>实现拦截器接口<code>HandlerInterceptor</code>，实现preHandle和postHandle接口的方法</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210901160255460.png\" alt=\"image-20210901160255460\"></p>\n</li>\n<li><p>在自定义配置类继承<code>WebMvcConfigurer</code>中实现方法，注册拦截器</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210901160411301.png\" alt=\"image-20210901160411301\"></p>\n</li>\n</ul>\n<p>防止拦截静态资源：</p>\n<ul>\n<li><p>添加排除拦截<code>registry.addInterceptor(new LoginHandlerInterceptor()).exclude(...)</code></p>\n</li>\n<li><p>配置文件中添加<code>spring.mvc.static-path-pattern</code>，并将所有静态文件放置在/static路径下</p>\n<p>注意：使用这种方法在访问静态资源时，必须在static目录下新建一层static目录，静态资源路径默认不显示第一层static</p>\n</li>\n</ul>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><p>文件上传与MultipartAutoConfiguration相关，文件相关属性绑定：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">multipart:</span></span><br><span class=\"line\">      <span class=\"attr\">max-file-size:</span> <span class=\"string\">10MB</span></span><br><span class=\"line\">      <span class=\"attr\">max-request-size:</span> <span class=\"string\">100MB</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/upload&#125;&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;headerImg&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--多文件上传--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;photos&quot;</span> <span class=\"attr\">multiple</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>只需要以MultipartFile接收传输的参数即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//单文件及多文件上传</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">upload</span><span class=\"params\">(<span class=\"meta\">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                   <span class=\"meta\">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!headerImg.isEmpty())&#123;</span><br><span class=\"line\">        String filename = headerImg.getOriginalFilename();</span><br><span class=\"line\">        <span class=\"comment\">//这里使用静态路径</span></span><br><span class=\"line\">        headerImg.transferTo(<span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:\\\\cache\\\\&quot;</span>+filename));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (photos.length&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (MultipartFile photo: photos)&#123;</span><br><span class=\"line\">            String filename = photo.getOriginalFilename();</span><br><span class=\"line\">            photo.transferTo(<span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:\\\\cache\\\\&quot;</span>+filename));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;index&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917152141146.png\" alt=\"image-20210917152141146\"></p>\n<p>具体实现在原理部分</p>\n<h2 id=\"注入原生组件\"><a href=\"#注入原生组件\" class=\"headerlink\" title=\"注入原生组件\"></a>注入原生组件</h2><p>一般用于转化老项目</p>\n<ul>\n<li><p>Servlet3.0注解：主程序类上注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ServletComponentScan(basePackage = &quot;com.lan5th&quot;)</span></span><br></pre></td></tr></table></figure>\n\n<p>组件类上注解<code>@WebServlet, @WebFilter, @WebListener</code>进行自动扫描注入容器</p>\n</li>\n<li><p>RegistrationBean进行添加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//由于SpringBoot内置了servlet容器，没有web.xml文件，因此使用替代方法:ServletRegistrationBean将需要的Servlet注册进容器</span></span><br><span class=\"line\"><span class=\"comment\">//使用代理模式，生成单实例</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRegistConfig</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">myServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyServlet myServlet = <span class=\"keyword\">new</span> MyServlet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ServletRegistrationBean&lt;&gt;(myServlet,<span class=\"string\">&quot;/myrequest&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">myFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyFilter myFilter = <span class=\"keyword\">new</span> MyFilter();</span><br><span class=\"line\">        <span class=\"comment\">//设置拦截的Servlet</span></span><br><span class=\"line\">        <span class=\"comment\">//FilterRegistrationBean bean = new FilterRegistrationBean(myFilter, myServlet());</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//或设置拦截url</span></span><br><span class=\"line\">        FilterRegistrationBean bean = <span class=\"keyword\">new</span> FilterRegistrationBean(myFilter);</span><br><span class=\"line\">        bean.setUrlPatterns(Arrays.asList(<span class=\"string\">&quot;/myrequest&quot;</span>,<span class=\"string\">&quot;/css/&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletListenerRegistrationBean <span class=\"title\">myListener</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyListener myListener = <span class=\"keyword\">new</span> MyListener();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ServletListenerRegistrationBean(myListener)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ServletRegistrationBean, FilterRegistrationBean, ListenerRegistrationBean</code></p>\n</li>\n</ul>\n<p><strong>拓展</strong></p>\n<p>容器中的DispatcherServlet也是通过RegistrationBean的方法注册进来，对应配置文件的前缀spring.mvc，默认映射<code>/</code>路径</p>\n<p><strong>多个Servlet能够处理同一路径时，采用精确优先原则</strong></p>\n<p>因此当我们向容器中注册Servlet路径为<code>/</code>的子目录时默认以我们的Servlet更为优先</p>\n<h2 id=\"使用AOP\"><a href=\"#使用AOP\" class=\"headerlink\" title=\"使用AOP\"></a>使用AOP</h2><p>导包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>切面类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//同时标注这两个注解才能生效</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(public * com.example.mybatisplus.web.controller.TestController.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">webLog</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;webLog()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deBefore</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 接收到请求，记录请求内容</span></span><br><span class=\"line\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request = attributes.getRequest();</span><br><span class=\"line\">        <span class=\"comment\">// 记录下请求内容</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;URL : &quot;</span> + request.getRequestURL().toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;HTTP_METHOD : &quot;</span> + request.getMethod());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;IP : &quot;</span> + request.getRemoteAddr());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;CLASS_METHOD : &quot;</span> + joinPoint.getSignature().getDeclaringTypeName() + <span class=\"string\">&quot;.&quot;</span> + joinPoint.getSignature().getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ARGS : &quot;</span> + Arrays.toString(joinPoint.getArgs()));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;webLog()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAfterReturning</span><span class=\"params\">(Object ret)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理完请求，返回内容</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法的返回值 : &quot;</span> + ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后置异常通知</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing(&quot;webLog()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">throwss</span><span class=\"params\">(JoinPoint jp)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法异常时执行.....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后置最终通知,final增强，不管是抛出异常或者正常退出都会执行</span></span><br><span class=\"line\">    <span class=\"meta\">@After(&quot;webLog()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">(JoinPoint jp)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法最后执行.....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//环绕通知,环绕增强，相当于MethodInterceptor</span></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;webLog()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">arround</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法环绕start.....&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Object o =  pjp.proceed();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;方法环绕proceed，结果是 :&quot;</span> + o);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"数据访问\"><a href=\"#数据访问\" class=\"headerlink\" title=\"数据访问\"></a>数据访问</h1><h2 id=\"JDBC\"><a href=\"#JDBC\" class=\"headerlink\" title=\"JDBC\"></a>JDBC</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>切换mysql-connector-java版本方法：</p>\n<ul>\n<li><p>直接指定<code>&lt;version&gt;&lt;/version&gt;</code></p>\n</li>\n<li><p>由maven就近优先原则在最外层Pom中配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mysql.version</span>&gt;</span>5.1.49<span class=\"tag\">&lt;/<span class=\"name\">mysql.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>一些相关的自动配置类：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917214258823.png\" alt=\"image-20210917214258823\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210917214220691.png\" alt=\"image-20210917214220691\"></p>\n<p>配置项</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/jdbcstudy?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Druid数据源\"><a href=\"#Druid数据源\" class=\"headerlink\" title=\"Druid数据源\"></a>Druid数据源</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以通过导入starter或自定义注入的方式导入数据源</p>\n<p>配置完成druid后台监控之后可以根据配置的路径访问数据源后台监控页面</p>\n<p>如：配置了url为<code>/druid/*</code>，项目启动之后我们在浏览器中访问<code>http://localhost:8080/druid/</code>就可以进行后台监控了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210903162644116.png\" alt=\"image-20210903162644116\"></p>\n<h3 id=\"自行导入\"><a href=\"#自行导入\" class=\"headerlink\" title=\"自行导入\"></a>自行导入</h3><p>不进行配置这些设置会有默认值</p>\n<p>由于Druid后台监控必须通过特定Servlet进行开启，因此选用ServletRegistrationBean方式进行注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DruidConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//自动装配DruidDataSource</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">druidDataSource</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">        druidDataSource.setFilters(<span class=\"string\">&quot;stat,wall&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后台监控</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">statViewServlet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class=\"keyword\">new</span> ServletRegistrationBean&lt;&gt;(<span class=\"keyword\">new</span> StatViewServlet(),<span class=\"string\">&quot;/druid/*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//后台需要登录，进行账号密码配置</span></span><br><span class=\"line\">        HashMap&lt;String, String&gt; initParameters = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//登录的用户名和密码key是固定的，不能随意更改</span></span><br><span class=\"line\">        <span class=\"comment\">//value与数据库无关，可以自定义配置</span></span><br><span class=\"line\">        initParameters.put(<span class=\"string\">&quot;loginUsername&quot;</span>,<span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\">        initParameters.put(<span class=\"string\">&quot;loginPassword&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setInitParameters(initParameters);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//日志记录</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">webStatFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean&lt;Filter&gt; bean = <span class=\"keyword\">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class=\"line\">        bean.setFilter(<span class=\"keyword\">new</span> WebStatFilter());</span><br><span class=\"line\">        HashMap&lt;String, String&gt; initParameters = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//这些路径不进行过滤</span></span><br><span class=\"line\">        initParameters.put(<span class=\"string\">&quot;exclusions&quot;</span>,<span class=\"string\">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class=\"line\">        bean.setInitParameters(initParameters);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然，我们配置这些JavaBean的过程也可以用配置文件所代替</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span> </span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"comment\">#SpringBoot默认是不注入这些的，需要自己绑定</span></span><br><span class=\"line\">    <span class=\"comment\">#druid数据源专有配置</span></span><br><span class=\"line\">    <span class=\"attr\">initialSize:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">minIdle:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">maxActive:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"attr\">maxWait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">    <span class=\"attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">    <span class=\"attr\">minEvictableIdleTimeMillis:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">    <span class=\"attr\">validationQuery:</span> <span class=\"string\">SELECT</span> <span class=\"number\">1</span> <span class=\"string\">FROM</span> <span class=\"string\">DUAL</span></span><br><span class=\"line\">    <span class=\"attr\">testWhileIdle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">testOnBorrow:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">testOnReturn:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">poolPreparedStatements:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class=\"line\">    <span class=\"comment\">#如果允许报错，java.lang.ClassNotFoundException: org.apache.Log4j.Properity</span></span><br><span class=\"line\">    <span class=\"comment\">#则导入log4j 依赖就行</span></span><br><span class=\"line\">    <span class=\"attr\">filters:</span> <span class=\"string\">stat,wall,log4j</span></span><br><span class=\"line\">    <span class=\"attr\">maxPoolPreparedStatementPerConnectionSize:</span> <span class=\"number\">20</span></span><br><span class=\"line\">    <span class=\"attr\">useGlobalDataSourceStat:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">connectionoProperties:</span> <span class=\"string\">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span></span><br><span class=\"line\">    <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">druid:</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">Zyh20010605</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/lz_blog?useSSl=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">#连接池属性</span></span><br><span class=\"line\">      <span class=\"attr\">initial-size:</span> <span class=\"number\">15</span></span><br><span class=\"line\">      <span class=\"attr\">max-active:</span> <span class=\"number\">100</span></span><br><span class=\"line\">      <span class=\"attr\">min-idle:</span> <span class=\"number\">15</span></span><br><span class=\"line\">      <span class=\"attr\">max-wait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">      <span class=\"attr\">time-between-eviction-runs-millis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">      <span class=\"attr\">min-evictable-idle-time-millis:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">      <span class=\"attr\">test-on-borrow:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">test-on-return:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">test-while-idle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">validation-query:</span> <span class=\"string\">SELECT</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">validation-query-timeout:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">      <span class=\"attr\">keep-alive:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">remove-abandoned:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">remove-abandoned-timeout:</span> <span class=\"number\">180</span></span><br><span class=\"line\">      <span class=\"attr\">log-abandoned:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">pool-prepared-statements:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">max-pool-prepared-statement-per-connection-size:</span> <span class=\"number\">20</span></span><br><span class=\"line\">      <span class=\"attr\">filters:</span> <span class=\"string\">stat,wall,slf4j</span></span><br><span class=\"line\">      <span class=\"attr\">use-global-data-source-stat:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">maxOpenPreparedStatements:</span> <span class=\"number\">100</span></span><br><span class=\"line\">      <span class=\"attr\">connect-properties.mergeSql:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">connect-properties.slowSqlMillis:</span> <span class=\"number\">5000</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 配置DruidStatFilter</span></span><br><span class=\"line\">      <span class=\"attr\">web-stat-filter:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">url-pattern:</span> <span class=\"string\">&quot;/*&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">exclusions:</span> <span class=\"string\">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span></span><br><span class=\"line\">      <span class=\"comment\"># 配置DruidStatViewServlet</span></span><br><span class=\"line\">      <span class=\"attr\">stat-view-servlet:</span></span><br><span class=\"line\">        <span class=\"attr\">url-pattern:</span> <span class=\"string\">&quot;/druid/*&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># IP白名单(没有配置或者为空，则允许所有访问)</span></span><br><span class=\"line\">        <span class=\"attr\">allow:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">        <span class=\"comment\"># IP黑名单 (存在共同时，deny优先于allow)</span></span><br><span class=\"line\">        <span class=\"attr\">deny:</span> <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">        <span class=\"comment\">#  禁用HTML页面上的“Reset All”功能</span></span><br><span class=\"line\">        <span class=\"attr\">reset-enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"comment\"># 登录名</span></span><br><span class=\"line\">        <span class=\"attr\">login-username:</span> <span class=\"string\">admin</span></span><br><span class=\"line\">        <span class=\"comment\"># 登录密码</span></span><br><span class=\"line\">        <span class=\"attr\">login-password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">        <span class=\"comment\"># 新版需要配置这个属性才能访问监控页面</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Starter方式导入\"><a href=\"#Starter方式导入\" class=\"headerlink\" title=\"Starter方式导入\"></a>Starter方式导入</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>start方式也需要配置类来注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DruidConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//自动装配DruidDataSource</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">druidDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource = <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">druid:</span></span><br><span class=\"line\">      <span class=\"attr\">filters:</span> <span class=\"string\">stat,wall,log4j</span> <span class=\"comment\">#监控sql，防火墙，日志</span></span><br><span class=\"line\">      <span class=\"attr\">stat-view-servlet:</span> <span class=\"comment\">#监控页</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">login-username:</span> <span class=\"string\">admin</span></span><br><span class=\"line\">        <span class=\"attr\">login-password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">      <span class=\"attr\">web-stat-filter:</span> <span class=\"comment\">#监控web</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">url-pattern:</span> <span class=\"string\">/*</span></span><br><span class=\"line\">        <span class=\"attr\">exclusions:</span> <span class=\"string\">&#x27;*.js,*.css,/druid/*&#x27;</span></span><br><span class=\"line\">      <span class=\"attr\">aop-patterns:</span> <span class=\"string\">com.lan5th</span> <span class=\"comment\">#监控Bean</span></span><br><span class=\"line\">      <span class=\"attr\">filter:</span> <span class=\"comment\">#对于上面filters的详细配置</span></span><br><span class=\"line\">        <span class=\"attr\">stat:</span></span><br><span class=\"line\">          <span class=\"attr\">slow-sql-millis:</span> <span class=\"number\">1000</span></span><br><span class=\"line\">          <span class=\"attr\">log-slow-sql:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">wall:</span></span><br><span class=\"line\">          <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mybatis\"><a href=\"#Mybatis\" class=\"headerlink\" title=\"Mybatis\"></a>Mybatis</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注册Mapper方式</p>\n<ul>\n<li>在Mapper类上方添加<code>@Mapper</code>注解</li>\n<li>在主类上方添加<code>@MapperScan(&quot;com.lan5th.mapper&quot;)</code>自动扫描包注解</li>\n</ul>\n<p>配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">type-aliases-package:</span> <span class=\"string\">com.lan5th.pojo</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mybatis/mapper/*.xml</span></span><br><span class=\"line\">  <span class=\"attr\">config-location:</span> <span class=\"string\">classpath:mybatis/mybatis-config.xml</span> <span class=\"comment\">#配置文件可以不配置，而是使用下面的方式进行配置</span></span><br><span class=\"line\">  <span class=\"attr\">configuration:</span> <span class=\"comment\">#代替配置文件的功能</span></span><br><span class=\"line\">    <span class=\"attr\">map-underscore-to-camel-case:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一般方式\"><a href=\"#一般方式\" class=\"headerlink\" title=\"一般方式\"></a>一般方式</h3><p>使用方式与之前相似</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果是包扫描方式需要@Repository注解</span></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">selectUser</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Mapper.xml需要在配置文件中所确定的路径下进行编写，不能像之前放在Mapper类的同级目录下</strong></p>\n<p>然后在对应的<code>xxxMapper.xml</code>中编写sql</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.lan5th.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getStudentList&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;Student&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from mybatis.student;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注解方式\"><a href=\"#注解方式\" class=\"headerlink\" title=\"注解方式\"></a>注解方式</h3><p>直接在mapper接口的方法中添加sql相关注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select * from User;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">selectUser</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>当然也可以使用混合方法，即两种方法同时使用</strong></p>\n<p>使用方法：</p>\n<ul>\n<li>引入<code>mybatis-spring-boot-starter</code></li>\n<li>配置<code>application.yaml</code>指明mapper-location位置</li>\n<li>编写Mapper接口，标注@Mapper注解(或使用包扫描)</li>\n<li>简单操作使用注解方式（如单表select）</li>\n<li>复杂操作使用mapper.xml进行绑定映射</li>\n</ul>\n<h2 id=\"MybatisPlus\"><a href=\"#MybatisPlus\" class=\"headerlink\" title=\"MybatisPlus\"></a>MybatisPlus</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>MybatisPlusProperties已经默认配置好了mapper映射文件的路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> String[] mapperLocations = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;classpath*:/mapper/**/*.xml&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>即任意路径下的mapper包都会被扫描</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210918114811888.png\" alt=\"image-20210918114811888\"></p>\n<p>Mapper接口继承BaseMapper，其中已经实现了一些简单的CRUD方法</p>\n<p><code>UserMapper.java</code>继承BaseMapper&lt;&gt;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseMapper</span>&lt;<span class=\"title\">User</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>UserService.java</code>继承IService&lt;&gt;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> <span class=\"keyword\">extends</span> <span class=\"title\">IService</span>&lt;<span class=\"title\">User</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>UserServiceImpl.java</code>继承ServiceImpl&lt;&gt;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">ServiceImpl</span>&lt;<span class=\"title\">UserMapper</span>, <span class=\"title\">User</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分页功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/getUser&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUserList</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;pn&quot;, defaultValue = &quot;1&quot;)</span> Integer pageNo,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                         Model model)</span></span>&#123;</span><br><span class=\"line\">    Page&lt;User&gt; userPage = <span class=\"keyword\">new</span> Page&lt;&gt;(pageNo, <span class=\"number\">10</span>);</span><br><span class=\"line\">    Page&lt;User&gt; page = userService.page(userPage);</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;page&quot;</span>, page);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;/tablePage&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"number\">47.113</span><span class=\"number\">.225</span><span class=\"number\">.244</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">xxxxxx</span> <span class=\"comment\">#这个是redis-server的密码</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>redis需要的连接工厂已经自动配置完成：LettuceConnectionConfiguraion和JedisConnectionConfiguration</p>\n</li>\n<li><p>Redis模板</p>\n<ul>\n<li>RedisTemplate：可以实现Redis基本操作</li>\n<li>StringRedisTemplate：由于String类型是常用类型，因此springboot将其提取为一个单独的组件</li>\n</ul>\n</li>\n<li><p>SpringBoot2.0以上默认使用lettuce作为默认客户端，如果要使用jedis，需要自行导入jedis的依赖包并在配置文件中手动指定客户端类型<code>spring.redis.client-type</code></p>\n</li>\n</ul>\n<p>操作实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">redisTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取连接对象</span></span><br><span class=\"line\">    RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class=\"line\">    connection.flushDb();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//先用opsForXXX()获取专门处理某类业务的工具</span></span><br><span class=\"line\">    <span class=\"comment\">//如valueOperations专门操作字符串</span></span><br><span class=\"line\">    ValueOperations valueOperations = redisTemplate.opsForValue();</span><br><span class=\"line\">    <span class=\"comment\">//再调用valueOperations的方法来执行具体操作</span></span><br><span class=\"line\">    valueOperations.set(<span class=\"string\">&quot;key&quot;</span>,<span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\">    System.out.println(valueOperations.get(<span class=\"string\">&quot;key&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>阿里云redis连接失败的原因</strong> </p>\n<ul>\n<li>阿里云安全组策略是否开启对应端口？</li>\n<li>redis-server配置文件中是否绑定0.0.0.0？</li>\n<li>server密码问题</li>\n<li>服务器防火墙是否开放对应端口，如CentOS7系统：<ul>\n<li>开放防火墙对应端口<code>firewall-cmd --zone=public --add-port=6379/tcp --permanent</code></li>\n<li>查看端口开放情况<code>netstat -ntlp</code></li>\n</ul>\n</li>\n</ul>\n<p>连接失败与protected-mode联系不大，请勿轻易关闭</p>\n<h1 id=\"单元测试Junit5\"><a href=\"#单元测试Junit5\" class=\"headerlink\" title=\"单元测试Junit5\"></a>单元测试Junit5</h1><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--兼容Junit4--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hamcrest<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hamcrest-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>编写测试方法：<code>@Test</code>注解（使用Junit5的注解）</li>\n<li>Junit具有Spring的功能如<code>@AutoWired</code>，<code>@Transactional</code>测试方法，完成后自动回滚</li>\n</ul>\n<h2 id=\"常用测试注解\"><a href=\"#常用测试注解\" class=\"headerlink\" title=\"常用测试注解\"></a>常用测试注解</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span> <span class=\"comment\">//单元测试注解</span></span><br><span class=\"line\"><span class=\"meta\">@ParameterizedTest</span> <span class=\"comment\">//参数化测试</span></span><br><span class=\"line\"><span class=\"meta\">@RepeatedTest</span> <span class=\"comment\">//方法可重复执行</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName</span> <span class=\"comment\">//为测试类或方法设置展示名称</span></span><br><span class=\"line\"><span class=\"meta\">@BeforeEach</span> <span class=\"comment\">//每个单元测试之前执行</span></span><br><span class=\"line\"><span class=\"meta\">@AfterEach</span> <span class=\"comment\">//每个单元测试之后执行</span></span><br><span class=\"line\"><span class=\"meta\">@BeforeAll</span> <span class=\"comment\">//所有单元测试之前执行（必须static）</span></span><br><span class=\"line\"><span class=\"meta\">@AfterAll</span> <span class=\"comment\">//所有单元测试之后执行（必须static）</span></span><br><span class=\"line\"><span class=\"meta\">@Tag</span> <span class=\"comment\">//表示单元测试类型</span></span><br><span class=\"line\"><span class=\"meta\">@Disabled</span> <span class=\"comment\">//表示测试方法不执行</span></span><br><span class=\"line\"><span class=\"meta\">@Timeout</span> <span class=\"comment\">//表示测试方法超过规定时间就会返回异常</span></span><br><span class=\"line\"><span class=\"meta\">@ExtendWith</span> <span class=\"comment\">//为测试类或方法提供扩展类引用，如使用SpringBoot自动注入功能 @ExtendWith(SpringExtension.class)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"断言机制\"><a href=\"#断言机制\" class=\"headerlink\" title=\"断言机制\"></a>断言机制</h2><p>检查业务逻辑返回的数据是否合理，所有测试运行结束后会有一个详细的运行报告</p>\n<p><strong>简单断言</strong></p>\n<p>使用Assertions包下的相关方法，也可以直接导入Assertions的静态方法，在编写测试类时直接调用</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210918170825707.png\" alt=\"image-20210918170825707\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = cal(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    Assertions.assertEquals(<span class=\"number\">3</span>,res,<span class=\"string\">&quot;业务逻辑断言失败&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i+j;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个断言失败，这个方法中后续的所有代码都不会执行</p>\n<p><strong>组合断言</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里的静态方法都已经import调用</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Assertions.assertAll(<span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">            ()-&gt; assertTrue(<span class=\"keyword\">true</span>&amp;&amp;<span class=\"keyword\">true</span>),</span><br><span class=\"line\">            ()-&gt; assertEquals(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>异常断言</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//抛出异常表示断言成功，无异常表示断言失败，输出响应提示信息</span></span><br><span class=\"line\">    assertThrows(ArithmeticException.class,</span><br><span class=\"line\">            ()-&gt;&#123;<span class=\"keyword\">int</span> i = <span class=\"number\">10</span>/<span class=\"number\">0</span>;&#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;业务逻辑居然正常运行&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>快速失败</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test4</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实际上if条件为真不论其他代码怎样都会直接失败</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        fail(<span class=\"string\">&quot;测试失败&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test5</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//前置条件失效，会skip错误，而不是和断言错误汇总在一起</span></span><br><span class=\"line\">    Assumptions.assumeTrue(<span class=\"keyword\">false</span>, <span class=\"string\">&quot;结果不是true&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;111111&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"嵌套测试\"><a href=\"#嵌套测试\" class=\"headerlink\" title=\"嵌套测试\"></a>嵌套测试</h2><p>嵌套测试中，外层Test不能驱动内层Test的<code>@BeforeEach</code>之类的方法，内层的Test能够驱动外层Test的<code>@BeforeEach</code>方法</p>\n<p>嵌套测试即多个测试内部类层层嵌套</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OuterTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">outertest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = cal(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        assertEquals(<span class=\"number\">3</span>,res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Nested</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MiddleTest</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Test</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">middleTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            assertEquals(<span class=\"number\">2</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"meta\">@Nested</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">innerTest</span></span>&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Test</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">innerTest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">                assertEquals(<span class=\"number\">3</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参数化测试\"><a href=\"#参数化测试\" class=\"headerlink\" title=\"参数化测试\"></a>参数化测试</h2><p>静态数据参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\"><span class=\"meta\">@ValueSource(ints = &#123;1,2,3,4,5&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test6</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法返回值参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\"><span class=\"meta\">@MethodSource(&quot;method&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test6</span><span class=\"params\">(String i)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法必须为静态，且返回流数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Stream&lt;String&gt; <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Stream.of(<span class=\"string\">&quot;apple&quot;</span>,<span class=\"string\">&quot;banana&quot;</span>,<span class=\"string\">&quot;lan5th&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"指标监控\"><a href=\"#指标监控\" class=\"headerlink\" title=\"指标监控\"></a>指标监控</h1><h2 id=\"开启Actuator\"><a href=\"#开启Actuator\" class=\"headerlink\" title=\"开启Actuator\"></a>开启Actuator</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>actuator的所有监控功能称为EndPoints，开启所有功能即暴露所有端点信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span> <span class=\"comment\">#配置所有端点</span></span><br><span class=\"line\">    <span class=\"attr\">enabled-by-default:</span> <span class=\"literal\">true</span> <span class=\"comment\">#暴露所有端点信息</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&#x27;*&#x27;</span> <span class=\"comment\">#以web方式暴露</span></span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span> <span class=\"comment\">#详细配置单个端点</span></span><br><span class=\"line\">    <span class=\"attr\">health:</span></span><br><span class=\"line\">      <span class=\"attr\">show-details:</span> <span class=\"string\">always</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>最常用的EndPoint</strong></p>\n<ul>\n<li>health</li>\n<li>Metric</li>\n<li>loggers</li>\n</ul>\n<h2 id=\"SpringBootAdmin\"><a href=\"#SpringBootAdmin\" class=\"headerlink\" title=\"SpringBootAdmin\"></a>SpringBootAdmin</h2><p>是一个开源的后台监管应用程序，如果添加了SpringSecurity，还需要作一些其他配置</p>\n<p><strong>新建一个springboot项目作为adminServer服务端</strong>，只需要引入这两个依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.codecentric<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>主程序类添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminserverApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(AdminserverApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>防止端口冲突更改端口号<code>server.port=8888</code></p>\n<p><strong>为我们需要监控的项目添加依赖作为adminServer客户端</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.codecentric<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">boot:</span></span><br><span class=\"line\">    <span class=\"attr\">admin:</span></span><br><span class=\"line\">      <span class=\"attr\">client:</span></span><br><span class=\"line\">        <span class=\"attr\">url:</span> <span class=\"string\">http://localhost:8888</span> <span class=\"comment\">#指定adminServer的ip和端口</span></span><br><span class=\"line\">        <span class=\"attr\">instance:</span></span><br><span class=\"line\">          <span class=\"attr\">prefer-ip:</span> <span class=\"literal\">true</span> <span class=\"comment\">#使用ip金星识别，否则会显示计算机名</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mainServer</span> <span class=\"comment\">#应用程序名称</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"深层原理剖析\"><a href=\"#深层原理剖析\" class=\"headerlink\" title=\"深层原理剖析\"></a>深层原理剖析</h1><h2 id=\"自定义Starter\"><a href=\"#自定义Starter\" class=\"headerlink\" title=\"自定义Starter\"></a>自定义Starter</h2><p>新建项目包含一个maven模块和SpringBoot模块</p>\n<p><strong>mystarter-spring-boot-starter</strong></p>\n<p>starter负责导入Autoconfiguration模块</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mystarter-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lan5th<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mystarter-spring-boot-starter-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>mystarter-spring-boot-starter-autoconfigure</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lan5th<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mystarter-spring-boot-starter-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mystarter-spring-boot-starter-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>首先我们定义一个逻辑应用HelloService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HelloProperties helloProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String userName)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloProperties.getPrefix()+userName+helloProperties.getSuffix();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>HelloService需要HelloServiceAutoConfiguration来给容器中进行注入，同时HelloServiceAutoConfiguration会绑定HelloProperties来读取配置文件的信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean(HelloService.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HelloService <span class=\"title\">helloService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        HelloService helloService = <span class=\"keyword\">new</span> HelloService();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;lan5th.hello&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String prefix;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String suffix;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPrefix</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prefix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrefix</span><span class=\"params\">(String prefix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.prefix = prefix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSuffix</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> suffix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSuffix</span><span class=\"params\">(String suffix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.suffix = suffix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210918230038309.png\" alt=\"image-20210918230038309\"></p>\n<p>我们还需要在这个路径下新建<code>spring.factories</code>来告诉springboot应该导入哪些自动配置类</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Auto Configure</span></span><br><span class=\"line\"><span class=\"meta\">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"attr\">com.lan5th.mystarterspringbootstarterautoconfigure.auto.HelloServiceAutoConfiguration</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在starter和autoconfigure编写完成后使用maven操作clean和install，此时我们自己编写的包就被安装在了本地的maven库，可以供其他程序进行调用</p>\n</blockquote>\n<p><strong>实际应用程序</strong></p>\n<p>引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lan5th<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mystarter-spring-boot-starter-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过配置文件来注入属性</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">lan5th:</span></span><br><span class=\"line\">  <span class=\"attr\">hello:</span></span><br><span class=\"line\">    <span class=\"attr\">prefix:</span> <span class=\"string\">&#x27;你好&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">suffix:</span> <span class=\"string\">&#x27;再见&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试Controller进行调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    String hello = helloService.sayHello(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hello;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际效果</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/image-20210918230441414.png\" alt=\"image-20210918230441414\"></p>\n<p>到此我们已经能够编写我们自己的starter来适应各种情况了！</p>\n<h2 id=\"Springboot启动原理\"><a href=\"#Springboot启动原理\" class=\"headerlink\" title=\"Springboot启动原理\"></a>Springboot启动原理</h2><blockquote>\n<p><code>getSpringFactoriesInstances()</code>一般都指从各个依赖的<code>spring.factories</code>文件中取值</p>\n</blockquote>\n<h3 id=\"创建SpringApplication\"><a href=\"#创建SpringApplication\" class=\"headerlink\" title=\"创建SpringApplication\"></a>创建SpringApplication</h3><ul>\n<li><p>保存一些信息</p>\n</li>\n<li><p>使用ClassUtils判断当前应用类型</p>\n</li>\n<li><p>寻找<strong>Bootstrappers</strong>：初始化引导器</p>\n<p>获取<code>List&lt;Bootstrapper&gt;</code>：从<code>spring.factories</code>中寻找</p>\n</li>\n<li><p>寻找<strong>ApplicationContextInitializer</strong>：初始化器</p>\n<p>获取<code>List&lt;ApplicationContextInitializer&lt;?&gt;&gt;</code>从<code>spring.factories</code>中寻找</p>\n</li>\n<li><p>寻找<strong>ApplicationListener</strong>：应用监听器</p>\n<p>获取<code>List&lt;ApplicationListener&gt;</code>从<code>spring.factories</code>中寻找</p>\n</li>\n</ul>\n<h3 id=\"运行SpringApplication\"><a href=\"#运行SpringApplication\" class=\"headerlink\" title=\"运行SpringApplication\"></a>运行SpringApplication</h3><ul>\n<li><p>StopWatch</p>\n</li>\n<li><p>记录应用启动时间</p>\n</li>\n<li><p>创建引导上下文<code>createBootstrapContext()</code></p>\n<ul>\n<li>获取之前所有的<strong>Bootstrappers</strong>遍历执行<code>inititialize()</code>来完成对引导启动器的上下文环境配置</li>\n<li>让当前应用进入headless模式<code>java.awt.headless</code></li>\n</ul>\n</li>\n<li><p>获取所有的<strong>SpringApplicationRunListener</strong>：运行监听器</p>\n<ul>\n<li><p>获取<code>List&lt;SpringApplicationRunListener&gt;</code>从<code>spring.factories</code>中寻找</p>\n</li>\n<li><p>遍历所有的SpringApplicationRunListener调用starting方法</p>\n<p>相当于通知所有关注系统启动过程的Listener进行监听</p>\n</li>\n</ul>\n</li>\n<li><p>保存命令行参数：ApplicationArgument</p>\n</li>\n<li><p>准备环境：<code>prepareEnvironment()</code></p>\n<ul>\n<li>返回或创建基础环境信息：<strong>StandardServletEnvironment</strong></li>\n<li>配置环境信息：读取所有的配置源属性的配置属性值（包括命令行和外部配置文件）</li>\n<li>绑定环境信息</li>\n<li>监听器调用<code>environmentPrepared()</code>：通知所有Listener当前环境准备完成</li>\n</ul>\n</li>\n<li><p>创建IOC容器<code>createApplicationContext()</code></p>\n<ul>\n<li>根据当前项目类型创建容器(当前为servlet)，因此会创建AnnotationConfigServletWebServerApplicationContext</li>\n</ul>\n</li>\n<li><p><strong>准备ApplicationContext IOC容器的基本信息 <code>prepareContext()</code></strong></p>\n<ul>\n<li><p>保存环境信息</p>\n</li>\n<li><p>IOC容器的后置处理流程</p>\n</li>\n<li><p>应用初始化器applyInitializers()</p>\n<ul>\n<li><p>遍历所有的<strong>ApplicationContextInitializer</strong>，调用initialize方法对IOC容器进行初始化扩展功能</p>\n</li>\n<li><p>调用所有的监听器的<code>contextPrepared(),EventPublishRunListener()</code>，通知所有的Listener上下文准备完成</p>\n</li>\n</ul>\n</li>\n<li><p>调用所有的监听器的<code>contextLoaded()</code>通知所有Listener上下文已经加载完成</p>\n</li>\n</ul>\n</li>\n<li><p>刷新IOC容器<code>refreshContext()</code></p>\n<ul>\n<li>创建容器中的所有组件Bean（Spring注解）</li>\n</ul>\n</li>\n<li><p>调用所有的监听器的<code>started(context)</code>方法，通知所有Listener项目已经启动</p>\n</li>\n<li><p>调用所有的Runners：callRunners()</p>\n<ul>\n<li>获取容器中的<strong>ApplicationRunner</strong></li>\n<li>获取容器中的<strong>CommandLineRunner</strong></li>\n<li>合并所有Runner并按照<code>@Order</code>进行排序</li>\n<li>遍历所有的Runner，调用<code>run()</code>方法</li>\n</ul>\n</li>\n<li><p>调用所有的监听器的<code>running()</code>方法，通知Listener应用开始运行</p>\n</li>\n<li><p>如果以上出现任何异常，调用所有的监听器的<code>failed()</code>方法，通知Listener出现异常</p>\n</li>\n</ul>\n<h2 id=\"自定义Listener\"><a href=\"#自定义Listener\" class=\"headerlink\" title=\"自定义Listener\"></a>自定义Listener</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplicationContextInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextInitializer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(ConfigurableApplicationContext configurableApplicationContext)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyApplicationContextInitializer is running......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplicationListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(ApplicationEvent applicationEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyApplicationListener is running......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySpringApplicationRunListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">SpringApplicationRunListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SpringApplication application;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MySpringApplicationRunListener</span><span class=\"params\">(SpringApplication application, String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.application = application;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">starting</span><span class=\"params\">(ConfigurableBootstrapContext bootstrapContext)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MySpringApplicationRunListener is starting......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">environmentPrepared</span><span class=\"params\">(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MySpringApplicationRunListener is environmentPrepared......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextPrepared</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MySpringApplicationRunListener is contextPrepared......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextLoaded</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MySpringApplicationRunListener is contextLoaded......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">started</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MySpringApplicationRunListener is started......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">running</span><span class=\"params\">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MySpringApplicationRunListener is running......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failed</span><span class=\"params\">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MySpringApplicationRunListener is failed......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 运行开始时的一次性业务</span></span><br><span class=\"line\"><span class=\"comment\"> * MyApplicationRunner是从容器中获取因此不需要给spring.factories中添加配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplicationRunner</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationRunner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(ApplicationArguments args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyApplicationRunner is running......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 运行开始时的一次性业务</span></span><br><span class=\"line\"><span class=\"comment\"> * MyCommandLineRunner是从容器中获取因此不需要给spring.factories中添加配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCommandLineRunner</span> <span class=\"keyword\">implements</span> <span class=\"title\">CommandLineRunner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyCommandLineRunner is running......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>spring.factories</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Run Listeners</span></span><br><span class=\"line\"><span class=\"meta\">org.springframework.boot.SpringApplicationRunListener</span>=<span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"attr\">com.lan5th.listener.MySpringApplicationRunListener</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Application Context Initializers</span></span><br><span class=\"line\"><span class=\"meta\">org.springframework.context.ApplicationContextInitializer</span>=<span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"attr\">com.lan5th.listener.MyApplicationContextInitializer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Application Listeners</span></span><br><span class=\"line\"><span class=\"meta\">org.springframework.context.ApplicationListener</span>=<span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"attr\">com.lan5th.listener.MyApplicationListener</span></span><br></pre></td></tr></table></figure>\n","categories":["JavaEE"]},{"title":"用Java代码实现本地缓存","url":"/2021/12/22/%E6%9D%82%E8%B0%88/%E7%94%A8Java%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98/","content":"<p>要点：</p>\n<ul>\n<li>数据存储格式：String-Object</li>\n<li>作为工具类所有方法需要static</li>\n<li>key的删除策略：<ul>\n<li>定时任务线程定期删除（ScheduledExecutorService）</li>\n<li>get时手动检测是否过期（懒惰淘汰）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalCache</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//启动开始后延迟2秒执行时效策略</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INITIAL_DELAY_TIME = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//执行时效策略间隔时间</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PERIOD_TIME = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//缓存map</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ConcurrentHashMap&lt;String, Cache&gt; map;</span><br><span class=\"line\">    <span class=\"comment\">//执行过期清除的定时任务线程池</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ScheduledExecutorService executorService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        map = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">        executorService = Executors.newScheduledThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\">        executorService.scheduleAtFixedRate(<span class=\"keyword\">new</span> TimerTask(), INITIAL_DELAY_TIME, PERIOD_TIME, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在get时也需要进行判断</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        Cache cache = map.get(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache.getExpire() &gt; <span class=\"number\">0</span> &amp;&amp; cache.getExpire() &lt; System.currentTimeMillis()) &#123;</span><br><span class=\"line\">            remove(key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.get(key).getValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String key, Object value)</span> </span>&#123;</span><br><span class=\"line\">        put(key, value, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String key, Object value, <span class=\"keyword\">long</span> expire)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;添加缓存，key = &quot;</span> + key + <span class=\"string\">&quot; value = &quot;</span> + value + <span class=\"string\">&quot; ttl = &quot;</span> + expire);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (expire &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            map.put(key, <span class=\"keyword\">new</span> Cache(value, expire));</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            map.put(key, <span class=\"keyword\">new</span> Cache(value));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        Cache remove = map.remove(key);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;删除了key：&quot;</span> + key + <span class=\"string\">&quot; value：&quot;</span> + remove.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定期删除所有过期key</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">removeAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;--------------开始执行定期清除--------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : map.keySet()) &#123;</span><br><span class=\"line\">            Cache cache = map.get(key);</span><br><span class=\"line\">            <span class=\"keyword\">long</span> timeMillis = System.currentTimeMillis();</span><br><span class=\"line\">            <span class=\"keyword\">long</span> expire = cache.getExpire();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (expire &gt; <span class=\"number\">0</span> &amp;&amp; expire &lt; timeMillis) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;timeMillis = &quot;</span> +  timeMillis);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;expire = &quot;</span> + expire);</span><br><span class=\"line\">                remove(key);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;--------------定期清除结束--------------&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除任务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimerTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                removeAll();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;定期缓存清除异常&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cache</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Object value;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> expire = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cache</span><span class=\"params\">(Object value, <span class=\"keyword\">long</span> expire)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.expire = System.currentTimeMillis() + expire * <span class=\"number\">1000</span>;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cache</span><span class=\"params\">(Object value)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getExpire</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> expire;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["杂谈"]},{"title":"SpringBoot中的Filter、Interceptor和AOP","url":"/2021/12/22/%E6%9D%82%E8%B0%88/SpringBoot%E4%B8%AD%E7%9A%84Filter%E3%80%81Interceptor%E5%92%8CAOP/","content":"<h1 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h1><p>谈到AOP，我们要清楚，AOP指的是面向切面的设计思想，而SpringAOP是AOP思想的一种具体实现，除此之外，常用到的还有AspectJAOP，两者的区别主要有：</p>\n<ol>\n<li><p>织入的时期不同</p>\n<p>Spring Aop采用的动态织入，而Aspectj是静态织入。静态织入：指在编译时期就织入，即：编译出来的class文件，字节码就已经被织入了。动态织入又分静动两种，静则指织入过程只在第一次调用时执行；动则指根据代码动态运行的中间状态来决定如何操作</p>\n</li>\n<li><p>可以应用的对象不同</p>\n<p> Spring AOP的通知是基于该对象是SpringBean对象才可以，而AspectJ可以在任何Java对象上应用通知。</p>\n</li>\n</ol>\n<p>在初学AOP时，我曾将Filter、Interceptor和SpringAOP混淆不清，而这些其实都是AOP思想的一些具体的实现，根据具体情景选择不同的实现即可</p>\n<ul>\n<li><p>Filter类似于JavaWeb中我们手动配置的过滤器，在Spring中实现javax.servlet下的Filter接口将其作为一个Bean注入到IOC容器中使用，实现doFilter方法即可</p>\n</li>\n<li><p>Interceptor是Spring自带的拦截器，实现HandlerInterceptor并实现preHandle、postHandle、afterCompletion方法就可以使用</p>\n</li>\n<li><p>使用SpringAOP，需要标注<code>@Aspect</code>注解，指明切面类和方法，这里给出一个具体实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义切面，其他方法直接引用这个方法作为切面</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(public * com.example.mybatisplus.web.controller.TestController.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">webLog</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过RequestContextHolder可以获取到请求上下文信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;webLog()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deBefore</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 接收到请求，记录请求内容</span></span><br><span class=\"line\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request = attributes.getRequest();</span><br><span class=\"line\">        <span class=\"comment\">// 记录下请求内容</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;URL : &quot;</span> + request.getRequestURL().toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;HTTP_METHOD : &quot;</span> + request.getMethod());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;IP : &quot;</span> + request.getRemoteAddr());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;CLASS_METHOD : &quot;</span> + joinPoint.getSignature().getDeclaringTypeName() + <span class=\"string\">&quot;.&quot;</span> + joinPoint.getSignature().getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ARGS : &quot;</span> + Arrays.toString(joinPoint.getArgs()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;webLog()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAfterReturning</span><span class=\"params\">(Object ret)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理完请求，返回内容</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法的返回值 : &quot;</span> + ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后置异常通知</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing(&quot;webLog()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">throwsE</span><span class=\"params\">(JoinPoint jp)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法异常时执行.....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后置最终通知,final增强，不管是抛出异常或者正常退出都会执行</span></span><br><span class=\"line\">    <span class=\"meta\">@After(&quot;webLog()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">(JoinPoint jp)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法最后执行.....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//环绕通知,环绕增强，相当于MethodInterceptor</span></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;webLog()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">arround</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;方法环绕start.....&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Object o =  pjp.proceed();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;方法环绕proceed，结果是 :&quot;</span> + o);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><img src=\"https://img2018.cnblogs.com/blog/1312982/201904/1312982-20190412203837811-1949443053.png\"></p>\n<p>推荐一篇文章详细介绍了三者的用法：<a href=\"https://www.cnblogs.com/caozx/p/10698433.html\">Filter，Interceptor和SpringAop - 爱跑步的星仔 - 博客园 (cnblogs.com)</a></p>\n<h1 id=\"RequestContextHolder\"><a href=\"#RequestContextHolder\" class=\"headerlink\" title=\"RequestContextHolder\"></a>RequestContextHolder</h1><p>为了方便我们在任何方法中都能快速获取请求相关信息，SpringMVC封装了RequestContextHolder来帮助我们快速获取Request，在调用业务时就不需要将Request作为参数传入</p>\n<p>基本使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在没有使用JSF的项目中这两个方法是等效的</span></span><br><span class=\"line\"><span class=\"comment\">//RequestAttributes attributes = RequestContextHolder.currentRequestAttributes();</span></span><br><span class=\"line\">RequestAttributes attributes = RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\"><span class=\"comment\">//获取session中的参数</span></span><br><span class=\"line\">String name = (String) attributes.getAttribute(<span class=\"string\">&quot;name&quot;</span>, RequestAttributes.SCOPE_SESSION);</span><br><span class=\"line\"><span class=\"comment\">//获取request和response</span></span><br><span class=\"line\">HttpServletRequest request = ((ServletRequestAttributes) attributes).getRequest();</span><br><span class=\"line\">HttpServletResponse response = ((ServletRequestAttributes) attributes).getResponse();</span><br></pre></td></tr></table></figure>\n\n<p>在使用时会想到几个问题：</p>\n<ul>\n<li>RequestContextHolder是如何与当前请求绑定的？</li>\n<li>request和response何时被设置进去？</li>\n<li>为什么RequestAttributes强转ServletRequestAttributes之后可以直接获取请求和响应？</li>\n</ul>\n<ol>\n<li><p>RequestContextHolder中封装了两个ThreadLocal保存当前请求和请求参数，对当前请求进行绑定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;RequestAttributes&gt; requestAttributesHolder = <span class=\"keyword\">new</span> NamedThreadLocal(<span class=\"string\">&quot;Request attributes&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ThreadLocal&lt;RequestAttributes&gt; inheritableRequestAttributesHolder = <span class=\"keyword\">new</span> NamedInheritableThreadLocal(<span class=\"string\">&quot;Request context&quot;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在接收请求的过程中，会进行HttpServletBean的初始化，最终调用到FrameworkServlet实现的对应方法，FrameworkServlet的相关依赖如图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220116232858.png\" alt=\"image-20211223204121984\"></p>\n<p>这里我们来看processRequest方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    \t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\">    Throwable failureCause = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//获取上一个请求的LocaleContext</span></span><br><span class=\"line\">    LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class=\"line\">    <span class=\"comment\">//建立新的LocaleContext</span></span><br><span class=\"line\">    LocaleContext localeContext = buildLocaleContext(request);</span><br><span class=\"line\">\t<span class=\"comment\">//获取上一个请求的RequestAttributes</span></span><br><span class=\"line\">    RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">    <span class=\"comment\">//建立新的RequestAttributes</span></span><br><span class=\"line\">    ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class=\"line\"></span><br><span class=\"line\">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class=\"keyword\">new</span> RequestBindingInterceptor());</span><br><span class=\"line\">\t<span class=\"comment\">//初始化LocaleContextHolder和RequestContextHolder</span></span><br><span class=\"line\">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用子类的doService方法</span></span><br><span class=\"line\">        doService(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (ServletException | IOException ex) &#123;</span><br><span class=\"line\">        failureCause = ex;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        failureCause = ex;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">&quot;Request processing failed&quot;</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//恢复request</span></span><br><span class=\"line\">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestAttributes != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            requestAttributes.requestCompleted();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        logResult(request, response, failureCause, asyncManager);</span><br><span class=\"line\">        <span class=\"comment\">//发布事件</span></span><br><span class=\"line\">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此对每个请求的RequestContextHolder进行了封装</p>\n</li>\n<li><p>在buildRequestAttributes方法中返回了新的ServletRequestAttributes对象，这个类继承了RequestAttributes，拥有更多的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ServletRequestAttributes <span class=\"title\">buildRequestAttributes</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">      <span class=\"meta\">@Nullable</span> HttpServletResponse response, <span class=\"meta\">@Nullable</span> RequestAttributes previousAttributes)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (previousAttributes == <span class=\"keyword\">null</span> || previousAttributes <span class=\"keyword\">instanceof</span> ServletRequestAttributes) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ServletRequestAttributes(request, response);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;  <span class=\"comment\">// preserve the pre-bound RequestAttributes instance</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","categories":["JavaEE"]},{"title":"Hibernate入门","url":"/2022/01/16/JavaEE/hibernate%E5%85%A5%E9%97%A8/","content":"<h1 id=\"hibernate配置文件\"><a href=\"#hibernate配置文件\" class=\"headerlink\" title=\"hibernate配置文件\"></a>hibernate配置文件</h1><h2 id=\"hibernate配置文件-1\"><a href=\"#hibernate配置文件-1\" class=\"headerlink\" title=\"hibernate配置文件\"></a>hibernate配置文件</h2><p><code>hibernate.cfg.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">hibernate-configuration</span> <span class=\"meta-keyword\">PUBLIC</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hibernate-configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">session-factory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 数据源配置 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hibernate.connection.driver_class&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hibernate.connection.url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/database<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hibernate.connection.username&quot;</span>&gt;</span>username<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hibernate.connection.password&quot;</span>&gt;</span>password<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 数据库方言 MySQL --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 连接池 C3P0 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;c3p0.min_size&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;c3p0.max_size&quot;</span>&gt;</span>20<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;c3p0.timeout&quot;</span>&gt;</span>1800<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;c3p0.max_statements&quot;</span>&gt;</span>50<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 格式化输出生成的SQL语句 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hibernate.show_sql&quot;</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hibernate.format_sql&quot;</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- hibernate根据映射关系自动建表</span></span><br><span class=\"line\"><span class=\"comment\">            默认: 不会创建表</span></span><br><span class=\"line\"><span class=\"comment\">            create: 没有表就创建，有表就删除重建。</span></span><br><span class=\"line\"><span class=\"comment\">            create-drop: 没有表就创建，有表就删除重建，使用完自动删表。</span></span><br><span class=\"line\"><span class=\"comment\">            update: 没有表就创建表，否则使用现有的表。</span></span><br><span class=\"line\"><span class=\"comment\">            validate: 校验实体关系映射文件和数据表是否对应，不对应则报错</span></span><br><span class=\"line\"><span class=\"comment\">         --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hibernate.hbm2ddl.auto&quot;</span>&gt;</span>update<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 加载映射文件，这里写的时路径而不是包名，以&#x27;/&#x27;分隔 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mapping</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;hbm/WFProcessProperty.hbm.xml&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">session-factory</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"映射关系文件\"><a href=\"#映射关系文件\" class=\"headerlink\" title=\"映射关系文件\"></a>映射关系文件</h2><p>映射关系文件<code>.hbm.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">hibernate-mapping</span> <span class=\"meta-keyword\">PUBLIC</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这里写包名，下面就可以直接写类名 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hibernate-mapping</span> <span class=\"attr\">package</span>=<span class=\"string\">&quot;pojo&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Course&quot;</span> <span class=\"attr\">table</span>=<span class=\"string\">&quot;course&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 主键id需要单独配置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;long&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">generator</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;assigned&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;java.lang.String&quot;</span> <span class=\"attr\">not-null</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;students&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">key</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sid&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 排序index --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list-index</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sid&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">list-index</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- list中的对象关系映射 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">many-to-many</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;Student&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">many-to-many</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>hibernate-mapping标签的一些属性：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220116213032.png\" alt=\"image-20220116213025846\"></p>\n<p>class标签的一些属性：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220116213629.png\" alt=\"image-20220116213629173\"></p>\n<p>主键映射的方式：</p>\n<ul>\n<li>assigned：外部程序对id赋值</li>\n<li>native：由数据库对id赋值</li>\n<li>identity：采用<strong>数据库</strong>提供的主键生成机制</li>\n<li>increment：采用<strong>hibernate</strong>提供的主键生成机制</li>\n<li>sequence：采用数据库提供的sequence机制生成主键</li>\n<li>foreign：使用外部表的字段作为主键</li>\n</ul>\n<p>property标签常用属性：</p>\n<ul>\n<li>update：字段是否可以修改，默认为true</li>\n<li>insert：字段是否可以添加，默认为true</li>\n<li>lazy：是否采用延迟加载策略，默认为true</li>\n</ul>\n<p>集合类的常用属性：</p>\n<ul>\n<li>inverse：本表是否参与维护关系，默认为true，为false时会将维护权转让给对方类</li>\n<li>cascade：级联操作，当对本表操作时是否对集合中的类的对应表进行操作</li>\n</ul>\n<h2 id=\"测试类\"><a href=\"#测试类\" class=\"headerlink\" title=\"测试类\"></a>测试类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SessionFactory sessionFactory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Session session;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Transaction transaction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//默认会自动去加载resourcs路径下hibernate.cfg.xml文件中的配置</span></span><br><span class=\"line\">        <span class=\"comment\">//可以在configure()方法中指明其他路径</span></span><br><span class=\"line\">        Configuration configure = <span class=\"keyword\">new</span> Configuration().configure();</span><br><span class=\"line\">        sessionFactory = configure.buildSessionFactory();</span><br><span class=\"line\">        session = sessionFactory.openSession();</span><br><span class=\"line\">        <span class=\"comment\">//事务</span></span><br><span class=\"line\">        transaction = session.beginTransaction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//提交事务</span></span><br><span class=\"line\">        transaction.commit();</span><br><span class=\"line\">        session.close();</span><br><span class=\"line\">        sessionFactory.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hibernateTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Student student = session.get(Student.class, <span class=\"number\">1L</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;修改前：&quot;</span>);</span><br><span class=\"line\">        System.out.println(student);</span><br><span class=\"line\"></span><br><span class=\"line\">        student.setName(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">        session.update(student);</span><br><span class=\"line\"></span><br><span class=\"line\">        student = session.get(Student.class, <span class=\"number\">1L</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;修改后：&quot;</span>);</span><br><span class=\"line\">        System.out.println(student);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HQL\"><a href=\"#HQL\" class=\"headerlink\" title=\"HQL\"></a>HQL</h1><p>HQL：Hibernate Query Language，是一种面向对象的查询语言，可以完成查询、修改、删除操作，<strong>但不能完成插入操作</strong></p>\n<p>HQL是在Hibernate中作用的中间层语言，查询过程：java -&gt; HQL -&gt; SQL</p>\n<ul>\n<li><p>查询语句</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//最简单的hql，默认select *</span></span><br><span class=\"line\">String hql = <span class=\"string\">&quot;from Student&quot;</span>;</span><br><span class=\"line\">Query query = session.createQuery(hql);</span><br><span class=\"line\"><span class=\"comment\">//简单分页</span></span><br><span class=\"line\">query.setFirstResult(<span class=\"number\">0</span>);</span><br><span class=\"line\">query.setMaxResults(<span class=\"number\">1</span>);</span><br><span class=\"line\">List&lt;Student&gt; list = query.list();</span><br><span class=\"line\">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<p>只需要选取单独字段可以完全拼写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String hql = <span class=\"string\">&quot;select name from Student&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>也可以直接追加where条件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String hql = <span class=\"string\">&quot;from Student where id = 2896391706445565017L&quot;</span>;</span><br><span class=\"line\">Query query = session.createQuery(hql);</span><br><span class=\"line\">Student student = (Student) query.uniqueResult();</span><br></pre></td></tr></table></figure>\n\n<p>像preparedStatement那样使用占位符</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String hql = <span class=\"string\">&quot;from WFProcessProperty where id = :id&quot;</span>;</span><br><span class=\"line\">Query query = session.createQuery(hql);</span><br><span class=\"line\">query.setLong(<span class=\"string\">&quot;id&quot;</span>,<span class=\"number\">2896391706445565017L</span>);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h1 id=\"hibernate使用小坑\"><a href=\"#hibernate使用小坑\" class=\"headerlink\" title=\"hibernate使用小坑\"></a>hibernate使用小坑</h1><h2 id=\"无法检测到-hbm-xml文件\"><a href=\"#无法检测到-hbm-xml文件\" class=\"headerlink\" title=\"无法检测到.hbm.xml文件\"></a>无法检测到.hbm.xml文件</h2><p>注意：这个文件和mybatis的mapper文件一样，如果需要放在java源码目录下，需要在<code>pom.xml</code>中进行配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出对象导致stackoverflow\"><a href=\"#输出对象导致stackoverflow\" class=\"headerlink\" title=\"输出对象导致stackoverflow\"></a>输出对象导致stackoverflow</h2><p>如果两个实体对象之间有循环依赖关系，如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Course&gt; courses;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Course</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Student&gt; students;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们在使用lombok时可能不太注意，@Data注解为我们自动生成了toString()方法，Course类的toString()方法示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Course&#123;&quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;id=&quot;</span> + id +</span><br><span class=\"line\">            <span class=\"string\">&quot;, name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;, students=&quot;</span> + students +</span><br><span class=\"line\">            <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的返回拼接的students中又会去调用Student类的toString()方法，而Student类的toString()方法又会去调用Course类的toString()。。。进而出现无限的循环</p>\n<p><strong>解决办法：</strong></p>\n<p>手动实现任意一方的toString方法，取消对另一方的调用</p>\n","categories":["JavaEE"]},{"title":"记录一次阿里云被入侵挖矿的经验","url":"/2022/01/20/%E6%9D%82%E8%B0%88/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E9%98%BF%E9%87%8C%E4%BA%91%E8%A2%AB%E5%85%A5%E4%BE%B5%E6%8C%96%E7%9F%BF%E7%9A%84%E7%BB%8F%E9%AA%8C/","content":"<p>这次阿里云被入侵的主要途径是通过redis漏洞对本机文件进行各种操作</p>\n<p><strong>疏忽的地方主要有两点</strong></p>\n<ul>\n<li>redis未配置bind绑定客户端ip，事后已经暂时绑定127.0.0.1</li>\n<li>redis密码过于简单，之间为了测试方便，密码仅设为123456，事后已修改为更复杂的密码</li>\n</ul>\n<h1 id=\"补救措施\"><a href=\"#补救措施\" class=\"headerlink\" title=\"补救措施\"></a>补救措施</h1><ol>\n<li><p>补救上面两点，同时如果有需要请配置防火墙</p>\n</li>\n<li><p>根据阿里云的安全中心提示进行查找，杀死对应进程<code>kill -9 pid</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220120125737.png\" alt=\"image-20220120125729918\"></p>\n</li>\n<li><p>除了杀死进程之外，被入侵时还被插入了恶意脚本文件和自启动后门，跟上一条一样，按照提示找到对应路径，尝试删除源文件，如果是系统文件不能删除就把修改过的内容删掉</p>\n</li>\n<li><p>这时我们会发现自己明明使用的是root账号，仍然没有足够的权限去编辑或删除文件，这时尝试使用<code>chmod 666 filename</code>来修改对应权限（不过一般这样是不会成功的）</p>\n</li>\n<li><p>chmod的原理是与chattr一致的，在chmod失败后我们可以<code>lsattr filename</code>来查看文件属性，如果发现指定文件有<code>i</code>或<code>a</code>属性，可以尝试<code>chattr -ia filename</code>来修改对应属性</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220120130617.png\" alt=\"image-20220120130617404\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">A　　：当设定了 A 这个属性时，这个档案(或目录)的存取时间</span><br><span class=\"line\">　　atime (access) 将不可被修改， 可避免例如手提式计算机容易有磁盘 I/O 错误的情况发生！</span><br><span class=\"line\">S　　：这个功能有点类似 sync 的功能！就是会将数据同步写入磁盘当中！可以有效的避免数据流失！</span><br><span class=\"line\">a　　：当设定 a 之后，这个档案将只能增加数据，而不能删除，只有 root 才能设定这个属性。</span><br><span class=\"line\">c　　：这个属性设定之后，将会自动的将此档案『压缩』，在读取的时候将会自动解压缩出来，但是在储存的时候，将会先进行压缩&gt;之后再储存（看来对于大档案似乎蛮有用的！）</span><br><span class=\"line\">d　　：当 dump (备份)程序被执行的时候，设定 d 属性将可使该档案(或目录)具有 dump 功效！</span><br><span class=\"line\">i　　：这个 i 可就很厉害了！他可以让一个档案『不能被删除、改名、设定连结也无法写入或新增数据！对于系统安全性有相当大的帮助！</span><br><span class=\"line\">j　　：当使用 ext3 这个档案系统格式时，设定 j 属性将会使档案在写入时先记录在 journal 中！ 但是当 filesystem 设定参数为 &gt;data=journalled 时，由于已经设定了日志了，所以这个属性无效！</span><br><span class=\"line\">s　　：当档案设定了 s 参数时，他将会被完全的移除出这个硬盘空间。</span><br><span class=\"line\">u　　：与 s 相反的，当使用 u 来设定档案时，则数据内容其实还存在磁盘中，可以使用来 undeletion.</span><br><span class=\"line\">R　　：递归处理，将指定目录下的所有文件及子目录一并处理。</span><br><span class=\"line\">v　　：显示文件或目录版本。</span><br><span class=\"line\">V　　：显示版本信息。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这时候你使用chattr会报错<code>bash: chattr: command not found</code></p>\n<p>黑客毕竟不是吃干饭的，他修改了你的文件属性不让你删除和编辑之后，删除了你的chattr指令来防止你移除他们植入的代码</p>\n<p>不过不要慌张，这时输入下面几个指令，重新安装一下对应的指令包即可：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum remove e2fsprogs    //此步骤注意同时会删掉很多依赖的包</span><br><span class=\"line\">yum -y install e2fsprogs</span><br></pre></td></tr></table></figure>\n\n<p>安装完之后重新使用chattr指令，将被篡改的文件修复或删除</p>\n</li>\n<li><p>大部分篡改到了第6步就可以修复完成了，但笔者在修复/root/.ssh/authorized_keys文件时发现：在XShell客户端一旦使用chattr指令就会自动与阿里云服务器失去连接，但并不清楚到底是黑客植入的脚本作用还是修改authorized_keys之后会对本地连接造成影响，不过之后尝试了在阿里云工作台的远程连接进行操作，成功进行了修复，这次的事件就告一段落了。。。</p>\n</li>\n</ol>\n<p>经验教训：</p>\n<p>公网毕竟不像私网，一定要时时刻刻注意服务器安全，安全组、防火墙、绑定ip、复杂密码等需要处处考虑</p>\n<p><strong>参考博客</strong></p>\n<p><a href=\"https://www.freesion.com/article/49741083133/\">【Linux 】Linux 文件(/etc/crontab和/var/spool/cron/root)不能被root权限修改与编辑 - 灰信网（软件开发博客聚合） (freesion.com)</a></p>\n<p><a href=\"https://www.it300.com/article-15438.html\">bash: chattr: command not found - Linux - 浩海代码网 - php代码_seo优化_网络推广 (it300.com)</a></p>\n","categories":["杂谈"]},{"title":"Arthas常用命令","url":"/2022/03/17/%E6%9D%82%E9%A1%B9/Arthas%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"<p>arthas只能用于监控本地java程序，因此远程服务需要在服务器上部署arthas</p>\n<p>启动arthas：<code>java -jar arthas-boot.jar</code></p>\n<p>选择进程：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lan5th/pics/blog_images/20220317124320.png\" alt=\"image-20220317124312878\"></p>\n<h1 id=\"最常用命令：watch\"><a href=\"#最常用命令：watch\" class=\"headerlink\" title=\"最常用命令：watch\"></a>最常用命令：watch</h1><p>一般实例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">watch com.lan5th.WorkflowManageManagerImpl testPaging <span class=\"string\">&quot;&#123;params,returnObj,throwExp&#125;&quot;</span> -x 5 -s</span><br><span class=\"line\">表示监控WorkflowManageManagerImpl类的testPaging方法的出入参数，-x表示解析层级</span><br></pre></td></tr></table></figure>\n\n<p>入参如果有多个会将其封装成一个Object数组，如果要查看内容至少需要指定<code>-x</code>为2</p>\n<p>解析位置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">“&#123;params,returnObj&#125;” 两个变量就是代表参数，返回值,可选的还有throwExp，表示抛出的异常</span><br><span class=\"line\">-x 指定输出结果(默认为1)</span><br><span class=\"line\">-b 表示在方法调用之前</span><br><span class=\"line\">-e 表示在方法出异常时</span><br><span class=\"line\">-s 表示在方法返回之后</span><br><span class=\"line\">-f 表示在方法结束之后(正常返回和异常返回)</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["杂项"]}]